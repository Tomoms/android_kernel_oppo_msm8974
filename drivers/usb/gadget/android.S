	.cpu cortex-a15
	.eabi_attribute 20, 1
	.eabi_attribute 21, 1
	.eabi_attribute 23, 3
	.eabi_attribute 24, 1
	.eabi_attribute 25, 1
	.eabi_attribute 26, 2
	.eabi_attribute 30, 2
	.eabi_attribute 34, 1
	.eabi_attribute 18, 4
	.file	"android.c"
	.text
	.syntax divided


	.arm
	.syntax unified
	.align	2
	.arch armv7ve
	.syntax unified
	.arm
	.fpu softvfp
	.type	composite_setup_complete, %function
composite_setup_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	bx	lr
	.fnend
	.size	composite_setup_complete, .-composite_setup_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_midi_disable, %function
f_midi_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r0, [r0, #80]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #84]
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	bx	r3
	.fnend
	.size	f_midi_disable, .-f_midi_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_midi_snd_free, %function
f_midi_snd_free:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	f_midi_snd_free, .-f_midi_snd_free
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_midi_in_open, %function
f_midi_in_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #12]
	ldr	r2, [r0, #28]
	ldr	r2, [r2, #200]
	add	r3, r2, r3, lsl #2
	ldr	r1, [r3, #224]
	cmp	r1, #0
	beq	.L8
	str	r0, [r3, #96]
	ldr	r3, [r0, #12]
	mov	r1, #0
	mov	r0, r1
	add	r3, r3, #56
	ldr	r3, [r2, r3, lsl #2]
	strb	r1, [r3, #9]
	bx	lr
.L8:
	mvn	r0, #21
	bx	lr
	.fnend
	.size	f_midi_in_open, .-f_midi_in_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_midi_out_open, %function
f_midi_out_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r2, [r0, #12]
	mov	r3, r0
	ldr	r1, [r0, #28]
	cmp	r2, #15
	ldr	r1, [r1, #200]
	addle	r2, r2, #40
	movle	r0, #0
	mvngt	r0, #21
	strle	r3, [r1, r2, lsl #2]
	bx	lr
	.fnend
	.size	f_midi_out_open, .-f_midi_out_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	diag_write_complete, %function
diag_write_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r5, [r0]
	ldr	r6, [r1, #32]
	ldr	r3, [r5, #128]
	sub	r2, r3, #1
	str	r2, [r5, #128]
	ldr	r2, [r1, #44]
	cmp	r2, #0
	bne	.L13
	ldrh	r2, [r0, #20]
	ldr	r0, [r1, #4]
	cmp	r0, r2
	bcc	.L13
	udiv	ip, r0, r2
	mls	r0, r2, ip, r0
	cmp	r0, #0
	beq	.L26
.L13:
	add	r7, r5, #100
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	ip, [r5, #96]
	add	r3, r4, #36
	add	r2, r5, #92
	mov	r1, r0
	str	r3, [r5, #96]
	str	r2, [r4, #36]
	str	ip, [r4, #40]
	str	r3, [ip]
	ldr	r3, [r4, #4]
	cmp	r3, #0
	bne	.L27
.L14:
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r5, #116]
	cmp	r3, #0
	beq	.L12
	ldr	lr, [r3, #12]
	cmp	lr, #0
	beq	.L12
	mov	r2, r6
	mov	r1, #2
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r0, [r3, #16]
	mov	r3, lr
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	bx	r3	@ indirect register sibling call
.L27:
	ldr	r3, [r4, #48]
	str	r3, [r6, #8]
	ldr	r3, [r4, #44]
	str	r3, [r6, #12]
	b	.L14
.L12:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L26:
	str	r3, [r5, #128]
	ldr	r3, [r1, #48]
	mov	r2, #32
	str	r0, [r1, #4]
	str	r3, [r6, #8]
	ldr	r3, [r1, #44]
	str	r3, [r6, #12]
	ldr	r0, [r5, #80]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	r3, [r0, #8]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	ldr	r3, [r3, #16]
	bx	r3
	.fnend
	.size	diag_write_complete, .-diag_write_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	diag_read_complete, %function
diag_read_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r6, [r1, #32]
	ldr	r3, [r1, #48]
	ldr	r5, [r0]
	str	r3, [r6, #8]
	ldr	r3, [r1, #44]
	add	r7, r5, #100
	mov	r0, r7
	str	r3, [r6, #12]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #88]
	add	r2, r4, #36
	add	ip, r5, #84
	mov	r1, r0
	mov	r0, r7
	str	r2, [r5, #88]
	str	ip, [r4, #36]
	str	r3, [r4, #40]
	str	r2, [r3]
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, [r5, #116]
	ldr	r3, [r5, #124]
	cmp	r0, #0
	add	r3, r3, #1
	str	r3, [r5, #124]
	beq	.L28
	ldr	r3, [r0, #12]
	cmp	r3, #0
	beq	.L28
	mov	r2, r6
	mov	r1, #3
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	r0, [r0, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	bx	r3	@ indirect register sibling call
.L28:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
	.fnend
	.size	diag_read_complete, .-diag_read_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	free_reqs, %function
free_reqs:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	mov	r6, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r3, [r6, #92]!
	cmp	r3, r6
	ldr	r4, [r3]
	movne	r8, #256
	movne	r7, #512
	beq	.L41
.L38:
	ldr	r2, [r3, #4]
	sub	r1, r3, #36
	str	r2, [r4, #4]
	str	r4, [r2]
	str	r8, [r3]
	str	r7, [r3, #4]
	ldr	r0, [r5, #80]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	cmp	r6, r4
	mov	r3, r4
	ldr	r4, [r4]
	bne	.L38
.L41:
	mov	r6, r5
	ldr	r3, [r6, #84]!
	cmp	r3, r6
	ldr	r4, [r3]
	movne	r8, #256
	movne	r7, #512
	beq	.L37
.L39:
	ldr	r2, [r3, #4]
	sub	r1, r3, #36
	str	r2, [r4, #4]
	str	r4, [r2]
	str	r8, [r3]
	str	r7, [r3, #4]
	ldr	r0, [r5, #76]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	cmp	r6, r4
	mov	r3, r4
	ldr	r4, [r4]
	bne	.L39
.L37:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
	.fnend
	.size	free_reqs, .-free_reqs
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	diag_function_disable, %function
diag_function_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	add	r5, r0, #100
	mov	r4, r0
	mov	r0, r5
	str	r6, [sp, #8]
	mov	r6, #0
	str	lr, [sp, #12]
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	mov	r0, r5
	str	r6, [r4, #104]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r4, #116]
	cmp	r3, r6
	beq	.L48
	ldr	r5, [r3, #12]
	cmp	r5, r6
	beq	.L48
	mov	r2, r6
	mov	r1, #1
	ldr	r0, [r3, #16]
	blx	r5
.L48:
	ldr	r0, [r4, #80]
	mov	r5, #0
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #80]
	str	r5, [r3]
	ldr	r0, [r4, #76]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #76]
	str	r5, [r3]
	ldr	r3, [r4, #116]
	cmp	r3, r5
	strne	r5, [r3, #20]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	diag_function_disable, .-diag_function_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	qdss_ctrl_write_complete, %function
qdss_ctrl_write_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r5, [r0]
	ldr	r3, [r1, #44]
	ldr	r6, [r1, #32]
	cmp	r3, #0
	bne	.L61
	ldrh	r3, [r0, #20]
	ldr	r2, [r1, #4]
	cmp	r2, r3
	bcc	.L61
	udiv	r0, r2, r3
	mls	r3, r3, r0, r2
	cmp	r3, #0
	beq	.L68
.L61:
	add	r7, r5, #180
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	ip, [r5, #144]
	add	r3, r4, #36
	add	r2, r5, #140
	mov	r1, r0
	str	r3, [r5, #144]
	str	r2, [r4, #36]
	str	ip, [r4, #40]
	str	r3, [ip]
	ldr	r3, [r4, #4]
	cmp	r3, #0
	bne	.L69
.L62:
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	ldr	lr, [r5, #116]
	cmp	lr, #0
	beq	.L60
	mov	r2, r6
	mov	ip, lr
	ldrd	r6, [sp, #8]
	mov	r3, #0
	mov	r1, #4
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	ldr	r0, [r5, #120]
	ldrd	r4, [sp]
	add	sp, sp, #24
	bx	ip	@ indirect register sibling call
.L69:
	ldr	r3, [r4, #48]
	str	r3, [r6, #8]
	ldr	r3, [r4, #44]
	str	r3, [r6, #12]
	b	.L62
.L60:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L68:
	ldr	r0, [r1, #48]
	str	r3, [r1, #4]
	mov	r2, #32
	str	r0, [r6, #8]
	ldr	r3, [r1, #44]
	str	r3, [r6, #12]
	ldr	r0, [r5, #96]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	r3, [r0, #8]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	ldr	r3, [r3, #16]
	bx	r3
	.fnend
	.size	qdss_ctrl_write_complete, .-qdss_ctrl_write_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	qdss_ctrl_read_complete, %function
qdss_ctrl_read_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r6, [r1, #32]
	ldr	r3, [r1, #48]
	ldr	r5, [r0]
	str	r3, [r6, #8]
	ldr	r3, [r1, #44]
	add	r7, r5, #180
	mov	r0, r7
	str	r3, [r6, #12]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #136]
	add	r2, r4, #36
	add	ip, r5, #132
	mov	r1, r0
	mov	r0, r7
	str	r2, [r5, #136]
	str	ip, [r4, #36]
	str	r3, [r4, #40]
	str	r2, [r3]
	bl	_raw_spin_unlock_irqrestore
	ldr	lr, [r5, #116]
	cmp	lr, #0
	beq	.L70
	mov	r2, r6
	mov	ip, lr
	ldrd	r6, [sp, #8]
	mov	r3, #0
	mov	r1, #2
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	ldr	r0, [r5, #120]
	ldrd	r4, [sp]
	add	sp, sp, #24
	bx	ip	@ indirect register sibling call
.L70:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
	.fnend
	.size	qdss_ctrl_read_complete, .-qdss_ctrl_read_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_txcommand_complete, %function
rmnet_txcommand_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r1, #32]
	add	r5, r4, #156
	mov	r0, r5
	bl	_raw_spin_lock
	ldr	r3, [r4, #432]
	mov	r0, r5
	add	r3, r3, #1
	str	r3, [r4, #432]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock
	.fnend
	.size	rmnet_txcommand_complete, .-rmnet_txcommand_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_set_modem_cbits_w, %function
rmnet_sdio_set_modem_cbits_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #-12]
	bx	lr
	.fnend
	.size	rmnet_sdio_set_modem_cbits_w, .-rmnet_sdio_set_modem_cbits_w
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_disconnect_work, %function
rmnet_sdio_disconnect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	bx	lr
	.fnend
	.size	rmnet_sdio_disconnect_work, .-rmnet_sdio_disconnect_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_suspend, %function
rmnet_mux_suspend:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #360]
	cmp	r3, #0
	beq	.L77
	ldr	r3, [r0, #340]
	bic	r3, r3, #2
	str	r3, [r0, #340]
.L77:
	bx	lr
	.fnend
	.size	rmnet_mux_suspend, .-rmnet_mux_suspend
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_unbind, %function
rmnet_mux_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r3, #0
	str	r3, [r1, #164]
	bx	lr
	.fnend
	.size	rmnet_mux_unbind, .-rmnet_mux_unbind
	.align	2
	.global	usb_rmnet_mux_ctrl_release
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_rmnet_mux_ctrl_release, %function
usb_rmnet_mux_ctrl_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, #0
	mov	r4, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r6, [r1, #132]
	add	r7, r6, #356
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	mov	r0, r7
	str	r5, [r6, #344]
	str	r5, [r4, #132]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
	.fnend
	.size	usb_rmnet_mux_ctrl_release, .-usb_rmnet_mux_ctrl_release
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_pcm_close, %function
audio_pcm_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, #0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r5, [r0, #8]
	add	r6, r5, #100
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	mov	r0, r6
	str	r4, [r5, #84]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	audio_pcm_close, .-audio_pcm_close
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_pcm_prepare, %function
audio_pcm_prepare:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	mov	r1, r0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	ldr	ip, [r1, #208]
	mov	lr, #0
	mov	r0, lr
	ldr	r4, [ip, #68]
	ldr	r2, [ip, #88]
	ldr	r3, [ip, #208]
	mul	r2, r2, r4
	str	lr, [r3, #120]
	lsr	r2, r2, #3
	str	r2, [r3, #116]
	ldr	r2, [ip, #548]
	str	r2, [r3, #104]
	ldr	ip, [r1, #208]
	ldr	lr, [ip, #76]
	ldr	r1, [ip, #88]
	str	r2, [r3, #112]
	mul	r1, r1, lr
	add	r2, r2, r1, lsr #3
	str	r2, [r3, #108]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	audio_pcm_prepare, .-audio_pcm_prepare
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_pcm_pointer, %function
audio_pcm_pointer:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #208]
	ldr	r0, [r3, #88]
	ldr	r2, [r3, #208]
	ldr	r1, [r2, #104]
	ldr	r3, [r2, #112]
	sub	r3, r3, r1
	lsl	r3, r3, #3
	udiv	r0, r3, r0
	bx	lr
	.fnend
	.size	audio_pcm_pointer, .-audio_pcm_pointer
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_ep0_ioctl, %function
ffs_ep0_ioctl:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #26496
	cmp	r1, r3
	ldr	r3, [r0, #132]
	beq	.L104
	ldr	r0, [r3]
	cmp	r0, #0
	beq	.L98
	ldr	r3, [r0]
	ldr	r3, [r3, #24]
	cmp	r3, #0
	beq	.L98
	bx	r3
.L104:
	ldr	r3, [r3, #136]
	cmp	r3, #0
	beq	.L95
	mov	r0, r2
	.save {lr}
	str	lr, [sp, #-4]!
	ldr	r2, [r3, #8]
	ldr	lr, [r3, #44]
	ldrh	r1, [r2, #182]
	cmp	r1, #0
	beq	.L96
	uxtb	r0, r0
	mov	r3, lr
.L94:
	mov	ip, r3
	ldrsh	r2, [r3], #2
	cmp	r2, #0
	blt	.L93
	cmp	r2, r0
	beq	.L105
.L93:
	subs	r1, r1, #1
	bne	.L94
.L96:
	mvn	r0, #32
	ldr	pc, [sp], #4
.L105:
	sub	r0, ip, lr
	asr	r0, r0, #1
	ldr	pc, [sp], #4
.L98:
	mvn	r0, #24
	bx	lr
.L95:
	mvn	r0, #18
	bx	lr
	.fnend
	.size	ffs_ep0_ioctl, .-ffs_ep0_ioctl
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_write_room, %function
gs_write_room:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r0, #280]
	mov	r0, r4
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #4]
	mov	r1, r0
	cmp	r3, #0
	moveq	r5, r3
	beq	.L107
	ldr	r2, [r4, #92]
	ldr	r3, [r4, #100]
	ldr	r0, [r4, #104]
	add	r3, r3, r2
	sub	r3, r3, r0
	sub	r3, r3, #1
	udiv	r5, r3, r2
	mls	r5, r2, r5, r3
.L107:
	mov	r0, r4
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	gs_write_room, .-gs_write_room
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_chars_in_buffer, %function
gs_chars_in_buffer:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	ldr	r4, [r0, #280]
	mov	r0, r4
	bl	_raw_spin_lock_irqsave
	ldr	ip, [r4, #92]
	mov	r1, r0
	mov	r0, r4
	ldr	r3, [r4, #100]
	ldr	r2, [r4, #104]
	add	r2, r2, ip
	sub	r3, r2, r3
	udiv	r4, r3, ip
	mls	r4, ip, r4, r3
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	gs_chars_in_buffer, .-gs_chars_in_buffer
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_break_ctl, %function
gs_break_ctl:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	mov	r6, r1
	str	lr, [sp, #12]
	ldr	r5, [r0, #280]
	mov	r0, r5
	bl	_raw_spin_lock_irq
	ldr	r0, [r5, #4]
	cmp	r0, #0
	moveq	r4, r0
	beq	.L113
	ldr	r4, [r0, #116]
	cmp	r4, #0
	beq	.L113
	mov	r1, r6
	blx	r4
	mov	r4, r0
.L113:
	mov	r0, r5
	bl	_raw_spin_unlock_irq
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	gs_break_ctl, .-gs_break_ctl
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_tiocmget, %function
gs_tiocmget:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r6, [r0, #280]
	mov	r0, r6
	bl	_raw_spin_lock_irq
	ldr	r5, [r6, #4]
	cmp	r5, #0
	mvneq	r4, #18
	beq	.L118
	ldr	r4, [r5, #100]
	cmp	r4, #0
	beq	.L119
	mov	r0, r5
	blx	r4
	subs	r4, r0, #0
	movne	r4, #2
.L119:
	ldr	r3, [r5, #104]
	cmp	r3, #0
	beq	.L121
	mov	r0, r5
	blx	r3
	cmp	r0, #0
	orrne	r4, r4, #4
.L121:
	ldrh	r3, [r5, #96]
	tst	r3, #64
	orrne	r4, r4, #64
	tst	r3, #128
	orrne	r4, r4, #128
.L118:
	mov	r0, r6
	bl	_raw_spin_unlock_irq
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	gs_tiocmget, .-gs_tiocmget
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_tiocmset, %function
gs_tiocmset:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r2
	strd	r6, [sp, #8]
	mov	r7, r1
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r6, [r0, #280]
	mov	r0, r6
	bl	_raw_spin_lock_irq
	ldr	r8, [r6, #4]
	cmp	r8, #0
	beq	.L143
	ands	r0, r7, #128
	bne	.L165
	mov	r4, r0
.L140:
	tst	r5, #128
	beq	.L141
	ldr	r2, [r8, #124]
	cmp	r2, #0
	beq	.L141
	ldrh	r3, [r8, #96]
	mov	r1, #0
	mov	r0, r8
	bic	r3, r3, #128
	strh	r3, [r8, #96]	@ movhi
	blx	r2
	mov	r4, r0
.L141:
	tst	r7, #64
	beq	.L142
	ldr	r2, [r8, #120]
	cmp	r2, #0
	beq	.L139
	ldrh	r3, [r8, #96]
	mov	r1, #1
	mov	r0, r8
	orr	r3, r3, #64
	strh	r3, [r8, #96]	@ movhi
	blx	r2
	mov	r4, r0
.L142:
	tst	r5, #64
	beq	.L139
	ldr	r2, [r8, #120]
	cmp	r2, #0
	beq	.L139
	ldrh	r3, [r8, #96]
	mov	r0, r8
	mov	r1, #0
	bic	r3, r3, #64
	strh	r3, [r8, #96]	@ movhi
	blx	r2
	mov	r4, r0
.L139:
	mov	r0, r6
	bl	_raw_spin_unlock_irq
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L165:
	ldr	r4, [r8, #124]
	cmp	r4, #0
	beq	.L141
	ldrh	r3, [r8, #96]
	mov	r1, #1
	mov	r0, r8
	orr	r3, r3, #128
	strh	r3, [r8, #96]	@ movhi
	blx	r4
	mov	r4, r0
	b	.L140
.L143:
	mvn	r4, #18
	b	.L139
	.fnend
	.size	gs_tiocmset, .-gs_tiocmset
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_wake_cb, %function
gbam_wake_cb:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #16]
	ldr	r3, [r3, #120]
	ldr	r0, [r3]
	ldr	r3, [r0]
	ldr	r3, [r3, #4]
	cmp	r3, #0
	beq	.L167
	bx	r3
.L167:
	mvn	r0, #94
	bx	lr
	.fnend
	.size	gbam_wake_cb, .-gbam_wake_cb
	.section	.init.text,"ax",%progbits
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_ctrl_init, %function
gsmd_ctrl_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR0
	mov	r0, #0
	movt	r3, #:upper16:.LANCHOR0
	strb	r0, [r3]
	bx	lr
	.fnend
	.size	gsmd_ctrl_init, .-gsmd_ctrl_init
	.section	.exit.text,"ax",%progbits
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_ctrl_exit, %function
gsmd_ctrl_exit:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	bx	lr
	.fnend
	.size	gsmd_ctrl_exit, .-gsmd_ctrl_exit
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_ctrl_open, %function
rmnet_ctrl_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r4, #:lower16:.LANCHOR0
	movt	r4, #:upper16:.LANCHOR0
	str	r6, [sp, #8]
	ldr	r3, [r4, #4]
	str	lr, [sp, #12]
	add	r2, r3, #16
	.syntax divided
@ 60 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 111 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/processor.h" 1
	pld	[r2]
@ 0 "" 2
@ 63 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r5, [r2]
	add	r5, r5, #1
	strex	r0, r5, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
@ 73 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r5, #1
	bne	.L171
	ldr	r3, [r4, #4]
	add	r0, r3, #52
	str	r3, [r1, #132]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #4]
	mov	r1, r0
	add	r0, r3, #52
	strb	r5, [r3, #4]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, #0
.L170:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L171:
	.syntax divided
@ 83 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r1, [r2]
	sub	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mvn	r0, #15
	b	.L170
	.fnend
	.size	rmnet_ctrl_open, .-rmnet_ctrl_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_ctrl_release, %function
rmnet_ctrl_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, #0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r1, #132]
	add	r6, r4, #52
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	mov	r0, r6
	strb	r5, [r4, #4]
	bl	_raw_spin_unlock_irqrestore
	add	r3, r4, #16
	.syntax divided
@ 83 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r2, [r3]
	sub	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	rmnet_ctrl_release, .-rmnet_ctrl_release
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_ctrl_receive, %function
ghsic_ctrl_receive:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	subs	r4, r0, #0
	moveq	r0, r4
	str	lr, [sp, #4]
	beq	.L176
	ldr	r3, [r4, #52]
	cmp	r3, #0
	moveq	r0, r3
	beq	.L176
	ldr	r0, [r4, #8]
	blx	r3
	ldr	r3, [r4, #100]
	add	r3, r3, #1
	str	r3, [r4, #100]
.L176:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	ghsic_ctrl_receive, .-ghsic_ctrl_receive
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_ctrl_status, %function
ghsic_ctrl_status:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r3, r0
	ldr	r0, [r0, #8]
	str	r1, [r3, #92]
	cmp	r0, #0
	beq	.L181
	ldr	r3, [r0, #128]
	cmp	r3, #0
	beq	.L181
	bx	r3
.L181:
	bx	lr
	.fnend
	.size	ghsic_ctrl_status, .-ghsic_ctrl_status
	.section	.init.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gctrl_init, %function
gctrl_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	gctrl_init, .-gctrl_init
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_data_reset_stats, %function
ghsuart_data_reset_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	movw	r7, #:lower16:.LANCHOR0
	movt	r7, #:upper16:.LANCHOR0
	strd	r8, [sp, #16]
	ldr	r3, [r7, #8]
	strd	r10, [sp, #24]
	mov	fp, r2
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	cmp	r3, #0
	beq	.L196
	mov	r5, #0
	add	r6, r7, #12
	mov	r9, r5
.L195:
	ldr	r4, [r6]
	cmp	r4, #0
	add	r8, r4, #104
	add	r10, r4, #72
	mov	r0, r8
	beq	.L192
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	mov	r0, r8
	str	r9, [r4, #204]
	str	r9, [r4, #212]
	add	r5, r5, #1
	add	r6, r6, #84
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r10
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	mov	r0, r10
	str	r9, [r4, #208]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r7, #8]
	cmp	r3, r5
	bhi	.L195
.L196:
	mov	r0, fp
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L192:
	add	r5, r5, #1
	add	r6, r6, #84
	cmp	r5, r3
	bcc	.L195
	b	.L196
	.fnend
	.size	ghsuart_data_reset_stats, .-ghsuart_data_reset_stats
	.section	.init.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_data_init, %function
ghsuart_data_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mvn	r0, #18
	bx	lr
	.fnend
	.size	ghsuart_data_init, .-ghsuart_data_init
	.text
	.align	2
	.global	gser_get_dtr
	.syntax unified
	.arm
	.fpu softvfp
	.type	gser_get_dtr, %function
gser_get_dtr:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldrh	r0, [r0, #168]
	and	r0, r0, #1
	bx	lr
	.fnend
	.size	gser_get_dtr, .-gser_get_dtr
	.align	2
	.global	gser_get_rts
	.syntax unified
	.arm
	.fpu softvfp
	.type	gser_get_rts, %function
gser_get_rts:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldrh	r0, [r0, #168]
	ubfx	r0, r0, #1, #1
	bx	lr
	.fnend
	.size	gser_get_rts, .-gser_get_rts
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_bulk_open, %function
ccid_bulk_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:.LANCHOR0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r3, #180]
	ldr	r3, [r4, #88]
	cmp	r3, #0
	beq	.L203
	ldr	r5, [r4, #144]
	cmp	r5, #0
	bne	.L204
	mov	r3, #1
	add	r7, r4, #84
	str	r5, [r4, #140]
	mov	r6, r1
	mov	r0, r7
	str	r3, [r4, #144]
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	mov	r0, r7
	str	r4, [r6, #132]
	bl	_raw_spin_unlock_irqrestore
.L201:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L204:
	mvn	r5, #15
	b	.L201
.L203:
	mvn	r5, #18
	b	.L201
	.fnend
	.size	ccid_bulk_open, .-ccid_bulk_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_bulk_release, %function
ccid_bulk_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r1, #132]
	mov	r0, #0
	str	r0, [r3, #144]
	bx	lr
	.fnend
	.size	ccid_bulk_release, .-ccid_bulk_release
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_ctrl_open, %function
ccid_ctrl_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:.LANCHOR0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r3, #180]
	ldr	r3, [r4, #88]
	cmp	r3, #0
	beq	.L209
	ldr	r6, [r4, #108]
	cmp	r6, #0
	bne	.L210
	mov	r3, #1
	add	r7, r4, #84
	mov	r5, r1
	mov	r0, r7
	str	r3, [r4, #108]
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	mov	r0, r7
	str	r4, [r5, #132]
	bl	_raw_spin_unlock_irqrestore
.L207:
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L210:
	mvn	r6, #15
	b	.L207
.L209:
	mvn	r6, #18
	b	.L207
	.fnend
	.size	ccid_ctrl_open, .-ccid_ctrl_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_ctrl_release, %function
ccid_ctrl_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r1, #132]
	mov	r0, #0
	str	r0, [r3, #108]
	bx	lr
	.fnend
	.size	ccid_ctrl_release, .-ccid_ctrl_release
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_response_available, %function
rndis_response_available:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	add	r5, r0, #168
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r1, [r0, #164]
	ldr	r0, [r1]
	.syntax divided
@ 60 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 111 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/processor.h" 1
	pld	[r5]
@ 0 "" 2
@ 63 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r3, [r5]
	add	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 73 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #1
	bne	.L213
	ldr	r2, [r4, #160]
	ldr	r2, [r2]
	cmp	r2, #0
	beq	.L213
	mov	ip, #0
	mov	r2, #32
	stm	r0, {r3, ip}
	ldr	r0, [r4, #160]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	beq	.L213
	.syntax divided
@ 83 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r5]
	sub	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
.L213:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	rndis_response_available, .-rndis_response_available
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_response_complete, %function
rndis_response_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	ldr	r4, [r1, #32]
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r2, [r4, #20]
	cmp	r2, #0
	beq	.L224
	ldr	r2, [r2, #24]
	cmp	r2, #0
	beq	.L224
	ldr	r3, [r1, #44]
	add	r3, r3, #108
	bics	r3, r3, #4
	streq	r3, [r4, #168]
	beq	.L224
	ldr	r3, [r4, #160]
	cmp	r3, r0
	beq	.L239
.L224:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L239:
	add	r5, r4, #168
	.syntax divided
@ 99 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 111 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/processor.h" 1
	pld	[r5]
@ 0 "" 2
@ 102 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r3, [r5]
	sub	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 112 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L224
	ldr	r0, [r4, #160]
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	beq	.L224
	.syntax divided
@ 83 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r5]
	sub	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	b	.L224
	.fnend
	.size	rndis_response_complete, .-rndis_response_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_get_alt, %function
ecm_qc_get_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldrb	r3, [r0, #112]	@ zero_extendqisi2
	cmp	r3, r1
	beq	.L242
	ldr	r3, [r0, #80]
	ldr	r0, [r3]
	subs	r0, r0, #0
	movne	r0, #1
	bx	lr
.L242:
	mov	r0, #0
	bx	lr
	.fnend
	.size	ecm_qc_get_alt, .-ecm_qc_get_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_get_alt, %function
mbim_get_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldrb	r3, [r0, #188]	@ zero_extendqisi2
	cmp	r3, r1
	beq	.L245
	ldrb	r3, [r0, #189]	@ zero_extendqisi2
	cmp	r3, r1
	bne	.L246
	ldrb	r0, [r0, #190]	@ zero_extendqisi2
	bx	lr
.L245:
	mov	r0, #0
	bx	lr
.L246:
	mvn	r0, #21
	bx	lr
	.fnend
	.size	mbim_get_alt, .-mbim_get_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_get_alt, %function
ecm_get_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldrb	r3, [r0, #140]	@ zero_extendqisi2
	cmp	r3, r1
	beq	.L249
	ldr	r3, [r0, #80]
	ldr	r0, [r3]
	subs	r0, r0, #0
	movne	r0, #1
	bx	lr
.L249:
	mov	r0, #0
	bx	lr
	.fnend
	.size	ecm_get_alt, .-ecm_get_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ueth_change_mtu, %function
ueth_change_mtu:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	add	r7, r0, #1216
	mov	r6, r1
	mov	r0, r7
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #1220]
	mov	r1, r0
	cmp	r3, #0
	bne	.L252
	sub	r0, r6, #15
	movw	r2, #1499
	cmp	r0, r2
	bhi	.L253
	mov	r5, r3
	str	r6, [r4, #364]
.L251:
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L252:
	mvn	r5, #15
	b	.L251
.L253:
	mvn	r5, #33
	b	.L251
	.fnend
	.size	ueth_change_mtu, .-ueth_change_mtu
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	prealloc, %function
prealloc:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r2, #0
	beq	.L276
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	mov	r6, r1
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r3, [r0]
	cmp	r0, r3
	sub	r1, r3, #36
	beq	.L257
	sub	r2, r2, #1
	b	.L258
.L260:
	subs	r2, r2, #1
	bcc	.L279
.L258:
	ldr	r1, [r1, #36]
	cmp	r5, r1
	sub	r1, r1, #36
	bne	.L260
	ldr	r3, [r6, #28]
	cmp	r2, #0
	sub	r4, r2, #1
	ldrb	r7, [r3, #2]	@ zero_extendqisi2
	lsr	r7, r7, #7
	beq	.L261
.L265:
	movw	r2, #:lower16:tx_complete
	movw	r3, #:lower16:rx_complete
	cmp	r7, #0
	movt	r2, #:upper16:tx_complete
	movt	r3, #:upper16:rx_complete
	movne	r7, r2
	moveq	r7, r3
	b	.L264
.L262:
	str	r7, [r3, #28]
	ldr	r1, [r5]
	cmp	r4, #0
	mov	r4, ip
	str	r2, [r1, #4]
	str	r1, [r3, #36]
	str	r5, [r3, #40]
	str	r2, [r5]
	beq	.L261
.L264:
	ldr	r3, [r6, #8]
	mov	r1, #32
	mov	r0, r6
	ldr	r3, [r3, #8]
	blx	r3
	subs	r3, r0, #0
	sub	ip, r4, #1
	add	r2, r3, #36
	bne	.L262
	ldr	r3, [r5]
	cmp	r5, r3
	mvneq	r0, #11
	beq	.L255
.L261:
	mov	r0, #0
.L255:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L279:
	mov	r8, #256
	mov	r7, #512
.L259:
	ldr	r4, [r1, #36]
	mov	r0, r6
	ldr	r3, [r1, #40]
	str	r3, [r4, #4]
	str	r4, [r3]
	str	r8, [r1, #36]
	str	r7, [r1, #40]
	ldr	r3, [r6, #8]
	ldr	r3, [r3, #12]
	blx	r3
	cmp	r5, r4
	sub	r1, r4, #36
	bne	.L259
	b	.L261
.L257:
	ldr	r3, [r6, #28]
	sub	r4, r2, #1
	ldrb	r7, [r3, #2]	@ zero_extendqisi2
	lsr	r7, r7, #7
	b	.L265
.L276:
	mvn	r0, #11
	bx	lr
	.fnend
	.size	prealloc, .-prealloc
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ueth_qc_change_mtu, %function
ueth_qc_change_mtu:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	add	r7, r0, #1216
	mov	r6, r1
	mov	r0, r7
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #1220]
	mov	r1, r0
	cmp	r3, #0
	bne	.L282
	sub	r0, r6, #15
	movw	r2, #1499
	cmp	r0, r2
	bhi	.L283
	mov	r5, r3
	str	r6, [r4, #364]
.L281:
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L282:
	mvn	r5, #15
	b	.L281
.L283:
	mvn	r5, #33
	b	.L281
	.fnend
	.size	ueth_qc_change_mtu, .-ueth_qc_change_mtu
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	eth_qc_start_xmit, %function
eth_qc_start_xmit:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	eth_qc_start_xmit, .-eth_qc_start_xmit
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_audio_get_alt, %function
f_audio_get_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldrb	r2, [r3, #8]	@ zero_extendqisi2
	cmp	r2, r1
	beq	.L290
	ldrb	r3, [r3, #9]	@ zero_extendqisi2
	cmp	r3, r1
	ldrbeq	r0, [r0, #241]	@ zero_extendqisi2
	movne	r0, #0
	bx	lr
.L290:
	ldrb	r0, [r0, #240]	@ zero_extendqisi2
	bx	lr
	.fnend
	.size	f_audio_get_alt, .-f_audio_get_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_audio_disable, %function
f_audio_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR0
	mov	r2, #0
	movt	r3, #:upper16:.LANCHOR0
	strb	r2, [r3, #184]
	bx	lr
	.fnend
	.size	f_audio_disable, .-f_audio_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	generic_set_cmd, %function
generic_set_cmd:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r3, r0
	add	r1, r1, #4
	mov	r0, #0
	str	r2, [r3, r1, lsl #2]
	bx	lr
	.fnend
	.size	generic_set_cmd, .-generic_set_cmd
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	generic_get_cmd, %function
generic_get_cmd:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	add	r1, r1, #4
	ldr	r0, [r0, r1, lsl #2]
	bx	lr
	.fnend
	.size	generic_get_cmd, .-generic_get_cmd
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_ep0out_complete, %function
ncm_ep0out_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r2, #0
	ldr	ip, [r1, #32]
	ldr	r3, [r1, #44]
	str	r2, [r1, #32]
	cmp	r3, r2
	bne	.L295
	ldr	r3, [r1, #4]
	ldr	r2, [r1, #48]
	cmp	r2, r3
	bne	.L295
	ldr	r3, [r1]
	ldr	r3, [r3]	@ unaligned
	cmp	r3, #2048
	bcc	.L295
	movw	r2, #:lower16:.LANCHOR1
	movt	r2, #:upper16:.LANCHOR1
	ldr	r2, [r2, #16]
	cmp	r2, r3
	bcc	.L295
	str	r3, [ip, #104]
	bx	lr
.L295:
	ldr	r3, [r0, #8]
	mov	r1, #1
	ldr	r3, [r3, #24]
	bx	r3
	.fnend
	.size	ncm_ep0out_complete, .-ncm_ep0out_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_get_alt, %function
ncm_get_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldrb	r3, [r0, #140]	@ zero_extendqisi2
	cmp	r3, r1
	beq	.L300
	ldr	r3, [r0, #80]
	ldr	r0, [r3]
	subs	r0, r0, #0
	movne	r0, #1
	bx	lr
.L300:
	mov	r0, #0
	bx	lr
	.fnend
	.size	ncm_get_alt, .-ncm_get_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	diag_function_init, %function
diag_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR0
	mov	r0, #0
	movt	r3, #:upper16:.LANCHOR0
	add	r2, r3, #188
	str	r2, [r3, #188]
	str	r2, [r3, #192]
	bx	lr
	.fnend
	.size	diag_function_init, .-diag_function_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	qdss_function_init, %function
qdss_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	qdss_function_init, .-qdss_function_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_source_function_unbind_config, %function
audio_source_function_unbind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #4]
	mvn	r2, #0
	str	r2, [r3]
	str	r2, [r3, #4]
	bx	lr
	.fnend
	.size	audio_source_function_unbind_config, .-audio_source_function_unbind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	uasp_function_bind_config, %function
uasp_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mvn	r0, #18
	bx	lr
	.fnend
	.size	uasp_function_bind_config, .-uasp_function_bind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	android_unbind_config, %function
android_unbind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r1, #:lower16:.LANCHOR0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r0
	movt	r1, #:upper16:.LANCHOR0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r1, #196]!
	ldr	r0, [r0, #24]
	cmp	r3, r1
	beq	.L306
	sub	r3, r3, #208
	b	.L307
.L318:
	ldr	r3, [r3, #208]
	cmp	r3, r1
	sub	r3, r3, #208
	beq	.L306
.L307:
	ldr	r2, [r3, #8]
	cmp	r0, r2
	bne	.L318
.L306:
	ldr	r3, [r0]
	mov	r6, r5
	ldrb	r2, [r3, #386]	@ zero_extendqisi2
	cmp	r2, #0
	movne	r2, #0
	strbne	r2, [r3, #386]
	ldr	r4, [r6, #112]!
	cmp	r6, r4
	sub	r4, r4, #4
	beq	.L305
.L312:
	ldr	r0, [r4]
	mov	r1, r5
	ldr	r3, [r0, #44]
	cmp	r3, #0
	beq	.L310
	blx	r3
	ldr	r4, [r4, #4]
	cmp	r6, r4
	sub	r4, r4, #4
	bne	.L312
.L305:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L310:
	ldr	r4, [r4, #4]
	cmp	r6, r4
	sub	r4, r4, #4
	bne	.L312
	b	.L305
	.fnend
	.size	android_unbind_config, .-android_unbind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_set_endpoint_complete, %function
audio_set_endpoint_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r2, #0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	.pad #8
	sub	sp, sp, #8
	ldr	r5, [r1, #32]
	ldr	r4, [r1, #44]
	str	r2, [sp, #4]
	cmp	r4, r2
	bne	.L319
	ldr	r6, [r5, #264]
	cmp	r6, r2
	beq	.L319
	add	r0, sp, #4
	ldm	r1, {r1, r2}
	bl	memcpy
	ldrb	r1, [r5, #260]	@ zero_extendqisi2
	mov	r0, r6
	ldr	r2, [sp, #4]
	ldr	r3, [r6, #36]
	blx	r3
	str	r4, [r5, #264]
.L319:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	audio_set_endpoint_complete, .-audio_set_endpoint_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	midi_alloc_ep_req, %function
midi_alloc_ep_req:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r1
	mov	r1, #32
	str	r6, [sp, #8]
	mov	r6, r0
	str	lr, [sp, #12]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r4, r0, #0
	beq	.L325
	mov	r0, r5
	mov	r1, #32
	str	r5, [r4, #4]
	bl	__kmalloc
	cmp	r0, #0
	mov	r3, r0
	str	r0, [r4]
	beq	.L331
.L325:
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L331:
	ldr	r2, [r6, #8]
	mov	r1, r4
	mov	r0, r6
	mov	r4, r3
	ldr	r3, [r2, #12]
	blx	r3
	b	.L325
	.fnend
	.size	midi_alloc_ep_req, .-midi_alloc_ep_req
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_request_new, %function
adb_request_new:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r0
	str	r6, [sp, #8]
	mov	r6, r1
	mov	r1, #208
	str	lr, [sp, #12]
	ldr	r2, [r0, #8]
	ldr	r3, [r2, #8]
	blx	r3
	subs	r4, r0, #0
	beq	.L332
	mov	r0, r6
	mov	r1, #208
	bl	__kmalloc
	cmp	r0, #0
	mov	r3, r0
	str	r0, [r4]
	beq	.L338
.L332:
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L338:
	ldr	r2, [r5, #8]
	mov	r1, r4
	mov	r0, r5
	mov	r4, r3
	ldr	r3, [r2, #12]
	blx	r3
	b	.L332
	.fnend
	.size	adb_request_new, .-adb_request_new
	.set	mtp_request_new,adb_request_new
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_function_init, %function
ncm_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	movt	r3, #:upper16:kmalloc_caches
	str	lr, [sp, #4]
	ldr	r0, [r3, #24]
	cmp	r0, #0
	moveq	r3, #16
	streq	r3, [r4, #4]
	beq	.L339
	movw	r1, #32976
	bl	kmem_cache_alloc
	cmp	r0, #0
	mov	r3, r0
	movne	r0, #0
	mvneq	r0, #11
	str	r3, [r4, #4]
.L339:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	ncm_function_init, .-ncm_function_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_function_init, %function
rndis_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	movt	r3, #:upper16:kmalloc_caches
	str	lr, [sp, #4]
	ldr	r0, [r3, #36]
	cmp	r0, #0
	moveq	r3, #16
	streq	r3, [r4, #4]
	beq	.L344
	movw	r1, #32976
	bl	kmem_cache_alloc
	cmp	r0, #0
	mov	r3, r0
	movne	r0, #0
	mvneq	r0, #11
	str	r3, [r4, #4]
.L344:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	rndis_function_init, .-rndis_function_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_source_function_init, %function
audio_source_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	movt	r3, #:upper16:kmalloc_caches
	str	lr, [sp, #4]
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L352
	movw	r1, #32976
	bl	kmem_cache_alloc
	subs	r3, r0, #0
	beq	.L355
.L350:
	mvn	r2, #0
	mov	r0, #0
	str	r2, [r3]
	str	r2, [r3, #4]
	str	r3, [r4, #4]
.L349:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L352:
	mov	r3, #16
	b	.L350
.L355:
	mvn	r0, #11
	b	.L349
	.fnend
	.size	audio_source_function_init, .-audio_source_function_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	midi_function_init, %function
midi_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	movt	r3, #:upper16:kmalloc_caches
	str	lr, [sp, #4]
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L362
	movw	r1, #32976
	bl	kmem_cache_alloc
	cmp	r0, #0
	mov	r3, r0
	str	r0, [r4, #4]
	beq	.L360
.L358:
	mvn	r2, #0
	mov	r0, #0
	str	r2, [r3]
	str	r2, [r3, #4]
.L356:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L362:
	mov	r2, #16
	mov	r3, r2
	str	r2, [r4, #4]
	b	.L358
.L360:
	mvn	r0, #11
	b	.L356
	.fnend
	.size	midi_function_init, .-midi_function_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_function_unbind, %function
ccid_function_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r1
	str	lr, [sp, #4]
	ldr	r3, [r0, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bhi	.L366
.L364:
	ldr	lr, [sp, #4]
	ldr	r0, [r4, #8]
	ldr	r4, [sp]
	add	sp, sp, #8
	b	kfree
.L366:
	ldr	r0, [r1, #12]
	bl	kfree
	b	.L364
	.fnend
	.size	ccid_function_unbind, .-ccid_function_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	diag_function_unbind, %function
diag_function_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r0, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #4
	bhi	.L375
	cmp	r3, #2
	bhi	.L376
.L369:
	ldr	r0, [r4, #8]
	bl	kfree
	ldr	r3, [r4, #116]
	cmp	r3, #0
	beq	.L370
	ldr	r2, [r3, #20]
	cmp	r2, r4
	moveq	r2, #0
	streq	r2, [r3, #20]
.L370:
	ldrd	r2, [r4, #132]
	mov	ip, #256
	mov	r1, #512
	add	r6, r4, #100
	mov	r0, r6
	str	r3, [r2, #4]
	str	r2, [r3]
	str	ip, [r4, #132]
	str	r1, [r4, #136]
	bl	_raw_spin_lock_irqsave
	mov	r5, r0
	mov	r0, r4
	bl	free_reqs
	mov	r0, r6
	mov	r1, r5
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	kfree
.L375:
	mov	r5, r0
	ldr	r0, [r1, #16]
	bl	kfree
	ldr	r3, [r5, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bls	.L369
.L376:
	ldr	r0, [r4, #12]
	bl	kfree
	b	.L369
	.fnend
	.size	diag_function_unbind, .-diag_function_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_free_buf, %function
rmnet_smd_free_buf:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	mov	r3, #0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	mov	r8, r0
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	str	r3, [r0, #416]
	str	r3, [r0, #420]
	str	r3, [r0, #424]
	str	r3, [r0, #428]
	str	r3, [r0, #432]
	str	r3, [r0, #436]
	str	r3, [r0, #440]
	str	r3, [r0, #444]
	ldr	r3, [r8, #132]!
	cmp	r3, r8
	ldr	r4, [r3]
	movne	r10, #256
	movne	r9, #512
	beq	.L381
.L378:
	ldr	r2, [r3, #4]
	mov	r6, r3
	str	r2, [r4, #4]
	str	r4, [r2]
	str	r10, [r3]
	str	r9, [r3, #4]
	ldr	r7, [r5, #80]
	ldr	r0, [r6, #-36]!
	bl	kfree
	ldr	r3, [r7, #8]
	mov	r0, r7
	mov	r1, r6
	ldr	r3, [r3, #12]
	blx	r3
	cmp	r8, r4
	mov	r3, r4
	ldr	r4, [r4]
	bne	.L378
.L381:
	mov	r8, r5
	ldr	r3, [r8, #140]!
	cmp	r3, r8
	ldr	r4, [r3]
	movne	r10, #256
	movne	r9, #512
	beq	.L380
.L379:
	ldr	r2, [r3, #4]
	mov	r6, r3
	str	r2, [r4, #4]
	str	r4, [r2]
	str	r10, [r3]
	str	r9, [r3, #4]
	ldr	r7, [r5, #84]
	ldr	r0, [r6, #-36]!
	bl	kfree
	ldr	r3, [r7, #8]
	mov	r0, r7
	mov	r1, r6
	ldr	r3, [r3, #12]
	blx	r3
	cmp	r8, r4
	mov	r3, r4
	ldr	r4, [r4]
	bne	.L379
.L380:
	mov	r7, r5
	ldr	r3, [r7, #100]!
	cmp	r3, r7
	ldr	r4, [r3]
	movne	r9, #256
	movne	r8, #512
	beq	.L383
.L382:
	ldr	r2, [r3, #4]
	mov	r6, r3
	str	r2, [r4, #4]
	str	r4, [r2]
	str	r9, [r3]
	str	r8, [r3, #4]
	ldr	r0, [r6, #-8]!
	bl	kfree
	mov	r0, r6
	bl	kfree
	cmp	r7, r4
	mov	r3, r4
	ldr	r4, [r4]
	bne	.L382
.L383:
	mov	r7, r5
	ldr	r3, [r7, #108]!
	cmp	r3, r7
	ldr	r4, [r3]
	movne	r9, #256
	movne	r8, #512
	beq	.L385
.L384:
	ldr	r2, [r3, #4]
	mov	r6, r3
	str	r2, [r4, #4]
	str	r4, [r2]
	str	r9, [r3]
	str	r8, [r3, #4]
	ldr	r0, [r6, #-8]!
	bl	kfree
	mov	r0, r6
	bl	kfree
	cmp	r7, r4
	mov	r3, r4
	ldr	r4, [r4]
	bne	.L384
.L385:
	ldr	r4, [r5, #88]
	ldr	r6, [r5, #92]
	ldr	r0, [r6]
	bl	kfree
	ldr	r3, [r4, #8]
	mov	r1, r6
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r3, [r3, #12]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	bx	r3	@ indirect register sibling call
	.fnend
	.size	rmnet_smd_free_buf, .-rmnet_smd_free_buf
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_alloc_ctrl_pkt, %function
rmnet_mux_alloc_ctrl_pkt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r0
	movt	r3, #:upper16:kmalloc_caches
	str	r6, [sp, #8]
	orr	r6, r1, #32768
	str	lr, [sp, #12]
	ldr	r3, [r3, #24]
	cmp	r3, #0
	beq	.L400
	mov	r0, r3
	mov	r1, r6
	bl	kmem_cache_alloc
	subs	r4, r0, #0
	beq	.L395
.L396:
	mov	r1, r6
	mov	r0, r5
	bl	__kmalloc
	cmp	r0, #0
	mov	r3, r0
	str	r0, [r4]
	strne	r5, [r4, #4]
	beq	.L406
.L395:
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L400:
	mov	r4, #16
	b	.L396
.L406:
	mov	r0, r4
	mov	r4, r3
	bl	kfree
	b	.L395
	.fnend
	.size	rmnet_mux_alloc_ctrl_pkt, .-rmnet_mux_alloc_ctrl_pkt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_ctrl_receive, %function
ghsuart_ctrl_receive:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	subs	r4, r0, #0
	moveq	r5, r4
	str	r6, [sp, #8]
	mov	r6, r1
	str	lr, [sp, #12]
	beq	.L408
	ldr	r3, [r4, #68]
	cmp	r3, #0
	moveq	r5, r3
	beq	.L408
	ldr	r0, [r4, #12]
	blx	r3
	ldr	r3, [r4, #100]
	mov	r5, r0
	add	r3, r3, #1
	str	r3, [r4, #100]
.L408:
	mov	r0, r6
	bl	kfree
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	ghsuart_ctrl_receive, .-ghsuart_ctrl_receive
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_alloc_ctrl_pkt, %function
mbim_alloc_ctrl_pkt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r0
	movt	r3, #:upper16:kmalloc_caches
	str	r6, [sp, #8]
	mov	r6, r1
	str	lr, [sp, #12]
	ldr	r3, [r3, #24]
	cmp	r3, #0
	beq	.L417
	mov	r0, r3
	orr	r1, r1, #32768
	bl	kmem_cache_alloc
	subs	r4, r0, #0
	beq	.L421
.L413:
	mov	r1, r6
	mov	r0, r5
	bl	__kmalloc
	cmp	r0, #0
	str	r0, [r4]
	strne	r5, [r4, #4]
	beq	.L422
.L412:
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L417:
	mov	r4, #16
	b	.L413
.L421:
	mvn	r4, #11
	b	.L412
.L422:
	mov	r0, r4
	mvn	r4, #11
	bl	kfree
	b	.L412
	.fnend
	.size	mbim_alloc_ctrl_pkt, .-mbim_alloc_ctrl_pkt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_source_function_cleanup, %function
audio_source_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r0, [r0, #4]
	b	kfree
	.fnend
	.size	audio_source_function_cleanup, .-audio_source_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_function_cleanup, %function
ncm_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r0, [r0, #4]
	bl	kfree
	mov	r3, #0
	str	r3, [r4, #4]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	ncm_function_cleanup, .-ncm_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	diag_function_cleanup, %function
diag_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	movw	r5, #:lower16:.LANCHOR1
	movt	r5, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	ldr	r4, [r5, #40]!
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	cmp	r4, r5
	ldr	r6, [r4]
	beq	.L426
	ldr	r8, .L432
	mov	r10, #256
	mov	r9, #512
	b	.L430
.L428:
	bl	_raw_spin_unlock_irqrestore
	cmp	r6, r5
	ldr	r3, [r6]
	beq	.L426
.L429:
	mov	r4, r6
	mov	r6, r3
.L430:
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #12]
	mov	r7, r0
	mov	r0, r8
	mov	r1, r7
	cmp	r3, #0
	bne	.L428
	ldrd	r2, [r4]
	sub	r0, r4, #4
	str	r3, [r2, #4]
	str	r2, [r3]
	str	r10, [r4]
	str	r9, [r4, #4]
	bl	kfree
	mov	r1, r7
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	cmp	r6, r5
	ldr	r3, [r6]
	bne	.L429
.L426:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L433:
	.align	2
.L432:
	.word	.LANCHOR0+204
	.fnend
	.size	diag_function_cleanup, .-diag_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gps_function_cleanup, %function
gps_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR0
	movt	r3, #:upper16:.LANCHOR0
	ldr	r0, [r3, #212]
	b	kfree
	.fnend
	.size	gps_function_cleanup, .-gps_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	frmnet_unbind, %function
frmnet_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r0, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #4
	bhi	.L439
	cmp	r3, #2
	bhi	.L440
.L437:
	ldr	r0, [r4, #8]
	bl	kfree
	ldr	r5, [r4, #128]
	ldr	r6, [r4, #132]
	ldr	r0, [r6]
	bl	kfree
	ldr	r3, [r5, #8]
	mov	r0, r5
	mov	r1, r6
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r0, [r4]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	kfree
.L439:
	mov	r5, r0
	ldr	r0, [r1, #16]
	bl	kfree
	ldr	r3, [r5, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bls	.L437
.L440:
	ldr	r0, [r4, #12]
	bl	kfree
	b	.L437
	.fnend
	.size	frmnet_unbind, .-frmnet_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gps_unbind, %function
gps_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r0, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #4
	bhi	.L445
	cmp	r3, #2
	bhi	.L446
.L443:
	ldr	r0, [r4, #8]
	bl	kfree
	ldr	r5, [r4, #128]
	ldr	r6, [r4, #132]
	ldr	r0, [r6]
	bl	kfree
	ldr	r3, [r5, #8]
	mov	r0, r5
	mov	r1, r6
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r0, [r4]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	kfree
.L445:
	mov	r5, r0
	ldr	r0, [r1, #16]
	bl	kfree
	ldr	r3, [r5, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bls	.L443
.L446:
	ldr	r0, [r4, #12]
	bl	kfree
	b	.L443
	.fnend
	.size	gps_unbind, .-gps_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_start_rx, %function
gs_start_rx:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	add	r8, r0, #32
	mov	r9, r0
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r2, [r0, #4]
	.pad #4
	sub	sp, sp, #4
	ldr	r4, [r0, #32]
	ldr	r6, [r2, #84]
	cmp	r8, r4
	ldr	r2, [r0, #40]
	beq	.L449
	mov	fp, #256
	mov	r10, #512
	b	.L452
.L460:
	cmp	r2, #7
	bgt	.L449
	ldm	r4, {r1, r2}
	mov	r3, #4096
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r3, [r4, #-32]
	str	fp, [r4]
	str	r10, [r4, #4]
	bl	_raw_spin_unlock
	ldr	ip, [r6, #8]
	mov	r2, #32
	mov	r1, r7
	mov	r0, r6
	ldr	r5, [ip, #16]
	blx	r5
	mov	r5, r0
	mov	r0, r9
	bl	_raw_spin_lock
	ldr	r2, [r9, #4]
	cmp	r2, #0
	beq	.L458
	cmp	r5, #0
	bne	.L459
	ldr	r4, [r9, #32]
	ldr	r2, [r9, #40]
	cmp	r8, r4
	add	r2, r2, #1
	str	r2, [r9, #40]
	beq	.L449
.L452:
	ldr	r1, [r9, #8]
	mov	r0, r9
	sub	r7, r4, #36
	cmp	r1, #0
	bne	.L460
.L449:
	mov	r0, r2
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L458:
	ldr	r0, [r4, #-36]
	bl	kfree
	ldr	r2, [r6, #8]
	mov	r1, r7
	mov	r0, r6
	ldr	r2, [r2, #12]
	blx	r2
	ldr	r2, [r9, #40]
	b	.L449
.L459:
	ldr	r2, [r9, #32]
	str	r4, [r2, #4]
	stm	r4, {r2, r8}
	ldr	r2, [r9, #40]
	str	r4, [r9, #32]
	b	.L449
	.fnend
	.size	gs_start_rx, .-gs_start_rx
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_function_cleanup, %function
rmnet_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r4, #:lower16:.LANCHOR0
	movt	r4, #:upper16:.LANCHOR0
	str	r6, [sp, #8]
	ldr	r3, [r4, #216]
	str	lr, [sp, #12]
	cmp	r3, #0
	beq	.L462
	add	r6, r4, #220
	mov	r5, #0
.L463:
	ldr	r0, [r6, #20]
	add	r5, r5, #1
	add	r6, r6, #24
	bl	kfree
	ldr	r3, [r4, #216]
	cmp	r3, r5
	bhi	.L463
.L462:
	mov	r3, #0
	ldr	r6, [sp, #8]
	str	r3, [r4, #216]
	str	r3, [r4, #292]
	str	r3, [r4, #296]
	str	r3, [r4, #300]
	str	r3, [r4, #304]
	str	r3, [r4, #308]
	str	r3, [r4, #312]
	str	r3, [r4, #316]
	str	r3, [r4, #320]
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	rmnet_function_cleanup, .-rmnet_function_cleanup
	.section	.rodata.str1.4,"aMS",%progbits,1
	.align	2
.LC0:
	.ascii	"rmnet data rx enqueue err %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_start_rx, %function
rmnet_smd_start_rx:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	add	r7, r0, #156
	mov	r6, r0
	strd	r8, [sp, #16]
	add	r8, r0, #140
	mov	r9, #512
	strd	r10, [sp, #24]
	mov	r10, #256
	str	lr, [sp, #32]
	ldr	r3, [r0, #76]
	.pad #12
	sub	sp, sp, #12
	mov	r0, r7
	str	r3, [sp, #4]
	bl	_raw_spin_lock_irqsave
	mov	r5, r0
	b	.L470
.L472:
	ldrd	r2, [r4]
	str	r3, [r2, #4]
	str	r2, [r3]
	str	r10, [r4]
	str	r9, [r4, #4]
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, [r6, #80]
	mov	r2, #32
	sub	r1, r4, #36
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	mov	fp, r0
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	cmp	fp, #0
	mov	r5, r0
	bne	.L476
.L470:
	ldr	r4, [r6, #140]
	mov	r1, r5
	mov	r0, r7
	cmp	r8, r4
	bne	.L472
.L471:
	mov	r1, r5
	mov	r0, r7
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L476:
	ldr	r3, [sp, #4]
	movw	r1, #:lower16:.LC0
	mov	r2, fp
	movt	r1, #:upper16:.LC0
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	dev_err
	ldr	r3, [r6, #144]
	str	r4, [r6, #144]
	str	r8, [r4]
	str	r3, [r4, #4]
	str	r4, [r3]
	b	.L471
	.fnend
	.size	rmnet_smd_start_rx, .-rmnet_smd_start_rx
	.section	.rodata.str1.4
	.align	2
.LC1:
	.ascii	"rmnet notify ep error %d\012\000"
	.align	2
.LC2:
	.ascii	"rmnet notify ep enqueue error %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_notify_complete, %function
rmnet_smd_notify_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r6, [r1, #32]
	ldr	r2, [r1, #44]
	ldr	r7, [r6, #76]
	cmn	r2, #104
	beq	.L478
	cmp	r2, #0
	mov	r4, r1
	mov	r5, r0
	beq	.L479
	cmn	r2, #108
	beq	.L478
	ldr	r0, [r7]
	movw	r1, #:lower16:.LC1
	movt	r1, #:upper16:.LC1
	add	r0, r0, #32
	bl	dev_err
.L479:
	ldr	r3, [r6, #88]
	cmp	r3, r5
	beq	.L497
.L477:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L478:
	mov	r3, #0
	str	r3, [r6, #164]
	b	.L477
.L497:
	add	r5, r6, #164
	.syntax divided
@ 99 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 111 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/processor.h" 1
	pld	[r5]
@ 0 "" 2
@ 102 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r3, [r5]
	sub	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 112 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L477
	ldr	r0, [r6, #88]
	mov	r2, #32
	mov	r1, r4
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	beq	.L477
	.syntax divided
@ 83 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r5]
	sub	r3, r3, #1
	strex	r1, r3, [r5]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r0, [r7]
	movw	r1, #:lower16:.LC2
	movt	r1, #:upper16:.LC2
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	r0, r0, #32
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	dev_err
	.fnend
	.size	rmnet_smd_notify_complete, .-rmnet_smd_notify_complete
	.section	.rodata.str1.4
	.align	2
.LC3:
	.ascii	"rmnet notifyep error %d\012\000"
	.align	2
.LC4:
	.ascii	"rmnet notify ep enq error %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_notify_complete, %function
rmnet_sdio_notify_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r1, #32]
	ldr	r2, [r1, #44]
	ldr	r7, [r4, #76]
	cmn	r2, #104
	beq	.L499
	cmp	r2, #0
	mov	r5, r1
	beq	.L500
	cmn	r2, #108
	beq	.L499
	ldr	r0, [r7]
	movw	r1, #:lower16:.LC3
	movt	r1, #:upper16:.LC3
	add	r0, r0, #32
	bl	dev_err
.L500:
	ldr	r3, [r4, #312]
	tst	r3, #2
	beq	.L498
	add	r6, r4, #188
	.syntax divided
@ 99 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 111 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/processor.h" 1
	pld	[r6]
@ 0 "" 2
@ 102 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 112 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L498
	ldr	r0, [r4, #88]
	mov	r2, #32
	mov	r1, r5
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	bne	.L518
.L498:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L499:
	mov	r3, #0
	str	r3, [r4, #188]
	b	.L498
.L518:
	.syntax divided
@ 83 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r1, r3, [r6]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r0, [r7]
	movw	r1, #:lower16:.LC4
	movt	r1, #:upper16:.LC4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	r0, r0, #32
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	dev_err
	.fnend
	.size	rmnet_sdio_notify_complete, .-rmnet_sdio_notify_complete
	.section	.rodata.str1.4
	.align	2
.LC5:
	.ascii	"rmnet control SDIO write failed\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_control_rx_work, %function
rmnet_sdio_control_rx_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	sub	r6, r0, #32
	strd	r8, [sp, #16]
	mov	r9, #512
	sub	r8, r0, #112
	strd	r10, [sp, #24]
	mov	r10, #256
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	ldr	fp, [r0, #-136]
	b	.L522
.L520:
	ldrd	r2, [r4]
	str	r3, [r2, #4]
	str	r2, [r3]
	str	r10, [r4]
	str	r9, [r4, #4]
	ldr	r3, [r5, #-104]
	sub	r3, r3, #1
	str	r3, [r5, #-104]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r4, #-4]
	cmn	r3, #19
	bne	.L524
	ldr	r3, [r5, #148]
	add	r3, r3, #1
	str	r3, [r5, #148]
	ldr	r0, [r4, #-8]
	bl	kfree
	mov	r0, r7
	bl	kfree
.L522:
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r5, #-112]
	mov	r1, r0
	mov	r0, r6
	cmp	r4, r8
	sub	r7, r4, #8
	bne	.L520
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L524:
	ldr	r0, [fp]
	movw	r1, #:lower16:.LC5
	movt	r1, #:upper16:.LC5
	add	r0, r0, #32
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	dev_err
	.fnend
	.size	rmnet_sdio_control_rx_work, .-rmnet_sdio_control_rx_work
	.section	.rodata.str1.4
	.align	2
.LC6:
	.ascii	"gser response on ttyGS%d, err %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gser_setup, %function
gser_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movw	ip, #8482
	mov	r4, r0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrh	r3, [r1]	@ unaligned
	ldr	lr, [r0, #20]
	ldrh	r2, [r1, #6]	@ unaligned
	rev16	r3, r3
	uxth	r3, r3
	ldr	r6, [lr, #24]
	cmp	r3, ip
	ldr	r5, [r6, #4]
	beq	.L526
	movw	r1, #41249
	cmp	r3, r1
	beq	.L527
	movw	r1, #8480
	cmp	r3, r1
	beq	.L534
.L531:
	mvn	r5, #94
.L525:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L526:
	ldr	r8, [r0, #132]
	ldrh	r2, [r1, #2]	@ unaligned
	cmp	r8, #0
	moveq	r7, r8
	strh	r2, [r0, #168]	@ movhi
	uxth	r2, r2
	beq	.L529
	ldrb	r1, [r0, #137]	@ zero_extendqisi2
	movw	r3, #:lower16:.LANCHOR0
	mov	r7, #0
	movt	r3, #:upper16:.LANCHOR0
	add	r1, r1, r1, lsl #1
	add	r3, r3, r1, lsl #2
	ldrb	r1, [r3, #332]	@ zero_extendqisi2
	blx	r8
.L529:
	ldrb	r3, [r5, #26]	@ zero_extendqisi2
	str	r7, [r5, #4]
	mov	r1, r5
	mov	r2, #32
	bfc	r3, #1, #1
	strb	r3, [r5, #26]
	ldr	r3, [r6]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r5, r0, #0
	bge	.L525
	ldr	r0, [r6]
	movw	r1, #:lower16:.LC6
	mov	r3, r5
	ldrb	r2, [r4, #137]	@ zero_extendqisi2
	movt	r1, #:upper16:.LC6
	add	r0, r0, #32
	bl	dev_err
	b	.L525
.L534:
	cmp	r2, #7
	bne	.L531
	ldr	r1, [r6]
	mov	r7, r2
	movw	r3, #:lower16:gser_complete_set_line_coding
	movt	r3, #:upper16:gser_complete_set_line_coding
	ldr	r2, [r1, #4]
	str	r0, [r2]
	str	r3, [r5, #28]
	b	.L529
.L527:
	cmp	r2, #7
	add	r1, r0, #160
	ldr	r0, [r5]
	movcc	r7, r2
	movcs	r7, #7
	mov	r2, r7
	bl	memcpy
	b	.L529
	.fnend
	.size	gser_setup, .-gser_setup
	.section	.rodata.str1.4
	.align	2
.LC7:
	.ascii	"acm response on ttyGS%d, err %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acm_setup, %function
acm_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movw	ip, #8482
	mov	r4, r0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrh	r3, [r1]	@ unaligned
	ldr	lr, [r0, #20]
	ldrh	r2, [r1, #6]	@ unaligned
	rev16	r3, r3
	uxth	r3, r3
	ldr	r6, [lr, #24]
	cmp	r3, ip
	ldr	r5, [r6, #4]
	beq	.L536
	movw	r1, #41249
	cmp	r3, r1
	beq	.L537
	movw	r1, #8480
	cmp	r3, r1
	beq	.L544
.L541:
	mvn	r5, #94
.L535:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L536:
	ldr	r8, [r0, #132]
	ldrh	r2, [r1, #2]	@ unaligned
	cmp	r8, #0
	moveq	r7, r8
	strh	r2, [r0, #168]	@ movhi
	uxth	r2, r2
	beq	.L539
	ldrb	r1, [r0, #138]	@ zero_extendqisi2
	movw	r3, #:lower16:.LANCHOR0
	mov	r7, #0
	movt	r3, #:upper16:.LANCHOR0
	add	r1, r1, r1, lsl #1
	add	r3, r3, r1, lsl #2
	ldrb	r1, [r3, #368]	@ zero_extendqisi2
	blx	r8
.L539:
	ldrb	r3, [r5, #26]	@ zero_extendqisi2
	str	r7, [r5, #4]
	mov	r1, r5
	mov	r2, #32
	bfc	r3, #1, #1
	strb	r3, [r5, #26]
	ldr	r3, [r6]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r5, r0, #0
	bge	.L535
	ldr	r0, [r6]
	movw	r1, #:lower16:.LC7
	mov	r3, r5
	ldrb	r2, [r4, #138]	@ zero_extendqisi2
	movt	r1, #:upper16:.LC7
	add	r0, r0, #32
	bl	dev_err
	b	.L535
.L544:
	cmp	r2, #7
	bne	.L541
	ldr	r1, [r6]
	mov	r7, r2
	movw	r3, #:lower16:acm_complete_set_line_coding
	movt	r3, #:upper16:acm_complete_set_line_coding
	ldr	r2, [r1, #4]
	str	r0, [r2]
	str	r3, [r5, #28]
	b	.L539
.L537:
	cmp	r2, #7
	add	r1, r0, #160
	ldr	r0, [r5]
	movcc	r7, r2
	movcs	r7, #7
	mov	r2, r7
	bl	memcpy
	b	.L539
	.fnend
	.size	acm_setup, .-acm_setup
	.section	.rodata.str1.4
	.align	2
.LC8:
	.ascii	"ecm req %02x.%02x response err %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_setup, %function
ecm_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r1
	movw	r1, #17185
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	ip, [r0, #20]
	.pad #8
	sub	sp, sp, #8
	ldrh	r3, [r4]	@ unaligned
	ldrh	r2, [r4, #6]	@ unaligned
	ldrh	lr, [r4, #4]	@ unaligned
	ldr	r6, [ip, #24]
	cmp	r2, #0
	cmpeq	r3, r1
	ldrh	r2, [r4, #2]	@ unaligned
	movne	r3, #1
	moveq	r3, #0
	ldr	r1, [r6, #4]
	bne	.L548
	ldrb	ip, [r0, #140]	@ zero_extendqisi2
	cmp	ip, lr
	bne	.L548
	strh	r2, [r0, #90]	@ movhi
	ldrb	r0, [r1, #26]	@ zero_extendqisi2
	mov	r2, #32
	str	r3, [r1, #4]
	bfi	r0, r3, #1, #1
	strb	r0, [r1, #26]
	ldr	r3, [r6]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r5, r0, #0
	blt	.L550
.L545:
	mov	r0, r5
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L550:
	ldr	r0, [r6]
	movw	r1, #:lower16:.LC8
	str	r5, [sp]
	movt	r1, #:upper16:.LC8
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	ldrb	r2, [r4]	@ zero_extendqisi2
	add	r0, r0, #32
	bl	dev_err
	b	.L545
.L548:
	mvn	r5, #94
	b	.L545
	.fnend
	.size	ecm_setup, .-ecm_setup
	.section	.rodata.str1.4
	.align	2
.LC9:
	.ascii	"ncm req %02x.%02x response err %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_setup, %function
ncm_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	movw	r4, #41353
	mov	r5, r1
	strd	r6, [sp, #8]
	str	lr, [sp, #16]
	ldrh	r3, [r1]	@ unaligned
	.pad #12
	sub	sp, sp, #12
	ldr	r2, [r0, #20]
	ldrh	r1, [r1, #2]	@ unaligned
	ldrh	lr, [r5, #4]	@ unaligned
	rev16	r3, r3
	ldrh	ip, [r5, #6]	@ unaligned
	uxth	r3, r3
	ldr	r6, [r2, #24]
	cmp	r3, r4
	ldr	r4, [r6, #4]
	bhi	.L587
	movw	r7, #41343
	uxth	r2, r1
	cmp	r3, r7
	bgt	.L553
	movw	r7, #8582
	cmp	r3, r7
	beq	.L554
	ble	.L589
	movw	r1, #8586
	cmp	r3, r1
	bne	.L587
	cmp	ip, #0
	bne	.L587
	ldrb	r3, [r0, #140]	@ zero_extendqisi2
	cmp	r3, lr
	bne	.L587
	cmp	r2, #0
	beq	.L567
	cmp	r2, #1
	bne	.L587
	mov	ip, #16777216
	strb	r2, [r0, #172]
.L569:
	ldr	r1, [r0, #168]
	mov	r7, #0
	ldr	r2, [r1, #4]
	bic	r2, r2, #16777216
	str	r2, [r1, #4]
	ldr	r2, [r0, #168]
	ldr	r3, [r2, #4]
	orr	r3, r3, ip
	str	r3, [r2, #4]
	b	.L564
.L589:
	movw	r7, #8515
	cmp	r3, r7
	beq	.L556
	movw	r1, #8580
	cmp	r3, r1
	bne	.L587
	cmp	ip, #0
	beq	.L590
.L587:
	mvn	r4, #94
.L551:
	mov	r0, r4
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L553:
	sub	r3, r3, #41216
	sub	r3, r3, #128
	cmp	r3, #9
	ldrls	pc, [pc, r3, asl #2]
	b	.L587
.L559:
	.word	.L562
	.word	.L587
	.word	.L587
	.word	.L561
	.word	.L587
	.word	.L560
	.word	.L587
	.word	.L587
	.word	.L587
	.word	.L558
.L558:
	subs	r2, r2, #0
	movne	r2, #1
	cmp	ip, #1
	orrls	r2, r2, #1
	cmp	r2, #0
	bne	.L587
	ldrb	r3, [r0, #140]	@ zero_extendqisi2
	cmp	r3, lr
	bne	.L587
	ldrb	r1, [r0, #172]	@ zero_extendqisi2
	mov	r7, #2
	ldr	r3, [r4]
	strb	r1, [r3]
	strb	r2, [r3, #1]
.L564:
	ldrb	r3, [r4, #26]	@ zero_extendqisi2
	str	r7, [r4, #4]
	mov	r1, r4
	mov	r2, #32
	bfc	r3, #1, #1
	strb	r3, [r4, #26]
	ldr	r3, [r6]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	bge	.L551
	ldr	r0, [r6]
	movw	r1, #:lower16:.LC9
	str	r4, [sp]
	movt	r1, #:upper16:.LC9
	ldrb	r3, [r5, #1]	@ zero_extendqisi2
	ldrb	r2, [r5]	@ zero_extendqisi2
	add	r0, r0, #32
	bl	dev_err
	b	.L551
.L562:
	subs	r2, r2, #0
	movne	r2, #1
	cmp	ip, #0
	moveq	r2, #1
	cmp	r2, #0
	bne	.L587
	ldrb	r3, [r0, #140]	@ zero_extendqisi2
	cmp	r3, lr
	bne	.L587
	cmp	ip, #28
	ldr	r1, .L591
	movcc	r7, ip
	movcs	r7, #28
	ldr	r0, [r4]
	mov	r2, r7
	bl	memcpy
	b	.L564
.L561:
	subs	r2, r2, #0
	movne	r2, #1
	cmp	ip, #1
	orrls	r2, r2, #1
	cmp	r2, #0
	bne	.L587
	ldrb	r3, [r0, #140]	@ zero_extendqisi2
	cmp	r3, lr
	bne	.L587
	ldr	ip, .L591+4
	mov	r7, #2
	ldr	r3, [r0, #168]
	ldr	r1, [r4]
	subs	r3, r3, ip
	movne	r3, #1
	strb	r3, [r1]
	strb	r2, [r1, #1]
	b	.L564
.L560:
	subs	r2, r2, #0
	movne	r2, #1
	cmp	ip, #3
	orrls	r2, r2, #1
	cmp	r2, #0
	bne	.L587
	ldrb	r3, [r0, #140]	@ zero_extendqisi2
	cmp	r3, lr
	bne	.L587
	ldr	r2, [r0, #104]
	mov	r7, #4
	ldr	r3, [r4]
	lsr	r1, r2, #16
	ubfx	r0, r2, #8, #8
	strb	r2, [r3]
	lsr	r2, r1, #8
	strb	r0, [r3, #1]
	strb	r1, [r3, #2]
	strb	r2, [r3, #3]
	b	.L564
.L590:
	ldrb	r3, [r0, #140]	@ zero_extendqisi2
	cmp	r3, lr
	bne	.L587
	cmp	r2, #0
	beq	.L565
	cmp	r2, #1
	bne	.L587
	ldr	r3, .L591+8
	mov	r7, #0
	str	r3, [r0, #168]
	b	.L564
.L556:
	cmp	ip, #0
	bne	.L587
	ldrb	r3, [r0, #140]	@ zero_extendqisi2
	cmp	r3, lr
	bne	.L587
	mov	r7, ip
	strh	r1, [r0, #90]	@ movhi
	b	.L564
.L554:
	cmp	r2, #0
	cmpeq	ip, #4
	bne	.L587
	ldrb	r3, [r0, #140]	@ zero_extendqisi2
	cmp	r3, lr
	bne	.L587
	movw	r3, #:lower16:ncm_ep0out_complete
	mov	r7, #4
	str	r0, [r4, #32]
	movt	r3, #:upper16:ncm_ep0out_complete
	str	r3, [r4, #28]
	b	.L564
.L567:
	mov	ip, r2
	strb	r2, [r0, #172]
	b	.L569
.L565:
	ldr	r3, .L591+4
	mov	r7, r2
	str	r3, [r0, #168]
	b	.L564
.L592:
	.align	2
.L591:
	.word	.LANCHOR1+12
	.word	.LANCHOR1+48
	.word	.LANCHOR1+92
	.fnend
	.size	ncm_setup, .-ncm_setup
	.section	.rodata.str1.4
	.align	2
.LC10:
	.ascii	"rmnet_mux notifyep error %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_notify_complete, %function
rmnet_mux_notify_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r1, #32]
	ldr	r2, [r1, #44]
	ldr	r7, [r4, #76]
	cmn	r2, #104
	beq	.L594
	cmp	r2, #0
	mov	r5, r1
	beq	.L595
	cmn	r2, #108
	beq	.L594
	ldr	r0, [r7]
	movw	r1, #:lower16:.LC10
	movt	r1, #:upper16:.LC10
	add	r0, r0, #32
	bl	dev_err
.L595:
	add	r6, r4, #364
	.syntax divided
@ 99 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 111 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/processor.h" 1
	pld	[r6]
@ 0 "" 2
@ 102 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 112 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	bne	.L610
.L593:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L610:
	ldr	r0, [r4, #88]
	mov	r2, #32
	mov	r1, r5
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	beq	.L593
	.syntax divided
@ 83 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r1, r3, [r6]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r0, [r7]
	movw	r1, #:lower16:.LC4
	movt	r1, #:upper16:.LC4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	r0, r0, #32
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	dev_err
.L594:
	mov	r3, #0
	str	r3, [r4, #364]
	b	.L593
	.fnend
	.size	rmnet_mux_notify_complete, .-rmnet_mux_notify_complete
	.section	.rodata.str1.4
	.align	2
.LC11:
	.ascii	"rmnet_mux ep0 enqueue err %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_setup, %function
rmnet_mux_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r2, [r0, #20]
	ldr	r3, [r0, #360]
	ldrh	r7, [r1, #2]	@ unaligned
	ldrh	r8, [r1, #6]	@ unaligned
	ldr	r6, [r2, #24]
	cmp	r3, #0
	ldr	r5, [r6, #4]
	beq	.L618
	ldrh	r3, [r1]	@ unaligned
	movw	r2, #8482
	mov	r4, r0
	rev16	r3, r3
	uxth	r3, r3
	cmp	r3, r2
	beq	.L613
	movw	r2, #41217
	cmp	r3, r2
	beq	.L614
	cmp	r3, #8448
	beq	.L622
.L620:
	mvn	r4, #94
.L611:
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L613:
	ldr	r3, [r0, #340]
	subs	r8, r8, #0
	movne	r8, #1
	ands	r7, r7, #1
	movne	r7, #0
	orrne	r3, r3, #2
	biceq	r3, r3, #2
	str	r3, [r0, #340]
.L615:
	ldrb	r3, [r5, #26]	@ zero_extendqisi2
	str	r7, [r5, #4]
	mov	r1, r5
	mov	r2, #32
	bfi	r3, r8, #1, #1
	strb	r3, [r5, #26]
	ldr	r3, [r6]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	bge	.L611
	ldr	r0, [r6]
	movw	r1, #:lower16:.LC11
	mov	r2, r4
	movt	r1, #:upper16:.LC11
	add	r0, r0, #32
	bl	dev_err
	b	.L611
.L622:
	movw	r3, #:lower16:rmnet_mux_command_complete
	mov	r7, r8
	str	r0, [r5, #32]
	movt	r3, #:upper16:rmnet_mux_command_complete
	mov	r8, #0
	str	r3, [r5, #28]
	b	.L615
.L614:
	cmp	r7, #0
	bne	.L620
	add	r7, r0, #356
	mov	r0, r7
	bl	_raw_spin_lock
	mov	r3, r4
	ldr	r9, [r3, #328]!
	cmp	r9, r3
	beq	.L623
	ldrd	r2, [r9]
	mov	ip, #256
	mov	r1, #512
	mov	r0, r7
	mov	r10, r9
	str	r3, [r2, #4]
	str	r2, [r3]
	str	ip, [r9]
	str	r1, [r9, #4]
	ldr	r3, [r4, #336]
	sub	r3, r3, #1
	str	r3, [r4, #336]
	bl	_raw_spin_unlock
	ldmdb	r9, {r1, r7}
	ldr	r0, [r5]
	cmp	r8, r7
	movcc	r7, r8
	mov	r2, r7
	bl	memcpy
	movw	r3, #:lower16:rmnet_mux_response_complete
	str	r4, [r5, #32]
	movt	r3, #:upper16:rmnet_mux_response_complete
	str	r3, [r5, #28]
	ldr	r0, [r10, #-8]!
	bl	kfree
	mov	r0, r10
	bl	kfree
	ldr	r3, [r4, #404]
	cmp	r7, r8
	movge	r8, #0
	movlt	r8, #1
	add	r3, r3, #1
	str	r3, [r4, #404]
	b	.L615
.L618:
	mvn	r4, #106
	b	.L611
.L623:
	mov	r0, r7
	mvn	r4, #94
	bl	_raw_spin_unlock
	b	.L611
	.fnend
	.size	rmnet_mux_setup, .-rmnet_mux_setup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_smd_start_rx, %function
rmnet_mux_smd_start_rx:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	add	r7, r0, #356
	mov	r6, r0
	strd	r8, [sp, #16]
	add	r8, r0, #104
	mov	r9, #512
	strd	r10, [sp, #24]
	mov	r10, #256
	str	lr, [sp, #32]
	ldr	r3, [r0, #76]
	.pad #12
	sub	sp, sp, #12
	mov	r0, r7
	str	r3, [sp, #4]
	bl	_raw_spin_lock_irqsave
	mov	r5, r0
	b	.L625
.L627:
	ldrd	r2, [r4]
	str	r3, [r2, #4]
	str	r2, [r3]
	str	r10, [r4]
	str	r9, [r4, #4]
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, [r6, #80]
	mov	r2, #32
	sub	r1, r4, #36
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	mov	fp, r0
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	cmp	fp, #0
	mov	r5, r0
	bne	.L631
.L625:
	ldr	r4, [r6, #104]
	mov	r1, r5
	mov	r0, r7
	cmp	r8, r4
	bne	.L627
.L626:
	mov	r1, r5
	mov	r0, r7
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L631:
	ldr	r3, [sp, #4]
	movw	r1, #:lower16:.LC0
	mov	r2, fp
	movt	r1, #:upper16:.LC0
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	dev_err
	ldr	r3, [r6, #108]
	str	r4, [r6, #108]
	str	r8, [r4]
	str	r3, [r4, #4]
	str	r4, [r3]
	b	.L626
	.fnend
	.size	rmnet_mux_smd_start_rx, .-rmnet_mux_smd_start_rx
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	composite_suspend, %function
composite_suspend:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r0
	add	r0, r0, #32
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	dev_get_drvdata
	ldr	r3, [r0, #12]
	mov	r6, r0
	cmp	r3, #0
	beq	.L636
	ldr	r4, [r3, #36]!
	cmp	r3, r4
	sub	r4, r4, #64
	beq	.L636
.L639:
	ldr	r2, [r4, #48]
	mov	r0, r4
	cmp	r2, #0
	beq	.L637
	blx	r2
	ldr	r3, [r6, #12]
	ldr	r4, [r4, #64]
	add	r3, r3, #36
	cmp	r3, r4
	sub	r4, r4, #64
	bne	.L639
.L636:
	movw	r3, #:lower16:.LANCHOR0
	movt	r3, #:upper16:.LANCHOR0
	ldr	r3, [r3, #396]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L635
	mov	r0, r6
	blx	r3
.L635:
	ldrb	r3, [r6, #16]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r6, #16]
	ldr	r3, [r5]
	ldr	r3, [r3, #16]
	cmp	r3, #0
	beq	.L632
	mov	r0, r5
	mov	r1, #2
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	bx	r3
.L637:
	ldr	r4, [r4, #64]
	cmp	r3, r4
	sub	r4, r4, #64
	bne	.L639
	b	.L636
.L632:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	composite_suspend, .-composite_suspend
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	composite_resume, %function
composite_resume:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	mov	r6, r0
	add	r0, r0, #32
	str	lr, [sp, #12]
	bl	dev_get_drvdata
	movw	r3, #:lower16:.LANCHOR0
	mov	r5, r0
	movt	r3, #:upper16:.LANCHOR0
	ldr	r3, [r3, #396]
	ldr	r3, [r3, #40]
	cmp	r3, #0
	beq	.L643
	blx	r3
.L643:
	ldr	r1, [r5, #12]
	cmp	r1, #0
	beq	.L645
	mov	r2, r1
	ldr	r4, [r2, #36]!
	cmp	r2, r4
	sub	r4, r4, #64
	beq	.L646
.L650:
	ldr	r3, [r4, #52]
	mov	r0, r4
	cmp	r3, #0
	beq	.L647
	blx	r3
	ldr	r1, [r5, #12]
	ldr	r4, [r4, #64]
	add	r2, r1, #36
	cmp	r2, r4
	sub	r4, r4, #64
	bne	.L650
.L646:
	ldrb	r3, [r1, #23]	@ zero_extendqisi2
	cmp	r3, #0
	ldrne	r1, [r5, #64]
	moveq	r1, #500
	mulne	r1, r1, r3
	ldr	r3, [r6]
	ldr	r3, [r3, #16]
	cmp	r3, #0
	beq	.L645
	mov	r0, r6
	blx	r3
.L645:
	ldrb	r3, [r5, #16]	@ zero_extendqisi2
	bfc	r3, #0, #1
	strb	r3, [r5, #16]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L647:
	ldr	r4, [r4, #64]
	cmp	r2, r4
	sub	r4, r4, #64
	bne	.L650
	b	.L646
	.fnend
	.size	composite_resume, .-composite_resume
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_pcm_hw_params, %function
audio_pcm_hw_params:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	movw	r2, #44100
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r3, [r1, #284]
	.pad #8
	sub	sp, sp, #8
	ldr	r1, [r1, #296]
	cmp	r3, #2
	cmpeq	r1, r2
	bne	.L667
	ldr	r1, [r0]
	mov	r4, r0
	add	r6, r0, #172
	ldr	r3, [r1]
	ldr	r0, [r3, #500]
	add	r0, r0, #256
	ldrd	r2, [r0]
	orrs	r3, r2, r3
	beq	.L674
.L663:
	mov	r3, #2
	mov	r0, #0
	add	r2, r4, #184
	str	r3, [r4, #172]
	ldr	r3, [r1]
	ldr	r3, [r3, #500]
	str	r3, [r4, #176]
	str	r0, [r4, #192]
	ldr	r3, [r1]
	ldr	r1, [r5, #380]
	ldr	r0, [r3, #500]
	cmp	r0, #0
	beq	.L664
	ldr	ip, [r0, #284]
	cmp	ip, #0
	beq	.L664
.L665:
	mov	r7, #0
	mov	r3, #208
	str	r7, [sp]
	ldr	r8, [ip]
	blx	r8
	cmp	r0, r7
	str	r0, [r4, #180]
	beq	.L669
	ldr	r2, [r5, #380]
	cmp	r6, r7
	ldr	r3, [r4, #208]
	str	r2, [r4, #188]
	beq	.L666
	str	r6, [r3, #560]
	ldr	r2, [r4, #180]
	mov	r0, r7
	str	r2, [r3, #548]
	ldr	r2, [r4, #184]
	str	r2, [r3, #552]
	ldr	r2, [r4, #188]
	str	r2, [r3, #556]
.L661:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L664:
	movw	r3, #:lower16:arm_dma_ops
	movt	r3, #:upper16:arm_dma_ops
	cmp	r3, #0
	movne	ip, r3
	bne	.L665
	.syntax divided
@ 170 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/dma-mapping.h" 1
	.word 0xe7f001f2
@ 0 "" 2
	.arm
	.syntax unified
.L674:
	mvn	r2, #0
	mov	r3, #0
	strd	r2, [r0]
	ldr	r1, [r4]
	b	.L663
.L666:
	add	r2, r3, #560
	mov	r4, #0
	str	r6, [r3, #548]
	mov	r5, #0
	mov	r0, r6
	str	r6, [r3, #560]
	strd	r4, [r2, #-8]
	b	.L661
.L667:
	mvn	r0, #21
	b	.L661
.L669:
	mvn	r0, #11
	b	.L661
	.fnend
	.size	audio_pcm_hw_params, .-audio_pcm_hw_params
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_pcm_hw_free, %function
audio_pcm_hw_free:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	mov	r4, r0
	str	lr, [sp, #8]
	ldr	r2, [r0, #180]
	.pad #12
	sub	sp, sp, #12
	cmp	r2, #0
	beq	.L676
	ldr	r0, [r0]
	ldr	r3, [r4, #184]
	ldr	r1, [r4, #188]
	ldr	r0, [r0]
	ldr	r0, [r0, #500]
	cmp	r0, #0
	beq	.L677
	ldr	ip, [r0, #284]
	cmp	ip, #0
	beq	.L677
.L678:
	mov	lr, #0
	str	lr, [sp]
	ldr	r5, [ip, #4]
	blx	r5
.L676:
	mov	r0, #0
	str	r0, [r4, #180]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	add	sp, sp, #8
	ldr	pc, [sp], #4
.L677:
	movw	ip, #:lower16:arm_dma_ops
	movt	ip, #:upper16:arm_dma_ops
	cmp	ip, #0
	bne	.L678
	.syntax divided
@ 201 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/dma-mapping.h" 1
	.word 0xe7f001f2
@ 0 "" 2
	.arm
	.syntax unified
	.fnend
	.size	audio_pcm_hw_free, .-audio_pcm_hw_free
	.section	.text.unlikely,"ax",%progbits
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_do_descs, %function
ffs_do_descs:
	.fnstart
	@ args = 4, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	.pad #4
	sub	sp, sp, #4
	ldr	r7, [sp, #40]
	mov	r8, r2
	mov	r10, r0
	mov	fp, r1
	mov	r5, r3
	mov	r6, r2
	mov	r9, #0
.L700:
	cmp	r9, r10
	mov	r3, r7
	moveq	fp, #0
	mov	r1, r9
	mov	r2, fp
	mov	r0, #0
	blx	r5
	cmp	r0, #0
	blt	.L687
	cmp	fp, #0
	bne	.L690
	sub	r0, r8, r6
	b	.L687
.L690:
	cmp	r6, #1
	bls	.L710
	ldrb	r4, [fp]	@ zero_extendqisi2
	cmp	r6, r4
	bcc	.L710
	ldrb	r3, [fp, #1]	@ zero_extendqisi2
	cmp	r3, #11
	bhi	.L691
	cmp	r3, #3
	bls	.L710
	sub	r3, r3, #4
	cmp	r3, #7
	ldrls	pc, [pc, r3, asl #2]
	b	.L710
.L693:
	.word	.L696
	.word	.L695
	.word	.L710
	.word	.L710
	.word	.L710
	.word	.L694
	.word	.L710
	.word	.L692
.L691:
	cmp	r3, #48
	beq	.L697
	b	.L710
.L696:
	cmp	r4, #9
	bne	.L710
	mov	r3, r7
	mov	r2, fp
	add	r1, fp, #2
	mov	r0, #1
	blx	r5
	cmp	r0, #0
	blt	.L687
	ldrb	r3, [fp, #8]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L699
.L701:
	sub	r6, r6, r4
	add	fp, fp, r4
	add	r9, r9, #1
	b	.L700
.L699:
	mov	r3, r7
	mov	r2, fp
	add	r1, fp, #8
	mov	r0, #2
	blx	r5
	cmp	r0, #0
	bge	.L701
	b	.L687
.L695:
	sub	r3, r4, #7
	tst	r3, #253
	bne	.L710
	ldrb	r3, [fp, #2]	@ zero_extendqisi2
	tst	r3, #15
	beq	.L710
	mov	r3, r7
	mov	r2, fp
	add	r1, fp, #2
	mov	r0, #3
	blx	r5
	cmp	r0, #0
	bge	.L701
	b	.L687
.L694:
	cmp	r4, #5
	beq	.L701
	b	.L710
.L692:
	cmp	r4, #8
	bne	.L710
	ldrb	r3, [fp, #7]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L701
	mov	r3, r7
	mov	r2, fp
	add	r1, fp, #7
	mov	r0, #2
	blx	r5
	cmp	r0, #0
	bge	.L701
	b	.L687
.L697:
	cmp	r4, #6
	beq	.L701
.L710:
	mvn	r0, #21
.L687:
	add	sp, sp, #4
	@ sp needed
	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
	.fnend
	.size	ffs_do_descs, .-ffs_do_descs
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_ep0_open, %function
ffs_ep0_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #348]
	ldr	r2, [r3, #96]
	cmp	r2, #3
	beq	.L720
	add	r2, r3, #88
	str	r3, [r1, #132]
	.syntax divided
@ 44 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	@ atomic_add
1:	ldrex	r1, [r2]
	add	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	add	r2, r3, #92
	.syntax divided
@ 44 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	@ atomic_add
1:	ldrex	r1, [r2]
	add	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mov	r0, #0
	bx	lr
.L720:
	mvn	r0, #15
	bx	lr
	.fnend
	.size	ffs_ep0_open, .-ffs_ep0_open
	.section	.rodata.str1.4
	.align	2
.LC12:
	.ascii	"drivers/usb/gadget/f_fs.c\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_epfile_open, %function
ffs_epfile_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r2, [r0, #348]
	ldr	r3, [r2, #40]
	ldr	r3, [r3, #96]
	cmp	r3, #2
	bne	.L728
	str	r2, [r1, #132]
	ldr	r3, [r2, #40]
	add	r1, r3, #88
	.syntax divided
@ 44 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	@ atomic_add
1:	ldrex	r0, [r1]
	add	r0, r0, #1
	strex	ip, r0, [r1]
	teq	ip, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	add	r1, r3, #92
	.syntax divided
@ 44 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	@ atomic_add
1:	ldrex	r0, [r1]
	add	r0, r0, #1
	strex	ip, r0, [r1]
	teq	ip, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mov	r3, #0
	mov	r0, r3
	str	r3, [r2, #36]
	bx	lr
.L728:
	movw	r0, #:lower16:.LC12
	mov	r1, #948
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movt	r0, #:upper16:.LC12
	str	lr, [sp, #4]
	bl	warn_slowpath_null
	ldr	r4, [sp]
	add	sp, sp, #4
	mvn	r0, #18
	ldr	pc, [sp], #4
	.fnend
	.size	ffs_epfile_open, .-ffs_epfile_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	do_mode_sense, %function
do_mode_sense:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldrb	r3, [r0, #77]	@ zero_extendqisi2
	ldrb	r7, [r0, #76]	@ zero_extendqisi2
	ldr	r5, [r1]
	ldr	r8, [r0, #104]
	tst	r3, #247
	bne	.L737
	ldrb	r6, [r0, #78]	@ zero_extendqisi2
	lsr	r9, r6, #6
	and	r6, r6, #63
	cmp	r9, #3
	moveq	r3, #14592
	mvneq	r0, #21
	movteq	r3, 5
	streq	r3, [r8, #28]
	beq	.L729
	mov	r1, #8
	mov	r0, r5
	bl	__memzero
	sub	r3, r6, #63
	cmp	r7, #26
	ldrb	r2, [r8, #24]	@ zero_extendqisi2
	clz	r3, r3
	lsr	r3, r3, #5
	beq	.L743
	lsl	r2, r2, #6
	add	r4, r5, #8
	bic	r2, r2, #127
	movw	r10, #65535
	strb	r2, [r5, #3]
.L734:
	cmp	r6, #8
	movne	r6, r3
	orreq	r6, r3, #1
	cmp	r6, #0
	bne	.L735
.L737:
	mov	r3, #9216
	mvn	r0, #21
	movt	r3, 5
	str	r3, [r8, #28]
.L729:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L743:
	lsl	r2, r2, #6
	add	r4, r5, #4
	mov	r10, #255
	bic	r2, r2, #127
	strb	r2, [r5, #2]
	b	.L734
.L735:
	mov	r3, #8
	mov	r1, #10
	add	r0, r4, #2
	strb	r3, [r4]
	strb	r1, [r4, #1]
	bl	__memzero
	cmp	r9, #1
	beq	.L736
	mvn	r3, #0
	mov	r2, #4
	strb	r2, [r4, #2]
	strb	r3, [r4, #4]
	strb	r3, [r4, #5]
	str	r3, [r4, #8]	@ unaligned
.L736:
	add	r0, r4, #12
	sub	r0, r0, r5
	cmp	r10, r0
	blt	.L737
	cmp	r7, #26
	subeq	r3, r0, #1
	strbeq	r3, [r5]
	beq	.L729
	sub	r3, r0, #2
	ubfx	r2, r3, #8, #8
	strb	r2, [r5]
	strb	r3, [r5, #1]
	b	.L729
	.fnend
	.size	do_mode_sense, .-do_mode_sense
	.section	.rodata.str1.4
	.align	2
.LC13:
	.ascii	"<3>%s: device is already opened\012\000"
	.text
	.align	2
	.global	usb_rmnet_mux_ctrl_open
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_rmnet_mux_ctrl_open, %function
usb_rmnet_mux_ctrl_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:.LANCHOR0
	strd	r6, [sp, #8]
	mov	r6, r1
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r5, [r3, #400]
	add	r7, r5, #356
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r5, #344]
	mov	r1, r0
	cmp	r4, #0
	bne	.L748
	mov	r3, #1
	mov	r0, r7
	str	r3, [r5, #344]
	str	r5, [r6, #132]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r4
.L744:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L748:
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	movw	r1, #:lower16:.LANCHOR2
	movw	r0, #:lower16:.LC13
	movt	r1, #:upper16:.LANCHOR2
	movt	r0, #:upper16:.LC13
	bl	printk
	mvn	r0, #15
	b	.L744
	.fnend
	.size	usb_rmnet_mux_ctrl_open, .-usb_rmnet_mux_ctrl_open
	.section	.rodata.str1.4
	.align	2
.LC14:
	.ascii	"<3>audio response on err %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_setup, %function
audio_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r3, r1
	str	lr, [sp, #4]
	ldr	r0, [r0, #20]
	ldrb	r2, [r1]	@ zero_extendqisi2
	ldr	r0, [r0, #24]
	cmp	r2, #34
	ldr	r1, [r0, #4]
	beq	.L750
	cmp	r2, #162
	bne	.L756
	ldrh	r2, [r3, #2]	@ unaligned
	ldrb	r3, [r3, #1]	@ zero_extendqisi2
	ldr	ip, [r1]
	cmp	r2, #256
	bne	.L756
	sub	r3, r3, #129
	cmp	r3, #3
	bhi	.L756
	mov	r4, #68
	mvn	lr, #83
	mov	r3, #0
	mov	r2, #3
	strb	r4, [ip]
	strb	lr, [ip, #1]
	strb	r3, [ip, #2]
.L753:
	ldrb	ip, [r1, #26]	@ zero_extendqisi2
	movw	r3, #:lower16:audio_control_complete
	str	r2, [r1, #4]
	movt	r3, #:upper16:audio_control_complete
	mov	r2, #32
	str	r3, [r1, #28]
	bfc	ip, #1, #1
	strb	ip, [r1, #26]
	ldr	r3, [r0]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	bge	.L749
	movw	r0, #:lower16:.LC14
	mov	r1, r4
	movt	r0, #:upper16:.LC14
	bl	printk
	b	.L749
.L750:
	ldrb	ip, [r3, #1]	@ zero_extendqisi2
	ldrh	r2, [r3, #6]	@ unaligned
	sub	r3, ip, #1
	cmp	r3, #3
	bls	.L753
.L756:
	mvn	r4, #94
.L749:
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	audio_setup, .-audio_setup
	.section	.rodata.str1.4
	.align	2
.LC15:
	.ascii	"<3>%s: port is null\012\000"
	.align	2
.LC16:
	.ascii	"<3>%s: usb ep out queue failedport:%pK, port#%d\012"
	.ascii	"\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_start_rx, %function
gsmd_start_rx:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	subs	r6, r0, #0
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	beq	.L772
	add	r7, r6, #4
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r6, #68]
	mov	r5, r0
	cmp	r3, #0
	beq	.L760
	add	r9, r6, #12
	mov	fp, #256
	ldr	r8, [r3, #84]
	mov	r10, #512
	b	.L761
.L774:
	ldr	r4, [r6, #12]
	cmp	r9, r4
	beq	.L760
	ldrd	r2, [r4]
	str	r3, [r2, #4]
	str	r2, [r3]
	mov	r3, #2048
	str	r3, [r4, #-32]
	str	fp, [r4]
	str	r10, [r4, #4]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r8, #8]
	mov	r2, #208
	sub	r1, r4, #36
	mov	r0, r8
	ldr	r3, [r3, #16]
	blx	r3
	mov	r5, r0
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	cmp	r5, #0
	mov	r5, r0
	bne	.L773
.L761:
	ldr	r3, [r6, #72]
	mov	r1, r5
	mov	r0, r7
	ldr	r3, [r3, #8]
	tst	r3, #1
	bne	.L774
.L760:
	mov	r1, r5
	mov	r0, r7
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L772:
	ldr	r1, .L775
	movw	r0, #:lower16:.LC15
	movt	r0, #:upper16:.LC15
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	printk
.L773:
	movw	r0, #:lower16:.LC16
	ldr	r1, .L775
	mov	r2, r6
	movt	r0, #:upper16:.LC16
	ldr	r3, [r6]
	bl	printk
	ldr	r3, [r6, #16]
	str	r4, [r6, #16]
	str	r9, [r4]
	str	r3, [r4, #4]
	str	r4, [r3]
	b	.L760
.L776:
	.align	2
.L775:
	.word	.LANCHOR2+24
	.fnend
	.size	gsmd_start_rx, .-gsmd_start_rx
	.section	.rodata.str1.4
	.align	2
.LC17:
	.ascii	"<3>%s: port->port_usb is NULL\000"
	.align	2
.LC18:
	.ascii	"<3>%s: error dequeuing transfer, %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_stop, %function
gbam_stop:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bne	.L778
	add	r5, r0, #4
	mov	r0, r5
	bl	_raw_spin_lock
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L791
	ldr	r0, [r3, #80]
	ldr	r1, [r4, #112]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	subs	r2, r0, #0
	beq	.L782
	movw	r0, #:lower16:.LC18
	ldr	r1, .L794
	movt	r0, #:upper16:.LC18
	bl	printk
	b	.L782
.L778:
	add	r5, r0, #8
	mov	r0, r5
	bl	_raw_spin_lock
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L792
	ldr	r0, [r3, #76]
	ldr	r1, [r4, #116]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	subs	r2, r0, #0
	bne	.L793
.L782:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock
.L792:
	mov	r0, r5
	bl	_raw_spin_unlock
	ldr	r1, .L794+4
	movw	r0, #:lower16:.LC17
.L790:
	movt	r0, #:upper16:.LC17
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	printk
.L791:
	mov	r0, r5
	bl	_raw_spin_unlock
	ldr	r1, .L794
	movw	r0, #:lower16:.LC17
	b	.L790
.L793:
	movw	r0, #:lower16:.LC18
	ldr	r1, .L794+4
	movt	r0, #:upper16:.LC18
	bl	printk
	b	.L782
.L795:
	.align	2
.L794:
	.word	.LANCHOR2+40
	.word	.LANCHOR2+64
	.fnend
	.size	gbam_stop, .-gbam_stop
	.section	.rodata.str1.4
	.align	2
.LC19:
	.ascii	"<3>%s: Invalid portno#%d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_send_cpkt_tomodem, %function
ghsic_send_cpkt_tomodem:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	ip, #:lower16:.LANCHOR0
	mov	r3, r0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	ip, #:upper16:.LANCHOR0
	strd	r6, [sp, #8]
	ldr	r0, [ip, #404]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	cmp	r3, r0
	bcs	.L803
	mov	r0, #104
	mla	r3, r0, r3, ip
	ldr	r5, [r3, #408]
	cmp	r5, #0
	beq	.L804
	mov	r6, r1
	mov	r0, r2
	mov	r1, #32
	mov	r4, r2
	bl	__kmalloc
	subs	r7, r0, #0
	beq	.L801
	mov	r2, r4
	mov	r1, r6
	bl	memcpy
	ldr	r0, [r5, #84]
	ands	r4, r0, #1
	beq	.L805
	ldr	r3, [r5, #96]
	mov	r4, #0
	add	r3, r3, #1
	str	r3, [r5, #96]
.L796:
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L805:
	ldr	r3, [r5, #104]
	mov	r0, r7
	add	r3, r3, #1
	str	r3, [r5, #104]
	bl	kfree
	b	.L796
.L801:
	mvn	r4, #11
	b	.L796
.L804:
	movw	r0, #:lower16:.LC15
	ldr	r1, .L806
	mvn	r4, #18
	movt	r0, #:upper16:.LC15
	bl	printk
	b	.L796
.L803:
	movw	r0, #:lower16:.LC19
	ldr	r1, .L806
	mov	r2, r3
	movt	r0, #:upper16:.LC19
	mvn	r4, #18
	bl	printk
	b	.L796
.L807:
	.align	2
.L806:
	.word	.LANCHOR2+88
	.fnend
	.size	ghsic_send_cpkt_tomodem, .-ghsic_send_cpkt_tomodem
	.section	.rodata.str1.4
	.align	2
.LC20:
	.ascii	"<3>%s: ecm req %02x.%02x response err %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_setup, %function
ecm_qc_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	mov	r4, r1
	movw	r1, #17185
	str	lr, [sp, #8]
	ldr	ip, [r0, #20]
	.pad #12
	sub	sp, sp, #12
	ldrh	r3, [r4]	@ unaligned
	ldrh	r2, [r4, #6]	@ unaligned
	ldrh	lr, [r4, #4]	@ unaligned
	ldr	ip, [ip, #24]
	cmp	r2, #0
	cmpeq	r3, r1
	ldrh	r2, [r4, #2]	@ unaligned
	movne	r3, #1
	moveq	r3, #0
	ldr	r1, [ip, #4]
	bne	.L811
	ldrb	r5, [r0, #112]	@ zero_extendqisi2
	cmp	r5, lr
	bne	.L811
	strh	r2, [r0, #90]	@ movhi
	ldrb	r0, [r1, #26]	@ zero_extendqisi2
	mov	r2, #32
	str	r3, [r1, #4]
	bfi	r0, r3, #1, #1
	strb	r0, [r1, #26]
	ldr	r3, [ip]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r5, r0, #0
	blt	.L813
.L808:
	mov	r0, r5
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	add	sp, sp, #8
	ldr	pc, [sp], #4
.L811:
	mvn	r5, #94
	b	.L808
.L813:
	movw	r0, #:lower16:.LC20
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	str	r5, [sp]
	ldr	r1, .L814
	movt	r0, #:upper16:.LC20
	ldrb	r2, [r4]	@ zero_extendqisi2
	bl	printk
	b	.L808
.L815:
	.align	2
.L814:
	.word	.LANCHOR2+112
	.fnend
	.size	ecm_qc_setup, .-ecm_qc_setup
	.section	.rodata.str1.4
	.align	2
.LC21:
	.ascii	"<3>%s: Bad control-OUT transfer\012\000"
	.align	2
.LC22:
	.ascii	"<3>%s: Illegal INPUT SIZE (%d) from host\012\000"
	.align	2
.LC23:
	.ascii	"<3>%s: Illegal NTB length %d\012\000"
	.align	2
.LC24:
	.ascii	"<3>%s: dev:%pK Failed\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_ep0out_complete, %function
mbim_ep0out_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r3, #0
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r5, [r1, #32]
	ldr	r2, [r1, #44]
	str	r3, [r1, #32]
	cmp	r2, r3
	bne	.L817
	ldr	r0, [r1, #4]
	ldr	r3, [r1, #48]
	cmp	r3, r0
	bne	.L817
	cmp	r3, #4
	beq	.L829
	cmp	r3, #8
	bne	.L823
	ldr	r1, [r1]
	ldr	r2, [r1]	@ unaligned
	cmp	r2, #2048
	bcc	.L824
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r3, [r3, #140]
	cmp	r3, r2
	bcc	.L824
	ldrb	r0, [r1, #5]	@ zero_extendqisi2
	ldrb	r3, [r1, #4]	@ zero_extendqisi2
	orr	r3, r3, r0, lsl #8
	strh	r3, [r5, #220]	@ movhi
.L822:
	str	r2, [r5, #216]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L829:
	ldr	r3, [r1]
	ldr	r2, [r3]	@ unaligned
	cmp	r2, #2048
	bcc	.L824
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r3, [r3, #140]
	cmp	r3, r2
	bcs	.L822
.L824:
	movw	r0, #:lower16:.LC22
	ldr	r1, .L830
	movt	r0, #:upper16:.LC22
	bl	printk
	b	.L819
.L817:
	movw	r0, #:lower16:.LC21
	ldr	r1, .L830
	movt	r0, #:upper16:.LC21
	bl	printk
.L819:
	ldr	r3, [r4, #8]
	mov	r0, r4
	mov	r1, #1
	ldr	r3, [r3, #24]
	blx	r3
	movw	r0, #:lower16:.LC24
	mov	r2, r5
	ldr	r1, .L830
	movt	r0, #:upper16:.LC24
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	printk
.L823:
	movw	r0, #:lower16:.LC23
	ldr	r1, .L830
	movt	r0, #:upper16:.LC23
	bl	printk
	b	.L819
.L831:
	.align	2
.L830:
	.word	.LANCHOR2+128
	.fnend
	.size	mbim_ep0out_complete, .-mbim_ep0out_complete
	.section	.rodata.str1.4
	.align	2
.LC25:
	.ascii	"<3>%s: %s: error dequeuing transfer, %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam_data_stop, %function
bam_data_stop:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #0
	mov	r3, r0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	ldr	r2, [r0, #4]
	bne	.L833
	cmp	r2, #0
	beq	.L832
	ldr	r0, [r2, #12]
	ldr	r1, [r3, #36]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	subs	r3, r0, #0
	ldrne	r2, .L848
	bne	.L847
.L832:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L833:
	cmp	r2, #0
	beq	.L832
	ldr	r0, [r2, #8]
	ldr	r1, [r3, #40]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	subs	r3, r0, #0
	beq	.L832
	ldr	r2, .L848+4
.L847:
	movw	r0, #:lower16:.LC25
	mov	r1, r2
	ldr	r4, [sp]
	movt	r0, #:upper16:.LC25
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	printk
.L849:
	.align	2
.L848:
	.word	.LANCHOR2+152
	.word	.LANCHOR2+180
	.fnend
	.size	bam_data_stop, .-bam_data_stop
	.section	.rodata.str1.4
	.align	2
.LC26:
	.ascii	"<3>%s: %s(): cdev or config is NULL.\012\000"
	.align	2
.LC27:
	.ascii	"<6>%s: RNDIS %s response error %d, %d/%d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_response_complete, %function
rndis_qc_response_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r5, [r1, #32]
	.pad #8
	sub	sp, sp, #8
	ldr	r3, [r1, #44]
	ldr	r2, [r5, #20]
	cmp	r2, #0
	beq	.L851
	ldr	r2, [r2, #24]
	cmp	r2, #0
	beq	.L851
	cmn	r3, #104
	beq	.L853
	cmp	r3, #0
	mov	r4, r1
	mov	r6, r0
	beq	.L854
	cmn	r3, #108
	bne	.L855
.L853:
	mov	r3, #0
	str	r3, [r5, #156]
.L850:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L855:
	ldr	r2, [r4, #4]
	movw	r0, #:lower16:.LC27
	ldr	ip, [r4, #48]
	movt	r0, #:upper16:.LC27
	ldr	r1, .L875
	str	r2, [sp, #4]
	ldr	r2, [r6, #4]
	str	ip, [sp]
	bl	printk
.L854:
	ldr	r3, [r5, #148]
	cmp	r3, r6
	bne	.L850
	add	r6, r5, #156
	.syntax divided
@ 99 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 111 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/processor.h" 1
	pld	[r6]
@ 0 "" 2
@ 102 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 112 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L850
	ldr	r0, [r5, #148]
	mov	r1, r4
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	beq	.L850
	.syntax divided
@ 83 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	b	.L850
.L851:
	ldr	r2, .L875
	movw	r0, #:lower16:.LC26
	movt	r0, #:upper16:.LC26
	mov	r1, r2
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	printk
.L876:
	.align	2
.L875:
	.word	.LANCHOR2+208
	.fnend
	.size	rndis_qc_response_complete, .-rndis_qc_response_complete
	.section	.rodata.str1.4
	.align	2
.LC28:
	.ascii	"<6>%s: notify/0 --> %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_response_available, %function
rndis_qc_response_available:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	add	r5, r0, #156
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r1, [r0, #152]
	ldr	r0, [r1]
	.syntax divided
@ 60 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 111 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/processor.h" 1
	pld	[r5]
@ 0 "" 2
@ 63 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r3, [r5]
	add	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 73 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #1
	bne	.L877
	mov	ip, #0
	mov	r2, #32
	stm	r0, {r3, ip}
	ldr	r0, [r4, #148]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	bne	.L885
.L877:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L885:
	.syntax divided
@ 83 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r5]
	sub	r3, r3, #1
	strex	r1, r3, [r5]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	r0, #:lower16:.LC28
	ldr	r1, .L886
	movt	r0, #:upper16:.LC28
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	printk
.L887:
	.align	2
.L886:
	.word	.LANCHOR2+236
	.fnend
	.size	rndis_qc_response_available, .-rndis_qc_response_available
	.section	.rodata.str1.4
	.align	2
.LC29:
	.ascii	"<3>%s: Failed to allocate playback_copy_buf\000"
	.align	2
.LC30:
	.ascii	"<3>%s: Failed to allocate playback_copy_buf buffer\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_audio_buffer_alloc, %function
f_audio_buffer_alloc:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r0
	movt	r3, #:upper16:kmalloc_caches
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L891
	movw	r1, #32800
	bl	kmem_cache_alloc
	subs	r4, r0, #0
	beq	.L893
.L889:
	mov	r0, r5
	movw	r1, #32800
	bl	__kmalloc
	cmp	r0, #0
	str	r0, [r4]
	beq	.L894
.L888:
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L891:
	mov	r4, #16
	b	.L889
.L894:
	movw	r0, #:lower16:.LC30
	ldr	r1, .L895
	movt	r0, #:upper16:.LC30
	bl	printk
	mov	r0, r4
	mvn	r4, #11
	bl	kfree
	b	.L888
.L893:
	movw	r0, #:lower16:.LC29
	ldr	r1, .L895
	mvn	r4, #11
	movt	r0, #:upper16:.LC29
	bl	printk
	b	.L888
.L896:
	.align	2
.L895:
	.word	.LANCHOR2+264
	.fnend
	.size	f_audio_buffer_alloc, .-f_audio_buffer_alloc
	.section	.rodata.str1.4
	.align	2
.LC31:
	.ascii	"<3>%s: Unknown command\000"
	.align	2
.LC32:
	.ascii	"<3>%s: Unknown control request %02x.%02x v%04x i%04"
	.ascii	"x l%d\012\000"
	.align	2
.LC33:
	.ascii	"<3>%s: audio response failed on err %d\012\000"
	.align	2
.LC34:
	.ascii	"<3>%s: STALL\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_audio_setup, %function
f_audio_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	str	lr, [sp, #16]
	ldr	r3, [r0, #20]
	.pad #28
	sub	sp, sp, #28
	ldrb	r2, [r1]	@ zero_extendqisi2
	ldrh	ip, [r1, #4]	@ unaligned
	ldrh	lr, [r1, #2]	@ unaligned
	ldr	r7, [r3, #24]
	cmp	r2, #161
	ldrh	r6, [r1, #6]	@ unaligned
	ldr	r5, [r7, #4]
	beq	.L898
	bhi	.L899
	cmp	r2, #33
	bne	.L947
	mov	r2, r0
	ldrb	r0, [r1, #1]	@ zero_extendqisi2
	lsr	ip, ip, #8
	ldr	r3, [r2, #244]!
	and	r0, r0, #15
	cmp	r3, r2
	bne	.L908
.L904:
	movw	r3, #:lower16:f_audio_complete
	strb	r0, [r4, #260]
	movt	r3, #:upper16:f_audio_complete
	str	r3, [r5, #28]
	str	r4, [r5, #32]
.L909:
	ldrb	r3, [r5, #26]	@ zero_extendqisi2
	str	r6, [r5, #4]
	mov	r1, r5
	mov	r2, #32
	orr	r3, r3, #2
	strb	r3, [r5, #26]
	ldr	r3, [r7]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	blt	.L948
.L897:
	mov	r0, r4
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L905:
	ldr	r3, [r3]
	cmp	r3, r2
	beq	.L904
.L908:
	ldrb	r1, [r3, #16]	@ zero_extendqisi2
	cmp	r1, ip
	bne	.L905
	ldr	r2, [r3, #8]!
	cmp	r3, r2
	beq	.L904
	lsr	lr, lr, #8
	b	.L907
.L906:
	ldr	r2, [r2]
	cmp	r2, r3
	beq	.L904
.L907:
	ldrb	r1, [r2, #12]	@ zero_extendqisi2
	cmp	r1, lr
	bne	.L906
	str	r2, [r4, #264]
	b	.L904
.L947:
	cmp	r2, #34
	bne	.L902
	mov	r2, r0
	ldrb	r1, [r1, #1]	@ zero_extendqisi2
	lsr	lr, lr, #8
	ldr	r3, [r2, #252]!
	and	ip, ip, #127
	and	r1, r1, #15
	cmp	r3, r2
	beq	.L915
	ldrb	r0, [r3, #16]	@ zero_extendqisi2
	cmp	r0, ip
	beq	.L916
.L949:
	ldr	r3, [r3]
	cmp	r2, r3
	beq	.L915
	ldrb	r0, [r3, #16]	@ zero_extendqisi2
	cmp	r0, ip
	bne	.L949
.L916:
	ldr	r2, [r3, #8]!
	cmp	r2, r3
	beq	.L915
.L919:
	ldrb	r0, [r2, #12]	@ zero_extendqisi2
	cmp	r0, lr
	bne	.L950
	cmp	r1, #4
	bhi	.L920
	cmp	r1, #0
	beq	.L922
	movw	r3, #:lower16:audio_set_endpoint_complete
	strb	r1, [r4, #260]
	movt	r3, #:upper16:audio_set_endpoint_complete
	str	r2, [r4, #264]
	str	r3, [r5, #28]
	str	r4, [r5, #32]
	b	.L909
.L899:
	cmp	r2, #162
	bne	.L902
	ldr	r3, [r4, #252]!
	lsr	lr, lr, #8
	and	ip, ip, #127
	ldrb	r2, [r1, #1]	@ zero_extendqisi2
	cmp	r3, r4
	and	r2, r2, #15
	beq	.L915
	ldrb	r1, [r3, #16]	@ zero_extendqisi2
	cmp	r1, ip
	beq	.L924
.L951:
	ldr	r3, [r3]
	cmp	r4, r3
	beq	.L915
	ldrb	r1, [r3, #16]	@ zero_extendqisi2
	cmp	r1, ip
	bne	.L951
.L924:
	ldr	r1, [r3, #8]!
	cmp	r1, r3
	beq	.L915
.L927:
	ldrb	r0, [r1, #12]	@ zero_extendqisi2
	cmp	r0, lr
	bne	.L952
	sub	r3, r2, #1
	cmp	r3, #3
	bhi	.L915
	add	r3, r2, #4
	mov	r2, r6
	ldr	r0, [r5]
	ldr	r3, [r1, r3, lsl #2]
	add	r1, sp, #20
	str	r3, [sp, #20]
	bl	memcpy
	b	.L909
.L898:
	mov	r2, r0
	mvn	r0, #94
	ldr	r3, [r2, #244]!
	lsr	ip, ip, #8
	str	r0, [sp, #20]
	cmp	r2, r3
	bne	.L914
	b	.L910
.L911:
	ldr	r3, [r3]
	cmp	r2, r3
	beq	.L910
.L914:
	ldrb	r0, [r3, #16]	@ zero_extendqisi2
	cmp	r0, ip
	bne	.L911
	ldr	r0, [r3, #8]!
	cmp	r3, r0
	beq	.L910
	lsr	lr, lr, #8
	b	.L913
.L912:
	ldr	r0, [r0]
	cmp	r0, r3
	beq	.L910
.L913:
	ldrb	r2, [r0, #12]	@ zero_extendqisi2
	cmp	r2, lr
	bne	.L912
	ldr	r2, [r0, #40]
	cmp	r2, #0
	beq	.L912
	ldrb	r1, [r1, #1]	@ zero_extendqisi2
	and	r1, r1, #15
	blx	r2
	str	r0, [sp, #20]
.L910:
	movw	r3, #:lower16:f_audio_complete
	mov	r2, r6
	str	r4, [r5, #32]
	movt	r3, #:upper16:f_audio_complete
	add	r1, sp, #20
	ldr	r0, [r5]
	str	r3, [r5, #28]
	bl	memcpy
	b	.L909
.L920:
	cmp	r1, #5
	bne	.L922
.L915:
	movw	r0, #:lower16:.LC34
	ldr	r1, .L953
	mvn	r4, #94
	movt	r0, #:upper16:.LC34
	bl	printk
	b	.L897
.L950:
	ldr	r2, [r2]
	cmp	r2, r3
	bne	.L919
	b	.L915
.L952:
	ldr	r1, [r1]
	cmp	r3, r1
	bne	.L927
	b	.L915
.L922:
	movw	r0, #:lower16:.LC31
	ldr	r1, .L953+4
	movt	r0, #:upper16:.LC31
	bl	printk
	b	.L915
.L902:
	movw	r0, #:lower16:.LC32
	ldrb	r3, [r1, #1]	@ zero_extendqisi2
	str	lr, [sp]
	ldr	r1, .L953
	movt	r0, #:upper16:.LC32
	str	ip, [sp, #4]
	str	r6, [sp, #8]
	bl	printk
	b	.L915
.L948:
	movw	r0, #:lower16:.LC33
	ldr	r1, .L953
	mov	r2, r4
	movt	r0, #:upper16:.LC33
	bl	printk
	b	.L897
.L954:
	.align	2
.L953:
	.word	.LANCHOR2+312
	.word	.LANCHOR2+288
	.fnend
	.size	f_audio_setup, .-f_audio_setup
	.section	.rodata.str1.4
	.align	2
.LC35:
	.ascii	"<3>%s: %s is enabled in other device\012\000"
	.align	2
.LC36:
	.ascii	"<3>%s: Failed to alloc f_holder\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	android_enable_function, %function
android_enable_function:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	mov	r8, r1
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r9, [r0, #4]
	.pad #12
	sub	sp, sp, #12
	ldr	r1, [r0, #8]
	ldr	r3, [r0, #48]
	ldr	fp, [r9], #4
	str	r3, [sp]
	ldr	r3, [r1]
	cmp	fp, #0
	str	r3, [sp, #4]
	beq	.L956
	movw	r10, #:lower16:.LC35
	mov	r5, r0
	mov	r7, r2
	movt	r10, #:upper16:.LC35
.L963:
	ldr	r4, [fp]
	mov	r0, r7
	mov	r1, r4
	bl	strcmp
	subs	r6, r0, #0
	bne	.L957
	ldr	r0, [fp, #20]
	cmp	r0, r5
	cmpne	r0, #0
	bne	.L971
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L964
	movw	r1, #32976
	bl	kmem_cache_alloc
	cmp	r0, #0
	beq	.L972
.L959:
	mov	r3, r0
	str	r5, [fp, #20]
	add	ip, r8, #112
	str	fp, [r3], #4
	ldr	r1, [r8, #116]
	str	r3, [r8, #116]
	str	ip, [r0, #4]
	str	r1, [r0, #8]
	str	r3, [r1]
	ldr	r3, [sp]
	ldr	r8, [fp]
	ldr	r5, [r3, #44]
	cmp	r5, #0
	ble	.L955
	add	r5, r5, r5, lsl #2
	add	r4, r3, #11
	add	r5, r4, r5, lsl #1
	b	.L962
.L961:
	cmp	r5, r4
	beq	.L955
.L962:
	mov	r1, r4
	mov	r0, r8
	bl	strcmp
	cmp	r0, #0
	add	r4, r4, #10
	bne	.L961
	ldr	r2, [sp, #4]
	mov	r3, #1
	mov	r6, r0
	strb	r3, [r2, #386]
.L955:
	mov	r0, r6
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L971:
	ldr	r1, .L973
	mov	r2, r4
	mov	r0, r10
	bl	printk
.L957:
	ldr	fp, [r9], #4
	cmp	fp, #0
	bne	.L963
.L956:
	mvn	r6, #21
	b	.L955
.L964:
	mov	r0, #16
	b	.L959
.L972:
	movw	r0, #:lower16:.LC36
	ldr	r1, .L973
	mvn	r6, #11
	movt	r0, #:upper16:.LC36
	bl	printk
	b	.L955
.L974:
	.align	2
.L973:
	.word	.LANCHOR2+328
	.fnend
	.size	android_enable_function, .-android_enable_function
	.section	.rodata.str1.4
	.align	2
.LC37:
	.ascii	"<3>acc_complete_set_string, err %d\012\000"
	.align	2
.LC38:
	.ascii	"<3>unknown accessory string index %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_complete_set_string, %function
acc_complete_set_string:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	mov	r6, r1
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r1, [r1, #44]
	ldr	r0, [r0]
	ldr	r5, [r6, #48]
	cmp	r1, #0
	movwne	r0, #:lower16:.LC37
	movtne	r0, #:upper16:.LC37
	bne	.L990
	ldr	r1, [r0, #1632]
	cmp	r1, #5
	ldrls	pc, [pc, r1, asl #2]
	b	.L977
.L979:
	.word	.L984
	.word	.L983
	.word	.L982
	.word	.L981
	.word	.L980
	.word	.L978
.L978:
	add	r7, r0, #1360
	add	r7, r7, #13
.L985:
	cmp	r7, #0
	beq	.L977
	add	r4, r0, #80
	mov	r0, r4
	bl	_raw_spin_lock_irqsave
	cmp	r5, #255
	mov	r3, r0
	ldr	r1, [r6]
	movge	r5, #255
	mov	r0, r7
	mov	r2, r5
	mov	r6, r3
	bl	memcpy
	mov	r3, #0
	mov	r1, r6
	mov	r0, r4
	strb	r3, [r7, r5]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore
.L984:
	add	r7, r0, #93
	b	.L985
.L983:
	add	r7, r0, #348
	add	r7, r7, #1
	b	.L985
.L982:
	add	r7, r0, #604
	add	r7, r7, #1
	b	.L985
.L981:
	add	r7, r0, #860
	add	r7, r7, #1
	b	.L985
.L980:
	add	r7, r0, #1104
	add	r7, r7, #13
	b	.L985
.L977:
	movw	r0, #:lower16:.LC38
	movt	r0, #:upper16:.LC38
.L990:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	printk
	.fnend
	.size	acc_complete_set_string, .-acc_complete_set_string
	.section	.rodata.str1.4
	.align	2
.LC39:
	.ascii	"<6>acc_release\012\000"
	.align	2
.LC40:
	.ascii	"drivers/usb/gadget/f_accessory.c\000"
	.section	.text.unlikely
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_release, %function
acc_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC39
	push	{r4, lr}
	.save {r4, lr}
	movt	r0, #:upper16:.LC39
	bl	printk
	movw	r2, #:lower16:.LANCHOR0
	movt	r2, #:upper16:.LANCHOR0
	ldr	r3, [r2, #824]
	add	r3, r3, #1632
	add	r3, r3, #12
	.syntax divided
@ 38 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
@ 111 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/processor.h" 1
	pld	[r3]
@ 0 "" 2
	.arm
	.syntax unified
	mov	r1, #0
	.syntax divided
@ 54 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/cmpxchg.h" 1
	@	__xchg4
1:	ldrex	r0, [r3]
	strex	ip, r1, [r3]
	teq	ip, #0
	bne	1b
@ 0 "" 2
@ 100 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r0, r1
	mov	r4, r2
	bne	.L992
	movw	r0, #:lower16:.LC40
	movw	r1, #799
	movt	r0, #:upper16:.LC40
	bl	warn_slowpath_null
.L992:
	ldr	r3, [r4, #824]
	mov	r0, #0
	ldrb	r2, [r3, #92]	@ zero_extendqisi2
	bfc	r2, #1, #1
	strb	r2, [r3, #92]
	pop	{r4, pc}
	.fnend
	.size	acc_release, .-acc_release
	.section	.rodata.str1.4
	.align	2
.LC41:
	.ascii	"<6>acc_open\012\000"
	.section	.text.unlikely
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_open, %function
acc_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC41
	push	{r4, lr}
	.save {r4, lr}
	movt	r0, #:upper16:.LC41
	mov	r4, r1
	bl	printk
	movw	r2, #:lower16:.LANCHOR0
	movt	r2, #:upper16:.LANCHOR0
	ldr	r3, [r2, #824]
	add	r3, r3, #1632
	add	r3, r3, #12
	.syntax divided
@ 38 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
@ 111 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/processor.h" 1
	pld	[r3]
@ 0 "" 2
	.arm
	.syntax unified
	mov	r0, #1
	.syntax divided
@ 54 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/cmpxchg.h" 1
	@	__xchg4
1:	ldrex	r1, [r3]
	strex	ip, r0, [r3]
	teq	ip, #0
	bne	1b
@ 0 "" 2
@ 100 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r1, #0
	bne	.L996
	ldr	r3, [r2, #824]
	mov	r0, r1
	ldrb	r2, [r3, #92]	@ zero_extendqisi2
	bfi	r2, r1, #1, #1
	strb	r2, [r3, #92]
	str	r3, [r4, #132]
	pop	{r4, pc}
.L996:
	mvn	r0, #15
	pop	{r4, pc}
	.fnend
	.size	acc_open, .-acc_open
	.section	.rodata.str1.4
	.align	2
.LC42:
	.ascii	"<6>%s: Close rndis QC file\000"
	.align	2
.LC43:
	.ascii	"<3>%s: rndis_qc_dev not present\012\000"
	.section	.text.unlikely
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_release_dev, %function
rndis_qc_release_dev:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, lr}
	.save {r4, r5, r6, lr}
	movw	r0, #:lower16:.LC42
	movw	r4, #:lower16:.LANCHOR0
	ldr	r1, .L1002
	movt	r0, #:upper16:.LC42
	movt	r4, #:upper16:.LANCHOR0
	bl	printk
	add	r0, r4, #828
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #832]
	mov	r5, r0
	cmp	r3, #0
	bne	.L999
	movw	r0, #:lower16:.LC43
	ldr	r1, .L1002
	movt	r0, #:upper16:.LC43
	bl	printk
	add	r0, r4, #828
	mov	r1, r5
	bl	_raw_spin_unlock_irqrestore
	mvn	r0, #18
	pop	{r4, r5, r6, pc}
.L999:
	add	r2, r3, #144
	.syntax divided
@ 83 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r1, [r2]
	sub	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	add	r0, r4, #828
	mov	r1, r5
	bl	_raw_spin_unlock_irqrestore
	mov	r0, #0
	pop	{r4, r5, r6, pc}
.L1003:
	.align	2
.L1002:
	.word	.LANCHOR2+352
	.fnend
	.size	rndis_qc_release_dev, .-rndis_qc_release_dev
	.section	.rodata.str1.4
	.align	2
.LC44:
	.ascii	"<6>%s: Open rndis QC driver\012\000"
	.align	2
.LC45:
	.ascii	"<3>%s: rndis_qc_dev not created yet\012\000"
	.align	2
.LC46:
	.ascii	"<6>%s: rndis QC file opened\012\000"
	.align	2
.LC47:
	.ascii	"<3>%s: Already opened\012\000"
	.section	.text.unlikely
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_open_dev, %function
rndis_qc_open_dev:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC44
	push	{r4, lr}
	.save {r4, lr}
	movt	r0, #:upper16:.LC44
	mov	r4, r1
	ldr	r1, .L1009
	bl	printk
	movw	r0, #:lower16:.LANCHOR0
	movt	r0, #:upper16:.LANCHOR0
	ldr	r3, [r0, #832]
	cmp	r3, #0
	bne	.L1005
	movw	r0, #:lower16:.LC45
	ldr	r1, .L1009
	movt	r0, #:upper16:.LC45
	bl	printk
	mvn	r0, #18
	pop	{r4, pc}
.L1005:
	add	r2, r3, #144
	.syntax divided
@ 60 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 111 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/processor.h" 1
	pld	[r2]
@ 0 "" 2
@ 63 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r1, [r2]
	add	r1, r1, #1
	strex	ip, r1, [r2]
	teq	ip, #0
	bne	1b
@ 0 "" 2
@ 73 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r1, #1
	bne	.L1007
	ldr	r3, [r0, #832]
	movw	r0, #:lower16:.LC46
	ldr	r1, .L1009
	movt	r0, #:upper16:.LC46
	str	r3, [r4, #132]
	bl	printk
	mov	r0, #0
	pop	{r4, pc}
.L1007:
	.syntax divided
@ 83 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r1, [r2]
	sub	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	r0, #:lower16:.LC47
	ldr	r1, .L1009
	movt	r0, #:upper16:.LC47
	bl	printk
	mvn	r0, #15
	pop	{r4, pc}
.L1010:
	.align	2
.L1009:
	.word	.LANCHOR2+376
	.fnend
	.size	rndis_qc_open_dev, .-rndis_qc_open_dev
	.section	.rodata.str1.4
	.align	2
.LC48:
	.ascii	"<6>mtp_release\012\000"
	.section	.text.unlikely
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mtp_release, %function
mtp_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC48
	push	{r4, lr}
	.save {r4, lr}
	movt	r0, #:upper16:.LC48
	bl	printk
	movw	r3, #:lower16:.LANCHOR0
	movt	r3, #:upper16:.LANCHOR0
	ldr	r3, [r3, #836]
	add	r2, r3, #100
	.syntax divided
@ 83 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r1, [r2]
	sub	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mov	r0, #0
	pop	{r4, pc}
	.fnend
	.size	mtp_release, .-mtp_release
	.section	.rodata.str1.4
	.align	2
.LC49:
	.ascii	"<6>mtp_open\012\000"
	.section	.text.unlikely
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mtp_open, %function
mtp_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC49
	push	{r4, lr}
	.save {r4, lr}
	movt	r0, #:upper16:.LC49
	mov	r4, r1
	bl	printk
	movw	r0, #:lower16:.LANCHOR0
	movt	r0, #:upper16:.LANCHOR0
	ldr	r3, [r0, #836]
	add	r2, r3, #100
	.syntax divided
@ 60 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 111 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/processor.h" 1
	pld	[r2]
@ 0 "" 2
@ 63 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r1, [r2]
	add	r1, r1, #1
	strex	ip, r1, [r2]
	teq	ip, #0
	bne	1b
@ 0 "" 2
@ 73 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r1, #1
	bne	.L1014
	ldr	r3, [r0, #836]
	ldr	r2, [r3, #96]
	cmp	r2, #0
	strne	r1, [r3, #96]
	b	.L1016
.L1014:
	.syntax divided
@ 83 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r1, [r2]
	sub	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mvn	r0, #15
	pop	{r4, pc}
.L1016:
	mov	r0, #0
	str	r3, [r4, #132]
	pop	{r4, pc}
	.fnend
	.size	mtp_open, .-mtp_open
	.section	.rodata.str1.4
	.align	2
.LC50:
	.ascii	"<3>CCID notify ep error %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_notify_complete, %function
ccid_notify_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r1, [r1, #44]
	cmp	r1, #0
	bne	.L1027
.L1019:
	bx	lr
.L1027:
	add	r3, r1, #108
	bics	r3, r3, #4
	beq	.L1019
	movw	r0, #:lower16:.LC50
	movt	r0, #:upper16:.LC50
	b	printk
	.fnend
	.size	ccid_notify_complete, .-ccid_notify_complete
	.section	.rodata.str1.4
	.align	2
.LC51:
	.ascii	"<3>%s: ctrl resp queue empty\000"
	.align	2
.LC52:
	.ascii	"gps ep0 enqueue err %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gps_setup, %function
gps_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r3, [r0, #112]
	ldr	r6, [r0, #120]
	ldrh	r2, [r1, #2]	@ unaligned
	ldrh	r7, [r1, #6]	@ unaligned
	cmp	r3, #0
	ldr	r5, [r6, #4]
	beq	.L1035
	ldrh	r3, [r1]	@ unaligned
	movw	r1, #8482
	mov	r4, r0
	rev16	r3, r3
	uxth	r3, r3
	cmp	r3, r1
	beq	.L1030
	movw	r1, #41217
	cmp	r3, r1
	beq	.L1031
	cmp	r3, #8448
	beq	.L1039
.L1037:
	mvn	r4, #94
.L1028:
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L1030:
	ldr	r3, [r0, #92]
	cmp	r3, #0
	beq	.L1040
	ldrb	r1, [r0, #104]	@ zero_extendqisi2
	mov	r8, #0
	blx	r3
	subs	r7, r7, r8
	movne	r7, #1
	b	.L1032
.L1039:
	movw	r3, #:lower16:gps_cmd_complete
	mov	r8, r7
	str	r0, [r5, #32]
	movt	r3, #:upper16:gps_cmd_complete
	mov	r7, #0
	str	r3, [r5, #28]
.L1032:
	ldrb	r3, [r5, #26]	@ zero_extendqisi2
	str	r8, [r5, #4]
	mov	r1, r5
	mov	r2, #32
	bfi	r3, r7, #1, #1
	strb	r3, [r5, #26]
	ldr	r3, [r6]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	bge	.L1028
	ldr	r0, [r6]
	movw	r1, #:lower16:.LC52
	mov	r2, r4
	movt	r1, #:upper16:.LC52
	add	r0, r0, #32
	bl	dev_err
	b	.L1028
.L1031:
	cmp	r2, #0
	bne	.L1037
	add	r8, r0, #124
	mov	r0, r8
	bl	_raw_spin_lock
	ldr	r9, [r4, #136]!
	cmp	r9, r4
	beq	.L1041
	ldrd	r2, [r9]
	mov	ip, #256
	mov	r1, #512
	mov	r0, r8
	mov	r4, r9
	str	r3, [r2, #4]
	str	r2, [r3]
	str	ip, [r9]
	str	r1, [r9, #4]
	bl	_raw_spin_unlock
	ldmdb	r9, {r1, r8}
	ldr	r0, [r5]
	cmp	r7, r8
	movcc	r8, r7
	mov	r2, r8
	bl	memcpy
	ldr	r0, [r4, #-8]!
	bl	kfree
	mov	r0, r4
	bl	kfree
	cmp	r8, r7
	movge	r7, #0
	movlt	r7, #1
	b	.L1032
.L1040:
	subs	r7, r7, #0
	mov	r8, r3
	movne	r7, #1
	b	.L1032
.L1035:
	mvn	r4, #106
	b	.L1028
.L1041:
	movw	r0, #:lower16:.LC51
	ldr	r1, .L1042
	mvn	r4, #94
	movt	r0, #:upper16:.LC51
	bl	printk
	mov	r0, r8
	bl	_raw_spin_unlock
	b	.L1028
.L1043:
	.align	2
.L1042:
	.word	.LANCHOR2+396
	.fnend
	.size	gps_setup, .-gps_setup
	.section	.rodata.str1.4
	.align	2
.LC53:
	.ascii	"<3>gps notify ep error %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gps_notify_complete, %function
gps_notify_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r1, [r1, #44]
	ldr	r5, [r4, #32]
	cmn	r1, #104
	beq	.L1045
	cmp	r1, #0
	beq	.L1046
	cmn	r1, #108
	bne	.L1047
.L1045:
	mov	r3, #0
	str	r3, [r5, #144]
.L1044:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L1047:
	movw	r0, #:lower16:.LC53
	movt	r0, #:upper16:.LC53
	bl	printk
.L1046:
	ldr	r3, [r5, #116]
	cmp	r3, #0
	beq	.L1044
	add	r6, r5, #144
	.syntax divided
@ 99 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 111 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/processor.h" 1
	pld	[r6]
@ 0 "" 2
@ 102 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 112 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L1044
	ldr	r0, [r5, #128]
	mov	r1, r4
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	beq	.L1044
	add	r7, r5, #124
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #136]
	add	r2, r5, #136
	mov	r4, r0
	cmp	r3, r2
	beq	.L1051
	.syntax divided
@ 83 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r2, [r6]
	sub	r2, r2, #1
	strex	r1, r2, [r6]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	ldm	r3, {r1, r2}
	mov	ip, #256
	mov	r0, #512
	mov	r5, r3
	str	r2, [r1, #4]
	str	r1, [r2]
	str	ip, [r3]
	str	r0, [r3, #4]
	ldr	r0, [r5, #-8]!
	bl	kfree
	mov	r0, r5
	bl	kfree
.L1051:
	mov	r1, r4
	mov	r0, r7
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore
	.fnend
	.size	gps_notify_complete, .-gps_notify_complete
	.section	.rodata.str1.4
	.align	2
.LC54:
	.ascii	"<3>ctrl resp queue empty  req%02x.%02x v%04x i%04x "
	.ascii	"l%d\012\000"
	.align	2
.LC55:
	.ascii	"rmnet ep0 enqueue err %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	frmnet_setup, %function
frmnet_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r3, [r0, #112]
	.pad #12
	sub	sp, sp, #12
	ldr	r7, [r0, #120]
	ldrh	r9, [r1, #2]	@ unaligned
	ldrh	r8, [r1, #6]	@ unaligned
	cmp	r3, #0
	ldr	r6, [r7, #4]
	beq	.L1072
	ldrh	ip, [r1]	@ unaligned
	movw	r3, #8482
	mov	r4, r0
	mov	r5, r1
	rev16	ip, ip
	uxth	ip, ip
	cmp	ip, r3
	beq	.L1067
	movw	r3, #41217
	cmp	ip, r3
	beq	.L1068
	cmp	ip, #8448
	beq	.L1076
.L1074:
	mvn	r4, #94
.L1065:
	mov	r0, r4
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L1067:
	ldr	r10, [r0, #92]
	cmp	r10, #0
	beq	.L1077
	ldrb	r1, [r0, #108]	@ zero_extendqisi2
	movw	r3, #:lower16:.LANCHOR0
	mov	r2, r9
	movt	r3, #:upper16:.LANCHOR0
	mov	r5, #0
	add	r1, r1, r1, lsl #1
	add	r3, r3, r1, lsl #3
	ldrb	r1, [r3, #232]	@ zero_extendqisi2
	blx	r10
	subs	r8, r8, r5
	movne	r8, #1
	b	.L1069
.L1076:
	movw	r3, #:lower16:frmnet_cmd_complete
	mov	r5, r8
	str	r0, [r6, #32]
	movt	r3, #:upper16:frmnet_cmd_complete
	mov	r8, #0
	str	r3, [r6, #28]
.L1069:
	ldrb	r3, [r6, #26]	@ zero_extendqisi2
	str	r5, [r6, #4]
	mov	r1, r6
	mov	r2, #32
	bfi	r3, r8, #1, #1
	strb	r3, [r6, #26]
	ldr	r3, [r7]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	bge	.L1065
	ldr	r0, [r7]
	movw	r1, #:lower16:.LC55
	mov	r2, r4
	movt	r1, #:upper16:.LC55
	add	r0, r0, #32
	bl	dev_err
	b	.L1065
.L1068:
	cmp	r9, #0
	bne	.L1074
	add	r10, r0, #124
	ldrh	fp, [r1, #4]	@ unaligned
	mov	r0, r10
	bl	_raw_spin_lock
	mov	r0, r4
	ldr	r4, [r0, #136]!
	cmp	r4, r0
	beq	.L1078
	ldrd	r2, [r4]
	mov	ip, #256
	mov	r1, #512
	mov	r0, r10
	mov	r9, r4
	str	r3, [r2, #4]
	str	r2, [r3]
	str	ip, [r4]
	str	r1, [r4, #4]
	bl	_raw_spin_unlock
	ldmdb	r4, {r1, r5}
	ldr	r0, [r6]
	cmp	r8, r5
	movcc	r5, r8
	mov	r2, r5
	bl	memcpy
	ldr	r0, [r9, #-8]!
	bl	kfree
	mov	r0, r9
	bl	kfree
	cmp	r5, r8
	movge	r8, #0
	movlt	r8, #1
	b	.L1069
.L1077:
	subs	r8, r8, #0
	mov	r5, r10
	movne	r8, #1
	b	.L1069
.L1072:
	mvn	r4, #106
	b	.L1065
.L1078:
	movw	r0, #:lower16:.LC54
	mov	r3, r9
	str	fp, [sp]
	movt	r0, #:upper16:.LC54
	str	r8, [sp, #4]
	ldrb	r2, [r5, #1]	@ zero_extendqisi2
	ldrb	r1, [r5]	@ zero_extendqisi2
	mvn	r4, #94
	bl	printk
	mov	r0, r10
	bl	_raw_spin_unlock
	b	.L1065
	.fnend
	.size	frmnet_setup, .-frmnet_setup
	.section	.rodata.str1.4
	.align	2
.LC56:
	.ascii	"<3>rmnet notify ep error %d\012\000"
	.align	2
.LC57:
	.ascii	"<3>%s: Invalid notify_count=%lu to decrement\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	frmnet_notify_complete, %function
frmnet_notify_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r1, [r1, #44]
	ldr	r6, [r4, #32]
	cmp	r1, #0
	bne	.L1098
.L1080:
	ldr	r3, [r6, #116]
	cmp	r3, #0
	bne	.L1099
.L1079:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L1098:
	bgt	.L1081
	add	r3, r1, #108
	bics	r5, r3, #4
	beq	.L1100
.L1081:
	movw	r0, #:lower16:.LC56
	movt	r0, #:upper16:.LC56
	bl	printk
	b	.L1080
.L1100:
	add	r4, r6, #124
	mov	r0, r4
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	mov	r0, r4
	str	r5, [r6, #144]
.L1096:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock_irqrestore
.L1099:
	add	r5, r6, #124
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r6, #144]
	mov	r1, r0
	cmp	r3, #0
	beq	.L1097
	sub	r3, r3, #1
	mov	r0, r5
	cmp	r3, #0
	str	r3, [r6, #144]
	beq	.L1096
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, [r6, #128]
	mov	r1, r4
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	beq	.L1079
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	mov	r2, r6
	mov	r4, r0
	ldr	r3, [r2, #136]!
	cmp	r3, r2
	beq	.L1087
	ldr	r2, [r6, #144]
	cmp	r2, #0
	beq	.L1088
	sub	r2, r2, #1
	mov	ip, #256
	mov	r0, #512
	str	r2, [r6, #144]
	ldm	r3, {r1, r2}
	mov	r6, r3
	str	r2, [r1, #4]
	str	r1, [r2]
	str	ip, [r3]
	str	r0, [r3, #4]
	ldr	r0, [r6, #-8]!
	bl	kfree
	mov	r0, r6
	bl	kfree
.L1087:
	mov	r1, r4
.L1097:
	mov	r0, r5
	b	.L1096
.L1088:
	movw	r0, #:lower16:.LC57
	ldr	r1, .L1101
	movt	r0, #:upper16:.LC57
	bl	printk
	b	.L1087
.L1102:
	.align	2
.L1101:
	.word	.LANCHOR2+408
	.fnend
	.size	frmnet_notify_complete, .-frmnet_notify_complete
	.section	.rodata.str1.4
	.align	2
.LC58:
	.ascii	"<3>%s: response queue error: %d\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_function_ctrlrequest, %function
mbim_function_ctrlrequest:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r1, [r1, #12]
	ldrh	ip, [r2, #4]	@ unaligned
	ldrh	r5, [r2, #6]	@ unaligned
	cmp	r1, #0
	bne	.L1112
	movw	r1, #:lower16:.LANCHOR1
	movt	r1, #:upper16:.LANCHOR1
	ldrb	r0, [r1, #190]	@ zero_extendqisi2
	cmp	r0, #0
	beq	.L1112
	ldrb	r3, [r2]	@ zero_extendqisi2
	ldrb	r0, [r2, #1]	@ zero_extendqisi2
	cmp	r3, #128
	beq	.L1114
	cmp	r3, #192
	cmpeq	r0, #165
	moveq	r3, #1
	movne	r3, #0
	cmp	ip, #4
	movne	r3, #0
	andeq	r3, r3, #1
	cmp	r3, #0
	beq	.L1112
	ldr	r3, [r4, #4]
	cmp	r5, #40
	add	r1, r1, #164
	movcc	r6, r5
	movcs	r6, #40
	mov	r2, r6
	ldr	r0, [r3]
	bl	memcpy
.L1106:
	ldr	r3, [r4, #4]
	cmp	r5, r6
	mov	r2, #32
	movle	r5, #0
	movgt	r5, #1
	ldrb	r1, [r3, #26]	@ zero_extendqisi2
	bfi	r1, r5, #1, #1
	strb	r1, [r3, #26]
	ldr	r3, [r4, #4]
	str	r6, [r3, #4]
	ldr	r3, [r4]
	ldr	r1, [r4, #4]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	blt	.L1115
.L1103:
	mov	r0, r6
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L1114:
	cmp	r0, #6
	beq	.L1116
.L1112:
	mvn	r6, #94
	b	.L1103
.L1116:
	ldrh	r3, [r2, #2]	@ unaligned
	lsr	r2, r3, #8
	cmp	r2, #3
	bne	.L1112
	uxtb	r3, r3
	cmp	r3, #238
	bne	.L1112
	ldr	r3, [r4, #4]
	cmp	r5, #18
	add	r1, r1, #204
	movcc	r6, r5
	movcs	r6, #18
	mov	r2, r6
	ldr	r0, [r3]
	bl	memcpy
	b	.L1106
.L1115:
	movw	r0, #:lower16:.LC58
	ldr	r1, .L1117
	movt	r0, #:upper16:.LC58
	bl	printk
	b	.L1103
.L1118:
	.align	2
.L1117:
	.word	.LANCHOR2+432
	.fnend
	.size	mbim_function_ctrlrequest, .-mbim_function_ctrlrequest
	.section	.rodata.str1.4
	.align	2
.LC59:
	.ascii	"<6>%s: Close mbim file\000"
	.section	.text.unlikely
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_release, %function
mbim_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC59
	push	{r4, lr}
	.save {r4, lr}
	ldr	r1, .L1121
	movt	r0, #:upper16:.LC59
	bl	printk
	movw	r3, #:lower16:.LANCHOR0
	movt	r3, #:upper16:.LANCHOR0
	ldr	r3, [r3, #840]
	add	r2, r3, #84
	.syntax divided
@ 83 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r1, [r2]
	sub	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mov	r0, #0
	pop	{r4, pc}
.L1122:
	.align	2
.L1121:
	.word	.LANCHOR2+452
	.fnend
	.size	mbim_release, .-mbim_release
	.section	.rodata.str1.4
	.align	2
.LC60:
	.ascii	"<6>%s: Open mbim driver\012\000"
	.align	2
.LC61:
	.ascii	"<3>%s: mbim_dev not created yet\012\000"
	.align	2
.LC62:
	.ascii	"<6>%s: Lock mbim_dev->open_excl for open\012\000"
	.align	2
.LC63:
	.ascii	"<3>%s: USB cable not connected\012\000"
	.align	2
.LC64:
	.ascii	"<6>%s: Exit, mbim file opened\012\000"
	.section	.text.unlikely
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_open, %function
mbim_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC60
	push	{r4, r5, r6, lr}
	.save {r4, r5, r6, lr}
	movt	r0, #:upper16:.LC60
	mov	r5, r1
	ldr	r1, .L1130
	bl	printk
	movw	r2, #:lower16:.LANCHOR0
	movt	r2, #:upper16:.LANCHOR0
	ldr	r3, [r2, #840]
	cmp	r3, #0
	bne	.L1124
	movw	r0, #:lower16:.LC61
	ldr	r1, .L1130
	movt	r0, #:upper16:.LC61
	bl	printk
	mvn	r0, #18
	pop	{r4, r5, r6, pc}
.L1124:
	mov	r4, r2
	add	r2, r3, #84
	.syntax divided
@ 60 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 111 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/processor.h" 1
	pld	[r2]
@ 0 "" 2
@ 63 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r1, [r2]
	add	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
@ 73 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r1, #1
	bne	.L1126
	movw	r0, #:lower16:.LC62
	ldr	r1, .L1130
	movt	r0, #:upper16:.LC62
	bl	printk
	ldr	r3, [r4, #840]
	ldr	r3, [r3, #80]
	cmp	r3, #0
	bne	.L1128
	movw	r0, #:lower16:.LC63
	ldr	r1, .L1130
	movt	r0, #:upper16:.LC63
	bl	printk
	b	.L1128
.L1126:
	.syntax divided
@ 83 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r1, [r2]
	sub	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	r0, #:lower16:.LC47
	ldr	r1, .L1130
	movt	r0, #:upper16:.LC47
	bl	printk
	mvn	r0, #15
	pop	{r4, r5, r6, pc}
.L1128:
	ldr	r3, [r4, #840]
	mov	r4, #0
	movw	r0, #:lower16:.LC64
	ldr	r1, .L1130
	movt	r0, #:upper16:.LC64
	str	r3, [r5, #132]
	str	r4, [r3, #224]
	bl	printk
	mov	r0, r4
	pop	{r4, r5, r6, pc}
.L1131:
	.align	2
.L1130:
	.word	.LANCHOR2+468
	.fnend
	.size	mbim_open, .-mbim_open
	.section	.rodata.str1.4
	.align	2
.LC65:
	.ascii	"<3>%s: port:%pK port#%d unable to open sdio ch:%s\012"
	.ascii	"\000"
	.section	.text.unlikely
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_open_work, %function
gsdio_open_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	mov	r3, r0
	str	lr, [sp, #-4]!
	.save {lr}
	ldr	ip, [r3, #-4]
	.pad #12
	sub	sp, sp, #12
	sub	r2, r3, #124
	ldr	r1, .L1134
	movw	r0, #:lower16:.LC65
	ldr	r3, [r3, #-124]
	movt	r0, #:upper16:.LC65
	ldr	ip, [ip]
	str	ip, [sp]
	bl	printk
	add	sp, sp, #12
	@ sp needed
	ldr	pc, [sp], #4
.L1135:
	.align	2
.L1134:
	.word	.LANCHOR2+480
	.fnend
	.size	gsdio_open_work, .-gsdio_open_work
	.section	.rodata.str1.4
	.align	2
.LC66:
	.ascii	"%d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	remote_wakeup_show, %function
remote_wakeup_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	bl	dev_get_drvdata
	mov	r3, r0
	ldr	r0, [r0, #204]
	cmp	r0, #0
	beq	.L1136
	ldr	r3, [r3, #196]
	movw	r2, #:lower16:.LC66
	mov	r0, r4
	movt	r2, #:upper16:.LC66
	mov	r1, #4096
	ldrb	r3, [r3, #-98]	@ zero_extendqisi2
	ubfx	r3, r3, #5, #1
	bl	snprintf
	mov	r0, #2
.L1136:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	remote_wakeup_show, .-remote_wakeup_show
	.section	.rodata.str1.4
	.align	2
.LC67:
	.ascii	"CONFIGURED\000"
	.align	2
.LC68:
	.ascii	"DISCONNECTED\000"
	.align	2
.LC69:
	.ascii	"CONNECTED\000"
	.align	2
.LC70:
	.ascii	"%s\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	state_show, %function
state_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r2
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	dev_get_drvdata
	ldr	r6, [r0, #8]
	cmp	r6, #0
	beq	.L1145
	add	r7, r6, #60
	mov	r4, r0
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r6, #12]
	mov	r1, r0
	cmp	r3, #0
	movwne	r4, #:lower16:.LC67
	movtne	r4, #:upper16:.LC67
	beq	.L1149
.L1144:
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
.L1143:
	movw	r2, #:lower16:.LC70
	mov	r3, r4
	ldrd	r6, [sp, #8]
	mov	r0, r5
	movt	r2, #:upper16:.LC70
	ldrd	r4, [sp]
	mov	r1, #4096
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	snprintf
.L1149:
	ldrb	r2, [r4, #52]	@ zero_extendqisi2
	movw	r3, #:lower16:.LC69
	movw	r4, #:lower16:.LC68
	movt	r3, #:upper16:.LC69
	movt	r4, #:upper16:.LC68
	cmp	r2, #0
	movne	r4, r3
	b	.L1144
.L1145:
	movw	r4, #:lower16:.LC68
	movt	r4, #:upper16:.LC68
	b	.L1143
	.fnend
	.size	state_show, .-state_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	pm_qos_show, %function
pm_qos_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	bl	dev_get_drvdata
	mov	r3, r0
	movw	r2, #:lower16:.LC70
	ldr	lr, [sp, #4]
	mov	r0, r4
	add	r3, r3, #56
	ldr	r4, [sp]
	movt	r2, #:upper16:.LC70
	mov	r1, #4096
	add	sp, sp, #8
	b	snprintf
	.fnend
	.size	pm_qos_show, .-pm_qos_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	enable_show, %function
enable_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	bl	dev_get_drvdata
	mov	r3, r0
	movw	r2, #:lower16:.LC66
	mov	r0, r4
	ldrb	r3, [r3, #16]	@ zero_extendqisi2
	movt	r2, #:upper16:.LC66
	mov	r1, #4096
	bl	snprintf
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, #2
	ldr	pc, [sp], #4
	.fnend
	.size	enable_show, .-enable_show
	.section	.rodata.str1.4
	.align	2
.LC71:
	.ascii	"%s\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	iSerial_show, %function
iSerial_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, r2
	movw	r2, #:lower16:.LC71
	ldr	r3, .L1155
	movt	r2, #:upper16:.LC71
	mov	r1, #4096
	b	snprintf
.L1156:
	.align	2
.L1155:
	.word	.LANCHOR0+844
	.fnend
	.size	iSerial_show, .-iSerial_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	iProduct_show, %function
iProduct_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, r2
	movw	r2, #:lower16:.LC71
	ldr	r3, .L1158
	movt	r2, #:upper16:.LC71
	mov	r1, #4096
	b	snprintf
.L1159:
	.align	2
.L1158:
	.word	.LANCHOR0+1100
	.fnend
	.size	iProduct_show, .-iProduct_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	iManufacturer_show, %function
iManufacturer_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, r2
	movw	r2, #:lower16:.LC71
	ldr	r3, .L1161
	movt	r2, #:upper16:.LC71
	mov	r1, #4096
	b	snprintf
.L1162:
	.align	2
.L1161:
	.word	.LANCHOR0+1356
	.fnend
	.size	iManufacturer_show, .-iManufacturer_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bDeviceProtocol_show, %function
bDeviceProtocol_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	mov	r0, r2
	movt	r3, #:upper16:.LANCHOR1
	movw	r2, #:lower16:.LC66
	ldrb	r3, [r3, #230]	@ zero_extendqisi2
	movt	r2, #:upper16:.LC66
	mov	r1, #4096
	b	snprintf
	.fnend
	.size	bDeviceProtocol_show, .-bDeviceProtocol_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bDeviceSubClass_show, %function
bDeviceSubClass_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	mov	r0, r2
	movt	r3, #:upper16:.LANCHOR1
	movw	r2, #:lower16:.LC66
	ldrb	r3, [r3, #229]	@ zero_extendqisi2
	movt	r2, #:upper16:.LC66
	mov	r1, #4096
	b	snprintf
	.fnend
	.size	bDeviceSubClass_show, .-bDeviceSubClass_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bDeviceClass_show, %function
bDeviceClass_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	mov	r0, r2
	movt	r3, #:upper16:.LANCHOR1
	movw	r2, #:lower16:.LC66
	ldrb	r3, [r3, #228]	@ zero_extendqisi2
	movt	r2, #:upper16:.LC66
	mov	r1, #4096
	b	snprintf
	.fnend
	.size	bDeviceClass_show, .-bDeviceClass_show
	.section	.rodata.str1.4
	.align	2
.LC72:
	.ascii	"%04x\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bcdDevice_show, %function
bcdDevice_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	mov	r0, r2
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movt	r3, #:upper16:.LANCHOR1
	movw	r2, #:lower16:.LC72
	str	lr, [sp, #4]
	movt	r2, #:upper16:.LC72
	ldrh	r3, [r3, #236]
	mov	r1, #4096
	bl	snprintf
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, #5
	ldr	pc, [sp], #4
	.fnend
	.size	bcdDevice_show, .-bcdDevice_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	idProduct_show, %function
idProduct_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	mov	r0, r2
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movt	r3, #:upper16:.LANCHOR1
	movw	r2, #:lower16:.LC72
	str	lr, [sp, #4]
	movt	r2, #:upper16:.LC72
	ldrh	r3, [r3, #234]
	mov	r1, #4096
	bl	snprintf
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, #5
	ldr	pc, [sp], #4
	.fnend
	.size	idProduct_show, .-idProduct_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	idVendor_show, %function
idVendor_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	mov	r0, r2
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movt	r3, #:upper16:.LANCHOR1
	movw	r2, #:lower16:.LC72
	str	lr, [sp, #4]
	movt	r2, #:upper16:.LC72
	ldrh	r3, [r3, #232]
	mov	r1, #4096
	bl	snprintf
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, #5
	ldr	pc, [sp], #4
	.fnend
	.size	idVendor_show, .-idVendor_show
	.section	.rodata.str1.4
	.align	2
.LC73:
	.ascii	"%d %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_source_pcm_show, %function
audio_source_pcm_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	.pad #8
	sub	sp, sp, #8
	bl	dev_get_drvdata
	ldr	ip, [r0, #4]
	movw	r2, #:lower16:.LC73
	mov	r1, #4096
	movt	r2, #:upper16:.LC73
	mov	r0, r4
	ldm	ip, {r3, ip}
	str	ip, [sp]
	bl	snprintf
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	audio_source_pcm_show, .-audio_source_pcm_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mass_storage_inquiry_show, %function
mass_storage_inquiry_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	bl	dev_get_drvdata
	ldr	r3, [r0, #4]
	movw	r2, #:lower16:.LC70
	mov	r0, r4
	movt	r2, #:upper16:.LC70
	mov	r1, #4096
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	ldr	r3, [r3, #96]
	add	r3, r3, #180
	b	snprintf
	.fnend
	.size	mass_storage_inquiry_show, .-mass_storage_inquiry_show
	.section	.rodata.str1.4
	.align	2
.LC74:
	.ascii	"%02x:%02x:%02x:%02x:%02x:%02x\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_ethaddr_show, %function
ncm_ethaddr_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	.pad #24
	sub	sp, sp, #24
	bl	dev_get_drvdata
	ldr	ip, [r0, #4]
	movw	r2, #:lower16:.LC74
	mov	r1, #4096
	movt	r2, #:upper16:.LC74
	mov	r0, r4
	ldrb	lr, [ip, #5]	@ zero_extendqisi2
	ldrb	r3, [ip]	@ zero_extendqisi2
	str	lr, [sp, #16]
	ldrb	lr, [ip, #4]	@ zero_extendqisi2
	str	lr, [sp, #12]
	ldrb	lr, [ip, #3]	@ zero_extendqisi2
	str	lr, [sp, #8]
	ldrb	lr, [ip, #2]	@ zero_extendqisi2
	str	lr, [sp, #4]
	ldrb	ip, [ip, #1]	@ zero_extendqisi2
	str	ip, [sp]
	bl	snprintf
	mov	r0, #18
	add	sp, sp, #24
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	ncm_ethaddr_show, .-ncm_ethaddr_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_ethaddr_show, %function
ecm_ethaddr_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	.pad #24
	sub	sp, sp, #24
	bl	dev_get_drvdata
	ldr	ip, [r0, #4]
	movw	r2, #:lower16:.LC74
	mov	r1, #4096
	movt	r2, #:upper16:.LC74
	mov	r0, r4
	ldrb	lr, [ip, #5]	@ zero_extendqisi2
	ldrb	r3, [ip]	@ zero_extendqisi2
	str	lr, [sp, #16]
	ldrb	lr, [ip, #4]	@ zero_extendqisi2
	str	lr, [sp, #12]
	ldrb	lr, [ip, #3]	@ zero_extendqisi2
	str	lr, [sp, #8]
	ldrb	lr, [ip, #2]	@ zero_extendqisi2
	str	lr, [sp, #4]
	ldrb	ip, [ip, #1]	@ zero_extendqisi2
	str	ip, [sp]
	bl	snprintf
	mov	r0, #18
	add	sp, sp, #24
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	ecm_ethaddr_show, .-ecm_ethaddr_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_transports_show, %function
ecm_transports_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, r2
	movw	r2, #:lower16:.LC70
	ldr	r3, .L1181
	movt	r2, #:upper16:.LC70
	mov	r1, #4096
	b	snprintf
.L1182:
	.align	2
.L1181:
	.word	.LANCHOR0+1612
	.fnend
	.size	ecm_transports_show, .-ecm_transports_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_max_pkt_per_xfer_show, %function
rndis_max_pkt_per_xfer_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	bl	dev_get_drvdata
	ldr	r3, [r0, #4]
	movw	r2, #:lower16:.LC66
	mov	r0, r4
	movt	r2, #:upper16:.LC66
	mov	r1, #4096
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	ldrb	r3, [r3, #12]	@ zero_extendqisi2
	b	snprintf
	.fnend
	.size	rndis_max_pkt_per_xfer_show, .-rndis_max_pkt_per_xfer_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_vendorID_show, %function
rndis_vendorID_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	bl	dev_get_drvdata
	ldr	r3, [r0, #4]
	movw	r2, #:lower16:.LC72
	mov	r0, r4
	movt	r2, #:upper16:.LC72
	mov	r1, #4096
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	ldr	r3, [r3, #8]
	b	snprintf
	.fnend
	.size	rndis_vendorID_show, .-rndis_vendorID_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_ethaddr_show, %function
rndis_ethaddr_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	.pad #24
	sub	sp, sp, #24
	bl	dev_get_drvdata
	ldr	ip, [r0, #4]
	movw	r2, #:lower16:.LC74
	mov	r1, #4096
	movt	r2, #:upper16:.LC74
	mov	r0, r4
	ldrb	lr, [ip, #5]	@ zero_extendqisi2
	ldrb	r3, [ip]	@ zero_extendqisi2
	str	lr, [sp, #16]
	ldrb	lr, [ip, #4]	@ zero_extendqisi2
	str	lr, [sp, #12]
	ldrb	lr, [ip, #3]	@ zero_extendqisi2
	str	lr, [sp, #8]
	ldrb	lr, [ip, #2]	@ zero_extendqisi2
	str	lr, [sp, #4]
	ldrb	ip, [ip, #1]	@ zero_extendqisi2
	str	ip, [sp]
	bl	snprintf
	mov	r0, #18
	add	sp, sp, #24
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	rndis_ethaddr_show, .-rndis_ethaddr_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_wceis_show, %function
rndis_wceis_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	bl	dev_get_drvdata
	ldr	r3, [r0, #4]
	movw	r2, #:lower16:.LC66
	mov	r0, r4
	movt	r2, #:upper16:.LC66
	mov	r1, #4096
	ldrb	r3, [r3, #269]	@ zero_extendqisi2
	bl	snprintf
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, #2
	ldr	pc, [sp], #4
	.fnend
	.size	rndis_wceis_show, .-rndis_wceis_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_manufacturer_show, %function
rndis_manufacturer_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	bl	dev_get_drvdata
	ldr	r3, [r0, #4]
	movw	r2, #:lower16:.LC70
	mov	r0, r4
	movt	r2, #:upper16:.LC70
	mov	r1, #4096
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	add	r3, r3, #13
	b	snprintf
	.fnend
	.size	rndis_manufacturer_show, .-rndis_manufacturer_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	serial_xport_names_show, %function
serial_xport_names_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, r2
	movw	r2, #:lower16:.LC70
	ldr	r3, .L1194
	movt	r2, #:upper16:.LC70
	mov	r1, #4096
	b	snprintf
.L1195:
	.align	2
.L1194:
	.word	.LANCHOR0+1664
	.fnend
	.size	serial_xport_names_show, .-serial_xport_names_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_xport_names_show, %function
rmnet_xport_names_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, r2
	movw	r2, #:lower16:.LC70
	ldr	r3, .L1197
	movt	r2, #:upper16:.LC70
	mov	r1, #4096
	b	snprintf
.L1198:
	.align	2
.L1197:
	.word	.LANCHOR0+1696
	.fnend
	.size	rmnet_xport_names_show, .-rmnet_xport_names_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_transports_show, %function
rmnet_transports_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, r2
	movw	r2, #:lower16:.LC70
	ldr	r3, .L1200
	movt	r2, #:upper16:.LC70
	mov	r1, #4096
	b	snprintf
.L1201:
	.align	2
.L1200:
	.word	.LANCHOR0+1748
	.fnend
	.size	rmnet_transports_show, .-rmnet_transports_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_transports_show, %function
mbim_transports_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, r2
	movw	r2, #:lower16:.LC70
	ldr	r3, .L1203
	movt	r2, #:upper16:.LC70
	mov	r1, #4096
	b	snprintf
.L1204:
	.align	2
.L1203:
	.word	.LANCHOR0+1800
	.fnend
	.size	mbim_transports_show, .-mbim_transports_show
	.section	.rodata.str1.4
	.align	2
.LC75:
	.ascii	"common->fsg is NULL in %s at %u\012\000"
	.align	2
.LC76:
	.ascii	"drivers/usb/gadget/f_mass_storage.c\000"
	.align	2
.LC77:
	.ascii	"error in submission: %s --> %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	start_out_transfer, %function
start_out_transfer:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r0, #8]
	cmp	r4, #0
	beq	.L1206
	ldr	r0, [r4, #80]
	mov	r5, r1
	ldr	r7, [r1, #24]
	ldr	r6, [r4, #96]
	add	r0, r0, #44
	bl	_raw_spin_lock_irq
	mov	r3, #1
	mov	r2, #2
	str	r2, [r5, #4]
	str	r3, [r5, #28]
	ldr	r0, [r4, #80]
	add	r0, r0, #44
	bl	_raw_spin_unlock_irq
	ldr	r3, [r6, #8]
	mov	r1, r7
	mov	r0, r6
	mov	r2, #208
	ldr	r3, [r3, #16]
	blx	r3
	subs	r3, r0, #0
	beq	.L1218
	mov	r2, #0
	cmn	r3, #108
	str	r2, [r5, #4]
	str	r2, [r5, #28]
	beq	.L1218
	cmn	r3, #95
	bne	.L1210
	ldr	r2, [r7, #4]
	cmp	r2, #0
	bne	.L1210
.L1218:
	mov	r0, #1
.L1208:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L1210:
	ldr	r0, [r4, #76]
	movw	r1, #:lower16:.LC77
	movt	r1, #:upper16:.LC77
	ldr	r2, [r6, #4]
	add	r0, r0, #32
	bl	dev_warn
	b	.L1218
.L1206:
	ldr	r0, [r0]
	movw	r1, #:lower16:.LC75
	mov	r3, #716
	ldr	r2, .L1219
	movt	r1, #:upper16:.LC75
	add	r0, r0, #32
	bl	dev_err
	movw	r0, #:lower16:.LC76
	movw	r1, #461
	movt	r0, #:upper16:.LC76
	bl	warn_slowpath_null
	mov	r0, r4
	b	.L1208
.L1220:
	.align	2
.L1219:
	.word	.LANCHOR2+496
	.fnend
	.size	start_out_transfer, .-start_out_transfer
	.section	.rodata.str1.4
	.align	2
.LC78:
	.ascii	"delayed status mismatch..resetting\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	composite_disconnect, %function
composite_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	add	r0, r0, #32
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	dev_get_drvdata
	add	r6, r0, #60
	mov	r8, r0
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r8, #12]
	mov	r5, r0
	cmp	r3, #0
	beq	.L1222
	ldr	r4, [r3, #36]!
	cmp	r4, r3
	sub	r4, r4, #64
	beq	.L1223
	mov	r7, #0
.L1226:
	ldr	r3, [r4, #40]
	mov	r0, r4
	cmp	r3, #0
	streq	r3, [r4, #72]
	beq	.L1239
	blx	r3
	str	r7, [r4, #72]
.L1239:
	ldr	r3, [r8, #12]
	ldr	r4, [r4, #64]
	add	r3, r3, #36
	cmp	r4, r3
	sub	r4, r4, #64
	bne	.L1226
.L1223:
	movw	r3, #:lower16:.LANCHOR0
	mov	r2, #0
	movt	r3, #:upper16:.LANCHOR0
	ldr	r3, [r3, #396]
	str	r2, [r8, #12]
	str	r2, [r8, #56]
	ldr	r3, [r3, #32]
	cmp	r3, r2
	beq	.L1228
.L1227:
	mov	r0, r8
	blx	r3
.L1229:
	ldr	r3, [r8, #56]
	cmp	r3, #0
	bne	.L1240
.L1228:
	mov	r1, r5
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore
.L1240:
	ldr	r0, [r8]
	movw	r1, #:lower16:.LC78
	movt	r1, #:upper16:.LC78
	add	r0, r0, #32
	bl	_dev_info
	mov	r3, #0
	str	r3, [r8, #56]
	b	.L1228
.L1222:
	movw	r3, #:lower16:.LANCHOR0
	movt	r3, #:upper16:.LANCHOR0
	ldr	r3, [r3, #396]
	ldr	r3, [r3, #32]
	cmp	r3, #0
	bne	.L1227
	b	.L1229
	.fnend
	.size	composite_disconnect, .-composite_disconnect
	.section	.rodata.str1.4
	.align	2
.LC79:
	.ascii	"rmnet %s response error %d, %d/%d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_response_complete, %function
rmnet_sdio_response_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r1, #44]
	cmp	r3, #0
	bxeq	lr
	mov	r2, r1
	add	r1, r3, #108
	bics	r1, r1, #4
	bxeq	lr
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r1, #:lower16:.LC79
	str	lr, [sp, #4]
	ldr	ip, [r2, #4]
	.pad #8
	sub	sp, sp, #8
	ldr	r4, [r2, #32]
	movt	r1, #:upper16:.LC79
	ldr	lr, [r2, #48]
	ldr	r2, [r0, #4]
	ldr	r0, [r4, #76]
	ldr	r0, [r0]
	str	lr, [sp]
	str	ip, [sp, #4]
	add	r0, r0, #32
	bl	_dev_info
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	rmnet_sdio_response_complete, .-rmnet_sdio_response_complete
	.section	.rodata.str1.4
	.align	2
.LC80:
	.ascii	"rmnet_mux %s response error %d, %d/%d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_response_complete, %function
rmnet_mux_response_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r1, #44]
	cmp	r3, #0
	bxeq	lr
	mov	r2, r1
	add	r1, r3, #108
	bics	r1, r1, #4
	bxeq	lr
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r1, #:lower16:.LC80
	str	lr, [sp, #4]
	ldr	ip, [r2, #4]
	.pad #8
	sub	sp, sp, #8
	ldr	r4, [r2, #32]
	movt	r1, #:upper16:.LC80
	ldr	lr, [r2, #48]
	ldr	r2, [r0, #4]
	ldr	r0, [r4, #76]
	ldr	r0, [r0]
	str	lr, [sp]
	str	ip, [sp, #4]
	add	r0, r0, #32
	bl	_dev_info
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	rmnet_mux_response_complete, .-rmnet_mux_response_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	composite_show_suspended, %function
composite_show_suspended:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	bl	dev_get_drvdata
	ldrb	r2, [r0, #16]	@ zero_extendqisi2
	movw	r1, #:lower16:.LC66
	mov	r0, r4
	movt	r1, #:upper16:.LC66
	and	r2, r2, #1
	bl	sprintf
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, #2
	ldr	pc, [sp], #4
	.fnend
	.size	composite_show_suspended, .-composite_show_suspended
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	midi_alsa_show, %function
midi_alsa_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	bl	dev_get_drvdata
	ldr	r3, [r0, #4]
	movw	r1, #:lower16:.LC73
	mov	r0, r4
	movt	r1, #:upper16:.LC73
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	ldrd	r2, [r3]
	b	sprintf
	.fnend
	.size	midi_alsa_show, .-midi_alsa_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_show_ro, %function
fsg_show_ro:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	mov	r3, r0
	mov	r0, r2
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	ldr	r2, [r3, #-48]
	movw	r1, #:lower16:.LC66
	movt	r1, #:upper16:.LC66
	cmp	r2, #0
	ldrb	r2, [r3, #-24]	@ zero_extendqisi2
	ubfxne	r2, r2, #1, #1
	andeq	r2, r2, #1
	bl	sprintf
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, #2
	ldr	pc, [sp], #4
	.fnend
	.size	fsg_show_ro, .-fsg_show_ro
	.section	.rodata.str1.4
	.align	2
.LC81:
	.ascii	"%u\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_show_nofua, %function
fsg_show_nofua:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r1, #:lower16:.LC81
	str	lr, [sp, #4]
	ldrb	r3, [r0, #-24]	@ zero_extendqisi2
	movt	r1, #:upper16:.LC81
	mov	r0, r2
	lsr	r2, r3, #7
	bl	sprintf
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, #2
	ldr	pc, [sp], #4
	.fnend
	.size	fsg_show_nofua, .-fsg_show_nofua
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_show_cdrom, %function
fsg_show_cdrom:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r1, #:lower16:.LC66
	str	lr, [sp, #4]
	ldrb	r3, [r0, #-24]	@ zero_extendqisi2
	movt	r1, #:upper16:.LC66
	mov	r0, r2
	ubfx	r2, r3, #3, #1
	bl	sprintf
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, #2
	ldr	pc, [sp], #4
	.fnend
	.size	fsg_show_cdrom, .-fsg_show_cdrom
	.section	.rodata.str1.4
	.align	2
.LC82:
	.ascii	"include/linux/netdevice.h\000"
	.align	2
.LC83:
	.ascii	"<6>netif_stop_queue() cannot be called before regis"
	.ascii	"ter_netdev()\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	eth_qc_stop, %function
eth_qc_stop:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r1, [r0, #576]
	ldr	r6, [r0, #1220]
	cmp	r1, #0
	beq	.L1289
	add	r1, r1, #80
	mov	r0, #0
	bl	_set_bit
.L1280:
	add	r5, r4, #1216
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #1220]
	mov	r4, r0
	cmp	r3, #0
	beq	.L1279
	ldr	r3, [r6, #108]
	cmp	r3, #0
	beq	.L1279
	mov	r0, r6
	blx	r3
.L1279:
	mov	r0, r5
	mov	r1, r4
	bl	_raw_spin_unlock_irqrestore
	ldrd	r4, [sp]
	mov	r0, #0
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L1289:
	movw	r0, #:lower16:.LC82
	movw	r1, #1847
	movt	r0, #:upper16:.LC82
	bl	warn_slowpath_null
	movw	r0, #:lower16:.LC83
	movt	r0, #:upper16:.LC83
	bl	printk
	b	.L1280
	.fnend
	.size	eth_qc_stop, .-eth_qc_stop
	.section	.rodata.str1.4
	.align	2
.LC84:
	.ascii	"snd_card_create() failed\012\000"
	.align	2
.LC85:
	.ascii	"snd_device_new() failed: error %d\012\000"
	.align	2
.LC88:
	.ascii	"MIDI\000"
	.align	2
.LC89:
	.ascii	"snd_rawmidi_new() failed: error %d\012\000"
	.align	2
.LC90:
	.ascii	"snd_card_register() failed\012\000"
	.align	2
.LC86:
	.ascii	"MIDI Gadget\000"
	.align	2
.LC87:
	.ascii	"f_midi\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_midi_register_card, %function
f_midi_register_card:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r3, #0
	mov	r5, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	.pad #16
	sub	sp, sp, #16
	add	r2, sp, #8
	str	r2, [sp]
	mov	r2, r3
	ldr	r0, [r0, #320]
	ldr	r1, [r5, #324]
	bl	snd_card_create
	subs	r4, r0, #0
	blt	.L1301
	ldr	r0, [sp, #8]
	mov	r2, r5
	mov	r1, #8192
	ldr	r3, .L1305
	str	r0, [r5, #88]
	bl	snd_device_new
	subs	r4, r0, #0
	blt	.L1302
	movw	r3, #:lower16:.LC86
	movw	r2, #:lower16:.LC87
	ldr	r0, [sp, #8]
	movt	r2, #:upper16:.LC87
	movt	r3, #:upper16:.LC86
	ldrb	r4, [r2, #6]	@ zero_extendqisi2
	movw	r1, #:lower16:.LC88
	ldrh	r6, [r2, #4]
	movt	r1, #:upper16:.LC88
	ldr	ip, [r3]
	ldr	lr, [r2]
	ldrd	r2, [r3, #4]
	str	ip, [r0, #20]	@ unaligned
	strh	r6, [r0, #40]	@ unaligned
	str	r2, [r0, #24]	@ unaligned
	str	r3, [r0, #28]	@ unaligned
	str	lr, [r0, #36]	@ unaligned
	strb	r4, [r0, #42]
	str	ip, [r0, #68]	@ unaligned
	str	r2, [r0, #72]	@ unaligned
	str	r3, [r0, #76]	@ unaligned
	bl	snd_component_add
	ldr	r0, [sp, #8]
	add	r3, sp, #12
	mov	r2, #0
	ldr	ip, [r5, #312]
	str	r3, [sp, #4]
	ldr	r3, [r5, #316]
	add	r1, r0, #68
	str	ip, [sp]
	bl	snd_rawmidi_new
	subs	r4, r0, #0
	blt	.L1303
	ldr	r1, [sp, #8]
	ldr	r4, [sp, #12]
	add	r1, r1, #36
	add	r0, r4, #84
	str	r4, [r5, #92]
	bl	strcpy
	mov	r3, #7
	mov	r0, r4
	ldr	r2, .L1305+4
	mov	r1, #0
	str	r3, [r4, #16]
	str	r5, [r4, #200]
	bl	snd_rawmidi_set_ops
	ldr	r2, .L1305+8
	mov	r1, #1
	ldr	r0, [sp, #12]
	bl	snd_rawmidi_set_ops
	ldr	r3, [r5, #76]
	ldr	r0, [sp, #8]
	add	r3, r3, #32
	str	r3, [r0, #500]
	bl	snd_card_register
	subs	r4, r0, #0
	movge	r4, #0
	blt	.L1304
.L1290:
	mov	r0, r4
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L1301:
	ldr	r0, [r5, #76]
	movw	r1, #:lower16:.LC84
	movt	r1, #:upper16:.LC84
	add	r0, r0, #32
	bl	dev_err
.L1292:
	ldr	r0, [r5, #88]
	cmp	r0, #0
	beq	.L1290
	bl	snd_card_free
	mov	r3, #0
	str	r3, [r5, #88]
	b	.L1290
.L1303:
	ldr	r0, [r5, #76]
	movw	r1, #:lower16:.LC89
	mov	r2, r4
	movt	r1, #:upper16:.LC89
	add	r0, r0, #32
	bl	dev_err
	b	.L1292
.L1302:
	ldr	r0, [r5, #76]
	movw	r1, #:lower16:.LC85
	mov	r2, r4
	movt	r1, #:upper16:.LC85
	add	r0, r0, #32
	bl	dev_err
	b	.L1292
.L1304:
	ldr	r0, [r5, #76]
	movw	r1, #:lower16:.LC90
	movt	r1, #:upper16:.LC90
	add	r0, r0, #32
	bl	dev_err
	b	.L1292
.L1306:
	.align	2
.L1305:
	.word	.LANCHOR1+244
	.word	.LANCHOR1+256
	.word	.LANCHOR1+272
	.fnend
	.size	f_midi_register_card, .-f_midi_register_card
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_midi_out_trigger, %function
f_midi_out_trigger:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #28]
	cmp	r1, #0
	ldr	r0, [r0, #12]
	ldr	r1, [r3, #200]
	add	r1, r1, #288
	beq	.L1308
	b	_set_bit
.L1308:
	b	_clear_bit
	.fnend
	.size	f_midi_out_trigger, .-f_midi_out_trigger
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gctrl_disconnect_w, %function
gctrl_disconnect_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #52]
	tst	r3, #1
	bne	.L1311
	bx	lr
.L1311:
	add	r1, r0, #52
	mov	r0, #0
	b	_clear_bit
	.fnend
	.size	gctrl_disconnect_w, .-gctrl_disconnect_w
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_data_disconnect_w, %function
ghsic_data_disconnect_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #76]
	tst	r3, #1
	bne	.L1314
	bx	lr
.L1314:
	add	r1, r0, #76
	mov	r0, #0
	b	_clear_bit
	.fnend
	.size	ghsic_data_disconnect_w, .-ghsic_data_disconnect_w
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_ctrl_remove, %function
ghsuart_ctrl_remove:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r2, #:lower16:.LANCHOR0
	mov	r1, #84
	str	r6, [sp, #8]
	movt	r2, #:upper16:.LANCHOR0
	str	lr, [sp, #12]
	ldr	r3, [r0, #4]
	mla	r3, r1, r3, r2
	ldr	r4, [r3, #1852]
	add	r6, r4, #8
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r4, #12]
	mov	r1, r0
	mov	r0, r6
	cmp	r5, #0
	beq	.L1323
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r5, #96]
	cmp	r3, #0
	beq	.L1318
	mov	r0, r5
	blx	r3
.L1318:
	add	r4, r4, #88
	mov	r0, #0
	mov	r1, r4
	bl	_clear_bit
	mov	r1, r4
	mov	r0, #2
	bl	_clear_bit
.L1317:
	mov	r1, r4
	mov	r0, #1
	bl	_clear_bit
	ldrd	r4, [sp]
	mov	r0, #0
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L1323:
	add	r4, r4, #88
	bl	_raw_spin_unlock_irqrestore
	b	.L1317
	.fnend
	.size	ghsuart_ctrl_remove, .-ghsuart_ctrl_remove
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_midi_in_trigger, %function
f_midi_in_trigger:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r0, #12]
	ldr	r2, [r0, #28]
	add	r3, r3, #56
	ldr	r2, [r2, #200]
	ldr	r3, [r2, r3, lsl #2]
	cmp	r3, #0
	bxeq	lr
	cmp	r1, #0
	str	r1, [r3, #4]
	bxeq	lr
	add	r1, r2, #296
	mov	r0, #0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	add	r4, r2, #292
	str	lr, [sp, #4]
	bl	_test_and_set_bit
	cmp	r0, #0
	beq	.L1335
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L1335:
	mov	r0, r4
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	__tasklet_hi_schedule
	.fnend
	.size	f_midi_in_trigger, .-f_midi_in_trigger
	.section	.rodata.str1.4
	.align	2
.LC91:
	.ascii	"<3>%s: write error:%d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_send_cpkt_tomodem, %function
ghsuart_send_cpkt_tomodem:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	ip, #:lower16:.LANCHOR0
	mov	r3, r0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	ip, #:upper16:.LANCHOR0
	strd	r6, [sp, #8]
	ldr	r0, [ip, #2020]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	cmp	r3, r0
	bcs	.L1347
	mov	r0, #84
	mla	r3, r0, r3, ip
	ldr	r4, [r3, #1852]
	cmp	r4, #0
	beq	.L1348
	ldr	r0, [r4, #88]
	tst	r0, #4
	ubfx	r0, r0, #2, #1
	beq	.L1349
	mov	r6, r1
	mov	r0, r2
	mov	r1, #32
	mov	r5, r2
	bl	__kmalloc
	subs	r7, r0, #0
	mvneq	r0, #11
	beq	.L1336
	mov	r2, r5
	mov	r1, r6
	bl	memcpy
	ldr	r1, .L1351
	ldr	r0, .L1351+4
	bl	___ratelimit
	cmp	r0, #0
	bne	.L1350
.L1341:
	ldr	r3, [r4, #104]
	mov	r0, r7
	add	r3, r3, #1
	str	r3, [r4, #104]
	bl	kfree
	mvn	r0, #18
.L1336:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L1349:
	ldr	r3, [r4, #104]
	add	r3, r3, #1
	str	r3, [r4, #104]
	b	.L1336
.L1348:
	movw	r0, #:lower16:.LC15
	ldr	r1, .L1351
	movt	r0, #:upper16:.LC15
	bl	printk
	mvn	r0, #18
	b	.L1336
.L1347:
	movw	r0, #:lower16:.LC19
	ldr	r1, .L1351
	mov	r2, r3
	movt	r0, #:upper16:.LC19
	bl	printk
	mvn	r0, #18
	b	.L1336
.L1350:
	movw	r0, #:lower16:.LC91
	ldr	r1, .L1351
	mvn	r2, #18
	movt	r0, #:upper16:.LC91
	bl	printk
	b	.L1341
.L1352:
	.align	2
.L1351:
	.word	.LANCHOR2+516
	.word	.LANCHOR1+288
	.fnend
	.size	ghsuart_send_cpkt_tomodem, .-ghsuart_send_cpkt_tomodem
	.section	.rodata.str1.4
	.align	2
.LC92:
	.ascii	"uether\000"
	.align	2
.LC93:
	.ascii	"<3>%s: %s: Unable to create workqueue: uether\012\000"
	.section	.init.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gether_init, %function
gether_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, lr}
	.save {r4, lr}
	mov	r4, #0
	.pad #8
	sub	sp, sp, #8
	movw	r0, #:lower16:.LC92
	mov	r3, r4
	movt	r0, #:upper16:.LC92
	mov	r2, #1
	mov	r1, #10
	str	r4, [sp]
	bl	__alloc_workqueue_key
	movw	r3, #:lower16:.LANCHOR0
	cmp	r0, r4
	movt	r3, #:upper16:.LANCHOR0
	str	r0, [r3, #2024]
	movne	r0, r4
	bne	.L1353
	ldr	r2, .L1357
	movw	r0, #:lower16:.LC93
	movt	r0, #:upper16:.LC93
	mov	r1, r2
	bl	printk
	mvn	r0, #11
.L1353:
	add	sp, sp, #8
	@ sp needed
	pop	{r4, pc}
.L1358:
	.align	2
.L1357:
	.word	.LANCHOR2+544
	.fnend
	.size	gether_init, .-gether_init
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_disable, %function
rmnet_smd_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	mov	r3, #0
	str	lr, [sp, #4]
	ldr	r0, [r0, #88]
	str	r3, [r4, #160]
	ldr	r3, [r0, #8]
	ldr	r2, [r3, #36]
	cmp	r2, #0
	beq	.L1360
	blx	r2
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
.L1360:
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #80]
	ldr	r3, [r0, #8]
	ldr	r2, [r3, #36]
	cmp	r2, #0
	beq	.L1361
	blx	r2
	ldr	r0, [r4, #80]
	ldr	r3, [r0, #8]
.L1361:
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #84]
	ldr	r3, [r0, #8]
	ldr	r2, [r3, #36]
	cmp	r2, #0
	beq	.L1362
	blx	r2
	ldr	r0, [r4, #84]
	ldr	r3, [r0, #8]
.L1362:
	ldr	r3, [r3, #4]
	blx	r3
	add	r1, r4, #400
	ldr	lr, [sp, #4]
	ldr	r0, [r4, #380]
	ldr	r4, [sp]
	add	sp, sp, #8
	b	queue_work
	.fnend
	.size	rmnet_smd_disable, .-rmnet_smd_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_ch_probe, %function
rmnet_smd_ch_probe:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movt	r3, #:upper16:.LANCHOR0
	str	lr, [sp, #4]
	ldr	r3, [r3, #2028]
	add	r1, r3, #384
	ldr	r0, [r3, #380]
	bl	queue_work
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, #0
	ldr	pc, [sp], #4
	.fnend
	.size	rmnet_smd_ch_probe, .-rmnet_smd_ch_probe
	.section	.rodata.str1.4
	.align	2
.LC94:
	.ascii	"qmi resp empty  req%02x.%02x v%04x i%04x l%d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_setup, %function
rmnet_sdio_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r2, [r0, #20]
	.pad #28
	sub	sp, sp, #28
	ldr	r3, [r0, #184]
	ldrh	r9, [r1, #2]	@ unaligned
	ldrh	r8, [r1, #6]	@ unaligned
	ldr	r7, [r2, #24]
	cmp	r3, #0
	ldr	r6, [r7, #4]
	beq	.L1383
	ldrh	r3, [r1]	@ unaligned
	movw	r2, #8482
	mov	r4, r0
	mov	r5, r1
	rev16	r3, r3
	uxth	r3, r3
	cmp	r3, r2
	beq	.L1377
	movw	r2, #41217
	cmp	r3, r2
	beq	.L1378
	cmp	r3, #8448
	beq	.L1387
.L1385:
	mvn	r4, #94
.L1375:
	mov	r0, r4
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L1377:
	ldr	r3, [r0, #320]
	tst	r9, #1
	add	r1, r0, #324
	mov	r5, #0
	ldr	r0, [r0, #192]
	orrne	r3, r3, #2
	biceq	r3, r3, #2
	str	r3, [r4, #320]
	bl	queue_work
	subs	r8, r8, r5
	movne	r8, #1
.L1379:
	ldrb	r3, [r6, #26]	@ zero_extendqisi2
	str	r5, [r6, #4]
	mov	r1, r6
	mov	r2, #32
	bfi	r3, r8, #1, #1
	strb	r3, [r6, #26]
	ldr	r3, [r7]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	bge	.L1375
	ldr	r0, [r7]
	movw	r1, #:lower16:.LC55
	mov	r2, r4
	movt	r1, #:upper16:.LC55
	add	r0, r0, #32
	bl	dev_err
	b	.L1375
.L1387:
	movw	r3, #:lower16:rmnet_sdio_command_complete
	mov	r5, r8
	str	r0, [r6, #32]
	movt	r3, #:upper16:rmnet_sdio_command_complete
	mov	r8, #0
	str	r3, [r6, #28]
	b	.L1379
.L1378:
	cmp	r9, #0
	bne	.L1385
	ldrh	r3, [r1, #4]	@ unaligned
	add	r10, r0, #180
	mov	r0, r10
	str	r3, [sp, #20]
	bl	_raw_spin_lock
	mov	r2, r4
	ldr	fp, [r2, #112]!
	cmp	fp, r2
	beq	.L1388
	ldm	fp, {r1, r2}
	mov	lr, #256
	mov	ip, #512
	mov	r0, r10
	mov	r9, fp
	str	r2, [r1, #4]
	str	r1, [r2]
	str	lr, [fp]
	str	ip, [fp, #4]
	ldr	r2, [r4, #120]
	sub	r2, r2, #1
	str	r2, [r4, #120]
	bl	_raw_spin_unlock
	ldmdb	fp, {r1, r5}
	ldr	r0, [r6]
	cmp	r8, r5
	movcc	r5, r8
	mov	r2, r5
	bl	memcpy
	movw	r3, #:lower16:rmnet_sdio_response_complete
	str	r4, [r6, #32]
	movt	r3, #:upper16:rmnet_sdio_response_complete
	str	r3, [r6, #28]
	ldr	r0, [r9, #-8]!
	bl	kfree
	mov	r0, r9
	bl	kfree
	ldr	r3, [r4, #356]
	cmp	r5, r8
	movge	r8, #0
	movlt	r8, #1
	add	r3, r3, #1
	str	r3, [r4, #356]
	b	.L1379
.L1383:
	mvn	r4, #106
	b	.L1375
.L1388:
	ldr	r0, [r7]
	movw	r1, #:lower16:.LC94
	str	r9, [sp]
	ldr	r3, [sp, #20]
	movt	r1, #:upper16:.LC94
	mvn	r4, #94
	add	r0, r0, #32
	str	r3, [sp, #4]
	ldrb	r3, [r5, #1]	@ zero_extendqisi2
	ldrb	r2, [r5]	@ zero_extendqisi2
	str	r8, [sp, #8]
	bl	_dev_info
	mov	r0, r10
	bl	_raw_spin_unlock
	b	.L1375
	.fnend
	.size	rmnet_sdio_setup, .-rmnet_sdio_setup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_unthrottle, %function
gs_unthrottle:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r0, #280]
	cmp	r4, #0
	beq	.L1389
	mov	r0, r4
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #4]
	mov	r5, r0
	cmp	r3, #0
	beq	.L1391
	movw	r3, #:lower16:.LANCHOR0
	add	r1, r4, #60
	movt	r3, #:upper16:.LANCHOR0
	ldr	r0, [r3, #2032]
	bl	queue_work
.L1391:
	mov	r1, r5
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock_irqrestore
.L1389:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	gs_unthrottle, .-gs_unthrottle
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_read_complete, %function
gs_read_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r0]
	mov	r0, r4
	add	r7, r4, #48
	bl	_raw_spin_lock_irqsave
	ldr	r1, [r5, #48]
	add	lr, r5, #36
	movw	r2, #:lower16:.LANCHOR0
	ldr	ip, [r4, #52]
	movt	r2, #:upper16:.LANCHOR0
	mov	r6, r0
	ldr	r3, [r4, #128]
	str	lr, [r4, #52]
	ldr	r0, [r2, #2032]
	add	r3, r3, r1
	add	r1, r4, #60
	str	r3, [r4, #128]
	str	r7, [r5, #36]
	str	ip, [r5, #40]
	str	lr, [ip]
	bl	queue_work
	mov	r1, r6
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore
	.fnend
	.size	gs_read_complete, .-gs_read_complete
	.section	.rodata.str1.4
	.align	2
.LC95:
	.ascii	"<4>%s: port:%pK port#%d unexpected %s status %d\012"
	.ascii	"\000"
	.text
	.align	2
	.global	gsdio_write_complete
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_write_complete, %function
gsdio_write_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r0]
	.pad #8
	sub	sp, sp, #8
	cmp	r4, #0
	beq	.L1409
	add	r8, r4, #4
	mov	r6, r0
	mov	r0, r8
	mov	r5, r1
	bl	_raw_spin_lock_irqsave
	mov	r3, r4
	add	r2, r5, #36
	ldr	r1, [r3, #52]!
	mov	r7, r0
	str	r2, [r1, #4]
	str	r1, [r5, #36]
	str	r3, [r5, #40]
	ldr	r3, [r4, #76]
	str	r2, [r4, #52]
	add	r3, r3, #1
	str	r3, [r4, #76]
	ldr	r3, [r5, #44]
	cmn	r3, #108
	beq	.L1400
	cmp	r3, #0
	bne	.L1410
.L1401:
	movw	r3, #:lower16:.LANCHOR0
	add	r1, r4, #60
	movt	r3, #:upper16:.LANCHOR0
	ldr	r0, [r3, #2036]
	bl	queue_work
.L1400:
	mov	r1, r7
	mov	r0, r8
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore
.L1409:
	ldr	r1, .L1411
	movw	r0, #:lower16:.LC15
	movt	r0, #:upper16:.LC15
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	printk
.L1410:
	ldr	ip, [r6, #4]
	movw	r0, #:lower16:.LC95
	mov	r2, r4
	ldr	r1, .L1411
	movt	r0, #:upper16:.LC95
	str	ip, [sp]
	str	r3, [sp, #4]
	ldr	r3, [r4]
	bl	printk
	b	.L1401
.L1412:
	.align	2
.L1411:
	.word	.LANCHOR2+556
	.fnend
	.size	gsdio_write_complete, .-gsdio_write_complete
	.section	.rodata.str1.4
	.align	2
.LC96:
	.ascii	"<3>%s: invalid portno#%d\012\000"
	.align	2
.LC97:
	.ascii	"<3>%s: gser is null\012\000"
	.align	2
.LC98:
	.ascii	"<3>%s: port:%pK port#%d sdio not connected\012\000"
	.text
	.align	2
	.global	gsdio_ctrl_notify_modem
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_ctrl_notify_modem, %function
gsdio_ctrl_notify_modem:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r4, #:lower16:.LANCHOR0
	movt	r4, #:upper16:.LANCHOR0
	str	r6, [sp, #8]
	ldr	ip, [r4, #2040]
	str	lr, [sp, #12]
	cmp	r1, ip
	bcs	.L1426
	cmp	r0, #0
	beq	.L1427
	mov	ip, #108
	lsl	r2, r2, #1
	mla	r1, ip, r1, r4
	and	r2, r2, #2
	ldr	r5, [r1, #2068]
	ldr	r1, [r5, #176]
	cmp	r1, r2
	beq	.L1413
	ldr	r1, [r5, #108]
	str	r2, [r5, #176]
	cmp	r1, #0
	beq	.L1428
	cmp	r2, #0
	beq	.L1418
	ldr	r3, [r0, #128]
	cmp	r3, #0
	beq	.L1418
	ldr	r1, [r5, #172]
	blx	r3
.L1418:
	add	r1, r5, #80
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	ldr	r0, [r4, #2036]
	ldrd	r4, [sp]
	add	sp, sp, #16
	b	queue_work
.L1413:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L1428:
	movw	r0, #:lower16:.LC98
	mov	r2, r5
	ldr	r1, .L1429
	movt	r0, #:upper16:.LC98
	ldr	r3, [r5]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	printk
.L1427:
	movw	r0, #:lower16:.LC97
	ldr	r1, .L1429
	movt	r0, #:upper16:.LC97
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	printk
.L1426:
	movw	r0, #:lower16:.LC96
	mov	r2, r1
	ldr	r1, .L1429
	movt	r0, #:upper16:.LC96
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	printk
.L1430:
	.align	2
.L1429:
	.word	.LANCHOR2+580
	.fnend
	.size	gsdio_ctrl_notify_modem, .-gsdio_ctrl_notify_modem
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_write_complete, %function
gsmd_write_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	strd	r6, [sp, #8]
	str	lr, [sp, #16]
	ldr	r5, [r0]
	.pad #12
	sub	sp, sp, #12
	cmp	r5, #0
	beq	.L1443
	add	r7, r5, #4
	mov	r6, r0
	mov	r0, r7
	mov	r4, r1
	bl	_raw_spin_lock
	ldr	r3, [r5, #72]
	ldr	r3, [r3, #8]
	tst	r3, #1
	beq	.L1433
	ldr	r3, [r4, #44]
	cmn	r3, #108
	beq	.L1433
	cmp	r3, #0
	bne	.L1444
.L1435:
	mov	r3, r5
	add	ip, r4, #36
	ldr	lr, [r3, #44]!
	movw	r2, #:lower16:.LANCHOR0
	add	r1, r5, #52
	movt	r2, #:upper16:.LANCHOR0
	ldr	r0, [r2, #2260]
	str	ip, [lr, #4]
	str	lr, [r4, #36]
	str	r3, [r4, #40]
	str	ip, [r5, #44]
	bl	queue_work
	mov	r0, r7
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	b	_raw_spin_unlock
.L1433:
	mov	r0, r7
	bl	_raw_spin_unlock
	ldr	r0, [r4]
	bl	kfree
	ldr	r3, [r6, #8]
	mov	r1, r4
	mov	r0, r6
	ldr	r3, [r3, #12]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	bx	r3	@ indirect register sibling call
.L1443:
	ldr	r1, .L1445
	movw	r0, #:lower16:.LC15
	movt	r0, #:upper16:.LC15
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	b	printk
.L1444:
	ldr	ip, [r6, #4]
	movw	r0, #:lower16:.LC95
	mov	r2, r5
	ldr	r1, .L1445
	movt	r0, #:upper16:.LC95
	str	ip, [sp]
	str	r3, [sp, #4]
	ldr	r3, [r5]
	bl	printk
	b	.L1435
.L1446:
	.align	2
.L1445:
	.word	.LANCHOR2+604
	.fnend
	.size	gsmd_write_complete, .-gsmd_write_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_ctrl_probe, %function
ghsuart_ctrl_probe:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r2, #:lower16:.LANCHOR0
	mov	r1, #84
	str	r6, [sp, #8]
	movt	r2, #:upper16:.LANCHOR0
	str	lr, [sp, #12]
	ldr	r3, [r0, #4]
	mov	r0, #1
	mla	r3, r1, r3, r2
	ldr	r4, [r3, #1852]
	add	r1, r4, #88
	add	r6, r4, #8
	bl	_set_bit
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #12]
	mov	r5, r0
	cmp	r3, #0
	beq	.L1448
	add	r1, r4, #36
	ldr	r0, [r4, #32]
	bl	queue_work
.L1448:
	mov	r0, r6
	mov	r1, r5
	bl	_raw_spin_unlock_irqrestore
	ldrd	r4, [sp]
	mov	r0, #0
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	ghsuart_ctrl_probe, .-ghsuart_ctrl_probe
	.section	.rodata.str1.4
	.align	2
.LC99:
	.ascii	"<3>%s: invalid port: %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_data_probe, %function
ghsuart_data_probe:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r2, #:lower16:.LANCHOR0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movt	r2, #:upper16:.LANCHOR0
	str	lr, [sp, #4]
	ldr	r3, [r0, #4]
	ldr	r1, [r2, #8]
	cmp	r1, r3
	bls	.L1460
	mov	r1, #84
	mov	r0, #1
	mla	r3, r1, r3, r2
	ldr	r4, [r3, #12]
	add	r1, r4, #188
	bl	_set_bit
	ldr	r0, [r4, #4]
	cmp	r0, #0
	bne	.L1461
.L1453:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L1461:
	add	r1, r4, #112
	ldr	r0, [r4, #108]
	bl	queue_work
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, #0
	ldr	pc, [sp], #4
.L1460:
	movw	r0, #:lower16:.LC99
	ldr	r1, .L1462
	mov	r2, r3
	movt	r0, #:upper16:.LC99
	bl	printk
	mvn	r0, #21
	b	.L1453
.L1463:
	.align	2
.L1462:
	.word	.LANCHOR2+624
	.fnend
	.size	ghsuart_data_probe, .-ghsuart_data_probe
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_suspend, %function
ecm_qc_suspend:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR0
	movt	r3, #:upper16:.LANCHOR0
	ldr	r1, [r3, #2264]
	ldr	r0, [r3, #2268]
	add	r1, r1, #200
	b	queue_work
	.fnend
	.size	ecm_qc_suspend, .-ecm_qc_suspend
	.section	.rodata.str1.4
	.align	2
.LC100:
	.ascii	"<6>%s: mbim suspended\012\000"
	.section	.text.unlikely
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_suspend, %function
mbim_suspend:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC100
	ldr	r1, .L1467
	push	{r4, lr}
	.save {r4, lr}
	movt	r0, #:upper16:.LC100
	bl	printk
	movw	r3, #:lower16:.LANCHOR0
	pop	{r4, lr}
	movt	r3, #:upper16:.LANCHOR0
	ldr	r1, [r3, #2264]
	ldr	r0, [r3, #2268]
	add	r1, r1, #200
	b	queue_work
.L1468:
	.align	2
.L1467:
	.word	.LANCHOR2+644
	.fnend
	.size	mbim_suspend, .-mbim_suspend
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_resume, %function
ecm_qc_resume:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR0
	movt	r3, #:upper16:.LANCHOR0
	ldr	r1, [r3, #2264]
	ldr	r0, [r3, #2268]
	add	r1, r1, #216
	b	queue_work
	.fnend
	.size	ecm_qc_resume, .-ecm_qc_resume
	.section	.rodata.str1.4
	.align	2
.LC101:
	.ascii	"<6>%s: mbim resumed\012\000"
	.section	.text.unlikely
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_resume, %function
mbim_resume:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC101
	ldr	r1, .L1472
	push	{r4, lr}
	.save {r4, lr}
	movt	r0, #:upper16:.LC101
	bl	printk
	movw	r3, #:lower16:.LANCHOR0
	pop	{r4, lr}
	movt	r3, #:upper16:.LANCHOR0
	ldr	r1, [r3, #2264]
	ldr	r0, [r3, #2268]
	add	r1, r1, #216
	b	queue_work
.L1473:
	.align	2
.L1472:
	.word	.LANCHOR2+660
	.fnend
	.size	mbim_resume, .-mbim_resume
	.section	.exit.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gether_exit, %function
gether_exit:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR0
	movt	r3, #:upper16:.LANCHOR0
	ldr	r0, [r3, #2024]
	b	destroy_workqueue
	.fnend
	.size	gether_exit, .-gether_exit
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	qdss_function_cleanup, %function
qdss_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	movw	r5, #:lower16:.LANCHOR1
	movt	r5, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	ldr	r4, [r5, #312]!
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	cmp	r4, r5
	ldr	r6, [r4]
	beq	.L1475
	ldr	r8, .L1481
	mov	r10, #256
	mov	r9, #512
	b	.L1479
.L1477:
	bl	_raw_spin_unlock_irqrestore
	cmp	r6, r5
	ldr	r3, [r6]
	beq	.L1475
.L1478:
	mov	r4, r6
	mov	r6, r3
.L1479:
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	mov	r7, r0
	ldr	r0, [r4, #80]
	bl	destroy_workqueue
	ldr	r3, [r4, #12]
	mov	r1, r7
	mov	r0, r8
	cmp	r3, #0
	bne	.L1477
	ldrd	r2, [r4]
	sub	r0, r4, #108
	str	r3, [r2, #4]
	str	r2, [r3]
	str	r10, [r4]
	str	r9, [r4, #4]
	bl	kfree
	mov	r1, r7
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	cmp	r6, r5
	ldr	r3, [r6]
	bne	.L1478
.L1475:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L1482:
	.align	2
.L1481:
	.word	.LANCHOR0+2272
	.fnend
	.size	qdss_function_cleanup, .-qdss_function_cleanup
	.section	.rodata.str1.4
	.align	2
.LC102:
	.ascii	"rmnet command error %d\012\000"
	.align	2
.LC103:
	.ascii	"rmnet control smd write failed\012\000"
	.align	2
.LC104:
	.ascii	"rmnet QMI pool is empty\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_command_complete, %function
rmnet_smd_command_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r1, #32]
	ldr	r2, [r1, #44]
	ldr	r8, [r4, #76]
	cmp	r2, #0
	blt	.L1491
	add	r7, r4, #156
	mov	r5, r1
	mov	r0, r7
	bl	_raw_spin_lock
	ldr	r2, [r4, #300]
	ldr	r3, [r4, #440]
	cmp	r2, #0
	add	r3, r3, #1
	str	r3, [r4, #440]
	beq	.L1492
.L1485:
	mov	r3, r4
	ldr	r6, [r3, #100]!
	cmp	r6, r3
	beq	.L1493
	ldrd	r2, [r6]
	mov	ip, #256
	mov	r1, #512
	mov	r0, r7
	str	r3, [r2, #4]
	str	r2, [r3]
	str	ip, [r6]
	str	r1, [r6, #4]
	bl	_raw_spin_unlock
	ldr	r0, [r6, #-8]
	ldr	r1, [r5]
	ldr	r2, [r5, #48]
	bl	memcpy
	ldr	r3, [r5, #48]
	mov	r0, r7
	str	r3, [r6, #-4]
	bl	_raw_spin_lock
	ldr	r3, [r4, #120]
	add	r2, r4, #116
	mov	r0, r7
	str	r6, [r4, #120]
	strd	r2, [r6]
	str	r6, [r3]
.L1490:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock
.L1492:
	ldr	r0, [r4, #252]
	bl	smd_write_avail
	ldr	r3, [r5, #48]
	cmp	r0, r3
	strcc	r3, [r4, #300]
	bcc	.L1485
	mov	r0, r7
	bl	_raw_spin_unlock
	ldr	r1, [r5]
	ldr	r2, [r5, #48]
	ldr	r0, [r4, #252]
	bl	smd_write
	ldr	r3, [r5, #48]
	cmp	r3, r0
	bne	.L1494
.L1487:
	mov	r0, r7
	bl	_raw_spin_lock
	ldr	r3, [r4, #444]
	mov	r0, r7
	add	r3, r3, #1
	str	r3, [r4, #444]
	b	.L1490
.L1491:
	ldr	r0, [r8]
	movw	r1, #:lower16:.LC102
	movt	r1, #:upper16:.LC102
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	r0, r0, #32
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	dev_err
.L1493:
	mov	r0, r7
	bl	_raw_spin_unlock
	ldr	r0, [r8]
	movw	r1, #:lower16:.LC104
	movt	r1, #:upper16:.LC104
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	r0, r0, #32
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	dev_err
.L1494:
	ldr	r0, [r8]
	movw	r1, #:lower16:.LC103
	movt	r1, #:upper16:.LC103
	add	r0, r0, #32
	bl	dev_err
	b	.L1487
	.fnend
	.size	rmnet_smd_command_complete, .-rmnet_smd_command_complete
	.section	.rodata.str1.4
	.align	2
.LC105:
	.ascii	"RMNET %s response error %d, %d/%d\012\000"
	.align	2
.LC106:
	.ascii	"rmnet data smd write failed\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_complete_epout, %function
rmnet_smd_complete_epout:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	str	lr, [sp, #16]
	ldr	r5, [r1, #32]
	.pad #12
	sub	sp, sp, #12
	ldr	r3, [r1, #44]
	ldr	r6, [r5, #76]
	cmn	r3, #104
	beq	.L1496
	cmp	r3, #0
	beq	.L1497
	cmn	r3, #108
	beq	.L1496
	ldr	r7, [r6]
	movw	r1, #:lower16:.LC105
	add	r6, r5, #156
	ldr	lr, [r4, #4]
	movt	r1, #:upper16:.LC105
	ldr	ip, [r4, #48]
	ldr	r2, [r0, #4]
	add	r0, r7, #32
	stm	sp, {ip, lr}
	bl	dev_err
.L1507:
	mov	r0, r6
	bl	_raw_spin_lock
	add	r2, r4, #36
	add	r1, r5, #140
	ldr	r3, [r5, #144]
	mov	r0, r6
	str	r2, [r5, #144]
.L1506:
	str	r1, [r4, #36]
	str	r3, [r4, #40]
	str	r2, [r3]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	b	_raw_spin_unlock
.L1496:
	add	r6, r5, #156
	b	.L1507
.L1497:
	add	r7, r5, #156
	mov	r0, r7
	bl	_raw_spin_lock
	ldr	r2, [r5, #364]
	ldr	r3, [r5, #424]
	cmp	r2, #0
	add	r3, r3, #1
	str	r3, [r5, #424]
	bne	.L1499
	ldr	r0, [r5, #316]
	bl	smd_write_avail
	ldr	r3, [r4, #48]
	cmp	r0, r3
	strcc	r3, [r5, #364]
	bcc	.L1499
	mov	r0, r7
	bl	_raw_spin_unlock
	ldr	r1, [r4]
	ldr	r2, [r4, #48]
	ldr	r0, [r5, #316]
	bl	smd_write
	ldr	r3, [r4, #48]
	cmp	r3, r0
	bne	.L1508
.L1501:
	mov	r0, r7
	bl	_raw_spin_lock
	ldr	r2, [r5, #144]
	add	r1, r4, #36
	add	ip, r5, #140
	ldr	r3, [r5, #428]
	mov	r0, r7
	str	r1, [r5, #144]
	add	r3, r3, #1
	str	r3, [r5, #428]
	str	ip, [r4, #36]
	str	r2, [r4, #40]
	str	r1, [r2]
	bl	_raw_spin_unlock
	mov	r0, r5
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	b	rmnet_smd_start_rx
.L1499:
	add	r2, r4, #36
	add	r1, r5, #148
	ldr	r3, [r5, #152]
	mov	r0, r7
	str	r2, [r5, #152]
	b	.L1506
.L1508:
	ldr	r0, [r6]
	movw	r1, #:lower16:.LC106
	movt	r1, #:upper16:.LC106
	add	r0, r0, #32
	bl	dev_err
	b	.L1501
	.fnend
	.size	rmnet_smd_complete_epout, .-rmnet_smd_complete_epout
	.section	.rodata.str1.4
	.align	2
.LC107:
	.ascii	"rmnet SMD data write failed\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_data_rx_tlet, %function
rmnet_data_rx_tlet:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	add	r6, r0, #156
	add	r7, r0, #148
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r3, [r0, #76]
	.pad #12
	sub	sp, sp, #12
	mov	r0, r6
	str	r3, [sp, #4]
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r5, #148]
	mov	fp, r0
	cmp	r4, r7
	beq	.L1514
	add	r3, r5, #140
	mov	r9, #256
	mov	r8, #512
	str	r3, [sp]
	b	.L1510
.L1512:
	ldrd	r2, [r4]
	str	r3, [r2, #4]
	str	r2, [r3]
	str	r9, [r4]
	str	r8, [r4, #4]
	bl	_raw_spin_unlock_irqrestore
	ldr	r1, [r4, #-36]
	ldr	r2, [r4, #12]
	ldr	r0, [r5, #316]
	bl	smd_write
	mov	r10, r0
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r1, [r4, #12]
	mov	fp, r0
	cmp	r1, r10
	bne	.L1517
	ldr	r3, [sp]
	ldr	r2, [r5, #428]
	ldr	r1, [r5, #144]
	str	r4, [r5, #144]
	add	r2, r2, #1
	str	r2, [r5, #428]
	str	r3, [r4]
	str	r1, [r4, #4]
	str	r4, [r1]
	ldr	r4, [r5, #148]
	cmp	r7, r4
	beq	.L1514
.L1510:
	ldr	r0, [r5, #316]
	bl	smd_write_avail
	ldr	r2, [r4, #12]
	mov	ip, r0
	mov	r1, fp
	mov	r0, r6
	cmp	ip, r2
	bcs	.L1512
	str	r2, [r5, #364]
.L1511:
	mov	r0, r6
	mov	r1, fp
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r5
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	rmnet_smd_start_rx
.L1514:
	mov	r2, #0
	str	r2, [r5, #364]
	b	.L1511
.L1517:
	ldr	r3, [sp, #4]
	movw	r1, #:lower16:.LC107
	movt	r1, #:upper16:.LC107
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	dev_err
	b	.L1511
	.fnend
	.size	rmnet_data_rx_tlet, .-rmnet_data_rx_tlet
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_control_rx_tlet, %function
rmnet_control_rx_tlet:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	add	r6, r0, #156
	add	r7, r0, #116
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r3, [r0, #76]
	.pad #12
	sub	sp, sp, #12
	mov	r0, r6
	str	r3, [sp, #4]
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r5, #116]
	mov	fp, r0
	cmp	r4, r7
	beq	.L1523
	add	r3, r5, #100
	mov	r9, #256
	mov	r8, #512
	str	r3, [sp]
	b	.L1519
.L1521:
	ldrd	r2, [r4]
	str	r3, [r2, #4]
	str	r2, [r3]
	str	r9, [r4]
	str	r8, [r4, #4]
	ldr	r3, [r5, #440]
	add	r3, r3, #1
	str	r3, [r5, #440]
	bl	_raw_spin_unlock_irqrestore
	ldmdb	r4, {r1, r2}
	ldr	r0, [r5, #252]
	bl	smd_write
	mov	r10, r0
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r1, [r4, #-4]
	mov	fp, r0
	cmp	r1, r10
	bne	.L1526
	ldr	r3, [sp]
	ldr	r2, [r5, #444]
	ldr	r1, [r5, #104]
	str	r4, [r5, #104]
	add	r2, r2, #1
	str	r2, [r5, #444]
	str	r3, [r4]
	str	r1, [r4, #4]
	str	r4, [r1]
	ldr	r4, [r5, #116]
	cmp	r7, r4
	beq	.L1523
.L1519:
	ldr	r0, [r5, #252]
	bl	smd_write_avail
	ldr	r2, [r4, #-4]
	mov	ip, r0
	mov	r1, fp
	mov	r0, r6
	cmp	ip, r2
	bge	.L1521
	str	r2, [r5, #300]
.L1520:
	mov	r1, fp
	mov	r0, r6
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L1523:
	mov	r2, #0
	str	r2, [r5, #300]
	b	.L1520
.L1526:
	ldr	r3, [sp, #4]
	movw	r1, #:lower16:.LC103
	movt	r1, #:upper16:.LC103
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	dev_err
	b	.L1520
	.fnend
	.size	rmnet_control_rx_tlet, .-rmnet_control_rx_tlet
	.section	.rodata.str1.4
	.align	2
.LC108:
	.ascii	"<4>%s: port:%pK port#%d Unexpected Rx Status:%d\012"
	.ascii	"\000"
	.align	2
.LC109:
	.ascii	"<3>%s: smd write failed err:%d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_rx_push, %function
gsmd_rx_push:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	sub	r3, r0, #28
	mov	r5, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	sub	r9, r0, #24
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r6, [r0, #44]
	.pad #20
	sub	sp, sp, #20
	mov	r0, r9
	str	r3, [sp, #12]
	bl	_raw_spin_lock_irq
	ldr	r0, [r6]
	cmp	r0, #0
	beq	.L1529
	movw	r10, #:lower16:.LC108
	sub	r7, r5, #8
	mov	r8, #0
	movt	r10, #:upper16:.LC108
	b	.L1528
.L1536:
	ldr	r3, [r4, #8]
	cmn	r3, #108
	beq	.L1529
	cmp	r3, #0
	bne	.L1560
.L1530:
	bl	smd_write_avail
	cmp	r0, #0
	beq	.L1529
	ldr	fp, [r4, #12]
	cmp	fp, #0
	beq	.L1532
	ldr	r3, [r5, #-20]
	ldr	r1, [r4, #-36]
	ldr	r0, [r6]
	cmp	r3, #0
	subne	fp, fp, r3
	addne	r1, r1, r3
	mov	r2, fp
	bl	smd_write
	cmp	r0, #0
	blt	.L1561
	cmp	r0, fp
	bne	.L1562
	ldr	r2, [r5, #136]
	add	r2, r2, fp
	str	r2, [r5, #136]
.L1532:
	str	r8, [r5, #-20]
	ldm	r4, {r1, r2}
	mov	r3, r5
	str	r2, [r1, #4]
	str	r1, [r2]
	ldr	r2, [r3, #-16]!
	str	r4, [r2, #4]
	strd	r2, [r4]
	str	r4, [r5, #-16]
	ldr	r0, [r6]
	cmp	r0, #0
	beq	.L1529
.L1528:
	ldr	r4, [r5, #-8]
	cmp	r7, r4
	bne	.L1536
.L1529:
	mov	r0, r9
	bl	_raw_spin_unlock_irq
	ldr	r0, [sp, #12]
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	gsmd_start_rx
.L1562:
	ldr	r2, [r5, #-20]
	add	r3, r2, r0
	str	r3, [r5, #-20]
	b	.L1529
.L1560:
	ldr	r1, .L1563
	mov	r0, r10
	str	r3, [sp]
	ldr	r3, [r5, #-28]
	ldr	r2, [sp, #12]
	bl	printk
	ldr	r0, [r6]
	b	.L1530
.L1561:
	mov	r3, r0
	movw	r0, #:lower16:.LC109
	ldr	r1, .L1563
	mov	r2, r3
	movt	r0, #:upper16:.LC109
	bl	printk
	b	.L1529
.L1564:
	.align	2
.L1563:
	.word	.LANCHOR2+672
	.fnend
	.size	gsmd_rx_push, .-gsmd_rx_push
	.section	.rodata.str1.4
	.align	2
.LC110:
	.ascii	"<3>%s: smd_write failed err:%d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	grmnet_ctrl_smd_write_w, %function
grmnet_ctrl_smd_write_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r7, [r0, #16]
	.pad #4
	sub	sp, sp, #4
	add	r7, r7, #108
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	mov	r6, r0
	ldr	r0, [r5, #-68]
	cmp	r0, #0
	beq	.L1566
	sub	r9, r5, #28
	mov	fp, #256
	b	.L1568
.L1575:
	bl	smd_write_avail
	ldr	r3, [r4, #-4]
	mov	r2, r0
	mov	r1, r6
	mov	r0, r7
	cmp	r2, r3
	blt	.L1566
	ldrd	r2, [r4]
	str	r3, [r2, #4]
	str	r2, [r3]
	mov	r3, #512
	str	fp, [r4]
	str	r3, [r4, #4]
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, [r5, #-68]
	ldmdb	r4, {r1, r2}
	bl	smd_write
	mov	r10, r0
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #-4]
	mov	r6, r0
	cmp	r3, r10
	bne	.L1574
	ldr	r0, [r4, #-8]
	bl	kfree
	mov	r0, r8
	bl	kfree
	ldr	r0, [r5, #-68]
	ldr	r3, [r5, #24]
	cmp	r0, #0
	add	r3, r3, #1
	str	r3, [r5, #24]
	beq	.L1566
.L1568:
	ldr	r4, [r5, #-28]
	cmp	r9, r4
	sub	r8, r4, #8
	bne	.L1575
.L1566:
	mov	r1, r6
	mov	r0, r7
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L1574:
	movw	r0, #:lower16:.LC110
	ldr	r1, .L1576
	mov	r2, r10
	movt	r0, #:upper16:.LC110
	bl	printk
	ldr	r0, [r4, #-8]
	bl	kfree
	mov	r0, r8
	bl	kfree
	b	.L1566
.L1577:
	.align	2
.L1576:
	.word	.LANCHOR2+688
	.fnend
	.size	grmnet_ctrl_smd_write_w, .-grmnet_ctrl_smd_write_w
	.section	.rodata.str1.4
	.align	2
.LC111:
	.ascii	"rmnet_mux SMD data write failed\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_smd_data_rx_tlet, %function
rmnet_mux_smd_data_rx_tlet:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	add	r6, r0, #356
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r3, [r0, #76]
	.pad #12
	sub	sp, sp, #12
	mov	r0, r6
	str	r3, [sp, #4]
	bl	_raw_spin_lock_irqsave
	ldr	r2, [r5, #360]
	mov	fp, r0
	cmp	r2, #0
	beq	.L1579
	add	r3, r5, #104
	add	r7, r5, #112
	mov	r9, #256
	mov	r8, #512
	str	r3, [sp]
	b	.L1583
.L1580:
	ldr	r0, [r5, #120]
	bl	smd_write_avail
	ldr	r2, [r4, #12]
	mov	ip, r0
	mov	r1, fp
	mov	r0, r6
	cmp	ip, r2
	bcc	.L1589
	ldrd	r2, [r4]
	str	r3, [r2, #4]
	str	r2, [r3]
	str	r9, [r4]
	str	r8, [r4, #4]
	bl	_raw_spin_unlock_irqrestore
	ldr	r1, [r4, #-36]
	ldr	r2, [r4, #12]
	ldr	r0, [r5, #120]
	bl	smd_write
	mov	r10, r0
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r1, [r4, #12]
	mov	fp, r0
	cmp	r1, r10
	bne	.L1590
	ldr	r3, [sp]
	ldr	r2, [r5, #388]
	ldr	r1, [r5, #108]
	str	r4, [r5, #108]
	add	r2, r2, #1
	str	r2, [r5, #388]
	str	r3, [r4]
	str	r1, [r4, #4]
	str	r4, [r1]
	ldr	r2, [r5, #360]
	cmp	r2, #0
	beq	.L1579
.L1583:
	ldr	r4, [r5, #112]
	cmp	r7, r4
	bne	.L1580
	mov	r2, #0
	str	r2, [r5, #168]
.L1579:
	mov	r0, r6
	mov	r1, fp
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r5
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	rmnet_mux_smd_start_rx
.L1589:
	str	r2, [r5, #168]
	b	.L1579
.L1590:
	ldr	r3, [sp, #4]
	movw	r1, #:lower16:.LC111
	movt	r1, #:upper16:.LC111
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	dev_err
	b	.L1579
	.fnend
	.size	rmnet_mux_smd_data_rx_tlet, .-rmnet_mux_smd_data_rx_tlet
	.section	.rodata.str1.4
	.align	2
.LC112:
	.ascii	"RMNET_MUX %s response error %d, %d/%d\012\000"
	.align	2
.LC113:
	.ascii	"rmnet_mux data smd write failed\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_smd_complete_epout, %function
rmnet_mux_smd_complete_epout:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	mov	r6, r0
	str	lr, [sp, #16]
	ldr	r5, [r1, #32]
	.pad #12
	sub	sp, sp, #12
	ldr	r3, [r5, #352]
	cmp	r3, #0
	beq	.L1604
	ldr	r3, [r1, #44]
	ldr	r7, [r5, #76]
	cmn	r3, #104
	beq	.L1593
	cmp	r3, #0
	beq	.L1594
	cmn	r3, #108
	beq	.L1593
	ldr	r2, [r0, #4]
	movw	r1, #:lower16:.LC112
	ldr	r0, [r7]
	movt	r1, #:upper16:.LC112
	add	r7, r5, #356
	ldr	lr, [r4, #4]
	ldr	ip, [r4, #48]
	add	r0, r0, #32
	stm	sp, {ip, lr}
	bl	dev_err
	mov	r0, r7
	bl	_raw_spin_lock
	add	r2, r4, #36
	add	r1, r5, #104
	ldr	r3, [r5, #108]
	mov	r0, r7
	str	r2, [r5, #108]
.L1603:
	str	r1, [r4, #36]
	str	r3, [r4, #40]
	str	r2, [r3]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	b	_raw_spin_unlock
.L1594:
	add	r6, r5, #356
	mov	r0, r6
	bl	_raw_spin_lock
	ldr	r3, [r5, #168]
	cmp	r3, #0
	bne	.L1596
	ldr	r0, [r5, #120]
	bl	smd_write_avail
	ldr	r3, [r4, #48]
	cmp	r0, r3
	strcc	r3, [r5, #168]
	bcs	.L1605
.L1596:
	add	r2, r4, #36
	add	r1, r5, #112
	ldr	r3, [r5, #116]
	mov	r0, r6
	str	r2, [r5, #116]
	b	.L1603
.L1593:
	add	r6, r5, #356
	mov	r0, r6
	bl	_raw_spin_lock
	add	r2, r4, #36
	add	r1, r5, #104
	ldr	r3, [r5, #108]
	mov	r0, r6
	str	r2, [r5, #108]
	b	.L1603
.L1604:
	ldr	r0, [r1]
	bl	kfree
	ldr	r3, [r6, #8]
	mov	r1, r4
	mov	r0, r6
	ldr	r3, [r3, #12]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	bx	r3	@ indirect register sibling call
.L1605:
	mov	r0, r6
	bl	_raw_spin_unlock
	ldr	r1, [r4]
	ldr	r2, [r4, #48]
	ldr	r0, [r5, #120]
	bl	smd_write
	ldr	r3, [r4, #48]
	cmp	r3, r0
	beq	.L1598
	ldr	r0, [r7]
	movw	r1, #:lower16:.LC113
	movt	r1, #:upper16:.LC113
	add	r0, r0, #32
	bl	dev_err
.L1598:
	ldr	r3, [r5, #388]
	mov	r0, r6
	add	r3, r3, #1
	str	r3, [r5, #388]
	bl	_raw_spin_lock
	ldr	r3, [r5, #108]
	add	r2, r4, #36
	add	r1, r5, #104
	mov	r0, r6
	str	r2, [r5, #108]
	str	r1, [r4, #36]
	str	r3, [r4, #40]
	str	r2, [r3]
	bl	_raw_spin_unlock
	mov	r0, r5
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	b	rmnet_mux_smd_start_rx
	.fnend
	.size	rmnet_mux_smd_complete_epout, .-rmnet_mux_smd_complete_epout
	.section	.rodata.str1.4
	.align	2
.LC114:
	.ascii	"rmnet data tx ep error %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_complete_epin, %function
rmnet_smd_complete_epin:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r5, [r1, #32]
	ldr	r2, [r1, #44]
	cmn	r2, #104
	beq	.L1607
	cmp	r2, #0
	beq	.L1608
	cmn	r2, #108
	beq	.L1607
	ldr	r3, [r5, #76]
	movw	r1, #:lower16:.LC114
	movt	r1, #:upper16:.LC114
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	dev_err
.L1608:
	add	r6, r5, #156
	mov	r0, r6
	bl	_raw_spin_lock
	ldr	r2, [r5, #132]
	add	r3, r5, #132
	cmp	r3, r2
	beq	.L1623
	ldr	r2, [r5, #136]
	add	r1, r4, #36
	str	r1, [r5, #136]
	str	r3, [r4, #36]
	str	r2, [r4, #40]
	str	r1, [r2]
	ldr	r3, [r5, #416]
	add	r3, r3, #1
	str	r3, [r5, #416]
.L1613:
	mov	r0, r6
.L1622:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock
.L1623:
	ldr	r2, [r5, #136]
	add	ip, r4, #36
	add	r1, r5, #324
	mov	r0, #0
	str	ip, [r5, #136]
	str	r3, [r4, #36]
	str	r2, [r4, #40]
	add	r4, r5, #320
	str	ip, [r2]
	ldr	r3, [r5, #416]
	add	r3, r3, #1
	str	r3, [r5, #416]
	bl	_test_and_set_bit
	cmp	r0, #0
	bne	.L1613
	mov	r0, r4
	bl	__tasklet_schedule
	b	.L1613
.L1607:
	add	r6, r5, #156
	mov	r0, r6
	bl	_raw_spin_lock
	ldr	r3, [r5, #136]
	add	r2, r4, #36
	add	r1, r5, #132
	mov	r0, r6
	str	r2, [r5, #136]
	str	r1, [r4, #36]
	str	r3, [r4, #40]
	str	r2, [r3]
	b	.L1622
	.fnend
	.size	rmnet_smd_complete_epin, .-rmnet_smd_complete_epin
	.section	.rodata.str1.4
	.align	2
.LC115:
	.ascii	"rmnet_mux data tx ep error %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_smd_complete_epin, %function
rmnet_mux_smd_complete_epin:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r5, [r1, #32]
	ldr	r3, [r5, #352]
	cmp	r3, #0
	beq	.L1639
	ldr	r2, [r1, #44]
	cmn	r2, #104
	beq	.L1626
	cmp	r2, #0
	beq	.L1627
	cmn	r2, #108
	beq	.L1626
	ldr	r3, [r5, #76]
	movw	r1, #:lower16:.LC115
	movt	r1, #:upper16:.LC115
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	dev_err
.L1627:
	add	r6, r5, #356
	mov	r0, r6
	bl	_raw_spin_lock
	ldr	r2, [r5, #96]
	add	r3, r5, #96
	cmp	r3, r2
	ldr	r2, [r5, #100]
	beq	.L1629
	add	r1, r4, #36
	str	r1, [r5, #100]
	str	r3, [r4, #36]
	str	r2, [r4, #40]
	str	r1, [r2]
.L1630:
	mov	r0, r6
.L1638:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock
.L1626:
	add	r6, r5, #356
	mov	r0, r6
	bl	_raw_spin_lock
	ldr	r3, [r5, #100]
	add	r2, r4, #36
	add	r1, r5, #96
	mov	r0, r6
	str	r2, [r5, #100]
	str	r1, [r4, #36]
	str	r3, [r4, #40]
	str	r2, [r3]
	b	.L1638
.L1639:
	mov	r6, r0
	ldr	r0, [r1]
	bl	kfree
	ldr	r3, [r6, #8]
	mov	r1, r4
	mov	r0, r6
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	ldr	r3, [r3, #12]
	bx	r3	@ indirect register sibling call
.L1629:
	add	ip, r4, #36
	add	r1, r5, #128
	mov	r0, #0
	add	r5, r5, #124
	str	ip, [r5, #-24]
	str	r3, [r4, #36]
	str	r2, [r4, #40]
	str	ip, [r2]
	bl	_test_and_set_bit
	cmp	r0, #0
	bne	.L1630
	mov	r0, r5
	bl	__tasklet_schedule
	b	.L1630
	.fnend
	.size	rmnet_mux_smd_complete_epin, .-rmnet_mux_smd_complete_epin
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_setup, %function
rmnet_smd_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r2, [r0, #20]
	.pad #28
	sub	sp, sp, #28
	ldr	r3, [r0, #160]
	ldrh	r9, [r1, #2]	@ unaligned
	ldrh	r5, [r1, #6]	@ unaligned
	ldr	r8, [r2, #24]
	cmp	r3, #0
	ldr	r7, [r8, #4]
	beq	.L1650
	ldrh	r3, [r1]	@ unaligned
	movw	r2, #8482
	mov	r4, r0
	mov	r6, r1
	rev16	r3, r3
	uxth	r3, r3
	cmp	r3, r2
	beq	.L1642
	movw	r2, #41217
	cmp	r3, r2
	beq	.L1643
	cmp	r3, #8448
	beq	.L1654
.L1652:
	mvn	r5, #94
.L1640:
	mov	r0, r5
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L1642:
	ands	r1, r9, #1
	ldr	r0, [r0, #252]
	movne	r2, #0
	movne	r1, #2
	moveq	r2, #2
	bl	smd_tiocmset
	mov	r5, r0
.L1648:
	cmp	r5, #0
	blt	.L1640
.L1644:
	ldrb	r3, [r7, #26]	@ zero_extendqisi2
	str	r5, [r7, #4]
	mov	r1, r7
	mov	r2, #32
	bfc	r3, #1, #1
	strb	r3, [r7, #26]
	ldr	r3, [r8]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r5, r0, #0
	bge	.L1640
	ldr	r0, [r8]
	movw	r1, #:lower16:.LC55
	mov	r2, r5
	movt	r1, #:upper16:.LC55
	add	r0, r0, #32
	bl	dev_err
	b	.L1640
.L1654:
	movw	r3, #:lower16:rmnet_smd_command_complete
	str	r0, [r7, #32]
	movt	r3, #:upper16:rmnet_smd_command_complete
	str	r3, [r7, #28]
	b	.L1644
.L1643:
	cmp	r9, #0
	bne	.L1652
	ldrh	r3, [r1, #4]	@ unaligned
	add	r10, r0, #156
	mov	r0, r10
	str	r3, [sp, #20]
	bl	_raw_spin_lock
	mov	r2, r4
	ldr	fp, [r2, #124]!
	cmp	fp, r2
	beq	.L1655
	ldm	fp, {r1, r2}
	mov	lr, #256
	mov	ip, #512
	mov	r0, r10
	str	r2, [r1, #4]
	str	r1, [r2]
	str	lr, [fp]
	str	ip, [fp, #4]
	bl	_raw_spin_unlock
	ldmdb	fp, {r1, r2}
	ldr	r0, [r7]
	bl	memcpy
	mov	r0, r10
	ldr	r5, [fp, #-4]
	bl	_raw_spin_lock
	ldr	r1, [r4, #108]
	add	r2, r4, #108
	cmp	r2, r1
	beq	.L1646
	ldr	r1, [r4, #112]
	str	fp, [r4, #112]
	str	r2, [fp]
	str	r1, [fp, #4]
	str	fp, [r1]
.L1647:
	mov	r0, r10
	bl	_raw_spin_unlock
	movw	r3, #:lower16:rmnet_txcommand_complete
	str	r4, [r7, #32]
	movt	r3, #:upper16:rmnet_txcommand_complete
	str	r3, [r7, #28]
	b	.L1648
.L1646:
	ldr	ip, [r4, #112]
	mov	r0, r9
	add	r1, r4, #260
	str	fp, [r4, #112]
	add	r6, r4, #256
	stm	fp, {r2, ip}
	str	fp, [ip]
	bl	_test_and_set_bit
	cmp	r0, #0
	bne	.L1647
	mov	r0, r6
	bl	__tasklet_schedule
	b	.L1647
.L1650:
	mvn	r5, #106
	b	.L1640
.L1655:
	ldr	r0, [r8]
	movw	r1, #:lower16:.LC94
	str	r9, [sp]
	ldr	r3, [sp, #20]
	movt	r1, #:upper16:.LC94
	add	r0, r0, #32
	str	r3, [sp, #4]
	ldrb	r3, [r6, #1]	@ zero_extendqisi2
	ldrb	r2, [r6]	@ zero_extendqisi2
	str	r5, [sp, #8]
	mvn	r5, #94
	bl	_dev_info
	mov	r0, r10
	bl	_raw_spin_unlock
	b	.L1640
	.fnend
	.size	rmnet_smd_setup, .-rmnet_smd_setup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_unbind, %function
rmnet_smd_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	add	r0, r1, #276
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r1
	str	lr, [sp, #4]
	bl	tasklet_kill
	add	r0, r4, #256
	bl	tasklet_kill
	add	r0, r4, #340
	bl	tasklet_kill
	add	r0, r4, #320
	bl	tasklet_kill
	ldr	r0, [r4, #380]
	bl	flush_workqueue
	mov	r0, r4
	bl	rmnet_smd_free_buf
	mov	r3, #0
	ldr	r0, [r4, #380]
	str	r3, [r4, #80]
	str	r3, [r4, #84]
	str	r3, [r4, #88]
	bl	destroy_workqueue
	mov	r0, r4
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	kfree
	.fnend
	.size	rmnet_smd_unbind, .-rmnet_smd_unbind
	.section	.rodata.str1.4
	.align	2
.LC116:
	.ascii	"rmnet tx data enqueue err %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_data_tx_tlet, %function
rmnet_data_tx_tlet:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	add	r7, r0, #156
	strd	r8, [sp, #16]
	mov	r9, #256
	add	r8, r0, #132
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r10, [r0, #76]
	b	.L1662
.L1669:
	ldr	r0, [r5, #316]
	bl	smd_read_avail
	mov	r3, r0
	mov	r0, r7
	cmp	r3, r6
	blt	.L1658
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r5, #132]
	mov	r1, r0
	mov	ip, #512
	mov	r0, r7
	cmp	r8, r4
	beq	.L1667
	ldrd	r2, [r4]
	str	r3, [r2, #4]
	str	r2, [r3]
	stm	r4, {r9, ip}
	bl	_raw_spin_unlock_irqrestore
	mov	r2, r6
	ldr	r1, [r4, #-36]
	ldr	r0, [r5, #316]
	bl	smd_read
	str	r0, [r4, #-32]
	ldr	r0, [r5, #84]
	mov	r2, #32
	sub	r1, r4, #36
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	mov	r2, r0
	mov	r0, r7
	cmp	r2, #0
	bne	.L1668
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #420]
	mov	r1, r0
	mov	r0, r7
	add	r3, r3, #1
	str	r3, [r5, #420]
	bl	_raw_spin_unlock_irqrestore
.L1662:
	ldr	r0, [r5, #316]
	bl	smd_cur_packet_size
	subs	r6, r0, #0
	bne	.L1669
.L1658:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L1668:
	ldr	r0, [r10]
	movw	r1, #:lower16:.LC116
	movt	r1, #:upper16:.LC116
	add	r0, r0, #32
	bl	dev_err
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #136]
	mov	r1, r0
	mov	r0, r7
	str	r4, [r5, #136]
	str	r8, [r4]
	str	r3, [r4, #4]
	str	r4, [r3]
.L1667:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irqrestore
	.fnend
	.size	rmnet_data_tx_tlet, .-rmnet_data_tx_tlet
	.section	.rodata.str1.4
	.align	2
.LC117:
	.ascii	"rmnet QMI Tx buffers full\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_control_tx_tlet, %function
rmnet_control_tx_tlet:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	add	r7, r0, #156
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	movw	r10, #:lower16:.LC2
	str	lr, [sp, #32]
	ldr	r3, [r0, #76]
	.pad #12
	sub	sp, sp, #12
	movt	r10, #:upper16:.LC2
	str	r3, [sp]
.L1675:
	add	r9, r4, #108
.L1674:
	mov	r8, #256
.L1673:
	ldr	r0, [r4, #252]
	add	r6, r4, #164
	bl	smd_cur_packet_size
	subs	r5, r0, #0
	beq	.L1670
	ldr	r0, [r4, #252]
	bl	smd_read_avail
	mov	r3, r0
	mov	r0, r7
	cmp	r3, r5
	blt	.L1670
	bl	_raw_spin_lock_irqsave
	ldr	fp, [r4, #108]
	mov	r2, r0
	mov	ip, #512
	mov	r0, r7
	mov	r1, r2
	cmp	fp, r9
	beq	.L1682
	ldr	lr, [fp]
	ldr	r2, [fp, #4]
	str	r2, [lr, #4]
	str	lr, [r2]
	stm	fp, {r8, ip}
	bl	_raw_spin_unlock_irqrestore
	mov	r2, r5
	ldr	r1, [fp, #-8]
	ldr	r0, [r4, #252]
	bl	smd_read
	mov	r2, r0
	mov	r0, r7
	str	r2, [fp, #-4]
	bl	_raw_spin_lock_irqsave
	ldr	lr, [r4, #128]
	add	r2, r4, #124
	mov	r1, r0
	ldr	ip, [r4, #436]
	mov	r0, r7
	str	fp, [r4, #128]
	add	ip, ip, #1
	str	ip, [r4, #436]
	stm	fp, {r2, lr}
	str	fp, [lr]
	bl	_raw_spin_unlock_irqrestore
	ldr	r5, [r4, #76]
	ldr	r3, [r4, #92]
	ldr	r3, [r3]
	.syntax divided
@ 60 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 111 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/processor.h" 1
	pld	[r6]
@ 0 "" 2
@ 63 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r2, [r6]
	add	r2, r2, #1
	strex	r1, r2, [r6]
	teq	r1, #0
	bne	1b
@ 0 "" 2
@ 73 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r2, #1
	bne	.L1673
	mov	r1, #0
	mvn	r0, #94
	strb	r0, [r3]
	strb	r2, [r3, #1]
	mov	r2, #32
	strb	r1, [r3, #2]
	strb	r1, [r3, #3]
	ldrb	r0, [r4, #96]	@ zero_extendqisi2
	strh	r0, [r3, #4]	@ unaligned
	strb	r1, [r3, #6]
	strb	r1, [r3, #7]
	ldrd	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	bge	.L1674
	.syntax divided
@ 83 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r1, r3, [r6]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r0, [r5]
	mov	r1, r10
	add	r0, r0, #32
	bl	dev_err
	b	.L1675
.L1670:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L1682:
	ldr	r3, [sp]
	movw	r1, #:lower16:.LC117
	str	r2, [sp, #4]
	movt	r1, #:upper16:.LC117
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	dev_err
	ldr	r2, [sp, #4]
	mov	r0, r7
	mov	r1, r2
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
	.fnend
	.size	rmnet_control_tx_tlet, .-rmnet_control_tx_tlet
	.section	.rodata.str1.4
	.align	2
.LC118:
	.ascii	"<3>%s: usb ep out queue failedport:%pK, port#%d err"
	.ascii	":%d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_tx_pull, %function
gsmd_tx_pull:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	sub	r3, r0, #52
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	sub	r6, r0, #48
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #20
	sub	sp, sp, #20
	ldr	r7, [r0, #20]
	mov	r0, r6
	str	r3, [sp, #12]
	bl	_raw_spin_lock_irq
	ldr	r3, [r5, #16]
	cmp	r3, #0
	beq	.L1712
	ldr	r0, [r7]
	sub	r10, r5, #8
	ldr	r8, [r3, #80]
	cmp	r0, #0
	bne	.L1690
	b	.L1699
.L1698:
	bl	smd_read_avail
	cmp	r0, #0
	beq	.L1694
	ldr	r4, [r5, #-8]
	cmp	r0, #2048
	movlt	r2, r0
	movge	r2, #2048
	ldm	r4, {r1, r3}
	sub	r9, r4, #36
	str	r3, [r1, #4]
	str	r1, [r3]
	mov	r3, #256
	ldr	r1, [r4, #-36]
	str	r3, [r4]
	mov	r3, #512
	str	r3, [r4, #4]
	ldr	r0, [r7]
	bl	smd_read
	mov	r3, r0
	mov	r0, r6
	str	r3, [r4, #-32]
	bl	_raw_spin_unlock_irq
	ldr	r3, [r8, #8]
	mov	r1, r9
	mov	r2, #208
	mov	r0, r8
	ldr	r3, [r3, #16]
	blx	r3
	mov	fp, r0
	mov	r0, r6
	bl	_raw_spin_lock_irq
	cmp	fp, #0
	bne	.L1713
	ldr	r2, [r4, #-32]
	ldr	r3, [r5, #116]
	add	r3, r3, r2
	str	r3, [r5, #116]
	ldr	r0, [r7]
	cmp	r0, #0
	beq	.L1694
.L1690:
	ldr	r3, [r5, #-8]
	cmp	r10, r3
	bne	.L1698
.L1694:
	ldr	r3, [r5, #16]
	cmp	r3, #0
	beq	.L1700
.L1699:
	ldr	r3, [r5, #20]
	ldr	r0, [r3]
	bl	smd_read_avail
	cmp	r0, #0
	beq	.L1700
	ldr	r3, [r5, #-8]
	cmp	r10, r3
	beq	.L1700
	movw	r3, #:lower16:.LANCHOR0
	mov	r1, r5
	movt	r3, #:upper16:.LANCHOR0
	ldr	r0, [r3, #2260]
	bl	queue_work
.L1700:
	mov	r0, r6
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irq
.L1712:
	mov	r0, r6
	bl	_raw_spin_unlock_irq
	sub	r3, r5, #52
	cmp	r3, #0
	beq	.L1683
	ldr	r3, [r5, #20]
	ldr	r0, [r3]
	cmp	r0, #0
	bne	.L1688
	b	.L1683
.L1689:
	ldr	r3, [r5, #20]
	ldr	r0, [r3]
	bl	smd_read
	ldr	r3, [r5, #20]
	ldr	r0, [r3]
.L1688:
	bl	smd_read_avail
	subs	r2, r0, #0
	mov	r1, #0
	bne	.L1689
.L1683:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L1713:
	movw	r0, #:lower16:.LC118
	ldr	r1, .L1714
	str	fp, [sp]
	movt	r0, #:upper16:.LC118
	ldr	r3, [r5, #-52]
	ldr	r2, [sp, #12]
	bl	printk
	ldr	r3, [r5, #16]
	cmp	r3, #0
	bne	.L1696
	ldr	r0, [r4, #-36]
	bl	kfree
	ldr	r3, [r8, #8]
	mov	r1, r9
	mov	r0, r8
	ldr	r3, [r3, #12]
	blx	r3
	b	.L1694
.L1696:
	ldr	r3, [r5, #-8]
	str	r4, [r3, #4]
	stm	r4, {r3, r10}
	str	r4, [r5, #-8]
	b	.L1694
.L1715:
	.align	2
.L1714:
	.word	.LANCHOR2+712
	.fnend
	.size	gsmd_tx_pull, .-gsmd_tx_pull
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_smd_data_tx_tlet, %function
rmnet_mux_smd_data_tx_tlet:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r10, [r0, #76]
	ldr	r3, [r0, #360]
	cmp	r3, #0
	beq	.L1716
	mov	r5, r0
	add	r7, r0, #356
	add	r8, r0, #96
	mov	r9, #256
	b	.L1720
.L1731:
	ldr	r0, [r5, #120]
	bl	smd_read_avail
	mov	r3, r0
	mov	r0, r7
	cmp	r3, r6
	blt	.L1716
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r5, #96]
	mov	r1, r0
	mov	ip, #512
	mov	r0, r7
	cmp	r8, r4
	beq	.L1729
	ldrd	r2, [r4]
	str	r3, [r2, #4]
	str	r2, [r3]
	stm	r4, {r9, ip}
	bl	_raw_spin_unlock_irqrestore
	mov	r2, r6
	ldr	r1, [r4, #-36]
	ldr	r0, [r5, #120]
	bl	smd_read
	str	r0, [r4, #-32]
	ldr	r0, [r5, #84]
	mov	r2, #32
	sub	r1, r4, #36
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	bne	.L1730
	ldr	r2, [r5, #360]
	ldr	r3, [r5, #396]
	cmp	r2, #0
	add	r3, r3, #1
	str	r3, [r5, #396]
	beq	.L1716
.L1720:
	ldr	r0, [r5, #120]
	bl	smd_cur_packet_size
	subs	r6, r0, #0
	bne	.L1731
.L1716:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L1730:
	ldr	r3, [r10]
	movw	r1, #:lower16:.LC116
	mov	r2, r0
	movt	r1, #:upper16:.LC116
	add	r0, r3, #32
	bl	dev_err
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #100]
	mov	r1, r0
	mov	r0, r7
	str	r4, [r5, #100]
	str	r8, [r4]
	str	r3, [r4, #4]
	str	r4, [r3]
.L1729:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irqrestore
	.fnend
	.size	rmnet_mux_smd_data_tx_tlet, .-rmnet_mux_smd_data_tx_tlet
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_disconnect_work, %function
gsmd_disconnect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r3, [r0, #-52]
	ldr	r0, [r3]
	bl	smd_close
	ldr	r3, [r4, #-52]
	mov	r2, #0
	str	r2, [r3]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	gsmd_disconnect_work, .-gsmd_disconnect_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_disconnect_work, %function
rmnet_smd_disconnect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	sub	r0, r0, #124
	str	r6, [sp, #8]
	mov	r5, #0
	str	lr, [sp, #12]
	bl	tasklet_kill
	sub	r0, r4, #144
	bl	tasklet_kill
	sub	r0, r4, #60
	bl	tasklet_kill
	sub	r0, r4, #80
	bl	tasklet_kill
	ldr	r0, [r4, #-148]
	bl	smd_close
	str	r5, [r4, #-104]
	ldr	r0, [r4, #-84]
	bl	smd_close
	mov	r0, r4
	str	r5, [r4, #-236]
	str	r5, [r4, #-40]
	ldr	r3, [r0, #-252]!
	cmp	r3, r0
	ldr	r2, [r3]
	subne	r5, r4, #260
	movne	lr, #256
	movne	ip, #512
	beq	.L1739
.L1738:
	ldr	r1, [r3, #4]
	cmp	r0, r2
	str	r1, [r2, #4]
	str	r2, [r1]
	str	lr, [r3]
	str	ip, [r3, #4]
	ldr	r1, [r4, #-256]
	str	r3, [r4, #-256]
	str	r5, [r3]
	str	r1, [r3, #4]
	str	r3, [r1]
	mov	r3, r2
	ldr	r2, [r2]
	bne	.L1738
.L1739:
	mov	r0, r4
	ldr	r3, [r0, #-284]!
	cmp	r3, r0
	ldr	r2, [r3]
	subne	r5, r4, #300
	movne	lr, #256
	movne	ip, #512
	beq	.L1737
.L1742:
	ldr	r1, [r3, #4]
	cmp	r0, r2
	str	r1, [r2, #4]
	str	r2, [r1]
	str	lr, [r3]
	str	ip, [r3, #4]
	ldr	r1, [r4, #-296]
	str	r3, [r4, #-296]
	str	r5, [r3]
	str	r1, [r3, #4]
	str	r3, [r1]
	mov	r3, r2
	ldr	r2, [r2]
	bne	.L1742
.L1737:
	mov	r0, r4
	ldr	r3, [r0, #-276]!
	cmp	r3, r0
	ldr	r2, [r3]
	subne	r5, r4, #292
	movne	lr, #256
	movne	ip, #512
	beq	.L1741
.L1745:
	ldr	r1, [r3, #4]
	cmp	r0, r2
	str	r1, [r2, #4]
	str	r2, [r1]
	str	lr, [r3]
	str	ip, [r3, #4]
	ldr	r1, [r4, #-288]
	str	r3, [r4, #-288]
	str	r5, [r3]
	str	r1, [r3, #4]
	str	r3, [r1]
	mov	r3, r2
	ldr	r2, [r2]
	bne	.L1745
.L1741:
	ldrb	r3, [r4, #-152]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L1750
.L1734:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L1750:
	sub	r0, r4, #232
	bl	platform_driver_unregister
	mov	r3, #0
	strb	r3, [r4, #-152]
	b	.L1734
	.fnend
	.size	rmnet_smd_disconnect_work, .-rmnet_smd_disconnect_work
	.section	.exit.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	cleanup, %function
cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r0, .L1752
	b	platform_driver_unregister
.L1753:
	.align	2
.L1752:
	.word	.LANCHOR1+320
	.fnend
	.size	cleanup, .-cleanup
	.section	.rodata.str1.4
	.align	2
.LC119:
	.ascii	"<3>%s: %s(): Failed to register androidplatform dri"
	.ascii	"ver\012\000"
	.section	.init.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	init, %function
init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r2, #:lower16:.LANCHOR0
	push	{r4, lr}
	.save {r4, lr}
	movt	r2, #:upper16:.LANCHOR0
	mov	r4, #0
	movw	r3, #:lower16:.LANCHOR1
	movw	r0, #:lower16:android_disconnect
	movt	r3, #:upper16:.LANCHOR1
	movt	r0, #:upper16:android_disconnect
	str	r4, [r2, #2276]
	movw	lr, #:lower16:android_setup
	movw	ip, #:lower16:android_suspend
	movw	r1, #:lower16:android_resume
	add	r4, r2, #196
	str	r0, [r3, #416]
	movt	lr, #:upper16:android_setup
	movt	ip, #:upper16:android_suspend
	movt	r1, #:upper16:android_resume
	add	r0, r3, #320
	str	r4, [r2, #196]
	str	r4, [r2, #200]
	str	lr, [r3, #412]
	str	ip, [r3, #420]
	str	r1, [r3, #424]
	bl	platform_driver_register
	subs	r4, r0, #0
	beq	.L1754
	ldr	r2, .L1760
	movw	r0, #:lower16:.LC119
	movt	r0, #:upper16:.LC119
	mov	r1, r2
	bl	printk
.L1754:
	mov	r0, r4
	pop	{r4, pc}
.L1761:
	.align	2
.L1760:
	.word	.LANCHOR2+728
	.fnend
	.size	init, .-init
	.section	.rodata.str1.4
	.align	2
.LC120:
	.ascii	"Unable to open control smd channel: %d\012\000"
	.align	2
.LC121:
	.ascii	"pdrv %s register failed %d\012\000"
	.align	2
.LC122:
	.ascii	"Unable to open data smd channel\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_connect_work, %function
rmnet_smd_connect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	sub	r2, r0, #132
	movw	r3, #:lower16:rmnet_smd_event_notify
	strd	r6, [sp, #8]
	movw	r6, #:lower16:.LANCHOR1
	mov	r1, r2
	movt	r6, #:upper16:.LANCHOR1
	mov	r4, r0
	str	r8, [sp, #16]
	movt	r3, #:upper16:rmnet_smd_event_notify
	str	lr, [sp, #20]
	.pad #24
	sub	sp, sp, #24
	ldr	r8, [r0, #-308]
	ldr	r0, [r6, #488]
	bl	smd_open
	subs	r2, r0, #0
	bne	.L1774
	ldr	r3, [r4, #-88]
	ands	r3, r3, #1
	bne	.L1766
	mov	r2, sp
	str	r3, [sp, #4]
	add	r5, sp, #4
	bic	r1, r2, #8128
	movw	r2, #:lower16:autoremove_wake_function
	bic	r1, r1, #63
	movt	r2, #:upper16:autoremove_wake_function
	ldr	r0, [r1, #12]
	add	r1, sp, #16
	sub	r7, r4, #80
	str	r0, [sp, #8]
	str	r2, [sp, #12]
	str	r1, [sp, #16]
	str	r1, [sp, #20]
	b	.L1768
.L1775:
	bl	schedule
.L1768:
	mov	r2, #2
	mov	r1, r5
	mov	r0, r7
	bl	prepare_to_wait
	ldr	r3, [r4, #-88]
	tst	r3, #1
	beq	.L1775
	mov	r1, r5
	mov	r0, r7
	bl	finish_wait
.L1766:
	sub	r2, r4, #68
	movw	r3, #:lower16:rmnet_smd_event_notify
	ldr	r0, [r6, #492]
	mov	r1, r2
	movt	r3, #:upper16:rmnet_smd_event_notify
	bl	smd_open
	cmp	r0, #0
	bne	.L1776
	ldr	r3, [r4, #-24]
	ands	r3, r3, #1
	bne	.L1770
	mov	r2, sp
	str	r3, [sp, #4]
	add	r5, sp, #4
	bic	r1, r2, #8128
	movw	r2, #:lower16:autoremove_wake_function
	bic	r1, r1, #63
	movt	r2, #:upper16:autoremove_wake_function
	ldr	r0, [r1, #12]
	add	r1, sp, #16
	sub	r6, r4, #16
	str	r0, [sp, #8]
	str	r2, [sp, #12]
	str	r1, [sp, #16]
	str	r1, [sp, #20]
	b	.L1772
.L1777:
	bl	schedule
.L1772:
	mov	r2, #2
	mov	r1, r5
	mov	r0, r6
	bl	prepare_to_wait
	ldr	r3, [r4, #-24]
	tst	r3, #1
	beq	.L1777
	mov	r1, r5
	mov	r0, r6
	bl	finish_wait
.L1770:
	mov	r3, #1
	sub	r0, r4, #384
	str	r3, [r4, #-224]
	bl	rmnet_smd_start_rx
.L1762:
	add	sp, sp, #24
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L1774:
	ldr	r0, [r8]
	movw	r1, #:lower16:.LC120
	movt	r1, #:upper16:.LC120
	add	r0, r0, #32
	bl	dev_err
	ldrb	r3, [r4, #-136]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L1762
	sub	r0, r4, #216
	bl	platform_driver_register
	subs	r3, r0, #0
	moveq	r3, #1
	strbeq	r3, [r4, #-136]
	beq	.L1762
	ldr	r0, [r8]
	movw	r1, #:lower16:.LC121
	movt	r1, #:upper16:.LC121
	ldr	r2, [r4, #-196]
	add	r0, r0, #32
	bl	dev_err
	b	.L1762
.L1776:
	ldr	r0, [r8]
	movw	r1, #:lower16:.LC122
	movt	r1, #:upper16:.LC122
	add	r0, r0, #32
	bl	dev_err
	ldr	r0, [r4, #-132]
	bl	smd_close
	b	.L1762
	.fnend
	.size	rmnet_smd_connect_work, .-rmnet_smd_connect_work
	.section	.rodata.str1.4
	.align	2
.LC123:
	.ascii	"<3>%s:smd read_avail failure:%d or channel closed c"
	.ascii	"h=%pK\000"
	.align	2
.LC124:
	.ascii	"<3>%s: SMD sending incorrect pkt\012\000"
	.align	2
.LC125:
	.ascii	"<3>%s: smd read failure %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	grmnet_ctrl_smd_read_w, %function
grmnet_ctrl_smd_read_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	fp, [r0, #32]
	.pad #36
	sub	sp, sp, #36
	add	r9, fp, #108
	mov	r0, r9
	bl	_raw_spin_lock_irqsave
	mov	r5, r0
	ldr	r0, [r4, #-52]
	cmp	r0, #0
	beq	.L1779
	mov	r3, sp
	bic	r10, r3, #8128
	bic	r10, r10, #63
.L1791:
	bl	smd_cur_packet_size
	subs	r6, r0, #0
	ble	.L1779
	mov	r1, r5
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore
	mov	r1, #208
	mov	r0, r6
	bl	__kmalloc
	subs	r8, r0, #0
	beq	.L1778
	mov	r5, #0
.L1789:
	ldr	r0, [r4, #-52]
	bl	smd_read_avail
	subs	r2, r0, #0
	bne	.L1781
	ldr	r3, [r4, #-52]
	cmp	r3, #0
	bne	.L1813
.L1782:
	movw	r0, #:lower16:.LC123
	ldr	r1, .L1817
	movt	r0, #:upper16:.LC123
	bl	printk
	mov	r0, r8
	bl	kfree
.L1778:
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L1813:
	ldr	r0, [r10, #12]
	movw	r3, #:lower16:autoremove_wake_function
	add	r1, sp, #24
	movt	r3, #:upper16:autoremove_wake_function
	sub	r7, r4, #28
	str	r2, [sp, #12]
	str	r1, [sp, #24]
	str	r0, [sp, #16]
	str	r3, [sp, #20]
	str	r1, [sp, #28]
	b	.L1784
.L1814:
	ldr	r3, [r4, #-52]
	cmp	r3, #0
	beq	.L1783
	bl	schedule
.L1784:
	mov	r2, #2
	add	r1, sp, #12
	mov	r0, r7
	bl	prepare_to_wait
	ldr	r0, [r4, #-52]
	bl	smd_read_avail
	subs	r2, r0, #0
	beq	.L1814
.L1783:
	add	r1, sp, #12
	mov	r0, r7
	str	r2, [sp, #4]
	bl	finish_wait
	ldr	r2, [sp, #4]
.L1781:
	cmp	r2, #0
	ldr	r3, [r4, #-52]
	blt	.L1782
	cmp	r3, #0
	beq	.L1782
	add	r1, r2, r5
	cmp	r1, r6
	bgt	.L1815
	mov	r0, r3
	add	r1, r8, r5
	bl	smd_read
	subs	r2, r0, #0
	ble	.L1816
	add	r5, r5, r2
	cmp	r6, r5
	bgt	.L1789
	mov	r0, r9
	bl	_raw_spin_lock_irqsave
	ldr	r3, [fp, #104]
	mov	r5, r0
	cmp	r3, #0
	beq	.L1790
	ldr	r7, [r3, #84]
	cmp	r7, #0
	beq	.L1790
	mov	r0, r3
	mov	r2, r6
	mov	r1, r8
	blx	r7
	ldr	r3, [r4, #44]
	add	r3, r3, #1
	str	r3, [r4, #44]
.L1790:
	mov	r0, r8
	bl	kfree
	ldr	r0, [r4, #-52]
	cmp	r0, #0
	bne	.L1791
.L1779:
	mov	r1, r5
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore
	b	.L1778
.L1815:
	movw	r0, #:lower16:.LC124
	ldr	r1, .L1817
	movt	r0, #:upper16:.LC124
	bl	printk
	mov	r0, r8
	bl	kfree
	b	.L1778
.L1816:
	movw	r0, #:lower16:.LC125
	ldr	r1, .L1817
	movt	r0, #:upper16:.LC125
	bl	printk
	mov	r0, r8
	bl	kfree
	b	.L1778
.L1818:
	.align	2
.L1817:
	.word	.LANCHOR2+736
	.fnend
	.size	grmnet_ctrl_smd_read_w, .-grmnet_ctrl_smd_read_w
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_event_notify, %function
rmnet_smd_event_notify:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #2
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r5, [r0, #48]
	beq	.L1820
	cmp	r1, #3
	beq	.L1821
	cmp	r1, #1
	beq	.L1832
.L1819:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L1820:
	add	r1, r0, #44
	mov	r0, #0
	bl	_set_bit
	add	r0, r4, #52
	mov	r3, #0
	ldrd	r4, [sp]
	mov	r2, #1
	mov	r1, #3
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	__wake_up
.L1832:
	ldr	r3, [r0, #20]
	ldr	r3, [r3, #160]
	cmp	r3, #0
	beq	.L1819
	cmp	r5, #0
	bne	.L1833
.L1825:
	ldr	r0, [r4]
	bl	smd_read_avail
	cmp	r0, #0
	beq	.L1819
	add	r1, r4, #8
	mov	r0, #0
	bl	_test_and_set_bit
	cmp	r0, #0
	add	r4, r4, #4
	bne	.L1819
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	__tasklet_schedule
.L1821:
	add	r1, r0, #44
	mov	r0, #0
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_clear_bit
.L1833:
	ldr	r0, [r0]
	bl	smd_write_avail
	cmp	r0, r5
	blt	.L1825
	add	r1, r4, #28
	mov	r0, #0
	bl	_test_and_set_bit
	cmp	r0, #0
	add	r3, r4, #24
	bne	.L1825
	mov	r0, r3
	bl	__tasklet_schedule
	b	.L1825
	.fnend
	.size	rmnet_smd_event_notify, .-rmnet_smd_event_notify
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	grmnet_ctrl_smd_notify, %function
grmnet_ctrl_smd_notify:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #2
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	beq	.L1835
	cmp	r1, #3
	beq	.L1836
	cmp	r1, #1
	beq	.L1867
.L1837:
	add	r0, r4, #24
	mov	r3, #0
	ldrd	r4, [sp]
	mov	r2, #1
	mov	r1, #3
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	__wake_up
.L1835:
	add	r1, r0, #8
	mov	r0, #0
	bl	_set_bit
	cmp	r4, #0
	beq	.L1837
	ldr	r0, [r4, #104]
	cmp	r0, #0
	beq	.L1837
	ldr	r3, [r0, #100]
	cmp	r3, #0
	beq	.L1837
	blx	r3
	b	.L1837
.L1867:
	ldr	r0, [r0]
	bl	smd_read_avail
	cmp	r0, #0
	beq	.L1838
	ldr	r2, [r4, #28]
	add	r3, r4, #28
	cmp	r2, r3
	beq	.L1868
.L1838:
	ldr	r0, [r4]
	bl	smd_write_avail
	cmp	r0, #0
	beq	.L1837
	movw	r3, #:lower16:.LANCHOR0
	add	r1, r4, #68
	movt	r3, #:upper16:.LANCHOR0
	ldr	r0, [r3, #2280]
	bl	queue_work
	b	.L1837
.L1836:
	add	r1, r0, #8
	mov	r0, #0
	bl	_clear_bit
	cmp	r4, #0
	beq	.L1841
	ldr	r0, [r4, #104]
	cmp	r0, #0
	beq	.L1841
	ldr	r3, [r0, #96]
	cmp	r3, #0
	beq	.L1841
	blx	r3
.L1841:
	add	r10, r4, #108
	add	r6, r4, #40
	mov	r0, r10
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #40]
	mov	r9, r0
	cmp	r3, r6
	beq	.L1842
	mov	r8, #256
	mov	r7, #512
.L1843:
	ldm	r3, {r1, r2}
	mov	r5, r3
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r8, [r3]
	str	r7, [r3, #4]
	ldr	r0, [r5, #-8]!
	bl	kfree
	mov	r0, r5
	bl	kfree
	ldr	r3, [r4, #40]
	cmp	r3, r6
	bne	.L1843
.L1842:
	mov	r1, r9
	mov	r0, r10
	bl	_raw_spin_unlock_irqrestore
	b	.L1837
.L1868:
	movw	r3, #:lower16:.LANCHOR0
	add	r1, r4, #52
	movt	r3, #:upper16:.LANCHOR0
	ldr	r0, [r3, #2280]
	bl	queue_work
	b	.L1838
	.fnend
	.size	grmnet_ctrl_smd_notify, .-grmnet_ctrl_smd_notify
	.section	.rodata.str1.4
	.align	2
.LC126:
	.ascii	"<3>%s: mbim dev is null\012\000"
	.align	2
.LC127:
	.ascii	"<3>%s: mbim command error %d\012\000"
	.align	2
.LC128:
	.ascii	"<3>%s: Unable to allocate ctrl pkt\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fmbim_cmd_complete, %function
fmbim_cmd_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r1, #32]
	ldr	r8, [r1, #48]
	cmp	r4, #0
	beq	.L1875
	ldr	r2, [r1, #44]
	mov	r6, r1
	cmp	r2, #0
	blt	.L1876
	mov	r1, #32
	mov	r0, r8
	bl	mbim_alloc_ctrl_pkt
	subs	r5, r0, #0
	beq	.L1877
	mov	r7, r5
	mov	r2, r8
	ldr	r1, [r6]
	add	r6, r4, #196
	ldr	r0, [r7], #8
	bl	memcpy
	mov	r0, r6
	bl	_raw_spin_lock
	ldr	r3, [r4, #204]
	add	r2, r4, #200
	mov	r0, r6
	str	r7, [r4, #204]
	strd	r2, [r5, #8]
	str	r7, [r3]
	bl	_raw_spin_unlock
	add	r0, r4, #100
	mov	r3, #0
	ldrd	r4, [sp]
	mov	r2, #1
	mov	r1, #3
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	__wake_up
.L1875:
	ldr	r1, .L1878
	movw	r0, #:lower16:.LC126
	movt	r0, #:upper16:.LC126
.L1874:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	printk
.L1877:
	movw	r0, #:lower16:.LC128
	ldr	r1, .L1878
	movt	r0, #:upper16:.LC128
	b	.L1874
.L1876:
	movw	r0, #:lower16:.LC127
	ldr	r1, .L1878
	movt	r0, #:upper16:.LC127
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	printk
.L1879:
	.align	2
.L1878:
	.word	.LANCHOR2+760
	.fnend
	.size	fmbim_cmd_complete, .-fmbim_cmd_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_function_disable, %function
acc_function_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldrb	r3, [r0, #92]	@ zero_extendqisi2
	ldr	r0, [r0, #84]
	bic	r3, r3, #3
	orr	r3, r3, #2
	strb	r3, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	add	r0, r4, #1648
	mov	r3, #0
	ldr	r4, [sp]
	add	r0, r0, #8
	mov	r2, #1
	ldr	lr, [sp, #4]
	mov	r1, #3
	add	sp, sp, #8
	b	__wake_up
	.fnend
	.size	acc_function_disable, .-acc_function_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_complete_out, %function
acc_complete_out:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR0
	mov	r2, #1
	movt	r3, #:upper16:.LANCHOR0
	ldr	r0, [r3, #824]
	str	r2, [r0, #1688]
	ldr	r3, [r1, #44]
	cmn	r3, #108
	bne	.L1883
	ldrb	r3, [r0, #92]	@ zero_extendqisi2
	bic	r3, r3, #3
	orr	r3, r3, #2
	strb	r3, [r0, #92]
.L1883:
	add	r0, r0, #1648
	mov	r3, #0
	add	r0, r0, #8
	mov	r2, #1
	mov	r1, #3
	b	__wake_up
	.fnend
	.size	acc_complete_out, .-acc_complete_out
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mtp_function_disable, %function
mtp_function_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, #0
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	str	r5, [r0, #96]
	ldr	r0, [r0, #84]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	mov	r3, r5
	add	r0, r4, #124
	ldrd	r4, [sp]
	mov	r2, #1
	mov	r1, #3
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	__wake_up
	.fnend
	.size	mtp_function_disable, .-mtp_function_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mtp_complete_out, %function
mtp_complete_out:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR0
	mov	r2, #1
	movt	r3, #:upper16:.LANCHOR0
	ldr	r0, [r3, #836]
	str	r2, [r0, #168]
	ldr	r3, [r1, #44]
	add	r0, r0, #124
	mov	r2, #1
	mov	r1, #3
	cmp	r3, #0
	movne	r3, #4
	strne	r3, [r0, #-28]
	mov	r3, #0
	b	__wake_up
	.fnend
	.size	mtp_complete_out, .-mtp_complete_out
	.section	.rodata.str1.4
	.align	2
.LC129:
	.ascii	"%s: response queue error\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mtp_function_ctrlrequest, %function
mtp_function_ctrlrequest:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldrb	r1, [r2]	@ zero_extendqisi2
	ldrh	r3, [r2, #4]	@ unaligned
	ldrh	r6, [r2, #2]	@ unaligned
	ldrh	r5, [r2, #6]	@ unaligned
	cmp	r1, #128
	beq	.L1912
	and	r0, r1, #96
	cmp	r0, #64
	beq	.L1913
	cmp	r0, #32
	bne	.L1908
	ldrb	r1, [r2, #1]	@ zero_extendqisi2
	movw	r2, #:lower16:.LANCHOR0
	movt	r2, #:upper16:.LANCHOR0
	ldr	r8, [r2, #836]
	cmp	r1, #100
	beq	.L1914
	cmp	r1, #103
	bne	.L1908
	orrs	r3, r3, r6
	bne	.L1908
	ldr	r2, [r4, #4]
	mov	r3, #4
	add	r10, r8, #80
	mov	r0, r10
	mov	r7, r3
	mov	r6, r3
	ldr	r9, [r2]
	strh	r3, [r9]	@ movhi
	bl	_raw_spin_lock_irqsave
	ldr	ip, [r8, #96]
	movw	r2, #8193
	movw	r3, #8217
	mov	r1, r0
	mov	r0, r10
	cmp	ip, #3
	movne	r3, r2
	strh	r3, [r9, #2]	@ movhi
	bl	_raw_spin_unlock_irqrestore
	cmp	r5, r7
	movls	r5, #0
	movhi	r5, #1
.L1894:
	ldr	r3, [r4, #4]
	mov	r2, #32
	ldrb	r1, [r3, #26]	@ zero_extendqisi2
	bfi	r1, r5, #1, #1
	strb	r1, [r3, #26]
	ldr	r3, [r4, #4]
	str	r7, [r3, #4]
	ldr	r3, [r4]
	ldr	r1, [r4, #4]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L1915
.L1891:
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L1914:
	orrs	r6, r3, r6
	beq	.L1916
.L1908:
	mvn	r6, #94
	b	.L1891
.L1912:
	ldrb	r3, [r2, #1]	@ zero_extendqisi2
	cmp	r3, #6
	bne	.L1908
	lsr	r3, r6, #8
	cmp	r3, #3
	bne	.L1908
	uxtb	r6, r6
	cmp	r6, #238
	bne	.L1908
	cmp	r5, #18
	ldr	r1, .L1918
	movcc	r6, r5
	movcs	r6, #18
	ldr	r3, [r4, #4]
	b	.L1911
.L1913:
	ldrb	r2, [r2, #1]	@ zero_extendqisi2
	cmp	r2, #1
	bne	.L1908
	tst	r1, #128
	beq	.L1908
	sub	r3, r3, #4
	cmp	r3, #1
	bhi	.L1908
	ldr	r1, .L1918+4
	cmp	r5, #40
	ldr	r3, [r4, #4]
	movcc	r6, r5
	movcs	r6, #40
.L1911:
	mov	r2, r6
	ldr	r0, [r3]
	mov	r7, r6
	bl	memcpy
	cmp	r6, r5
	movge	r5, #0
	movlt	r5, #1
	b	.L1894
.L1915:
	ldr	r0, [r4]
	movw	r1, #:lower16:.LC129
	ldr	r2, .L1918+8
	movt	r1, #:upper16:.LC129
	add	r0, r0, #32
	bl	dev_err
	b	.L1891
.L1916:
	add	r9, r8, #80
	mov	r0, r9
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r8, #96]
	mov	r7, r0
	cmp	r3, #2
	beq	.L1917
.L1897:
	mov	r1, r7
	mov	r0, r9
	mov	r6, r5
	mov	r7, r5
	bl	_raw_spin_unlock_irqrestore
	mov	r5, #0
	b	.L1894
.L1917:
	mov	r10, #3
	mov	r3, r6
	mov	r1, r10
	add	r0, r8, #124
	mov	r2, #1
	str	r10, [r8, #96]
	bl	__wake_up
	mov	r3, r6
	mov	r1, r10
	add	r0, r8, #136
	mov	r2, #1
	bl	__wake_up
	b	.L1897
.L1919:
	.align	2
.L1918:
	.word	.LANCHOR1+496
	.word	.LANCHOR1+516
	.word	.LANCHOR2+780
	.fnend
	.size	mtp_function_ctrlrequest, .-mtp_function_ctrlrequest
	.section	.rodata.str1.4
	.align	2
.LC130:
	.ascii	"<3>ccid ep0 enqueue err %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_function_setup, %function
ccid_function_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	mov	ip, r0
	mov	r0, r1
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldrh	r3, [r1, #6]	@ unaligned
	ldr	r1, [ip, #20]
	ldr	r2, [ip, #88]
	ldr	lr, [r1, #24]
	cmp	r2, #0
	ldr	r1, [lr, #4]
	beq	.L1925
	ldrh	r2, [r0]	@ unaligned
	movw	r4, #41218
	rev16	r2, r2
	uxth	r2, r2
	cmp	r2, r4
	beq	.L1922
	movw	r4, #41219
	cmp	r2, r4
	beq	.L1923
	movw	r1, #8449
	cmp	r2, r1
	beq	.L1931
.L1929:
	mvn	r4, #94
.L1921:
.L1920:
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L1922:
	ldr	r2, [r1, #4]
	cmp	r3, r2
	bhi	.L1929
	movw	r2, #:lower16:.LANCHOR1
	ldr	r0, [r1]
	cmp	r3, #4
	movt	r2, #:upper16:.LANCHOR1
	movcs	r3, #4
	ldr	r2, [r2, #566]	@ unaligned
	str	r2, [r0]
.L1924:
	str	r3, [r1, #4]
	ldr	r3, [lr]
	mov	r2, #32
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	bge	.L1920
	movw	r0, #:lower16:.LC130
	mov	r1, r4
	movt	r0, #:upper16:.LC130
	bl	printk
	b	.L1920
.L1931:
	cmp	r3, #0
	bne	.L1929
	ldrh	lr, [r0, #2]	@ unaligned
	mov	r2, #1
	add	r0, ip, #120
	mov	r1, #3
	mov	r4, r3
	strb	r2, [ip, #132]
	lsr	r5, lr, #8
	strb	lr, [ip, #133]
	str	r2, [ip, #136]
	strb	r5, [ip, #134]
	strb	r3, [ip, #135]
	bl	__wake_up
	b	.L1920
.L1923:
	ldr	r2, [r1, #4]
	cmp	r3, r2
	bhi	.L1929
	movw	r2, #:lower16:.LANCHOR1
	ldr	r0, [r1]
	cmp	r3, #4
	movt	r2, #:upper16:.LANCHOR1
	movcs	r3, #4
	ldr	r2, [r2, #575]	@ unaligned
	str	r2, [r0]
	b	.L1924
.L1925:
	mvn	r4, #106
	b	.L1920
	.fnend
	.size	ccid_function_setup, .-ccid_function_setup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_bulk_complete_out, %function
ccid_bulk_complete_out:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r2, [r1, #44]
	movw	r3, #:lower16:.LANCHOR0
	movt	r3, #:upper16:.LANCHOR0
	ldr	r1, [r3, #180]
	cmp	r2, #0
	mov	r2, #1
	movne	r3, #1
	add	r0, r1, #152
	str	r2, [r1, #180]
	strne	r3, [r1, #140]
	mov	r3, #0
	mov	r1, #3
	b	__wake_up
	.fnend
	.size	ccid_bulk_complete_out, .-ccid_bulk_complete_out
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_function_disable, %function
adb_function_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, #0
	mov	r4, r0
	str	r6, [sp, #8]
	mov	r6, #1
	str	lr, [sp, #12]
	str	r5, [r0, #92]
	strb	r5, [r0, #152]
	ldr	r0, [r0, #84]
	str	r6, [r4, #96]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	mov	r3, r5
	mov	r2, r6
	ldr	r6, [sp, #8]
	add	r0, r4, #120
	mov	r1, #3
	ldrd	r4, [sp]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	__wake_up
	.fnend
	.size	adb_function_disable, .-adb_function_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_complete_out, %function
adb_complete_out:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR0
	mov	r2, #1
	movt	r3, #:upper16:.LANCHOR0
	ldr	r0, [r3, #2284]
	str	r2, [r0, #148]
	ldr	r3, [r1, #44]
	add	r0, r0, #120
	mov	r1, #3
	cmp	r3, #0
	cmnne	r3, #104
	mov	r3, #0
	strne	r2, [r0, #-24]
	mov	r2, #1
	b	__wake_up
	.fnend
	.size	adb_complete_out, .-adb_complete_out
	.section	.rodata.str1.4
	.align	2
.LC131:
	.ascii	"rmnet_mux command error %d\012\000"
	.align	2
.LC132:
	.ascii	"unable to allocate memory for ctrl req\012\000"
	.align	2
.LC133:
	.ascii	"<3>%s: ctrl pkts dropped: cpkts_drp_cnt: %lu\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_command_complete, %function
rmnet_mux_command_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r6, [r1, #32]
	ldr	r2, [r1, #44]
	ldr	r7, [r6, #76]
	cmp	r2, #0
	blt	.L1950
	mov	r4, r1
	mov	r1, #32
	ldr	r8, [r4, #48]
	mov	r0, r8
	bl	rmnet_mux_alloc_ctrl_pkt
	subs	r5, r0, #0
	beq	.L1951
	add	r9, r6, #356
	mov	r0, r9
	bl	_raw_spin_lock
	ldr	r3, [r6, #344]
	cmp	r3, #0
	beq	.L1952
	mov	r7, r5
	mov	r2, r8
	ldr	r1, [r4]
	ldr	r0, [r7], #8
	bl	memcpy
	ldr	r3, [r6, #308]
	add	r2, r6, #304
	mov	r0, r9
	str	r7, [r6, #308]
	strd	r2, [r5, #8]
	str	r7, [r3]
	ldr	r3, [r6, #324]
	add	r3, r3, #1
	str	r3, [r6, #324]
	bl	_raw_spin_unlock
	add	r0, r6, #312
	mov	r3, #0
	ldrd	r4, [sp]
	mov	r2, #1
	mov	r1, #3
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	__wake_up
.L1952:
	mov	r0, r9
	bl	_raw_spin_unlock
	ldr	r0, [r5]
	bl	kfree
	mov	r0, r5
	bl	kfree
	ldr	r3, [r6, #412]
	ldr	r1, .L1954
	ldr	r0, .L1954+4
	add	r3, r3, #1
	str	r3, [r6, #412]
	bl	___ratelimit
	cmp	r0, #0
	bne	.L1953
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L1950:
	ldr	r0, [r7]
	movw	r1, #:lower16:.LC131
	movt	r1, #:upper16:.LC131
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	r0, r0, #32
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	dev_err
.L1951:
	ldr	r0, [r7]
	movw	r1, #:lower16:.LC132
	movt	r1, #:upper16:.LC132
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	r0, r0, #32
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	dev_err
.L1953:
	movw	r0, #:lower16:.LC133
	ldr	r1, .L1954
	movt	r0, #:upper16:.LC133
	ldrd	r4, [sp]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	ldr	r2, [r6, #412]
	ldrd	r6, [sp, #8]
	add	sp, sp, #32
	b	printk
.L1955:
	.align	2
.L1954:
	.word	.LANCHOR2+796
	.word	.LANCHOR1+612
	.fnend
	.size	rmnet_mux_command_complete, .-rmnet_mux_command_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_smd_notify, %function
rmnet_mux_smd_notify:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #2
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r5, [r0, #168]
	beq	.L1957
	cmp	r1, #3
	beq	.L1958
	cmp	r1, #1
	beq	.L1969
.L1956:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L1957:
	add	r1, r0, #164
	mov	r0, #0
	bl	_set_bit
	add	r0, r4, #172
	mov	r3, #0
	ldrd	r4, [sp]
	mov	r2, #1
	mov	r1, #3
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	__wake_up
.L1969:
	ldr	r3, [r0, #360]
	cmp	r3, #0
	beq	.L1956
	cmp	r5, #0
	bne	.L1970
.L1962:
	ldr	r0, [r4, #120]
	bl	smd_read_avail
	cmp	r0, #0
	beq	.L1956
	add	r1, r4, #128
	mov	r0, #0
	bl	_test_and_set_bit
	cmp	r0, #0
	add	r4, r4, #124
	bne	.L1956
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	__tasklet_schedule
.L1958:
	add	r1, r0, #164
	mov	r0, #0
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_clear_bit
.L1970:
	ldr	r0, [r0, #120]
	bl	smd_write_avail
	cmp	r0, r5
	blt	.L1962
	add	r1, r4, #148
	mov	r0, #0
	bl	_test_and_set_bit
	cmp	r0, #0
	add	r3, r4, #144
	bne	.L1962
	mov	r0, r3
	bl	__tasklet_schedule
	b	.L1962
	.fnend
	.size	rmnet_mux_smd_notify, .-rmnet_mux_smd_notify
	.section	.rodata.str1.4
	.align	2
.LC134:
	.ascii	"&c->wait\000"
	.align	2
.LC135:
	.ascii	"&c->smd_wait_q\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	grmnet_ctrl_smd_port_alloc, %function
grmnet_ctrl_smd_port_alloc:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r2, #:lower16:kmalloc_caches
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r0
	movt	r2, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r0, [r2, #32]
	cmp	r0, #0
	beq	.L1974
	movw	r1, #32976
	bl	kmem_cache_alloc
	subs	r4, r0, #0
	beq	.L1977
.L1972:
	movw	r3, #:lower16:grmnet_ctrl_smd_connect_w
	mov	r6, #0
	str	r5, [r4, #100]
	add	ip, r4, #116
	mov	r8, #2560
	movt	r3, #:upper16:grmnet_ctrl_smd_connect_w
	mov	r2, r6
	str	r6, [r4, #108]
	mov	r1, r6
	add	r0, r4, #128
	str	r8, [r4, #112]
	str	ip, [r4, #116]
	movw	r9, #:lower16:delayed_work_timer_fn
	movw	r7, #:lower16:.LANCHOR0
	str	ip, [r4, #120]
	movt	r9, #:upper16:delayed_work_timer_fn
	movt	r7, #:upper16:.LANCHOR0
	str	r3, [r4, #124]
	bl	init_timer_key
	movw	r3, #:lower16:grmnet_ctrl_smd_disconnect_w
	add	r1, r4, #164
	str	r9, [r4, #144]
	movt	r3, #:upper16:grmnet_ctrl_smd_disconnect_w
	add	r0, r4, #112
	mov	r2, r6
	str	r0, [r4, #148]
	add	r0, r4, #176
	str	r8, [r4, #160]
	str	r1, [r4, #164]
	str	r1, [r4, #168]
	mov	r1, r6
	str	r3, [r4, #172]
	bl	init_timer_key
	movw	r3, #:lower16:.LANCHOR2
	add	r2, r4, #160
	str	r4, [r4, #84]
	movt	r3, #:upper16:.LANCHOR2
	movw	r1, #:lower16:.LC134
	str	r9, [r4, #192]
	add	r3, r3, r5, lsl #2
	movt	r1, #:upper16:.LC134
	str	r2, [r4, #196]
	add	r0, r4, #12
	ldr	r3, [r3, #824]
	add	r2, r7, #2288
	str	r3, [r4, #4]
	bl	__init_waitqueue_head
	movw	r1, #:lower16:.LC135
	add	r2, r7, #2288
	movt	r1, #:upper16:.LC135
	add	r0, r4, #24
	bl	__init_waitqueue_head
	mov	r3, #84
	movw	lr, #:lower16:grmnet_ctrl_smd_read_w
	str	r8, [r4, #52]
	movt	lr, #:upper16:grmnet_ctrl_smd_read_w
	movw	ip, #:lower16:grmnet_ctrl_smd_write_w
	mla	r3, r3, r5, r7
	movw	r1, #:lower16:grmnet_ctrl_smd_ch_probe
	movw	r2, #:lower16:grmnet_ctrl_smd_ch_remove
	add	r7, r4, #40
	movt	r2, #:upper16:grmnet_ctrl_smd_ch_remove
	add	r5, r4, #56
	movt	ip, #:upper16:grmnet_ctrl_smd_write_w
	movt	r1, #:upper16:grmnet_ctrl_smd_ch_probe
	str	r7, [r4, #40]
	mov	r0, r6
	str	lr, [r4, #64]
	add	lr, r4, #72
	str	r7, [r4, #44]
	str	r5, [r4, #56]
	str	r5, [r4, #60]
	str	r8, [r4, #68]
	str	lr, [r4, #72]
	str	lr, [r4, #76]
	str	ip, [r4, #80]
	str	r4, [r3, #2288]
	str	r1, [r3, #2292]
	str	r2, [r3, #2296]
	ldr	r2, [r4, #4]
	str	r2, [r3, #2312]
	str	r6, [r3, #2320]
.L1971:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L1974:
	mov	r4, #16
	b	.L1972
.L1977:
	mvn	r0, #11
	b	.L1971
	.fnend
	.size	grmnet_ctrl_smd_port_alloc, .-grmnet_ctrl_smd_port_alloc
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_free_buf, %function
rmnet_sdio_free_buf:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	add	r3, r0, #180
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	mov	r5, #0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	mov	r8, r0
	mov	r0, r3
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	str	r3, [sp]
	bl	_raw_spin_lock_irqsave
	str	r5, [r4, #316]
	str	r5, [r4, #344]
	str	r5, [r4, #348]
	str	r5, [r4, #352]
	str	r5, [r4, #356]
	str	r5, [r4, #360]
	ldr	r3, [r8, #124]!
	str	r0, [sp, #4]
	cmp	r3, r8
	ldr	fp, [r3]
	movne	r10, #256
	movne	r9, #512
	beq	.L1982
.L1979:
	ldr	r2, [r3, #4]
	mov	r7, r3
	mov	r0, #0
	str	r2, [fp, #4]
	str	fp, [r2]
	str	r10, [r3]
	str	r9, [r3, #4]
	ldr	r3, [r4, #132]
	sub	r3, r3, #1
	str	r3, [r4, #132]
	str	r5, [r7, #-36]!
	ldr	r6, [r4, #80]
	bl	kfree
	mov	r1, r7
	ldr	r2, [r6, #8]
	mov	r0, r6
	ldr	r3, [r2, #12]
	blx	r3
	cmp	r8, fp
	mov	r3, fp
	ldr	fp, [fp]
	bne	.L1979
.L1982:
	mov	r5, r4
	ldr	r3, [r5, #152]!
	cmp	r3, r5
	ldr	fp, [r3]
	movne	r10, #256
	movne	r9, #512
	movne	r8, #0
	beq	.L1981
.L1980:
	ldr	r2, [r3, #4]
	mov	r7, r3
	mov	r0, #0
	str	r2, [fp, #4]
	str	fp, [r2]
	str	r10, [r3]
	str	r9, [r3, #4]
	ldr	r3, [r4, #160]
	sub	r3, r3, #1
	str	r3, [r4, #160]
	str	r8, [r7, #-36]!
	ldr	r6, [r4, #84]
	bl	kfree
	mov	r1, r7
	ldr	r2, [r6, #8]
	mov	r0, r6
	ldr	r3, [r2, #12]
	blx	r3
	cmp	r5, fp
	mov	r3, fp
	ldr	fp, [fp]
	bne	.L1980
.L1981:
	mov	r8, r4
	ldr	r3, [r8, #100]!
	cmp	r3, r8
	ldr	r5, [r3]
	movne	r10, #256
	movne	r9, #512
	beq	.L1984
.L1983:
	ldr	r2, [r3, #4]
	mov	fp, r3
	str	r2, [r5, #4]
	str	r5, [r2]
	str	r10, [r3]
	str	r9, [r3, #4]
	ldr	r3, [r4, #108]
	sub	r3, r3, #1
	str	r3, [r4, #108]
	ldr	r0, [fp, #-8]!
	bl	kfree
	mov	r0, fp
	bl	kfree
	cmp	r8, r5
	mov	r3, r5
	ldr	r5, [r5]
	bne	.L1983
.L1984:
	mov	r8, r4
	ldr	r3, [r8, #112]!
	cmp	r3, r8
	ldr	r5, [r3]
	movne	r10, #256
	movne	r9, #512
	beq	.L1986
.L1985:
	ldr	r2, [r3, #4]
	mov	fp, r3
	str	r2, [r5, #4]
	str	r5, [r2]
	str	r10, [r3]
	str	r9, [r3, #4]
	ldr	r3, [r4, #120]
	sub	r3, r3, #1
	str	r3, [r4, #120]
	ldr	r0, [fp, #-8]!
	bl	kfree
	mov	r0, fp
	bl	kfree
	cmp	r8, r5
	mov	r3, r5
	ldr	r5, [r5]
	bne	.L1985
.L1986:
	ldr	r3, [r4, #136]
	add	r5, r4, #136
	cmp	r5, r3
	beq	.L1987
	mov	r8, #0
	mov	r9, #0
	b	.L1988
.L2007:
	ldr	r2, [r4, #144]
	sub	r2, r2, #1
	str	r2, [r4, #144]
	ldm	r3, {r1, r2}
	strd	r8, [r3]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any
	ldr	r3, [r4, #136]
	cmp	r3, r5
	beq	.L1987
.L1988:
	subs	r0, r3, #0
	bne	.L2007
.L1987:
	ldr	r3, [r4, #164]
	add	r5, r4, #164
	cmp	r3, r5
	beq	.L1990
	mov	r8, #0
	mov	r9, #0
	b	.L1989
.L2008:
	ldr	r2, [r4, #172]
	sub	r2, r2, #1
	str	r2, [r4, #172]
	ldm	r3, {r1, r2}
	strd	r8, [r3]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any
	ldr	r3, [r4, #164]
	cmp	r3, r5
	beq	.L1990
.L1989:
	subs	r0, r3, #0
	bne	.L2008
.L1990:
	ldrd	r4, [r4, #88]
	ldr	r0, [r5]
	bl	kfree
	ldr	r3, [r4, #8]
	mov	r1, r5
	mov	r0, r4
	ldr	r3, [r3, #12]
	blx	r3
	ldrd	r0, [sp]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
	.fnend
	.size	rmnet_sdio_free_buf, .-rmnet_sdio_free_buf
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_complete_epin, %function
rmnet_sdio_complete_epin:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #20
	sub	sp, sp, #20
	ldr	r4, [r0]
	ldr	r2, [r1, #44]
	ldr	r6, [r1, #32]
	cmp	r2, #0
	beq	.L2010
	add	r3, r2, #108
	bics	r3, r3, #4
	beq	.L2010
	ldr	r3, [r4, #76]
	movw	r1, #:lower16:.LC114
	movt	r1, #:upper16:.LC114
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	dev_err
.L2010:
	add	r7, r4, #180
	add	r8, r4, #124
	mov	r0, r7
	bl	_raw_spin_lock
	ldr	r3, [r4, #128]
	add	r2, r5, #36
	mov	r0, r7
	str	r2, [r4, #128]
	str	r8, [r5, #36]
	str	r3, [r5, #40]
	str	r2, [r3]
	ldr	r3, [r4, #132]
	add	r3, r3, #1
	str	r3, [r4, #132]
	bl	_raw_spin_unlock
	mov	r0, r6
	bl	dev_kfree_skb_any
	ldr	r3, [r4, #184]
	cmp	r3, #0
	beq	.L2009
	ldr	r3, [r4, #308]
	tst	r3, #2
	bne	.L2039
.L2009:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L2039:
	ldr	r3, [r4, #76]
	mov	r0, r7
	str	r3, [sp, #12]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #124]
	str	r0, [sp, #8]
	cmp	r8, r3
	beq	.L2013
	add	r10, r4, #136
	str	r8, [sp, #4]
.L2018:
	ldr	r5, [r4, #136]
	mov	r0, r7
	cmp	r5, r10
	beq	.L2013
	cmp	r5, #0
	beq	.L2013
	ldr	r3, [r4, #144]
	mov	r9, #0
	mov	r8, #0
	sub	r3, r3, #1
	str	r3, [r4, #144]
	ldrd	r2, [r5]
	strd	r8, [r5]
	str	r3, [r2, #4]
	str	r2, [r3]
	ldr	r6, [r4, #124]
	str	r5, [r6, #-4]
	ldr	r1, [r5, #172]
	sub	r9, r6, #36
	ldrd	r2, [r6]
	str	r1, [r6, #-36]
	ldr	r1, [r5, #80]
	str	r1, [r6, #-32]
	str	r3, [r2, #4]
	str	r2, [r3]
	mov	r2, #256
	mov	r3, #512
	strd	r2, [r6]
	ldr	r3, [r4, #132]
	sub	r3, r3, #1
	str	r3, [r4, #132]
	bl	_raw_spin_unlock
	ldr	r0, [r4, #84]
	mov	r1, r9
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	mov	fp, r0
	mov	r0, r7
	bl	_raw_spin_lock
	cmp	fp, #0
	bne	.L2040
	ldr	r1, [sp, #4]
	ldr	r2, [r4, #124]
	ldr	r3, [r4, #344]
	cmp	r1, r2
	add	r3, r3, #1
	str	r3, [r4, #344]
	bne	.L2018
.L2013:
	ldr	r1, [sp, #8]
	mov	r0, r7
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L2040:
	ldr	r0, [r4, #184]
	ldr	r8, [sp, #4]
	cmp	r0, #0
	beq	.L2017
	ldr	r3, [sp, #12]
	movw	r1, #:lower16:.LC116
	mov	r2, fp
	movt	r1, #:upper16:.LC116
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	dev_err
	ldr	r3, [r4, #128]
	str	r6, [r4, #128]
	str	r8, [r6]
	str	r3, [r6, #4]
	str	r6, [r3]
	ldr	r3, [r4, #132]
	ldr	r2, [r4, #136]
	add	r3, r3, #1
	str	r3, [r4, #132]
	stm	r5, {r2, r10}
	str	r5, [r4, #136]
	str	r5, [r2, #4]
	ldr	r3, [r4, #144]
	add	r3, r3, #1
	str	r3, [r4, #144]
	b	.L2013
.L2017:
	str	r0, [r6, #-36]
	ldr	r4, [r4, #84]
	bl	kfree
	mov	r1, r9
	ldr	r3, [r4, #8]
	mov	r0, r4
	ldr	r3, [r3, #12]
	blx	r3
	mov	r0, r5
	bl	dev_kfree_skb_any
	b	.L2013
	.fnend
	.size	rmnet_sdio_complete_epin, .-rmnet_sdio_complete_epin
	.section	.rodata.str1.4
	.align	2
.LC136:
	.ascii	"<6>%s: sdio data ch not open\012\000"
	.align	2
.LC137:
	.ascii	"rmnet SDIO data write failed\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_data_rx_work, %function
rmnet_sdio_data_rx_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r7, [r0, #-152]
	ldr	r3, [r0, #80]
	tst	r3, #2
	beq	.L2048
	sub	r8, r0, #48
	mov	r4, r0
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	mov	r3, r4
	mov	r5, r0
	ldr	r6, [r3, #-64]!
	cmp	r6, r3
	beq	.L2043
	cmp	r6, #0
	beq	.L2043
	ldr	ip, [r4, #-56]
	mov	r2, #0
	mov	r3, #0
	mov	r1, r0
	mov	r0, r8
	sub	ip, ip, #1
	str	ip, [r4, #-56]
	ldr	lr, [r6]
	ldr	ip, [r6, #4]
	strd	r2, [r6]
	str	ip, [lr, #4]
	str	lr, [ip]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r7]
	movw	r1, #:lower16:.LC137
	mov	r5, r0
	movt	r1, #:upper16:.LC137
	add	r0, r3, #32
	bl	dev_err
	mov	r0, r6
	bl	dev_kfree_skb_any
.L2043:
	mov	r1, r5
	mov	r0, r8
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore
.L2048:
	movw	r0, #:lower16:.LC136
	ldr	r1, .L2049
	movt	r0, #:upper16:.LC136
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	printk
.L2050:
	.align	2
.L2049:
	.word	.LANCHOR2+848
	.fnend
	.size	rmnet_sdio_data_rx_work, .-rmnet_sdio_data_rx_work
	.section	.rodata.str1.4
	.align	2
.LC138:
	.ascii	"<3>%s: usb epIn failed with %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_write_data_tohost, %function
gbam_write_data_tohost:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	add	r8, r0, #8
	mov	r0, r8
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #20
	sub	sp, sp, #20
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #12]
	str	r0, [sp, #12]
	cmp	r3, #0
	moveq	r1, r0
	beq	.L2066
	ldr	r2, [r5, #28]
	add	r1, r5, #28
	ldr	r9, [r3, #76]
	str	r1, [sp, #4]
	cmp	r2, r1
	beq	.L2054
	movw	r7, #:lower16:.LANCHOR0
	movw	r10, #:lower16:.LANCHOR1
	movt	r10, #:upper16:.LANCHOR1
	add	r3, r5, #36
	movt	r7, #:upper16:.LANCHOR0
	str	r3, [sp]
	str	r10, [sp, #8]
.L2059:
	ldr	r3, [sp]
	ldr	r6, [r5, #36]
	cmp	r3, r6
	beq	.L2054
	cmp	r6, #0
	mov	r0, #1
	beq	.L2054
	ldr	r2, [r5, #44]
	mov	fp, #0
	mov	r10, #0
	ldr	r3, [r7, #2792]
	mov	lr, #256
	sub	r2, r2, #1
	add	r3, r3, r0
	str	r2, [r5, #44]
	ldm	r6, {r1, r2}
	strd	r10, [r6]
	str	r3, [r7, #2792]
	str	r2, [r1, #4]
	str	r1, [r2]
	ldr	r4, [r5, #28]
	mov	r1, #512
	str	r6, [r4, #-4]
	ldr	r2, [r6, #172]
	sub	fp, r4, #36
	ldr	ip, [r4]
	str	r2, [r4, #-36]
	ldr	r2, [r6, #80]
	str	r2, [r4, #-32]
	ldr	r2, [sp, #8]
	ldr	r2, [r2, #636]
	cmp	r3, r2
	ldr	r2, [r4, #4]
	moveq	r3, #0
	moveq	r0, r3
	streq	r3, [r7, #2792]
	ldrb	r3, [r4, #-10]	@ zero_extendqisi2
	bfi	r3, r0, #0, #1
	mov	r0, r8
	orr	r3, r3, #2
	strb	r3, [r4, #-10]
	str	r2, [ip, #4]
	str	ip, [r2]
	str	lr, [r4]
	str	r1, [r4, #4]
	bl	_raw_spin_unlock
	ldr	r3, [r9, #8]
	mov	r1, fp
	mov	r2, #32
	mov	r0, r9
	ldr	r3, [r3, #16]
	blx	r3
	mov	fp, r0
	mov	r0, r8
	bl	_raw_spin_lock
	cmp	fp, #0
	bne	.L2067
	ldr	r1, [sp, #4]
	ldr	r2, [r5, #28]
	ldr	r3, [r5, #264]
	cmp	r2, r1
	add	r3, r3, #1
	str	r3, [r5, #264]
	bne	.L2059
.L2054:
	ldr	r1, [sp, #12]
.L2066:
	mov	r0, r8
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L2067:
	movw	r0, #:lower16:.LC138
	ldr	r1, .L2068
	mov	r2, fp
	movt	r0, #:upper16:.LC138
	bl	printk
	ldr	r3, [r5, #28]
	mov	r0, r6
	str	r4, [r3, #4]
	str	r3, [r4]
	ldr	r3, [sp, #4]
	str	r3, [r4, #4]
	str	r4, [r5, #28]
	bl	dev_kfree_skb_any
	b	.L2054
.L2069:
	.align	2
.L2068:
	.word	.LANCHOR2+872
	.fnend
	.size	gbam_write_data_tohost, .-gbam_write_data_tohost
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_write_data_tohost_w, %function
gbam_write_data_tohost_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r0, [r0, #-20]
	b	gbam_write_data_tohost
	.fnend
	.size	gbam_write_data_tohost_w, .-gbam_write_data_tohost_w
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_free_buffers, %function
gbam_free_buffers:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	add	r8, r0, #4
	add	r9, r0, #8
	mov	r0, r8
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	bl	_raw_spin_lock_irqsave
	mov	r5, r0
	mov	r0, r9
	bl	_raw_spin_lock
	cmp	r4, #0
	beq	.L2073
	ldr	r2, [r4, #12]
	cmp	r2, #0
	beq	.L2073
	ldr	r3, [r4, #28]
	add	r6, r4, #28
	ldr	fp, [r2, #76]
	cmp	r6, r3
	beq	.L2074
	mov	r10, #256
	mov	r7, #512
.L2075:
	ldr	ip, [r3]
	sub	r1, r3, #36
	mov	r0, fp
	ldr	r2, [r3, #4]
	str	r2, [ip, #4]
	str	ip, [r2]
	str	r10, [r3]
	str	r7, [r3, #4]
	ldr	r3, [fp, #8]
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, [r4, #28]
	cmp	r6, r3
	bne	.L2075
	ldr	r2, [r4, #12]
.L2074:
	ldr	r3, [r4, #52]
	add	r6, r4, #52
	ldr	fp, [r2, #80]
	cmp	r6, r3
	beq	.L2079
	mov	r10, #256
	mov	r7, #512
.L2076:
	ldr	ip, [r3]
	sub	r1, r3, #36
	mov	r0, fp
	ldr	r2, [r3, #4]
	str	r2, [ip, #4]
	str	ip, [r2]
	str	r10, [r3]
	str	r7, [r3, #4]
	ldr	r3, [fp, #8]
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, [r4, #52]
	cmp	r6, r3
	bne	.L2076
.L2079:
	ldr	r3, [r4, #36]
	add	r10, r4, #36
	cmp	r10, r3
	beq	.L2077
	mov	r6, #0
	mov	r7, #0
	b	.L2078
.L2094:
	ldr	r2, [r4, #44]
	sub	r2, r2, #1
	str	r2, [r4, #44]
	ldm	r3, {r1, r2}
	strd	r6, [r3]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any
	ldr	r3, [r4, #36]
	cmp	r3, r10
	beq	.L2077
.L2078:
	subs	r0, r3, #0
	bne	.L2094
.L2077:
	ldr	r3, [r4, #60]
	add	r10, r4, #60
	cmp	r3, r10
	beq	.L2073
	mov	r6, #0
	mov	r7, #0
	b	.L2080
.L2095:
	ldr	r2, [r4, #68]
	sub	r2, r2, #1
	str	r2, [r4, #68]
	ldm	r3, {r1, r2}
	strd	r6, [r3]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any
	ldr	r3, [r4, #60]
	cmp	r3, r10
	beq	.L2073
.L2080:
	subs	r0, r3, #0
	bne	.L2095
.L2073:
	mov	r0, r9
	bl	_raw_spin_unlock
	mov	r1, r5
	mov	r0, r8
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
	.fnend
	.size	gbam_free_buffers, .-gbam_free_buffers
	.section	.rodata.str1.4
	.align	2
.LC139:
	.ascii	"<3>%s: data tx ep error %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_epin_complete, %function
gbam_epin_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r6, [r0]
	ldr	r2, [r1, #44]
	ldr	r7, [r1, #32]
	cmp	r2, #0
	bne	.L2104
.L2097:
	mov	r0, r7
	bl	dev_kfree_skb_any
	cmp	r6, #0
	beq	.L2096
	add	r5, r6, #8
	mov	r0, r5
	bl	_raw_spin_lock
	ldr	r3, [r6, #32]
	add	r2, r4, #36
	add	r1, r6, #28
	mov	r0, r5
	str	r2, [r6, #32]
	str	r1, [r4, #36]
	str	r3, [r4, #40]
	str	r2, [r3]
	bl	_raw_spin_unlock
	movw	r3, #:lower16:.LANCHOR0
	add	r1, r6, #96
	ldrd	r4, [sp]
	movt	r3, #:upper16:.LANCHOR0
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	ldr	r0, [r3, #2796]
	b	queue_work
.L2104:
	bgt	.L2098
	add	r3, r2, #108
	bics	r3, r3, #4
	beq	.L2105
.L2098:
	movw	r0, #:lower16:.LC139
	ldr	r1, .L2106
	movt	r0, #:upper16:.LC139
	bl	printk
	b	.L2097
.L2105:
	mov	r5, r0
	mov	r0, r7
	bl	dev_kfree_skb_any
	ldr	r3, [r5, #8]
	mov	r1, r4
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	r3, [r3, #12]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	bx	r3	@ indirect register sibling call
.L2096:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L2107:
	.align	2
.L2106:
	.word	.LANCHOR2+896
	.fnend
	.size	gbam_epin_complete, .-gbam_epin_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_data_receive, %function
ghsic_data_receive:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	subs	r4, r0, #0
	mov	r5, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	beq	.L2109
	ldr	r3, [r4, #4]
	cmp	r3, #0
	beq	.L2109
	add	r7, r4, #48
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #36]
	add	r1, r4, #32
	movw	r2, #:lower16:.LANCHOR1
	movt	r2, #:upper16:.LANCHOR1
	mov	r6, r0
	stm	r5, {r1, r3}
	str	r5, [r3]
	ldr	r3, [r4, #40]
	ldr	r1, [r2, #640]
	str	r5, [r4, #36]
	add	r3, r3, #1
	cmp	r1, #0
	str	r3, [r4, #40]
	beq	.L2112
	ldr	r2, [r2, #644]
	cmp	r2, r3
	bls	.L2120
.L2112:
	mov	r1, r6
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	add	r1, r4, #136
	ldr	r0, [r4, #84]
	bl	queue_work
	mov	r0, #0
.L2108:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L2109:
	mov	r0, r5
	bl	dev_kfree_skb_any
	mvn	r0, #106
	b	.L2108
.L2120:
	add	r1, r4, #164
	mov	r0, #2
	bl	_set_bit
	ldr	r3, [r4, #196]
	mov	r1, r6
	mov	r0, r7
	add	r3, r3, #1
	str	r3, [r4, #196]
	bl	_raw_spin_unlock_irqrestore
	add	r1, r4, #136
	ldr	r0, [r4, #84]
	bl	queue_work
	mvn	r0, #15
	b	.L2108
	.fnend
	.size	ghsic_data_receive, .-ghsic_data_receive
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	eth_start_xmit, %function
eth_start_xmit:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	mov	r6, r0
	strd	r8, [sp, #16]
	add	r8, r1, #1216
	mov	r0, r8
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #20
	sub	sp, sp, #20
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #1220]
	mov	r1, r0
	cmp	r3, #0
	beq	.L2177
	ldrh	r5, [r3, #90]
	mov	r0, r8
	ldr	r10, [r3, #80]
	ldrb	r3, [r3, #116]	@ zero_extendqisi2
	str	r3, [sp]
	bl	_raw_spin_unlock_irqrestore
	cmp	r10, #0
	beq	.L2123
	add	r7, r4, #1232
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [sp]
	mov	r9, r0
	cmp	r3, #0
	beq	.L2126
	ldr	r2, [r4, #1264]
	cmp	r2, #0
	beq	.L2178
.L2126:
	mov	r1, r9
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	tst	r5, #1
	bne	.L2131
	ldr	r2, [r6, #172]
	ldrb	r3, [r2]	@ zero_extendqisi2
	tst	r3, #1
	bne	.L2179
.L2131:
	mov	r0, r7
	add	r9, r8, #20
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r4, #1236]
	mov	r3, r0
	cmp	r9, r5
	beq	.L2180
	ldm	r5, {r1, r2}
	mov	ip, #256
	mov	r0, #512
	sub	fp, r5, #36
	str	r2, [r1, #4]
	str	r1, [r2]
	str	ip, [r5]
	str	r0, [r5, #4]
	ldr	r2, [r4, #1236]
	cmp	r9, r2
	beq	.L2181
.L2134:
	mov	r1, r3
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r2, [r4, #1296]
	mov	r3, r0
	cmp	r2, #0
	beq	.L2136
	ldr	r0, [r4, #1220]
	cmp	r0, #0
	beq	.L2137
	mov	r1, r6
	str	r3, [sp, #4]
	blx	r2
	ldr	r3, [sp, #4]
	mov	r6, r0
.L2137:
	cmp	r6, #0
	beq	.L2182
.L2136:
	ldr	r2, [sp]
	cmp	r2, #0
	bne	.L2183
	mov	r1, r3
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	ldr	r8, [r6, #80]
	ldr	r3, [r6, #172]
	str	r3, [r5, #-36]
	str	r6, [r5, #-4]
.L2142:
	ldr	r3, [r4, #1220]
	ldrb	r2, [r3, #96]	@ zero_extendqisi2
	cmp	r2, #0
	moveq	r2, #1
	beq	.L2143
	ldr	r3, [r3, #104]
	cmp	r3, r8
	bne	.L2143
	ldrh	r3, [r10, #20]
	sdiv	r2, r8, r3
	mls	r2, r3, r2, r8
	subs	r2, r2, #0
	movne	r2, #1
.L2143:
	ldrb	r3, [r5, #-10]	@ zero_extendqisi2
	bfi	r3, r2, #1, #1
	tst	r3, #2
	uxtb	r2, r3
	strb	r3, [r5, #-10]
	beq	.L2144
	ldrb	r3, [r4, #1340]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L2144
	ldrh	r1, [r10, #20]
	sdiv	r3, r8, r1
	mls	r3, r1, r3, r8
	cmp	r3, #0
	bne	.L2144
	bfi	r2, r3, #1, #1
	add	r8, r8, #1
	strb	r2, [r5, #-10]
.L2144:
	str	r8, [r5, #-32]
	ldr	r3, [r4, #1228]
	ldr	r2, [r3, #20]
	cmp	r2, #2
	bls	.L2145
	ldr	r3, [r3, #16]
	sub	r3, r3, #3
	bics	r3, r3, #2
	beq	.L2184
.L2145:
	ldrb	r3, [r5, #-10]	@ zero_extendqisi2
	bfc	r3, #0, #1
	strb	r3, [r5, #-10]
.L2147:
	ldr	r3, [r10, #8]
	mov	r1, fp
	mov	r0, r10
	mov	r2, #32
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	bne	.L2148
	movw	r3, #:lower16:jiffies
	movt	r3, #:upper16:jiffies
	ldr	r3, [r3]
	str	r3, [r4, #604]
.L2121:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L2183:
	ldr	ip, [r5, #-36]
	str	r3, [sp, #4]
	ldr	r0, [r5, #-32]
	ldr	r1, [r4, #1220]
	ldr	r2, [r4, #1284]
	add	r0, ip, r0
	ldr	r1, [r1, #136]
	bl	memcpy
	ldr	r3, [sp, #4]
	mov	r0, r8
	ldr	r2, [r5, #-32]
	mov	r1, r3
	ldr	r3, [r4, #1284]
	add	r3, r2, r3
	str	r3, [r5, #-32]
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, [r5, #-36]
	ldr	r3, [r5, #-32]
	ldr	r2, [r6, #80]
	ldr	r1, [r6, #172]
	add	r0, r0, r3
	bl	memcpy
	ldr	r8, [r5, #-32]
	mov	r0, r6
	ldr	r3, [r6, #80]
	add	r8, r8, r3
	str	r8, [r5, #-32]
	bl	dev_kfree_skb_any
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #1260]
	mov	r1, r0
	ldr	r2, [r4, #1292]
	add	r3, r3, #1
	cmp	r3, r2
	str	r3, [r4, #1260]
	ldr	r3, [r4, #1256]
	bcs	.L2141
	cmp	r3, #5
	bgt	.L2185
.L2141:
	add	r3, r3, #1
	mov	r2, #0
	mov	r0, r7
	str	r3, [r4, #1256]
	str	r2, [r4, #1260]
	bl	_raw_spin_unlock_irqrestore
	b	.L2142
.L2179:
	ldrb	r1, [r2, #1]	@ zero_extendqisi2
	ldrb	ip, [r2, #2]	@ zero_extendqisi2
	ldrb	r0, [r2, #3]	@ zero_extendqisi2
	and	r3, r3, r1
	ldrb	r1, [r2, #4]	@ zero_extendqisi2
	ldrb	r2, [r2, #5]	@ zero_extendqisi2
	and	r3, r3, ip
	and	r3, r3, r0
	and	r3, r3, r1
	and	r3, r3, r2
	cmp	r3, #255
	moveq	r3, #8
	movne	r3, #2
	tst	r3, r5
	bne	.L2131
.L2123:
	mov	r0, r6
	bl	dev_kfree_skb_any
	mov	r0, #0
	b	.L2121
.L2148:
	ldr	r3, [sp]
	cmp	r3, #0
	movne	r3, #0
	strne	r3, [r5, #-32]
	beq	.L2186
.L2138:
	ldr	r2, [r4, #1224]
	mov	r0, r7
	ldr	r3, [r2, #260]
	add	r3, r3, #1
	str	r3, [r2, #260]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #1236]
	mov	r6, r0
	cmp	r9, r3
	beq	.L2187
.L2149:
	ldr	r3, [r4, #1240]
	mov	r0, r7
	mov	r1, r6
	str	r5, [r4, #1240]
	str	r9, [r5]
	str	r3, [r5, #4]
	str	r5, [r3]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, #0
	b	.L2121
.L2177:
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r6
	bl	dev_kfree_skb_any
	mov	r0, #0
	b	.L2121
.L2181:
	ldr	r1, [r4, #576]
	str	r3, [sp, #4]
	cmp	r1, #0
	beq	.L2188
	add	r1, r1, #80
	mov	r0, #0
	bl	_set_bit
	ldr	r3, [sp, #4]
	b	.L2134
.L2178:
	ldr	r0, [r4, #1224]
	add	r3, r8, #20
	ldr	fp, [r4, #1236]
	ldr	r1, [r4, #1292]
	str	r3, [sp, #12]
	ldr	r0, [r0, #364]
	cmp	fp, r3
	add	r0, r0, #80
	mul	r1, r1, r0
	str	r1, [r4, #1264]
	beq	.L2126
	stmib	sp, {r2, r5}
	mov	r5, fp
	mov	fp, r3
	b	.L2130
.L2127:
	ldr	r3, [sp, #4]
	str	r3, [r5, #-4]
	ldr	r5, [r5]
	cmp	r5, fp
	beq	.L2189
.L2130:
	ldr	r2, [r5, #-36]
	cmp	r2, #0
	bne	.L2127
	movw	r1, #32800
	ldr	r0, [r4, #1264]
	bl	__kmalloc
	cmp	r0, #0
	str	r0, [r5, #-36]
	bne	.L2127
	ldr	r6, [sp, #12]
	str	r0, [r4, #1264]
	ldr	r5, [r4, #1236]
	cmp	r5, r6
	beq	.L2129
	mov	r4, r0
.L2128:
	ldr	r0, [r5, #-36]
	bl	kfree
	str	r4, [r5, #-36]
	ldr	r5, [r5]
	cmp	r5, r6
	bne	.L2128
.L2129:
	mov	r0, r7
	mov	r1, r9
	bl	_raw_spin_unlock_irqrestore
	mvn	r0, #11
	b	.L2121
.L2184:
	movw	r1, #:lower16:.LANCHOR1
	ldr	r2, [r4, #1252]
	movt	r1, #:upper16:.LANCHOR1
	ldr	r1, [r1, #648]
	add	r2, r2, #1
	cmp	r2, r1, lsr #1
	str	r2, [r4, #1252]
	beq	.L2190
	ldrb	r3, [r5, #-10]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r5, #-10]
	b	.L2147
.L2189:
	ldr	r5, [sp, #8]
	b	.L2126
.L2186:
	mov	r0, r6
	bl	dev_kfree_skb_any
	b	.L2138
.L2187:
	ldr	r1, [r4, #576]
	mov	r0, #0
	add	r1, r1, #80
	bl	_clear_bit
	b	.L2149
.L2190:
	ldrb	r2, [r5, #-10]	@ zero_extendqisi2
	bfi	r2, r3, #0, #1
	strb	r2, [r5, #-10]
	str	r3, [r4, #1252]
	b	.L2147
.L2182:
	mov	r1, r3
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	b	.L2138
.L2185:
	ldr	r3, [r4, #1236]
	mov	r0, r7
	str	r5, [r3, #4]
	stm	r5, {r3, r9}
	str	r5, [r4, #1236]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, #0
	b	.L2121
.L2180:
	mov	r1, r0
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	mov	r0, #16
	b	.L2121
.L2188:
	movw	r0, #:lower16:.LC82
	movw	r1, #1847
	movt	r0, #:upper16:.LC82
	bl	warn_slowpath_null
	movw	r0, #:lower16:.LC83
	movt	r0, #:upper16:.LC83
	bl	printk
	ldr	r3, [sp, #4]
	b	.L2134
	.fnend
	.size	eth_start_xmit, .-eth_start_xmit
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_disconnect_work, %function
rmnet_mux_disconnect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r3, [r0, #-20]
	.pad #4
	sub	sp, sp, #4
	cmp	r3, #3
	beq	.L2227
.L2192:
	sub	r6, r4, #16
	sub	r7, r4, #188
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #-188]
	mov	r5, r0
	cmp	r7, r3
	beq	.L2193
	mov	r10, #256
	mov	r9, #512
.L2194:
	ldm	r3, {r1, r2}
	mov	fp, r3
	mov	r0, #0
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r10, [r3]
	str	r9, [r3, #4]
	str	r0, [fp, #-36]!
	ldr	r8, [r4, #-292]
	bl	kfree
	mov	r1, fp
	ldr	r2, [r8, #8]
	mov	r0, r8
	ldr	r3, [r2, #12]
	blx	r3
	ldr	r3, [r4, #-188]
	cmp	r7, r3
	bne	.L2194
.L2193:
	ldr	r3, [r4, #-164]
	sub	fp, r4, #164
	cmp	fp, r3
	beq	.L2195
	mov	r10, #256
	mov	r9, #512
.L2196:
	ldm	r3, {r1, r2}
	mov	r7, r3
	mov	r0, #0
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r10, [r3]
	str	r9, [r3, #4]
	str	r0, [r7, #-36]!
	ldr	r8, [r4, #-288]
	bl	kfree
	mov	r1, r7
	ldr	r2, [r8, #8]
	mov	r0, r8
	ldr	r3, [r2, #12]
	blx	r3
	ldr	r3, [r4, #-164]
	cmp	fp, r3
	bne	.L2196
.L2195:
	ldr	r3, [r4, #-180]
	sub	r7, r4, #180
	cmp	r3, r7
	beq	.L2200
	mov	r8, #0
	mov	r9, #0
	b	.L2197
.L2228:
	ldr	r2, [r4, #-172]
	sub	r2, r2, #1
	str	r2, [r4, #-172]
	ldm	r3, {r1, r2}
	strd	r8, [r3]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any
	ldr	r3, [r4, #-180]
	cmp	r3, r7
	beq	.L2200
.L2197:
	subs	r0, r3, #0
	bne	.L2228
.L2200:
	ldr	r3, [r4, #-156]
	sub	r7, r4, #156
	cmp	r3, r7
	beq	.L2198
	mov	r8, #0
	mov	r9, #0
	b	.L2199
.L2229:
	ldr	r2, [r4, #-148]
	sub	r2, r2, #1
	str	r2, [r4, #-148]
	ldm	r3, {r1, r2}
	strd	r8, [r3]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any
	ldr	r3, [r4, #-156]
	cmp	r3, r7
	beq	.L2198
.L2199:
	subs	r0, r3, #0
	bne	.L2229
.L2198:
	ldr	r3, [r4, #-276]
	sub	r8, r4, #276
	cmp	r8, r3
	beq	.L2201
	mov	fp, #256
	mov	r10, #512
.L2202:
	ldm	r3, {r1, r2}
	mov	r7, r3
	str	r2, [r1, #4]
	str	r1, [r2]
	str	fp, [r3]
	str	r10, [r3, #4]
	ldr	r9, [r4, #-292]
	ldr	r0, [r7, #-36]!
	bl	kfree
	ldr	r3, [r9, #8]
	mov	r0, r9
	mov	r1, r7
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, [r4, #-276]
	cmp	r8, r3
	bne	.L2202
.L2201:
	ldr	r3, [r4, #-268]
	sub	r8, r4, #268
	cmp	r8, r3
	beq	.L2203
	mov	r10, #256
	mov	r9, #512
.L2204:
	ldm	r3, {r1, r2}
	mov	r7, r3
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r10, [r3]
	str	r9, [r3, #4]
	ldr	fp, [r4, #-288]
	ldr	r0, [r7, #-36]!
	bl	kfree
	ldr	r3, [fp, #8]
	mov	r0, fp
	mov	r1, r7
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, [r4, #-268]
	cmp	r8, r3
	bne	.L2204
.L2203:
	ldr	r3, [r4, #-260]
	sub	r8, r4, #260
	cmp	r8, r3
	beq	.L2205
	mov	r10, #256
	mov	r9, #512
.L2206:
	ldm	r3, {r1, r2}
	mov	r7, r3
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r10, [r3]
	str	r9, [r3, #4]
	ldr	fp, [r4, #-288]
	ldr	r0, [r7, #-36]!
	bl	kfree
	ldr	r3, [fp, #8]
	mov	r0, fp
	mov	r1, r7
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, [r4, #-260]
	cmp	r8, r3
	bne	.L2206
.L2205:
	ldr	r3, [r4, #-68]
	sub	r10, r4, #68
	cmp	r10, r3
	beq	.L2207
	mov	r8, #256
	mov	r7, #512
.L2208:
	ldm	r3, {r1, r2}
	mov	r9, r3
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r8, [r3]
	str	r7, [r3, #4]
	ldr	r0, [r9, #-8]!
	bl	kfree
	mov	r0, r9
	bl	kfree
	ldr	r3, [r4, #-68]
	ldr	r2, [r4, #-48]
	cmp	r10, r3
	sub	r2, r2, #1
	str	r2, [r4, #-48]
	bne	.L2208
.L2207:
	ldr	r3, [r4, #-44]
	sub	r10, r4, #44
	cmp	r10, r3
	beq	.L2209
	mov	r8, #256
	mov	r7, #512
.L2210:
	ldm	r3, {r1, r2}
	mov	r9, r3
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r8, [r3]
	str	r7, [r3, #4]
	ldr	r0, [r9, #-8]!
	bl	kfree
	mov	r0, r9
	bl	kfree
	ldr	r3, [r4, #-44]
	ldr	r2, [r4, #-36]
	cmp	r10, r3
	sub	r2, r2, #1
	str	r2, [r4, #-36]
	bne	.L2210
.L2209:
	mov	r1, r5
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	mov	r3, #0
	sub	r0, r4, #60
	mov	r2, #1
	mov	r1, #3
	str	r3, [r4, #-20]
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	__wake_up
.L2227:
	sub	r0, r0, #228
	bl	tasklet_kill
	sub	r0, r4, #248
	bl	tasklet_kill
	b	.L2192
	.fnend
	.size	rmnet_mux_disconnect_work, .-rmnet_mux_disconnect_work
	.section	.rodata.str1.4
	.align	2
.LC140:
	.ascii	"rmnet_mux SDIO data write failed\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_sdio_data_rx_work, %function
rmnet_mux_sdio_data_rx_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	add	r6, r0, #124
	sub	r7, r0, #16
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	mov	fp, r0
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	ldr	r10, [r0, #-156]
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r4, [fp, #-16]
	mov	r5, r0
	cmp	r4, r7
	beq	.L2231
	movw	r3, #:lower16:.LC140
	movt	r3, #:upper16:.LC140
	str	r3, [sp, #4]
	b	.L2232
.L2238:
	ldr	r2, [fp, #-8]
	mov	r8, #0
	mov	r9, #0
	sub	r2, r2, #1
	str	r2, [fp, #-8]
	ldr	ip, [r4]
	ldr	r2, [r4, #4]
	strd	r8, [r4]
	str	r2, [ip, #4]
	str	ip, [r2]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r2, [r10]
	mov	r5, r0
	ldr	r1, [sp, #4]
	add	r0, r2, #32
	bl	dev_err
	mov	r0, r4
	bl	dev_kfree_skb_any
	ldr	r4, [fp, #-16]
	cmp	r4, r7
	beq	.L2231
.L2232:
	cmp	r4, #0
	mov	r1, r5
	mov	r0, r6
	bne	.L2238
.L2231:
	mov	r1, r5
	mov	r0, r6
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
	.fnend
	.size	rmnet_mux_sdio_data_rx_work, .-rmnet_mux_sdio_data_rx_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_sdio_complete_epin, %function
rmnet_mux_sdio_complete_epin:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r4, [r0]
	.pad #20
	sub	sp, sp, #20
	ldr	r9, [r1, #32]
	ldr	r7, [r4, #352]
	cmp	r7, #0
	beq	.L2264
	ldr	r2, [r1, #44]
	cmp	r2, #0
	beq	.L2241
	add	r3, r2, #108
	bics	r3, r3, #4
	beq	.L2241
	ldr	r3, [r4, #76]
	movw	r1, #:lower16:.LC115
	movt	r1, #:upper16:.LC115
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	dev_err
.L2241:
	add	r7, r4, #356
	add	r8, r4, #184
	mov	r0, r7
	bl	_raw_spin_lock
	ldr	r3, [r4, #188]
	add	r2, r5, #36
	mov	r0, r7
	str	r2, [r4, #188]
	str	r8, [r5, #36]
	str	r3, [r5, #40]
	str	r2, [r3]
	bl	_raw_spin_unlock
	mov	r0, r9
	bl	dev_kfree_skb_any
	ldr	r3, [r4, #360]
	cmp	r3, #0
	bne	.L2265
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L2265:
	ldr	r3, [r4, #76]
	mov	r0, r7
	str	r3, [sp, #12]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #184]
	str	r0, [sp, #8]
	cmp	r8, r3
	beq	.L2244
	add	r10, r4, #192
	str	r8, [sp, #4]
.L2249:
	ldr	r5, [r4, #192]
	mov	r0, r7
	cmp	r5, r10
	beq	.L2244
	cmp	r5, #0
	beq	.L2244
	ldr	r3, [r4, #200]
	mov	r9, #0
	mov	r8, #0
	sub	r3, r3, #1
	str	r3, [r4, #200]
	ldrd	r2, [r5]
	strd	r8, [r5]
	str	r3, [r2, #4]
	str	r2, [r3]
	ldr	r6, [r4, #184]
	str	r5, [r6, #-4]
	ldr	r1, [r5, #172]
	sub	r9, r6, #36
	ldrd	r2, [r6]
	str	r1, [r6, #-36]
	ldr	r1, [r5, #80]
	str	r1, [r6, #-32]
	str	r3, [r2, #4]
	str	r2, [r3]
	mov	r2, #256
	mov	r3, #512
	strd	r2, [r6]
	bl	_raw_spin_unlock
	ldr	r0, [r4, #84]
	mov	r1, r9
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	mov	fp, r0
	mov	r0, r7
	bl	_raw_spin_lock
	cmp	fp, #0
	bne	.L2266
	ldr	r1, [sp, #4]
	ldr	r2, [r4, #184]
	ldr	r3, [r4, #396]
	cmp	r1, r2
	add	r3, r3, #1
	str	r3, [r4, #396]
	bne	.L2249
.L2244:
	ldr	r1, [sp, #8]
	mov	r0, r7
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L2264:
	mov	r6, r0
	mov	r0, r9
	bl	dev_kfree_skb_any
	mov	r0, r7
	str	r7, [r5]
	bl	kfree
	ldr	r3, [r6, #8]
	mov	r1, r5
	mov	r0, r6
	ldr	r3, [r3, #12]
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	bx	r3	@ indirect register sibling call
.L2266:
	ldr	r0, [r4, #360]
	ldr	r8, [sp, #4]
	cmp	r0, #0
	beq	.L2248
	ldr	r3, [sp, #12]
	movw	r1, #:lower16:.LC116
	mov	r2, fp
	movt	r1, #:upper16:.LC116
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	dev_err
	ldr	r3, [r4, #188]
	str	r6, [r4, #188]
	str	r8, [r6]
	str	r3, [r6, #4]
	str	r6, [r3]
	ldr	r3, [r4, #192]
	stm	r5, {r3, r10}
	str	r5, [r4, #192]
	str	r5, [r3, #4]
	ldr	r3, [r4, #200]
	add	r3, r3, #1
	str	r3, [r4, #200]
	b	.L2244
.L2248:
	str	r0, [r6, #-36]
	ldr	r4, [r4, #84]
	bl	kfree
	mov	r1, r9
	ldr	r3, [r4, #8]
	mov	r0, r4
	ldr	r3, [r3, #12]
	blx	r3
	mov	r0, r5
	bl	dev_kfree_skb_any
	b	.L2244
	.fnend
	.size	rmnet_mux_sdio_complete_epin, .-rmnet_mux_sdio_complete_epin
	.section	.rodata.str1.4
	.align	2
.LC141:
	.ascii	"rmnet_mux data rx enqueue err %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_sdio_complete_epout, %function
rmnet_mux_sdio_complete_epout:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r0
	mov	r4, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r7, [r0]
	.pad #8
	sub	sp, sp, #8
	ldr	r8, [r1, #32]
	ldr	r6, [r7, #352]
	cmp	r6, #0
	beq	.L2289
	ldr	r3, [r1, #44]
	ldr	r6, [r7, #76]
	cmn	r3, #104
	beq	.L2269
	cmp	r3, #0
	beq	.L2270
	cmn	r3, #108
	beq	.L2269
	ldr	r2, [r0, #4]
	movw	r1, #:lower16:.LC112
	add	r5, r7, #356
	ldr	r0, [r6]
	movt	r1, #:upper16:.LC112
	ldr	lr, [r4, #4]
	ldr	ip, [r4, #48]
	add	r0, r0, #32
	stm	sp, {ip, lr}
	bl	dev_err
	mov	r0, r8
	bl	dev_kfree_skb_any
	mov	r0, r5
	bl	_raw_spin_lock
.L2272:
	movw	r3, #:lower16:.LANCHOR1
	ldr	r2, [r7, #300]
	movt	r3, #:upper16:.LANCHOR1
	ldr	r3, [r3, #652]
	cmp	r2, r3
	bcs	.L2290
	mov	r0, r5
	bl	_raw_spin_unlock
	mvn	r3, #0
	mov	r2, #0
	mov	r1, #32
	movw	r0, #2056
	bl	__alloc_skb
	subs	r5, r0, #0
	beq	.L2276
	ldr	r0, [r5, #160]
	mov	ip, #2048
	mov	r2, #32
	ldr	r3, [r5, #172]
	mov	r1, r4
	add	r0, r0, #8
	add	r3, r3, #8
	str	r0, [r5, #160]
	str	r3, [r5, #172]
	stm	r4, {r3, ip}
	str	r5, [r4, #32]
	ldr	r0, [r7, #80]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r8, r0, #0
	bne	.L2291
.L2267:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L2270:
	mov	r0, r8
	add	r5, r7, #356
	ldr	r1, [r1, #48]
	bl	skb_put
	mov	r0, r5
	bl	_raw_spin_lock
	ldr	r3, [r7, #220]
	add	r2, r7, #216
	add	r1, r7, #232
	strd	r2, [r8]
	str	r8, [r3]
	ldr	r3, [r7, #224]
	str	r8, [r7, #220]
	ldr	r0, [r7, #368]
	add	r3, r3, #1
	str	r3, [r7, #224]
	bl	queue_work
	b	.L2272
.L2269:
	mov	r0, r8
	bl	dev_kfree_skb_any
	mov	r0, #0
	str	r0, [r4]
.L2288:
	bl	kfree
	ldr	r3, [r5, #8]
	mov	r1, r4
	mov	r0, r5
	ldr	r3, [r3, #12]
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	bx	r3	@ indirect register sibling call
.L2289:
	mov	r0, r8
	bl	dev_kfree_skb_any
	mov	r0, r6
	str	r6, [r4]
	b	.L2288
.L2290:
	ldr	r3, [r7, #212]
	add	r2, r4, #36
	add	r1, r7, #208
	mov	r0, r5
	str	r2, [r7, #212]
	str	r1, [r4, #36]
	str	r3, [r4, #40]
	str	r2, [r3]
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock
.L2291:
	mov	r0, r5
	bl	dev_kfree_skb_any
.L2274:
	ldr	r0, [r6]
	movw	r1, #:lower16:.LC141
	mov	r2, r8
	movt	r1, #:upper16:.LC141
	add	r0, r0, #32
	bl	dev_err
	ldr	r3, [r7, #212]
	add	r2, r4, #36
	add	r1, r7, #208
	str	r2, [r7, #212]
	str	r1, [r4, #36]
	str	r3, [r4, #40]
	str	r2, [r3]
	b	.L2267
.L2276:
	mvn	r8, #11
	b	.L2274
	.fnend
	.size	rmnet_mux_sdio_complete_epout, .-rmnet_mux_sdio_complete_epout
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_unbind, %function
rmnet_sdio_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	add	r0, r1, #244
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r1
	str	lr, [sp, #4]
	bl	cancel_delayed_work_sync
	ldr	r0, [r4, #192]
	bl	destroy_workqueue
	ldr	r2, [r4, #308]
	mov	r3, #0
	str	r3, [r4, #80]
	str	r3, [r4, #84]
	tst	r2, #2
	str	r3, [r4, #88]
	bne	.L2302
	ldr	r3, [r4, #312]
	tst	r3, #2
	bne	.L2303
.L2294:
	mov	r0, r4
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	kfree
.L2302:
	add	r1, r4, #308
	mov	r0, #1
	bl	_clear_bit
	ldr	r3, [r4, #312]
	tst	r3, #2
	beq	.L2294
.L2303:
	add	r1, r4, #312
	mov	r0, #1
	bl	_clear_bit
	b	.L2294
	.fnend
	.size	rmnet_sdio_unbind, .-rmnet_sdio_unbind
	.section	.rodata.str1.4
	.align	2
.LC142:
	.ascii	"<3>%s: unable to open smd port:%s err:%d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	grmnet_ctrl_smd_connect_w, %function
grmnet_ctrl_smd_connect_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r3, [r0, #-104]
	tst	r3, #2
	bne	.L2305
	ldr	r3, [r0, #-104]
	tst	r3, #4
	beq	.L2314
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L2305:
	sub	r2, r0, #112
	movw	r3, #:lower16:grmnet_ctrl_smd_notify
	ldr	r0, [r0, #-108]
	movt	r3, #:upper16:grmnet_ctrl_smd_notify
	mov	r1, r2
	bl	smd_open
	subs	r3, r0, #0
	beq	.L2307
	cmn	r3, #11
	bne	.L2308
	movw	r3, #:lower16:.LANCHOR0
	mov	r1, r4
	ldrd	r4, [sp]
	movt	r3, #:upper16:.LANCHOR0
	mov	r2, #75
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	ldr	r0, [r3, #2280]
	b	queue_delayed_work
.L2307:
	sub	r6, r4, #4
	ldr	r7, [r4, #-24]
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #-8]
	mov	r5, r0
	cmp	r3, #0
	beq	.L2309
	orr	r2, r7, #4
	mov	r1, r7
	ldr	r0, [r4, #-112]
	mvn	r2, r2
	bl	smd_tiocmset
.L2309:
	mov	r1, r5
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore
.L2314:
	sub	r1, r0, #104
	mov	r0, #2
	ldr	r4, [r4, #-12]
	bl	_set_bit
	ldr	r0, .L2315
	mov	r3, #84
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	mla	r0, r3, r4, r0
	ldrd	r4, [sp]
	add	sp, sp, #24
	add	r0, r0, #4
	b	platform_driver_register
.L2308:
	movw	r0, #:lower16:.LC142
	ldr	r1, .L2315+4
	movt	r0, #:upper16:.LC142
	ldr	r2, [r4, #-108]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	printk
.L2316:
	.align	2
.L2315:
	.word	.LANCHOR0+2288
	.word	.LANCHOR2+916
	.fnend
	.size	grmnet_ctrl_smd_connect_w, .-grmnet_ctrl_smd_connect_w
	.section	.rodata.str1.4
	.align	2
.LC143:
	.ascii	"Unable to open SDIO DATA channel\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_open_sdio_work, %function
rmnet_mux_open_sdio_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR0
	mov	r1, r0
	movt	r3, #:upper16:.LANCHOR0
	ldr	r2, [r3, #2800]
	cmp	r2, #90
	ble	.L2318
	ldr	r3, [r0, #-172]
	movw	r1, #:lower16:.LC143
	movt	r1, #:upper16:.LC143
	ldr	r0, [r3]
	add	r0, r0, #32
	b	dev_err
.L2318:
	add	ip, r2, #1
	mov	r2, #600
	ldr	r0, [r0, #120]
	str	ip, [r3, #2800]
	b	queue_delayed_work
	.fnend
	.size	rmnet_mux_open_sdio_work, .-rmnet_mux_open_sdio_work
	.section	.rodata.str1.4
	.align	2
.LC144:
	.ascii	"<3>%s: rx queue failed %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_start_rx, %function
gbam_start_rx:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	add	r9, r0, #4
	mov	r8, r0
	mov	r0, r9
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r8, #12]
	mov	r5, r0
	cmp	r3, #0
	beq	.L2323
	ldr	r10, [r3, #80]
	movw	r6, #:lower16:.LANCHOR1
	add	r2, r8, #52
	movt	r6, #:upper16:.LANCHOR1
	str	r2, [sp, #4]
.L2321:
	ldr	r0, [sp, #4]
	mvn	r3, #0
	mov	r2, #0
	ldr	r4, [r8, #52]
	mov	r1, #32
	cmp	r4, r0
	sub	fp, r4, #36
	beq	.L2323
	ldr	r0, [r6, #656]
	cmp	r0, #0
	beq	.L2322
	ldr	ip, [r8, #68]
	ldr	r0, [r6, #660]
	cmp	ip, r0
	bcs	.L2323
.L2322:
	ldr	r0, [r6, #664]
	add	r0, r0, #8
	bl	__alloc_skb
	mov	r3, r0
	mov	lr, #256
	cmp	r3, #0
	mov	ip, #512
	mov	r1, r5
	mov	r0, r9
	beq	.L2323
	ldr	r5, [r3, #160]
	str	r3, [sp]
	ldr	r2, [r3, #172]
	add	r5, r5, #8
	add	r2, r2, #8
	str	r5, [r3, #160]
	str	r2, [r3, #172]
	ldr	r5, [r4]
	ldr	r2, [r4, #4]
	str	r2, [r5, #4]
	str	r5, [r2]
	str	lr, [r4]
	str	ip, [r4, #4]
	ldr	r2, [r3, #172]
	str	r2, [r4, #-36]
	ldr	r2, [r6, #664]
	str	r2, [r4, #-32]
	str	r3, [r4, #-4]
	bl	_raw_spin_unlock_irqrestore
	ldr	ip, [r10, #8]
	mov	r2, #32
	mov	r1, fp
	mov	r0, r10
	ldr	r5, [ip, #16]
	blx	r5
	mov	r7, r0
	mov	r0, r9
	bl	_raw_spin_lock_irqsave
	cmp	r7, #0
	mov	r5, r0
	ldr	r3, [sp]
	bne	.L2341
	ldr	r3, [r8, #12]
	cmp	r3, #0
	bne	.L2321
.L2323:
	mov	r1, r5
	mov	r0, r9
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L2341:
	mov	r0, r3
	bl	dev_kfree_skb_any
	ldr	r0, .L2343
	bl	__printk_ratelimit
	cmp	r0, #0
	bne	.L2342
.L2325:
	ldr	r3, [r8, #12]
	cmp	r3, #0
	beq	.L2326
	ldr	r3, [r8, #52]
	str	r4, [r3, #4]
	str	r3, [r4]
	ldr	r3, [sp, #4]
	str	r3, [r4, #4]
	str	r4, [r8, #52]
	b	.L2323
.L2326:
	ldr	r3, [r10, #8]
	mov	r1, fp
	mov	r0, r10
	ldr	r3, [r3, #12]
	blx	r3
	b	.L2323
.L2342:
	movw	r0, #:lower16:.LC144
	ldr	r1, .L2343
	mov	r2, r7
	movt	r0, #:upper16:.LC144
	bl	printk
	b	.L2325
.L2344:
	.align	2
.L2343:
	.word	.LANCHOR2+944
	.fnend
	.size	gbam_start_rx, .-gbam_start_rx
	.section	.rodata.str1.4
	.align	2
.LC145:
	.ascii	"<3>%s: %s response error %d, %d/%d\012\000"
	.align	2
.LC146:
	.ascii	"<3>%s: data rx enqueue err %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_epout_complete, %function
gbam_epout_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	mov	r4, r1
	mov	r5, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	lr, [sp, #24]
	.pad #12
	sub	sp, sp, #12
	ldr	r6, [r0]
	ldr	r7, [r1, #44]
	ldr	r8, [r1, #32]
	cmn	r7, #104
	beq	.L2346
	cmp	r7, #0
	beq	.L2347
	cmn	r7, #108
	beq	.L2346
	ldr	r0, .L2378
	bl	__printk_ratelimit
	cmp	r0, #0
	bne	.L2374
.L2350:
	mov	r0, r8
	add	r9, r6, #4
	bl	dev_kfree_skb_any
	mov	r0, r9
	bl	_raw_spin_lock
.L2349:
	movw	r8, #:lower16:.LANCHOR1
	movt	r8, #:upper16:.LANCHOR1
	ldr	r3, [r8, #656]
	cmp	r3, #0
	beq	.L2351
	ldr	r2, [r6, #68]
	ldr	r3, [r8, #660]
	cmp	r2, r3
	bcs	.L2375
.L2351:
	mov	r0, r9
	bl	_raw_spin_unlock
	ldr	r0, [r8, #664]
	mvn	r3, #0
	mov	r2, #0
	mov	r1, #32
	add	r0, r0, #8
	bl	__alloc_skb
	subs	r7, r0, #0
	beq	.L2355
	ldr	ip, [r7, #160]
	mov	r0, r5
	mov	r2, #32
	ldr	r3, [r7, #172]
	mov	r1, r4
	add	ip, ip, #8
	add	r3, r3, #8
	str	ip, [r7, #160]
	str	r3, [r7, #172]
	str	r3, [r4]
	ldr	r3, [r8, #664]
	str	r3, [r4, #4]
	str	r7, [r4, #32]
	ldr	r3, [r5, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r5, r0, #0
	bne	.L2376
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L2347:
	mov	r0, r8
	add	r9, r6, #4
	ldr	r1, [r1, #48]
	bl	skb_put
	mov	r0, r9
	bl	_raw_spin_lock
	ldr	r2, [r6, #64]
	add	r1, r6, #60
	movw	r3, #:lower16:.LANCHOR0
	movt	r3, #:upper16:.LANCHOR0
	ldr	r0, [r3, #2796]
	stm	r8, {r1, r2}
	add	r1, r6, #80
	str	r8, [r2]
	ldr	r3, [r6, #68]
	str	r8, [r6, #64]
	add	r3, r3, #1
	str	r3, [r6, #68]
	bl	queue_work
	b	.L2349
.L2346:
	mov	r0, r8
	bl	dev_kfree_skb_any
	mov	r3, #0
	mov	r1, r4
	mov	r0, r5
	str	r3, [r4]
	ldr	r3, [r5, #8]
	ldr	r3, [r3, #12]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	lr, [sp, #24]
	add	sp, sp, #28
	bx	r3	@ indirect register sibling call
.L2376:
	mov	r0, r7
	bl	dev_kfree_skb_any
	ldr	r0, .L2378
	bl	__printk_ratelimit
	cmp	r0, #0
	bne	.L2377
.L2355:
	mov	r0, r9
	bl	_raw_spin_lock
.L2373:
	ldr	r3, [r6, #56]
	add	r2, r4, #36
	add	r1, r6, #52
	mov	r0, r9
	str	r2, [r6, #56]
	str	r1, [r4, #36]
	str	r3, [r4, #40]
	str	r2, [r3]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	lr, [sp, #24]
	add	sp, sp, #28
	b	_raw_spin_unlock
.L2375:
	ldr	r3, [r6, #276]
	cmp	r3, #0
	bne	.L2373
	ldr	r3, [r6, #272]
	mov	r2, #1
	str	r2, [r6, #276]
	add	r3, r3, r2
	str	r3, [r6, #272]
	b	.L2373
.L2377:
	movw	r0, #:lower16:.LC146
	ldr	r1, .L2378
	mov	r2, r5
	movt	r0, #:upper16:.LC146
	bl	printk
	b	.L2355
.L2374:
	ldr	r2, [r4, #4]
	movw	r0, #:lower16:.LC145
	mov	r3, r7
	ldr	ip, [r4, #48]
	movt	r0, #:upper16:.LC145
	ldr	r1, .L2378
	str	r2, [sp, #4]
	ldr	r2, [r5, #4]
	str	ip, [sp]
	bl	printk
	b	.L2350
.L2379:
	.align	2
.L2378:
	.word	.LANCHOR2+960
	.fnend
	.size	gbam_epout_complete, .-gbam_epout_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_rmnet_mux_ctrl_ioctl, %function
usb_rmnet_mux_ctrl_ioctl:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r3, #65024
	movt	r3, 32772
	cmp	r1, r3
	mov	r1, r0
	mov	r0, r2
	bne	.L2382
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 448 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/uaccess.h" 1
	adds r2, r0, #4; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L2384
	mov	r0, #4
	bx	lr
.L2384:
	ldr	r1, [r1, #132]
	mov	r2, #4
	add	r1, r1, #340
	b	__copy_to_user
.L2382:
	mvn	r0, #18
	bx	lr
	.fnend
	.size	usb_rmnet_mux_ctrl_ioctl, .-usb_rmnet_mux_ctrl_ioctl
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_ioctl, %function
acc_ioctl:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #19718
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movt	r3, 16640
	str	r6, [sp, #8]
	cmp	r1, r3
	str	lr, [sp, #12]
	ldr	r5, [r0, #132]
	bhi	.L2400
	mov	r3, #19712
	movt	r3, 16640
	cmp	r1, r3
	bls	.L2405
	movw	r3, #45822
	mov	r6, r2
	movt	r3, 48895
	add	r3, r1, r3
	cmp	r3, #4
	ldrls	pc, [pc, r3, asl #2]
	b	.L2390
.L2392:
	.word	.L2396
	.word	.L2395
	.word	.L2394
	.word	.L2393
	.word	.L2391
.L2405:
	movw	r3, #19719
	cmp	r1, r3
	beq	.L2388
	movw	r3, #19720
	cmp	r1, r3
	ldreq	r4, [r5, #1640]
	bne	.L2400
.L2385:
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L2393:
	add	r5, r5, #1104
	add	r5, r5, #13
.L2397:
	cmp	r5, #0
	beq	.L2400
	mov	r0, r5
	bl	strlen
	mov	r3, sp
	add	r4, r0, #1
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 448 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/uaccess.h" 1
	adds r2, r6, r4; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L2406
.L2398:
	mvn	r4, #13
	b	.L2385
.L2391:
	add	r5, r5, #1360
	add	r5, r5, #13
	b	.L2397
.L2395:
	add	r5, r5, #604
	add	r5, r5, #1
	b	.L2397
.L2394:
	add	r5, r5, #860
	add	r5, r5, #1
	b	.L2397
.L2396:
	add	r5, r5, #348
	add	r5, r5, #1
	b	.L2397
.L2406:
	mov	r1, r5
	mov	r0, r6
	mov	r2, r4
	bl	__copy_to_user
	cmp	r0, #0
	beq	.L2385
	b	.L2398
.L2388:
	ldr	r4, [r5, #1636]
	b	.L2385
.L2400:
	mvn	r4, #21
	b	.L2385
.L2390:
	add	r5, r5, #93
	b	.L2397
	.fnend
	.size	acc_ioctl, .-acc_ioctl
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_epfile_ioctl, %function
ffs_epfile_ioctl:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r5, [r0, #132]
	ldr	r0, [r5, #40]
	ldr	r3, [r0, #96]
	cmp	r3, #2
	bne	.L2427
	add	r0, r0, #28
	mov	r4, r1
	mov	r6, r2
	bl	_raw_spin_lock_irq
	ldr	r3, [r5, #44]
	cmp	r3, #0
	mvneq	r4, #18
	beq	.L2414
	movw	r2, #26371
	cmp	r4, r2
	beq	.L2410
	bls	.L2428
	movw	r2, #26497
	cmp	r4, r2
	beq	.L2415
	movw	r1, #26498
	movt	r1, 32777
	cmp	r4, r1
	bne	.L2426
	ldr	r0, [r5, #40]
	ldr	r2, [r0]
	ldr	r2, [r2, #16]
	cmp	r2, #3
	moveq	r2, #1
	beq	.L2417
	cmp	r2, #5
	movne	r2, #0
	moveq	r2, #2
.L2417:
	add	r2, r2, #2
	add	r0, r0, #28
	ldr	r4, [r3, r2, lsl #2]
	bl	_raw_spin_unlock_irq
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 448 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/uaccess.h" 1
	adds r2, r6, #9; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L2429
.L2418:
	mvn	r4, #13
	b	.L2407
.L2428:
	movw	r2, #26369
	cmp	r4, r2
	beq	.L2412
	movw	r2, #26370
	cmp	r4, r2
	bne	.L2426
	ldr	r0, [r3]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	moveq	r4, r3
	beq	.L2414
	mov	r4, #0
	blx	r3
.L2414:
	ldr	r0, [r5, #40]
	add	r0, r0, #28
	bl	_raw_spin_unlock_irq
.L2407:
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L2412:
	ldr	r0, [r3]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #32]
	cmp	r3, #0
	beq	.L2420
	blx	r3
	mov	r4, r0
	b	.L2414
.L2415:
	ldrb	r4, [r3, #20]	@ zero_extendqisi2
	b	.L2414
.L2410:
	ldr	r0, [r3]
	mov	r1, #0
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #24]
	blx	r3
	mov	r4, r0
	b	.L2414
.L2427:
	movw	r0, #:lower16:.LC12
	mov	r1, #980
	movt	r0, #:upper16:.LC12
	mvn	r4, #18
	bl	warn_slowpath_null
	b	.L2407
.L2429:
	mov	r1, r4
	mov	r0, r6
	mov	r2, #9
	bl	__copy_to_user
	subs	r4, r0, #0
	beq	.L2407
	b	.L2418
.L2420:
	mvn	r4, #94
	b	.L2414
.L2426:
	mvn	r4, #24
	b	.L2414
	.fnend
	.size	ffs_epfile_ioctl, .-ffs_epfile_ioctl
	.section	.rodata.str1.4
	.align	2
.LC147:
	.ascii	"<3>copying to user space failed\000"
	.align	2
.LC148:
	.ascii	"<3>wrong parameter\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_ctrl_ioctl, %function
rmnet_ctrl_ioctl:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	str	lr, [sp, #8]
	ldr	r4, [r0, #132]
	.pad #12
	sub	sp, sp, #12
	mov	r0, r2
	add	r5, r4, #28
	.syntax divided
@ 60 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 111 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/processor.h" 1
	pld	[r5]
@ 0 "" 2
@ 63 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r3, [r5]
	add	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 73 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #1
	bne	.L2431
	movw	r3, #29186
	movt	r3, 32772
	cmp	r1, r3
	bne	.L2441
	ldr	r2, [r4, #12]
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	str	r2, [sp, #4]
	.syntax divided
@ 448 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/uaccess.h" 1
	adds r2, r0, #4; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L2435
.L2437:
	movw	r0, #:lower16:.LC147
	movt	r0, #:upper16:.LC147
	bl	printk
	mvn	r0, #13
	b	.L2436
.L2435:
	mov	r2, #4
	add	r1, sp, r2
	bl	__copy_to_user
	cmp	r0, #0
	bne	.L2437
.L2436:
	ldr	r3, [r4, #12]
.L2438:
	.syntax divided
@ 83 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r5]
	sub	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
.L2430:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	add	sp, sp, #8
	ldr	pc, [sp], #4
.L2431:
	.syntax divided
@ 83 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r5]
	sub	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mvn	r0, #15
	b	.L2430
.L2441:
	movw	r0, #:lower16:.LC148
	movt	r0, #:upper16:.LC148
	bl	printk
	mvn	r0, #21
	b	.L2438
	.fnend
	.size	rmnet_ctrl_ioctl, .-rmnet_ctrl_ioctl
	.section	.rodata.str1.4
	.align	2
.LC149:
	.ascii	"<6>%s: Received command %d\012\000"
	.align	2
.LC150:
	.ascii	"<3>%s: copying to user space failed\000"
	.align	2
.LC151:
	.ascii	"<6>%s: Sent max packets per xfer %d\000"
	.align	2
.LC152:
	.ascii	"<3>%s: Unsupported IOCTL\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_ioctl, %function
rndis_qc_ioctl:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movw	r5, #:lower16:.LANCHOR0
	mov	r3, #0
	movt	r5, #:upper16:.LANCHOR0
	strd	r6, [sp, #8]
	mov	r7, r1
	str	r8, [sp, #16]
	add	r0, r5, #828
	mov	r6, r2
	str	lr, [sp, #20]
	.pad #8
	sub	sp, sp, #8
	strb	r3, [sp, #3]
	str	r3, [sp, #4]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #832]
	mov	r4, r0
	cmp	r3, #0
	beq	.L2458
	ldrb	r0, [r3, #124]	@ zero_extendqisi2
	add	r2, r3, #140
	ldr	r1, [r3, #128]
	strb	r0, [sp, #3]
	str	r1, [sp, #4]
	.syntax divided
@ 60 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 111 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/processor.h" 1
	pld	[r2]
@ 0 "" 2
@ 63 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r8, [r2]
	add	r8, r8, #1
	strex	r1, r8, [r2]
	teq	r1, #0
	bne	1b
@ 0 "" 2
@ 73 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r8, #1
	bne	.L2445
	mov	r1, r4
	add	r0, r5, #828
	bl	_raw_spin_unlock_irqrestore
	movw	r0, #:lower16:.LC149
	ldr	r1, .L2461
	mov	r2, r7
	movt	r0, #:upper16:.LC149
	bl	printk
	movw	r3, #26881
	movt	r3, 32769
	cmp	r7, r3
	beq	.L2446
	movw	r3, #26882
	movt	r3, 32772
	cmp	r7, r3
	bne	.L2459
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 448 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/uaccess.h" 1
	adds r2, r6, #4; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L2453
.L2454:
	movw	r0, #:lower16:.LC150
	ldr	r1, .L2461
	mvn	r6, #13
	movt	r0, #:upper16:.LC150
	bl	printk
.L2452:
	ldr	r0, .L2461+4
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #832]
	mov	r4, r0
	cmp	r3, #0
	beq	.L2458
	add	r2, r3, #140
	.syntax divided
@ 83 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r1, [r2]
	sub	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
.L2444:
	ldr	r0, .L2461+4
	mov	r1, r4
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r6
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L2453:
	mov	r2, #4
	mov	r0, r6
	add	r1, sp, r2
	bl	__copy_to_user
	subs	r6, r0, #0
	beq	.L2452
	b	.L2454
.L2445:
	.syntax divided
@ 83 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r1, [r2]
	sub	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mvn	r6, #15
	b	.L2444
.L2446:
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 448 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/uaccess.h" 1
	adds r2, r6, #1; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	bne	.L2451
	mov	r2, r8
	mov	r0, r6
	add	r1, sp, #3
	bl	__copy_to_user
	cmp	r0, #0
	beq	.L2460
.L2451:
	movw	r0, #:lower16:.LC150
	ldr	r1, .L2461
	mvn	r6, #13
	movt	r0, #:upper16:.LC150
	bl	printk
.L2450:
	movw	r0, #:lower16:.LC151
	ldrb	r2, [sp, #3]	@ zero_extendqisi2
	ldr	r1, .L2461
	movt	r0, #:upper16:.LC151
	bl	printk
	b	.L2452
.L2458:
	movw	r0, #:lower16:.LC43
	ldr	r1, .L2461
	mvn	r6, #18
	movt	r0, #:upper16:.LC43
	bl	printk
	b	.L2444
.L2459:
	movw	r0, #:lower16:.LC152
	ldr	r1, .L2461
	mvn	r6, #21
	movt	r0, #:upper16:.LC152
	bl	printk
	b	.L2452
.L2460:
	mov	r6, r0
	b	.L2450
.L2462:
	.align	2
.L2461:
	.word	.LANCHOR2+980
	.word	.LANCHOR0+828
	.fnend
	.size	rndis_qc_ioctl, .-rndis_qc_ioctl
	.section	.rodata.str1.4
	.align	2
.LC153:
	.ascii	"<6>%s: Sent NTB size %d\000"
	.align	2
.LC154:
	.ascii	"<6>%s: Sent NTB datagrams count %d\000"
	.align	2
.LC155:
	.ascii	"<3>%s: wrong parameter\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_ioctl, %function
mbim_ioctl:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r0, #132]
	add	r5, r4, #88
	.syntax divided
@ 60 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 111 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/processor.h" 1
	pld	[r5]
@ 0 "" 2
@ 63 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r3, [r5]
	add	r3, r3, #1
	strex	r0, r3, [r5]
	teq	r0, #0
	bne	1b
@ 0 "" 2
@ 73 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #1
	bne	.L2464
	movw	r3, #28419
	movt	r3, 32770
	cmp	r1, r3
	bne	.L2478
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 448 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/uaccess.h" 1
	adds r1, r2, #2; sbcccs r1, r1, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	bne	.L2475
	mov	r0, r2
	add	r1, r4, #220
	mov	r2, #2
	bl	__copy_to_user
	cmp	r0, #0
	beq	.L2479
.L2475:
	movw	r0, #:lower16:.LC150
	ldr	r1, .L2482
	mvn	r6, #13
	movt	r0, #:upper16:.LC150
	bl	printk
.L2474:
	movw	r0, #:lower16:.LC154
	ldrh	r2, [r4, #220]
	ldr	r1, .L2482
	movt	r0, #:upper16:.LC154
	bl	printk
	b	.L2472
.L2478:
	movw	r3, #28418
	movt	r3, 32772
	cmp	r1, r3
	bne	.L2480
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 448 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/uaccess.h" 1
	adds r1, r2, #4; sbcccs r1, r1, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	bne	.L2471
	mov	r0, r2
	add	r1, r4, #216
	mov	r2, #4
	bl	__copy_to_user
	cmp	r0, #0
	beq	.L2481
.L2471:
	movw	r0, #:lower16:.LC150
	ldr	r1, .L2482
	mvn	r6, #13
	movt	r0, #:upper16:.LC150
	bl	printk
.L2470:
	movw	r0, #:lower16:.LC153
	ldr	r1, .L2482
	movt	r0, #:upper16:.LC153
	ldr	r2, [r4, #216]
	bl	printk
.L2472:
	.syntax divided
@ 83 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r5]
	sub	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	b	.L2463
.L2464:
	.syntax divided
@ 83 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r5]
	sub	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mvn	r6, #15
.L2463:
	mov	r0, r6
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L2480:
	movw	r0, #:lower16:.LC155
	ldr	r1, .L2482
	mvn	r6, #21
	movt	r0, #:upper16:.LC155
	bl	printk
	b	.L2472
.L2481:
	mov	r6, r0
	b	.L2470
.L2479:
	mov	r6, r0
	b	.L2474
.L2483:
	.align	2
.L2482:
	.word	.LANCHOR2+996
	.fnend
	.size	mbim_ioctl, .-mbim_ioctl
	.section	.rodata.str1.4
	.align	2
.LC156:
	.ascii	"<3>%s: cpkt size:%d > buf size:%d\012\000"
	.text
	.align	2
	.global	usb_rmnet_mux_ctrl_read
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_rmnet_mux_ctrl_read, %function
usb_rmnet_mux_ctrl_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r4, [r0, #132]
	.pad #28
	sub	sp, sp, #28
	ldr	r3, [r4, #360]
	cmp	r3, #0
	beq	.L2488
	mov	r3, sp
	mov	r9, r1
	bic	r8, r3, #8128
	mov	r10, r2
	add	r7, r4, #304
	bic	r8, r8, #63
	add	r6, r4, #356
	b	.L2487
.L2490:
	ldr	r3, [r4, #360]
	cmp	r3, #0
	beq	.L2488
.L2487:
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r4, #304]
	mov	r1, r0
	cmp	r5, r7
	bne	.L2489
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r4, #304]
	cmp	r7, r3
	bne	.L2490
	ldr	r3, [r4, #360]
	cmp	r3, #0
	beq	.L2490
	ldr	r0, [r8, #12]
	movw	r2, #:lower16:autoremove_wake_function
	add	r1, sp, #16
	movt	r2, #:upper16:autoremove_wake_function
	mov	r3, #0
	add	fp, r4, #312
	str	r3, [sp, #4]
	str	r0, [sp, #8]
	str	r2, [sp, #12]
	str	r1, [sp, #16]
	str	r1, [sp, #20]
	b	.L2493
.L2509:
	bl	schedule
.L2493:
	mov	r2, #1
	add	r1, sp, #4
	mov	r0, fp
	bl	prepare_to_wait
	ldr	r3, [r4, #304]
	cmp	r5, r3
	bne	.L2491
	ldr	r3, [r4, #360]
	cmp	r3, #0
	beq	.L2491
	ldr	r3, [r8, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L2509
	add	r1, sp, #4
	mov	r0, fp
	mov	r6, #65024
	movt	r6, 65535
	bl	finish_wait
	b	.L2484
.L2491:
	add	r1, sp, #4
	mov	r0, fp
	bl	finish_wait
	ldr	r3, [r4, #360]
	cmp	r3, #0
	bne	.L2487
.L2488:
	mvn	r6, #18
.L2484:
	mov	r0, r6
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L2489:
	ldr	r3, [r5, #-4]
	sub	r7, r5, #8
	cmp	r3, r10
	bhi	.L2510
	ldrd	r2, [r5]
	mov	lr, #256
	mov	ip, #512
	mov	r0, r6
	str	r3, [r2, #4]
	str	r2, [r3]
	str	lr, [r5]
	str	ip, [r5, #4]
	ldr	r3, [r4, #324]
	sub	r3, r3, #1
	str	r3, [r4, #324]
	bl	_raw_spin_unlock_irqrestore
	mov	r3, sp
	ldr	r6, [r5, #-4]
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 448 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/uaccess.h" 1
	adds r2, r9, r6; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	movne	r0, r6
	beq	.L2511
.L2495:
	ldr	r3, [r4, #408]
	cmp	r0, #0
	movne	r6, r0
	add	r3, r3, #1
	str	r3, [r4, #408]
	ldr	r0, [r5, #-8]
	bl	kfree
	mov	r0, r7
	bl	kfree
	b	.L2484
.L2511:
	mov	r0, r9
	mov	r2, r6
	ldr	r1, [r5, #-8]
	bl	__copy_to_user
	b	.L2495
.L2510:
	mov	r0, r6
	mvn	r6, #11
	bl	_raw_spin_unlock_irqrestore
	movw	r0, #:lower16:.LC156
	ldr	r1, .L2512
	mov	r3, r10
	movt	r0, #:upper16:.LC156
	ldr	r2, [r5, #-4]
	bl	printk
	b	.L2484
.L2513:
	.align	2
.L2512:
	.word	.LANCHOR2+1008
	.fnend
	.size	usb_rmnet_mux_ctrl_read, .-usb_rmnet_mux_ctrl_read
	.section	.rodata.str1.4
	.align	2
.LC157:
	.ascii	"<3>Buffer size is too big %d, should be at most %d\012"
	.ascii	"\000"
	.align	2
.LC158:
	.ascii	"<3>Previous reading is not finished yet\012\000"
	.align	2
.LC159:
	.ascii	"<3>cpkt size too big:%d > buf size:%d\012\000"
	.align	2
.LC160:
	.ascii	"<3>copy_to_user failed: err %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_ctrl_read, %function
rmnet_ctrl_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r2, #2048
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	mov	fp, r2
	str	lr, [sp, #32]
	.pad #36
	sub	sp, sp, #36
	ldr	r4, [r0, #132]
	str	r1, [sp, #4]
	bhi	.L2530
	add	r9, r4, #20
	.syntax divided
@ 60 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 111 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/processor.h" 1
	pld	[r9]
@ 0 "" 2
@ 63 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r3, [r9]
	add	r3, r3, #1
	strex	r2, r3, [r9]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 73 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #1
	bne	.L2517
	mov	r3, sp
	add	r7, r4, #44
	bic	r8, r3, #8128
	add	r6, r4, #52
	bic	r8, r8, #63
	b	.L2520
.L2532:
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r4, #44]
	cmp	r3, r7
	beq	.L2531
.L2520:
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r4, #44]
	mov	r1, r0
	cmp	r5, r7
	beq	.L2532
	ldrd	r2, [r5]
	mov	lr, #256
	mov	ip, #512
	mov	r0, r6
	sub	r6, r5, #8
	str	r3, [r2, #4]
	str	r2, [r3]
	str	lr, [r5]
	str	ip, [r5, #4]
	bl	_raw_spin_unlock_irqrestore
	ldr	r1, [r5, #-4]
	cmp	r1, fp
	bhi	.L2533
	.syntax divided
@ 83 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r9]
	sub	r3, r3, #1
	strex	r2, r3, [r9]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mov	r3, sp
	ldr	r2, [r5, #-4]
	bic	r3, r3, #8128
	ldr	r0, [sp, #4]
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 448 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/uaccess.h" 1
	adds r1, r0, r2; sbcccs r1, r1, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L2534
.L2525:
	cmp	r2, #0
	ldreq	r4, [r5, #-4]
	bne	.L2535
.L2527:
	ldr	r0, [r5, #-8]
	bl	kfree
	mov	r0, r6
	bl	kfree
.L2514:
	mov	r0, r4
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L2531:
	ldr	r0, [r8, #12]
	movw	r2, #:lower16:autoremove_wake_function
	add	r1, sp, #24
	movt	r2, #:upper16:autoremove_wake_function
	mov	r3, #0
	add	r10, r4, #32
	str	r3, [sp, #12]
	str	r0, [sp, #16]
	str	r2, [sp, #20]
	str	r1, [sp, #24]
	str	r1, [sp, #28]
	b	.L2523
.L2536:
	bl	schedule
.L2523:
	mov	r2, #1
	add	r1, sp, #12
	mov	r0, r10
	bl	prepare_to_wait
	ldr	r3, [r4, #44]
	cmp	r5, r3
	bne	.L2521
	ldr	r3, [r8, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L2536
	add	r1, sp, #12
	mov	r0, r10
	bl	finish_wait
	.syntax divided
@ 83 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r9]
	sub	r3, r3, #1
	strex	r2, r3, [r9]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mov	r4, #65024
	movt	r4, 65535
	b	.L2514
.L2521:
	add	r1, sp, #12
	mov	r0, r10
	bl	finish_wait
	b	.L2520
.L2534:
	ldr	r1, [r5, #-8]
	bl	__copy_to_user
	mov	r2, r0
	b	.L2525
.L2517:
	.syntax divided
@ 83 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r9]
	sub	r3, r3, #1
	strex	r2, r3, [r9]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	r0, #:lower16:.LC158
	mvn	r4, #15
	movt	r0, #:upper16:.LC158
	bl	printk
	b	.L2514
.L2530:
	movw	r0, #:lower16:.LC157
	mov	r1, r2
	movt	r0, #:upper16:.LC157
	mov	r2, #2048
	mvn	r4, #21
	bl	printk
	b	.L2514
.L2535:
	movw	r0, #:lower16:.LC160
	mov	r1, r2
	movt	r0, #:upper16:.LC160
	mvn	r4, #13
	bl	printk
	b	.L2527
.L2533:
	movw	r0, #:lower16:.LC159
	mov	r2, fp
	movt	r0, #:upper16:.LC159
	bl	printk
	.syntax divided
@ 83 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r9]
	sub	r3, r3, #1
	strex	r2, r3, [r9]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r0, [r5, #-8]
	mvn	r4, #11
	bl	kfree
	mov	r0, r6
	bl	kfree
	b	.L2514
	.fnend
	.size	rmnet_ctrl_read, .-rmnet_ctrl_read
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_read, %function
acc_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r4, [r0, #132]
	.pad #24
	sub	sp, sp, #24
	ldrb	r3, [r4, #92]	@ zero_extendqisi2
	tst	r3, #2
	bne	.L2551
	cmp	r2, #16384
	mov	r8, r1
	movcc	r6, r2
	movcs	r6, #16384
	ands	r3, r3, #1
	bne	.L2539
	mov	r2, sp
	str	r3, [sp, #4]
	add	r1, sp, #16
	bic	r7, r2, #8128
	movw	r2, #:lower16:autoremove_wake_function
	bic	r7, r7, #63
	movt	r2, #:upper16:autoremove_wake_function
	ldr	r0, [r7, #12]
	add	r9, r4, #1648
	add	r5, sp, #4
	add	r9, r9, #8
	str	r0, [sp, #8]
	str	r2, [sp, #12]
	str	r1, [sp, #16]
	str	r1, [sp, #20]
	b	.L2542
.L2564:
	bl	schedule
.L2542:
	mov	r2, #1
	mov	r1, r5
	mov	r0, r9
	bl	prepare_to_wait
	ldrb	r3, [r4, #92]	@ zero_extendqisi2
	tst	r3, #1
	bne	.L2540
	ldr	r3, [r7, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L2564
	mov	r4, #65024
	mov	r1, r5
	mov	r0, r9
	movt	r4, 65535
	bl	finish_wait
.L2537:
	mov	r0, r4
	add	sp, sp, #24
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L2540:
	mov	r1, r5
	mov	r0, r9
	bl	finish_wait
.L2539:
	ldr	r3, [r4, #1688]
	cmp	r3, #0
	bne	.L2565
.L2543:
	ldr	r10, [r4, #1680]
	mov	r3, #0
	mov	r2, #208
	str	r6, [r10, #4]
	ldr	r0, [r4, #88]
	mov	r1, r10
	str	r3, [r4, #1688]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L2549
	ldr	r3, [r4, #1688]
	cmp	r3, #0
	bne	.L2544
	mov	r2, sp
	str	r3, [sp, #4]
	add	r1, sp, #16
	bic	r7, r2, #8128
	movw	r2, #:lower16:autoremove_wake_function
	bic	r7, r7, #63
	movt	r2, #:upper16:autoremove_wake_function
	ldr	r0, [r7, #12]
	add	r9, r4, #1648
	add	r5, sp, #4
	add	r9, r9, #8
	str	r0, [sp, #8]
	str	r2, [sp, #12]
	str	r1, [sp, #16]
	str	r1, [sp, #20]
	b	.L2548
.L2566:
	bl	schedule
.L2548:
	mov	r2, #1
	mov	r1, r5
	mov	r0, r9
	bl	prepare_to_wait
	ldr	r3, [r4, #1688]
	cmp	r3, #0
	bne	.L2546
	ldr	r3, [r7, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L2566
	mov	r1, r5
	mov	r0, r9
	bl	finish_wait
	ldr	r0, [r4, #88]
	mov	r1, r10
	mov	r4, #65024
	movt	r4, 65535
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	b	.L2537
.L2565:
	ldr	r10, [r4, #1680]
.L2544:
	ldrb	r3, [r4, #92]	@ zero_extendqisi2
	mov	r2, #0
	str	r2, [r4, #1688]
	tst	r3, #1
	beq	.L2549
	ldr	r2, [r10, #48]
	cmp	r2, #0
	beq	.L2543
	mov	r3, sp
	cmp	r2, r6
	bic	r3, r3, #8128
	movcs	r2, r6
	bic	r3, r3, #63
	mov	r4, r2
	ldr	r3, [r3, #8]
	.syntax divided
@ 448 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/uaccess.h" 1
	adds r1, r8, r2; sbcccs r1, r1, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L2567
.L2550:
	cmp	r2, #0
	mvnne	r4, #13
	b	.L2537
.L2546:
	mov	r1, r5
	mov	r0, r9
	bl	finish_wait
	b	.L2544
.L2567:
	mov	r0, r8
	ldr	r1, [r10]
	bl	__copy_to_user
	mov	r2, r0
	b	.L2550
.L2551:
	mvn	r4, #18
	b	.L2537
.L2549:
	mvn	r4, #4
	b	.L2537
	.fnend
	.size	acc_read, .-acc_read
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mtp_read, %function
mtp_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	mov	r10, r2
	str	lr, [sp, #32]
	ldr	r4, [r0, #132]
	.pad #36
	sub	sp, sp, #36
	str	r1, [sp, #4]
	ldr	r3, [r4, #96]
	cmp	r3, #0
	bne	.L2569
	mov	r2, sp
	str	r3, [sp, #12]
	add	r1, sp, #24
	bic	r5, r2, #8128
	movw	r2, #:lower16:autoremove_wake_function
	bic	r5, r5, #63
	movt	r2, #:upper16:autoremove_wake_function
	ldr	r0, [r5, #12]
	add	r6, sp, #12
	add	r7, r4, #124
	str	r0, [sp, #16]
	str	r2, [sp, #20]
	str	r1, [sp, #24]
	str	r1, [sp, #28]
	b	.L2572
.L2613:
	bl	schedule
.L2572:
	mov	r2, #1
	mov	r1, r6
	mov	r0, r7
	bl	prepare_to_wait
	ldr	r3, [r4, #96]
	cmp	r3, #0
	bne	.L2570
	ldr	r3, [r5, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L2613
	mov	r1, r6
	mov	r0, r7
	mov	r10, #65024
	add	r8, r4, #80
	movt	r10, 65535
	bl	finish_wait
	b	.L2576
.L2570:
	mov	r1, r6
	mov	r0, r7
	bl	finish_wait
.L2569:
	ldr	r1, [r4, #88]
	movw	r3, #:lower16:.LANCHOR1
	sub	r5, r10, #1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r2, [r3, #668]
	ldrh	r3, [r1, #20]
	add	r5, r5, r3
	rsb	r3, r3, #0
	and	r5, r5, r3
	cmp	r5, r2
	bhi	.L2590
	add	r8, r4, #80
	mov	r0, r8
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #96]
	cmp	r3, #3
	beq	.L2614
	mov	r3, #2
	mov	r0, r8
	str	r3, [r4, #96]
	bl	_raw_spin_unlock_irq
	mov	r3, sp
	bic	r7, r3, #8128
	bic	r7, r7, #63
	b	.L2575
.L2616:
	ldr	r2, [r4, #96]
	cmp	r2, #3
	beq	.L2579
.L2578:
	cmp	r2, #2
	bne	.L2593
	ldr	r2, [fp, #48]
	cmp	r2, #0
	bne	.L2615
.L2575:
	ldr	fp, [r4, #160]
	mov	ip, #0
	mov	r2, #208
	str	r5, [fp, #4]
	ldr	r0, [r4, #88]
	mov	r1, fp
	str	ip, [r4, #168]
	ldr	ip, [r0, #8]
	ldr	r6, [ip, #16]
	blx	r6
	cmp	r0, #0
	blt	.L2593
	ldr	r2, [r4, #168]
	cmp	r2, #0
	bne	.L2616
	ldr	r1, [r4, #96]
	cmp	r1, #2
	beq	.L2580
	cmp	r1, #3
	beq	.L2584
.L2593:
	mvn	r10, #4
.L2576:
	mov	r0, r8
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #96]
	cmp	r3, #3
	mvneq	r10, #124
	beq	.L2587
	cmp	r3, #0
	movne	r3, #1
	strne	r3, [r4, #96]
.L2587:
	mov	r0, r8
	bl	_raw_spin_unlock_irq
.L2568:
	mov	r0, r10
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L2580:
	ldr	ip, [r7, #12]
	movw	r1, #:lower16:autoremove_wake_function
	add	r0, sp, #24
	movt	r1, #:upper16:autoremove_wake_function
	add	r6, sp, #12
	str	r2, [sp, #12]
	add	r9, r4, #124
	str	ip, [sp, #16]
	str	r1, [sp, #20]
	str	r0, [sp, #24]
	str	r0, [sp, #28]
	b	.L2583
.L2617:
	bl	schedule
.L2583:
	mov	r2, #1
	mov	r1, r6
	mov	r0, r9
	bl	prepare_to_wait
	ldr	r2, [r4, #168]
	cmp	r2, #0
	bne	.L2581
	ldr	r2, [r4, #96]
	cmp	r2, #2
	bne	.L2581
	ldr	r2, [r7, #12]
	ldr	r2, [r2, #4]
	ldr	r2, [r2]
	tst	r2, #1
	beq	.L2617
	mov	r1, r6
	mov	r0, r9
	bl	finish_wait
	ldr	r2, [r4, #96]
	cmp	r2, #3
	bne	.L2618
.L2588:
	ldr	r2, [r4, #168]
	cmp	r2, #0
	bne	.L2579
.L2584:
	ldr	r0, [r4, #88]
	mov	r1, fp
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
.L2579:
	mov	r0, r8
	mvn	r10, #124
	bl	_raw_spin_lock_irq
	mov	r3, #3
	mov	r0, r8
	str	r3, [r4, #96]
	bl	_raw_spin_unlock_irq
	b	.L2576
.L2581:
	mov	r1, r6
	mov	r0, r9
	bl	finish_wait
	ldr	r2, [r4, #96]
	cmp	r2, #3
	bne	.L2578
	b	.L2588
.L2618:
	ldr	r0, [r4, #88]
	mov	r1, fp
	mov	r10, #65024
	movt	r10, 65535
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	b	.L2576
.L2615:
	mov	r3, sp
	cmp	r2, r10
	bic	r1, r3, #8128
	movcc	r10, r2
	ldr	r3, [sp, #4]
	bic	r1, r1, #63
	ldr	r2, [r1, #8]
	.syntax divided
@ 448 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/uaccess.h" 1
	adds r1, r3, r10; sbcccs r1, r1, r2; movcc r2, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r2, #0
	movne	r0, r10
	beq	.L2619
.L2586:
	cmp	r0, #0
	mvnne	r10, #13
	b	.L2576
.L2619:
	mov	r0, r3
	mov	r2, r10
	ldr	r1, [fp]
	bl	__copy_to_user
	b	.L2586
.L2590:
	mvn	r10, #21
	b	.L2568
.L2614:
	mov	r3, #1
	mov	r0, r8
	mvn	r10, #124
	str	r3, [r4, #96]
	bl	_raw_spin_unlock_irq
	b	.L2568
	.fnend
	.size	mtp_read, .-mtp_read
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_ctrl_read, %function
ccid_ctrl_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r5, [r0, #132]
	.pad #24
	sub	sp, sp, #24
	ldr	r3, [r5, #88]
	cmp	r3, #0
	beq	.L2627
	ldr	r3, [r5, #136]
	cmp	r2, #4
	mov	r7, r1
	movcc	r4, r2
	movcs	r4, #4
	cmp	r3, #0
	bne	.L2623
	mov	r2, sp
	str	r3, [sp, #4]
	add	r1, sp, #16
	bic	r6, r2, #8128
	movw	r2, #:lower16:autoremove_wake_function
	bic	r6, r6, #63
	movt	r2, #:upper16:autoremove_wake_function
	ldr	r0, [r6, #12]
	add	r8, r5, #120
	str	r0, [sp, #8]
	str	r2, [sp, #12]
	str	r1, [sp, #16]
	str	r1, [sp, #20]
	b	.L2626
.L2635:
	bl	schedule
.L2626:
	mov	r2, #1
	add	r1, sp, #4
	mov	r0, r8
	bl	prepare_to_wait
	ldr	r3, [r5, #136]
	cmp	r3, #0
	bne	.L2624
	ldr	r3, [r6, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L2635
	mov	r0, r8
	add	r1, sp, #4
	bl	finish_wait
	mov	r0, #65024
	movt	r0, 65535
	b	.L2620
.L2624:
	add	r1, sp, #4
	mov	r0, r8
	bl	finish_wait
.L2623:
	ldr	r3, [r5, #88]
	mov	r2, #0
	str	r2, [r5, #136]
	cmp	r3, r2
	beq	.L2627
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 448 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/uaccess.h" 1
	adds r2, r7, r4; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	movne	r0, r4
	beq	.L2636
.L2628:
	cmp	r0, #0
	moveq	r0, r4
	mvnne	r0, #13
.L2620:
	add	sp, sp, #24
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L2636:
	add	r1, r5, #132
	mov	r0, r7
	mov	r2, r4
	bl	__copy_to_user
	b	.L2628
.L2627:
	mvn	r0, #18
	b	.L2620
	.fnend
	.size	ccid_ctrl_read, .-ccid_ctrl_read
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_read, %function
adb_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	r3, #:upper16:.LANCHOR0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r3, [r3, #2284]
	.pad #28
	sub	sp, sp, #28
	ldr	r4, [r0, #132]
	cmp	r3, #0
	beq	.L2657
	cmp	r2, #4096
	mov	r7, r2
	bhi	.L2658
	add	r6, r4, #100
	.syntax divided
@ 60 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 111 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/processor.h" 1
	pld	[r6]
@ 0 "" 2
@ 63 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r3, [r6]
	add	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 73 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #1
	bne	.L2669
	mov	r3, sp
	mov	r8, r1
	bic	r5, r3, #8128
	bic	r5, r5, #63
	b	.L2640
.L2672:
	ldr	r3, [r4, #96]
	cmp	r3, #0
	bne	.L2645
	ldr	r3, [r4, #92]
	cmp	r3, #0
	beq	.L2671
.L2640:
	ldr	r3, [r4, #92]
	cmp	r3, #0
	beq	.L2672
.L2645:
	ldr	r3, [r4, #96]
	cmp	r3, #0
	bne	.L2654
	mov	r3, sp
	bic	r9, r3, #8128
	bic	r9, r9, #63
	b	.L2647
.L2650:
	ldr	r3, [r4, #96]
	cmp	r3, #0
	bne	.L2654
	ldr	r3, [r5, #48]
	cmp	r3, #0
	bne	.L2673
.L2647:
	ldr	r5, [r4, #144]
	mov	r1, #4096
	mov	r3, #0
	mov	r2, #32
	str	r1, [r5, #4]
	ldr	r0, [r4, #88]
	mov	r1, r5
	str	r3, [r4, #148]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L2674
	ldr	r3, [r4, #148]
	cmp	r3, #0
	bne	.L2650
	ldr	r3, [r4, #96]
	cmp	r3, #0
	bne	.L2650
	ldr	r0, [r9, #12]
	movw	r2, #:lower16:autoremove_wake_function
	add	r1, sp, #16
	movt	r2, #:upper16:autoremove_wake_function
	add	r10, sp, #4
	str	r3, [sp, #4]
	add	fp, r4, #120
	str	r0, [sp, #8]
	str	r2, [sp, #12]
	str	r1, [sp, #16]
	str	r1, [sp, #20]
	b	.L2653
.L2675:
	bl	schedule
.L2653:
	mov	r2, #1
	mov	r1, r10
	mov	r0, fp
	bl	prepare_to_wait
	ldr	r3, [r4, #148]
	cmp	r3, #0
	bne	.L2651
	ldr	r3, [r4, #96]
	cmp	r3, #0
	bne	.L2651
	ldr	r3, [r9, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L2675
	mov	r1, r10
	mov	r0, fp
	bl	finish_wait
	ldr	r0, [r4, #88]
	mov	r1, r5
	mov	r7, #65024
	movt	r7, 65535
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	b	.L2648
.L2654:
	mvn	r7, #4
.L2648:
	ldr	r3, [r4, #96]
	cmp	r3, #0
	bne	.L2676
.L2656:
	.syntax divided
@ 83 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
.L2637:
	mov	r0, r7
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L2671:
	ldr	r3, [r4, #96]
	cmp	r3, #0
	bne	.L2640
	ldr	r0, [r5, #12]
	movw	r2, #:lower16:autoremove_wake_function
	add	r1, sp, #16
	movt	r2, #:upper16:autoremove_wake_function
	add	r10, sp, #4
	str	r3, [sp, #4]
	add	r9, r4, #120
	str	r0, [sp, #8]
	str	r2, [sp, #12]
	str	r1, [sp, #16]
	str	r1, [sp, #20]
	b	.L2644
.L2677:
	bl	schedule
.L2644:
	mov	r2, #1
	mov	r1, r10
	mov	r0, r9
	bl	prepare_to_wait
	ldr	r3, [r4, #92]
	cmp	r3, #0
	bne	.L2642
	ldr	r3, [r4, #96]
	cmp	r3, #0
	bne	.L2642
	ldr	r3, [r5, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L2677
	mov	r1, r10
	mov	r0, r9
	bl	finish_wait
	.syntax divided
@ 83 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mov	r7, #65024
	movt	r7, 65535
	b	.L2637
.L2651:
	mov	r1, r10
	mov	r0, fp
	bl	finish_wait
	b	.L2650
.L2676:
	mov	r3, #0
	mov	r2, #1
	mov	r1, #3
	add	r0, r4, #132
	bl	__wake_up
	b	.L2656
.L2674:
	mov	r3, #1
	mvn	r7, #4
	str	r3, [r4, #96]
	b	.L2648
.L2673:
	mov	r2, sp
	cmp	r3, r7
	bic	r1, r2, #8128
	movcc	r2, r3
	bic	r1, r1, #63
	movcs	r2, r7
	ldr	r3, [r1, #8]
	.syntax divided
@ 448 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/uaccess.h" 1
	adds r1, r8, r2; sbcccs r1, r1, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L2678
.L2655:
	cmp	r2, #0
	mvnne	r7, #13
	b	.L2648
.L2678:
	mov	r0, r8
	ldr	r1, [r5]
	bl	__copy_to_user
	mov	r2, r0
	b	.L2655
.L2669:
	.syntax divided
@ 83 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mvn	r7, #15
	b	.L2637
.L2658:
	mvn	r7, #21
	b	.L2637
.L2642:
	mov	r1, r10
	mov	r0, r9
	bl	finish_wait
	b	.L2640
.L2657:
	mvn	r7, #18
	b	.L2637
	.fnend
	.size	adb_read, .-adb_read
	.section	.rodata.str1.4
	.align	2
.LC161:
	.ascii	"<3>%s: zero length ctrl pkt\012\000"
	.align	2
.LC162:
	.ascii	"<3>%s: max_pkt_size:%d given_pkt_size:%d\012\000"
	.align	2
.LC163:
	.ascii	"<3>%s: cannot allocate rmnet_mux ctrl pkt\012\000"
	.align	2
.LC164:
	.ascii	"<3>%s: copy_from_user failed err:%d\012\000"
	.align	2
.LC165:
	.ascii	"rmnet_mux notify ep enqueue error %d\012\000"
	.text
	.align	2
	.global	usb_rmnet_mux_ctrl_write
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_rmnet_mux_ctrl_write, %function
usb_rmnet_mux_ctrl_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r4, [r0, #132]
	ldr	r3, [r4, #360]
	cmp	r3, #0
	beq	.L2690
	cmp	r2, #0
	mov	r5, r2
	beq	.L2693
	cmp	r2, #4096
	bhi	.L2694
	mov	r7, r1
	mov	r0, r2
	mov	r1, #208
	bl	rmnet_mux_alloc_ctrl_pkt
	subs	r6, r0, #0
	beq	.L2695
	mov	r3, sp
	ldr	r0, [r6]
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 439 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/uaccess.h" 1
	adds r2, r7, r5; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L2696
	mov	r1, r5
	mov	r8, r5
	bl	__memzero
.L2685:
	movw	r0, #:lower16:.LC164
	ldr	r1, .L2698
	mov	r2, r8
	movt	r0, #:upper16:.LC164
	bl	printk
	ldr	r0, [r6]
	bl	kfree
	mov	r0, r6
	bl	kfree
.L2679:
	mov	r0, r8
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L2696:
	mov	r1, r7
	mov	r2, r5
	bl	__copy_from_user
	cmp	r0, #0
	mov	r7, r0
	mov	r8, r0
	bne	.L2685
	add	r9, r4, #356
	add	r8, r4, #364
	mov	r0, r9
	bl	_raw_spin_lock_irqsave
	ldr	r2, [r4, #336]
	mov	r3, r4
	add	ip, r6, #8
	mov	r1, r0
	mov	r0, r9
	add	r2, r2, #1
	str	r2, [r4, #336]
	ldr	r2, [r3, #328]!
	str	ip, [r2, #4]
	strd	r2, [r6, #8]
	str	ip, [r4, #328]
	bl	_raw_spin_unlock_irqrestore
	ldr	r6, [r4, #76]
	ldr	r3, [r4, #92]
	ldr	r3, [r3]
	.syntax divided
@ 60 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 111 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/processor.h" 1
	pld	[r8]
@ 0 "" 2
@ 63 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r2, [r8]
	add	r2, r2, #1
	strex	r1, r2, [r8]
	teq	r1, #0
	bne	1b
@ 0 "" 2
@ 73 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r2, #1
	beq	.L2697
.L2688:
	mov	r8, r5
	b	.L2679
.L2697:
	mvn	r1, #94
	strb	r1, [r3]
	strb	r2, [r3, #1]
	mov	r2, #32
	strb	r7, [r3, #2]
	strb	r7, [r3, #3]
	ldrb	r1, [r4, #348]	@ zero_extendqisi2
	strh	r1, [r3, #4]	@ unaligned
	strb	r7, [r3, #6]
	strb	r7, [r3, #7]
	ldrd	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	bge	.L2688
	.syntax divided
@ 83 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r8]
	sub	r3, r3, #1
	strex	r1, r3, [r8]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r0, [r6]
	movw	r1, #:lower16:.LC165
	mov	r8, r5
	movt	r1, #:upper16:.LC165
	add	r0, r0, #32
	bl	dev_err
	b	.L2679
.L2690:
	mvn	r8, #18
	b	.L2679
.L2695:
	movw	r0, #:lower16:.LC163
	ldr	r1, .L2698
	mvn	r8, #11
	movt	r0, #:upper16:.LC163
	bl	printk
	b	.L2679
.L2694:
	movw	r0, #:lower16:.LC162
	mov	r3, r2
	ldr	r1, .L2698
	movt	r0, #:upper16:.LC162
	mov	r2, #4096
	mvn	r8, #11
	bl	printk
	b	.L2679
.L2693:
	movw	r0, #:lower16:.LC161
	ldr	r1, .L2698
	mvn	r8, #18
	movt	r0, #:upper16:.LC161
	bl	printk
	b	.L2679
.L2699:
	.align	2
.L2698:
	.word	.LANCHOR2+1032
	.fnend
	.size	usb_rmnet_mux_ctrl_write, .-usb_rmnet_mux_ctrl_write
	.section	.rodata.str1.4
	.align	2
.LC166:
	.ascii	"<3>Previous writing not finished yet\012\000"
	.align	2
.LC167:
	.ascii	"<3>failed to allocate ctrl pkt\012\000"
	.align	2
.LC168:
	.ascii	"<3>copy_from_user failed err:%d\012\000"
	.align	2
.LC169:
	.ascii	"<3>failed to send ctrl packet. error=%d\012\000"
	.align	2
.LC170:
	.ascii	"<3>send_cpkt_response callback is NULL\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_ctrl_write, %function
rmnet_ctrl_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	sub	r3, r2, #1
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	cmp	r3, #2048
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r4, [r0, #132]
	bcs	.L2711
	mov	r5, r2
	add	r6, r4, #24
	.syntax divided
@ 60 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 111 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/processor.h" 1
	pld	[r6]
@ 0 "" 2
@ 63 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r3, [r6]
	add	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 73 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #1
	bne	.L2702
	ldr	r3, [r4, #8]
	cmp	r3, #0
	beq	.L2721
	mov	r7, r1
	mov	r0, r5
	mov	r1, #208
	bl	__kmalloc
	subs	r8, r0, #0
	beq	.L2722
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 439 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/uaccess.h" 1
	adds r2, r7, r5; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L2723
	mov	r1, r5
	bl	__memzero
	mov	r1, r5
.L2707:
	movw	r0, #:lower16:.LC168
	movt	r0, #:upper16:.LC168
	bl	printk
	mov	r0, r8
	bl	kfree
	.syntax divided
@ 83 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mvn	r7, #13
	b	.L2700
.L2723:
	mov	r1, r7
	mov	r2, r5
	bl	__copy_from_user
	subs	r1, r0, #0
	bne	.L2707
	add	r10, r4, #52
	mov	r0, r10
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4]
	mov	r9, r0
	cmp	r3, #0
	beq	.L2709
	ldr	r7, [r3, #84]
	cmp	r7, #0
	beq	.L2709
	mov	r0, r3
	mov	r2, r5
	mov	r1, r8
	blx	r7
	subs	r7, r0, #0
	bne	.L2724
	mov	r1, r9
	mov	r0, r10
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r8
	bl	kfree
	.syntax divided
@ 83 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mov	r7, r5
.L2700:
	mov	r0, r7
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L2702:
	.syntax divided
@ 83 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	r0, #:lower16:.LC166
	mvn	r7, #15
	movt	r0, #:upper16:.LC166
	bl	printk
	b	.L2700
.L2711:
	mvn	r7, #21
	b	.L2700
.L2721:
	.syntax divided
@ 83 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mvn	r7, #31
	b	.L2700
.L2724:
	movw	r0, #:lower16:.LC169
	mov	r1, r7
	movt	r0, #:upper16:.LC169
	bl	printk
	mov	r1, r9
	mov	r0, r10
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r8
	bl	kfree
	.syntax divided
@ 83 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	b	.L2700
.L2722:
	movw	r0, #:lower16:.LC167
	movt	r0, #:upper16:.LC167
	bl	printk
	.syntax divided
@ 83 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mvn	r7, #11
	b	.L2700
.L2709:
	movw	r0, #:lower16:.LC170
	movt	r0, #:upper16:.LC170
	bl	printk
	mov	r1, r9
	mov	r0, r10
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r8
	bl	kfree
	.syntax divided
@ 83 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mvn	r7, #21
	b	.L2700
	.fnend
	.size	rmnet_ctrl_write, .-rmnet_ctrl_write
	.section	.rodata.str1.4
	.align	2
.LC171:
	.ascii	"<3>ccid notify ep enqueue error %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_ctrl_ioctl, %function
ccid_ctrl_ioctl:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r3, #17154
	str	r6, [sp, #8]
	movt	r3, 16388
	str	lr, [sp, #12]
	ldr	r5, [r0, #132]
	cmp	r1, r3
	ldr	r4, [r5, #104]
	ldr	r0, [r4]
	beq	.L2726
	movw	r3, #17155
	movt	r3, 32772
	cmp	r1, r3
	beq	.L2727
	movw	r3, #17153
	movt	r3, 16388
	cmp	r1, r3
	beq	.L2739
.L2728:
	ldr	r0, [r5, #92]
	mov	r1, r4
	mov	r2, #208
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	blt	.L2740
.L2735:
	mov	r4, #0
.L2725:
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L2739:
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 439 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/uaccess.h" 1
	adds r1, r2, #4; sbcccs r1, r1, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L2741
.L2732:
	mov	r1, #4
	bl	__memzero
.L2738:
	mvn	r4, #13
	b	.L2725
.L2727:
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 448 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/uaccess.h" 1
	adds r1, r2, #4; sbcccs r1, r1, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	bne	.L2738
	mov	r0, r2
	add	r1, r5, #192
	mov	r2, #4
	bl	__copy_to_user
	cmp	r0, #0
	beq	.L2735
	b	.L2738
.L2726:
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 439 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/uaccess.h" 1
	adds r1, r2, #4; sbcccs r1, r1, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	bne	.L2732
	mov	r1, r2
	mov	r2, #4
	bl	__copy_from_user
	cmp	r0, #0
	bne	.L2738
	mov	r3, #4
	str	r3, [r4, #4]
	ldr	r4, [r5, #104]
	b	.L2728
.L2741:
	mov	r1, r2
	mov	r2, #4
	bl	__copy_from_user
	cmp	r0, #0
	bne	.L2738
	mov	r3, #2
	str	r3, [r4, #4]
	ldr	r4, [r5, #104]
	b	.L2728
.L2740:
	movw	r0, #:lower16:.LC171
	mov	r1, r4
	movt	r0, #:upper16:.LC171
	bl	printk
	b	.L2725
	.fnend
	.size	ccid_ctrl_ioctl, .-ccid_ctrl_ioctl
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_prepare_buffer, %function
ffs_prepare_buffer:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	subs	r4, r1, #0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	beq	.L2744
	mov	r6, r0
	mov	r1, #208
	mov	r0, r4
	bl	__kmalloc
	subs	r5, r0, #0
	mvneq	r5, #11
	beq	.L2742
	mov	r2, r4
	mov	r1, r6
	bl	__copy_from_user
	cmp	r0, #0
	bne	.L2750
.L2742:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L2744:
	mov	r5, r4
	b	.L2742
.L2750:
	mov	r0, r5
	mvn	r5, #13
	bl	kfree
	b	.L2742
	.fnend
	.size	ffs_prepare_buffer, .-ffs_prepare_buffer
	.section	.rodata.str1.4
	.align	2
.LC172:
	.ascii	"g_ether\000"
	.align	2
.LC173:
	.ascii	"29-May-2008\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	eth_get_drvinfo, %function
eth_get_drvinfo:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r1
	movw	r1, #:lower16:.LC172
	mov	r5, r0
	movt	r1, #:upper16:.LC172
	str	r6, [sp, #8]
	add	r0, r4, #4
	mov	r2, #32
	str	lr, [sp, #12]
	bl	strlcpy
	movw	r1, #:lower16:.LC173
	add	r0, r4, #36
	movt	r1, #:upper16:.LC173
	mov	r2, #32
	bl	strlcpy
	ldr	r3, [r5, #1228]
	add	r0, r4, #68
	mov	r2, #32
	ldr	r1, [r3, #28]
	bl	strlcpy
	ldr	r3, [r5, #1228]
	add	r0, r4, #100
	mov	r2, #32
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	ldr	r1, [r3, #76]
	cmp	r1, #0
	ldreq	r1, [r3, #40]
	b	strlcpy
	.fnend
	.size	eth_get_drvinfo, .-eth_get_drvinfo
	.section	.rodata.str1.4
	.align	2
.LC174:
	.ascii	"g_qc_ether\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	eth_qc_get_drvinfo, %function
eth_qc_get_drvinfo:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r1
	movw	r1, #:lower16:.LC174
	mov	r5, r0
	movt	r1, #:upper16:.LC174
	str	r6, [sp, #8]
	add	r0, r4, #4
	mov	r2, #32
	str	lr, [sp, #12]
	bl	strlcpy
	movw	r1, #:lower16:.LC173
	add	r0, r4, #36
	movt	r1, #:upper16:.LC173
	mov	r2, #32
	bl	strlcpy
	ldr	r3, [r5, #1228]
	add	r0, r4, #68
	mov	r2, #32
	ldr	r1, [r3, #28]
	bl	strlcpy
	ldr	r3, [r5, #1228]
	add	r0, r4, #100
	mov	r2, #32
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	ldr	r1, [r3, #76]
	cmp	r1, #0
	ldreq	r1, [r3, #40]
	b	strlcpy
	.fnend
	.size	eth_qc_get_drvinfo, .-eth_qc_get_drvinfo
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	pm_qos_store, %function
pm_qos_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r2
	mov	r4, r3
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	dev_get_drvdata
	add	r0, r0, #56
	mov	r1, r5
	mov	r2, #5
	bl	strlcpy
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	pm_qos_store, .-pm_qos_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_transports_store, %function
ecm_transports_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	mov	r1, r2
	ldr	r0, .L2761
	mov	r2, #50
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r3
	str	lr, [sp, #4]
	bl	strlcpy
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L2762:
	.align	2
.L2761:
	.word	.LANCHOR0+1612
	.fnend
	.size	ecm_transports_store, .-ecm_transports_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acm_transports_store, %function
acm_transports_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	mov	r1, r2
	ldr	r0, .L2765
	mov	r2, #32
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r3
	str	lr, [sp, #4]
	bl	strlcpy
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L2766:
	.align	2
.L2765:
	.word	.LANCHOR0+2804
	.fnend
	.size	acm_transports_store, .-acm_transports_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	serial_xport_names_store, %function
serial_xport_names_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	mov	r1, r2
	ldr	r0, .L2769
	mov	r2, #32
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r3
	str	lr, [sp, #4]
	bl	strlcpy
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L2770:
	.align	2
.L2769:
	.word	.LANCHOR0+1664
	.fnend
	.size	serial_xport_names_store, .-serial_xport_names_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	serial_transports_store, %function
serial_transports_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	mov	r1, r2
	ldr	r0, .L2773
	mov	r2, #32
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r3
	str	lr, [sp, #4]
	bl	strlcpy
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L2774:
	.align	2
.L2773:
	.word	.LANCHOR0+2836
	.fnend
	.size	serial_transports_store, .-serial_transports_store
	.section	.rodata.cst4,"aM",%progbits,4
	.align	2
.LC175:
	.word	__stack_chk_guard
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_diag_update_pid_and_serial_num, %function
usb_diag_update_pid_and_serial_num:
	.fnstart
	@ args = 0, pretend = 0, frame = 144
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	movw	r3, #:lower16:.LC175
	movw	r5, #:lower16:.LANCHOR0
	strd	r6, [sp, #8]
	movt	r3, #:upper16:.LC175
	mov	r2, #140
	str	lr, [sp, #16]
	.pad #148
	sub	sp, sp, #148
	movt	r5, #:upper16:.LANCHOR0
	mov	r4, sp
	mov	r7, r0
	mov	r6, r1
	mov	r0, r4
	mov	r1, #0
	ldr	r3, [r3]
	str	r3, [sp, #140]
	mov	r3,#0
	bl	memset
	ldr	r3, [r5, #2868]
	cmp	r3, #0
	beq	.L2783
	movw	r3, #10505
	cmp	r6, #0
	str	r7, [sp]
	movt	r3, 28995
	str	r3, [sp, #132]
	beq	.L2786
	movw	r3, #21364
	mov	r1, r6
	movt	r3, 24980
	mov	r2, #128
	add	r0, sp, #4
	str	r3, [sp, #136]
	bl	strlcpy
.L2778:
	ldr	r3, [r5, #2868]
	add	r1, sp, #8
	add	r2, r3, #8
	cmp	r3, r1
	cmpcc	r4, r2
	movcs	r2, #1
	movcc	r2, #0
	tst	r3, #7
	movne	r2, #0
	cmp	r2, #0
	beq	.L2779
	ldrd	r0, [sp]
	strd	r0, [r3]
	ldrd	r0, [sp, #8]
	strd	r0, [r3, #8]
	ldrd	r0, [sp, #16]
	strd	r0, [r3, #16]
	ldrd	r0, [sp, #24]
	strd	r0, [r3, #24]
	ldrd	r0, [sp, #32]
	strd	r0, [r3, #32]
	ldrd	r0, [sp, #40]
	strd	r0, [r3, #40]
	ldrd	r0, [sp, #48]
	strd	r0, [r3, #48]
	ldrd	r0, [sp, #56]
	strd	r0, [r3, #56]
	ldrd	r0, [sp, #64]
	strd	r0, [r3, #64]
	ldrd	r0, [sp, #72]
	strd	r0, [r3, #72]
	ldrd	r0, [sp, #80]
	strd	r0, [r3, #80]
	ldrd	r0, [sp, #88]
	strd	r0, [r3, #88]
	ldrd	r0, [sp, #96]
	strd	r0, [r3, #96]
	ldrd	r0, [sp, #104]
	strd	r0, [r3, #104]
	ldrd	r0, [sp, #112]
	strd	r0, [r3, #112]
	ldrd	r0, [sp, #120]
	strd	r0, [r3, #120]
	ldrd	r0, [sp, #128]
	strd	r0, [r3, #128]
	ldr	r2, [sp, #136]
	str	r2, [r3, #136]
.L2780:
	mov	r0, #0
.L2775:
	movw	r3, #:lower16:.LC175
	movt	r3, #:upper16:.LC175
	ldr	r2, [r3]
	ldr	r3, [sp, #140]
	eors	r2, r3, r2
	bne	.L2787
	add	sp, sp, #148
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L2786:
	mov	r1, #128
	add	r0, sp, #4
	str	r6, [sp, #136]
	bl	__memzero
	b	.L2778
.L2779:
	sub	r3, r3, #4
	mov	r2, r4
	add	r0, sp, #140
.L2781:
	ldr	r1, [r2], #4
	cmp	r2, r0
	str	r1, [r3, #4]!
	bne	.L2781
	b	.L2780
.L2783:
	mvn	r0, #18
	b	.L2775
.L2787:
	bl	__stack_chk_fail
	.fnend
	.size	usb_diag_update_pid_and_serial_num, .-usb_diag_update_pid_and_serial_num
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	clients_store, %function
clients_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	mov	r1, r2
	ldr	r0, .L2790
	mov	r2, #32
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r3
	str	lr, [sp, #4]
	bl	strlcpy
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L2791:
	.align	2
.L2790:
	.word	.LANCHOR0+2872
	.fnend
	.size	clients_store, .-clients_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_xport_names_store, %function
rmnet_xport_names_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	mov	r1, r2
	ldr	r0, .L2794
	mov	r2, #50
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r3
	str	lr, [sp, #4]
	bl	strlcpy
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L2795:
	.align	2
.L2794:
	.word	.LANCHOR0+1696
	.fnend
	.size	rmnet_xport_names_store, .-rmnet_xport_names_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_transports_store, %function
rmnet_transports_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	mov	r1, r2
	ldr	r0, .L2798
	mov	r2, #50
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r3
	str	lr, [sp, #4]
	bl	strlcpy
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L2799:
	.align	2
.L2798:
	.word	.LANCHOR0+1748
	.fnend
	.size	rmnet_transports_store, .-rmnet_transports_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_transports_store, %function
mbim_transports_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	mov	r1, r2
	ldr	r0, .L2802
	mov	r2, #50
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r3
	str	lr, [sp, #4]
	bl	strlcpy
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L2803:
	.align	2
.L2802:
	.word	.LANCHOR0+1800
	.fnend
	.size	mbim_transports_store, .-mbim_transports_store
	.section	.rodata.str1.4
	.align	2
.LC176:
	.ascii	"<3>Physical address or size of buf is NULL\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_pcm_mmap, %function
audio_pcm_mmap:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	ldr	r2, [r0, #208]
	.pad #8
	sub	sp, sp, #8
	ldr	r3, [r2, #552]
	cmp	r3, #0
	beq	.L2805
	ldr	lr, [r2, #556]
	cmp	lr, #0
	beq	.L2805
	ldr	r0, [r0]
	ldr	r2, [r2, #548]
	ldr	r0, [r0]
	ldr	r0, [r0, #500]
	cmp	r0, #0
	beq	.L2806
	ldr	ip, [r0, #284]
	cmp	ip, #0
	beq	.L2806
.L2807:
	ldr	r4, [ip, #8]
	cmp	r4, #0
	beq	.L2808
	mov	ip, #0
	str	lr, [sp]
	str	ip, [sp, #4]
	blx	r4
.L2804:
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L2806:
	movw	ip, #:lower16:arm_dma_ops
	movt	ip, #:upper16:arm_dma_ops
	cmp	ip, #0
	bne	.L2807
	.syntax divided
@ 200 "include/asm-generic/dma-mapping-common.h" 1
	.word 0xe7f001f2
@ 0 "" 2
	.arm
	.syntax unified
.L2808:
	str	lr, [sp]
	bl	dma_common_mmap
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L2805:
	movw	r0, #:lower16:.LC176
	movt	r0, #:upper16:.LC176
	bl	printk
	mvn	r0, #21
	b	.L2804
	.fnend
	.size	audio_pcm_mmap, .-audio_pcm_mmap
	.section	.rodata.str1.4
	.align	2
.LC177:
	.ascii	"<3>usb_ep_queue failed ret: %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_send, %function
audio_send:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	add	r8, r0, #100
	mov	r0, r8
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #28
	sub	sp, sp, #28
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #84]
	mov	r1, r0
	cmp	r3, #0
	beq	.L2840
	ldr	r2, [r5, #112]
	mov	r0, r8
	cmp	r2, #0
	beq	.L2839
	ldr	r3, [r3, #208]
	movw	r4, #44100
	adr	fp, .L2846
	ldrd	r10, [fp]
	str	r3, [sp, #12]
	bl	_raw_spin_unlock_irqrestore
	add	r0, sp, #16
	bl	ktime_get
	ldr	r2, [sp, #16]
	mov	ip, #0
	ldr	r3, [r5, #128]
	mov	r1, ip
	mov	lr, ip
	ldr	r0, [sp, #20]
	ldr	r9, [r5, #132]
	subs	r6, r2, r3
	sbc	r7, r0, r9
	ldr	r9, [r5, #136]
	.syntax divided
@ 349 "drivers/usb/gadget/f_audio_source.c" 1
	umull	r2, r3, r10, r6
	mov	r2, #0
@ 0 "" 2
@ 349 "drivers/usb/gadget/f_audio_source.c" 1
	umlal	r3, r2, fp, r6
	umlal	r3, r1, r10, r7
	mov	r3, #0
	adds	r2, r1, r2
	adc	r3, r3, #0
	umlal	r2, r3, fp, r7
@ 0 "" 2
	.arm
	.syntax unified
	lsr	r0, r2, #18
	lsr	r2, r3, #18
	adr	r7, .L2846+8
	ldrd	r6, [r7]
	ldr	fp, [r5, #140]
	orr	r0, r0, r3, lsl #14
	mov	r10, #440
	umull	r0, r1, r0, r4
	mla	r1, r4, r2, r1
	.syntax divided
@ 351 "drivers/usb/gadget/f_audio_source.c" 1
	umull	r2, r3, r6, r0
	cmn	r2, r6
	adcs	r3, r3, r7
	adc	r2, ip, #0
@ 0 "" 2
@ 351 "drivers/usb/gadget/f_audio_source.c" 1
	umlal	r3, r2, r7, r0
	umlal	r3, lr, r6, r1
	mov	r3, #0
	adds	r2, lr, r2
	adc	r3, r3, #0
	umlal	r2, r3, r7, r1
@ 0 "" 2
	.arm
	.syntax unified
	lsr	r2, r2, #9
	lsr	r1, r3, #9
	orr	r2, r2, r3, lsl #23
	subs	r3, r2, r9
	str	r3, [sp]
	sbc	r3, r1, fp
	mov	fp, #0
	str	r3, [sp, #4]
	ldrd	r6, [sp]
	cmp	r10, r6
	sbcs	r3, fp, r7
	blt	.L2842
	mov	r3, r7
	cmp	r6, #1
	sbcs	r3, r3, #0
	bge	.L2825
	mov	r2, #44
	mov	r3, #0
	strd	r2, [sp]
.L2825:
	add	fp, r5, #88
	ldr	r10, [sp, #12]
	b	.L2834
.L2845:
	sub	r7, r7, r1
	ldr	r0, [r6]
	mov	r2, r7
	str	r7, [sp, #12]
	bl	memcpy
	cmp	r4, r7
	ldr	r3, [sp, #12]
	ble	.L2831
	ldr	r0, [r6]
	sub	r2, r4, r7
	ldr	r1, [r5, #104]
	str	r2, [sp, #12]
	add	r0, r0, r7
	bl	memcpy
	ldr	r2, [sp, #12]
	ldr	r3, [r5, #104]
	add	r2, r3, r2
	str	r2, [r5, #112]
.L2832:
	mov	r1, r9
	mov	r0, r8
	str	r4, [r6, #4]
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, [r5, #96]
	mov	r2, #32
	mov	r1, r6
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L2843
	ldr	r1, [r10, #88]
	lsl	r4, r4, #3
	ldrd	r2, [r5, #136]
	udiv	r4, r4, r1
	ldrd	r0, [sp]
	subs	r0, r0, r4
	sbc	r1, r1, #0
	adds	r2, r2, r4
	adc	r3, r3, #0
	cmp	r0, #1
	strd	r0, [sp]
	sbcs	r1, r1, #0
	strd	r2, [r5, #136]
	blt	.L2844
.L2834:
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #88]
	mov	r1, r0
	cmp	fp, r3
	moveq	r6, #0
	beq	.L2826
	ldm	r3, {r0, r2}
	sub	r6, r3, #36
	str	r2, [r0, #4]
	str	r0, [r2]
	mov	r0, #256
	mov	r2, #512
	stm	r3, {r0, r2}
.L2826:
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #84]
	mov	r9, r0
	cmp	r3, #0
	beq	.L2841
	ldr	r1, [r5, #112]
	cmp	r1, #0
	beq	.L2841
	cmp	r6, #0
	beq	.L2841
	ldr	r3, [sp]
	ldr	r4, [r10, #88]
	ldr	r7, [r5, #108]
	mul	r4, r3, r4
	lsr	r4, r4, #3
	cmp	r4, #256
	movge	r4, #256
	add	r3, r1, r4
	cmp	r7, r3
	bcc	.L2845
	mov	r2, r4
	ldr	r0, [r6]
	bl	memcpy
	mov	r3, r4
.L2831:
	ldr	r1, [r5, #108]
	ldr	r2, [r5, #112]
	add	r3, r2, r3
	cmp	r3, r1
	str	r3, [r5, #112]
	ldrcs	r3, [r5, #104]
	strcs	r3, [r5, #112]
	b	.L2832
.L2843:
	mov	r1, r0
	movw	r0, #:lower16:.LC177
	movt	r0, #:upper16:.LC177
	bl	printk
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #92]
	add	r2, r6, #36
	mov	r1, r0
	mov	r0, r8
	str	r2, [r5, #92]
	str	fp, [r6, #36]
	str	r3, [r6, #40]
	str	r2, [r3]
.L2839:
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L2841:
	mov	r1, r9
.L2840:
	mov	r0, r8
	b	.L2839
.L2842:
	subs	r2, r2, #44
	mov	r3, #0
	sbc	r1, r1, #0
	str	r2, [r5, #136]
	mov	r2, #44
	str	r1, [r5, #140]
	strd	r2, [sp]
	b	.L2825
.L2844:
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L2847:
	.align	3
.L2846:
	.word	-675924773
	.word	1125899906
	.word	-1924145349
	.word	-2095944041
	.fnend
	.size	audio_send, .-audio_send
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_pcm_playback_trigger, %function
audio_pcm_playback_trigger:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	strd	r6, [sp, #8]
	str	lr, [sp, #16]
	ldr	r3, [r0, #208]
	.pad #12
	sub	sp, sp, #12
	ldr	r4, [r3, #208]
	cmp	r1, #6
	ldrls	pc, [pc, r1, asl #2]
	b	.L2853
.L2851:
	.word	.L2852
	.word	.L2850
	.word	.L2853
	.word	.L2853
	.word	.L2853
	.word	.L2852
	.word	.L2850
.L2850:
	mov	r0, sp
	mov	r6, #0
	bl	ktime_get
	ldrd	r2, [sp]
	mov	r7, #0
	mov	r0, r4
	strd	r2, [r4, #128]
	strd	r6, [r4, #136]
	bl	audio_send
	mov	r0, #0
.L2848:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L2852:
	add	r6, r4, #100
	mov	r5, #0
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r2, #0
	mov	r3, #0
	mov	r1, r0
	mov	r0, r6
	strd	r2, [r4, #104]
	str	r5, [r4, #112]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r5
	b	.L2848
.L2853:
	mvn	r0, #21
	b	.L2848
	.fnend
	.size	audio_pcm_playback_trigger, .-audio_pcm_playback_trigger
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_pcm_open, %function
audio_pcm_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r2, #:lower16:.LANCHOR2
	movw	r1, #1064
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	movt	r2, #:upper16:.LANCHOR2
	strd	r6, [sp, #8]
	add	r3, r2, r1
	strd	r8, [sp, #16]
	mov	r8, r0
	str	r10, [sp, #24]
	ldrd	r0, [r1, r2]
	str	lr, [sp, #28]
	ldrd	r6, [r3, #8]
	ldr	r10, [r8, #8]
	ldr	r9, [r8, #208]
	ldrd	r4, [r3, #16]
	add	r2, r9, #216
	str	r10, [r9, #208]
	strd	r0, [r9, #216]
	ldrd	r0, [r3, #24]
	strd	r6, [r9, #224]
	ldrd	r6, [r3, #32]
	strd	r4, [r9, #232]
	ldrd	r4, [r3, #40]
	strd	r0, [r9, #240]
	ldrd	r0, [r3, #48]
	strd	r6, [r9, #248]
	ldrd	r6, [r3, #56]
	strd	r4, [r2, #40]
	strd	r0, [r2, #48]
	mov	r0, r9
	strd	r6, [r2, #56]
	bl	snd_pcm_limit_hw_rates
	mov	r3, #2
	mov	r0, #0
	str	r3, [r9, #248]
	str	r8, [r10, #84]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
	.fnend
	.size	audio_pcm_open, .-audio_pcm_open
	.section	.rodata.str1.4
	.align	2
.LC178:
	.ascii	"%s,\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	functions_show, %function
functions_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	mov	r9, r2
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	bl	dev_get_drvdata
	mov	r8, r0
	add	r0, r0, #24
	str	r0, [sp, #4]
	bl	mutex_lock
	ldr	r7, [r8, #196]!
	cmp	r8, r7
	beq	.L2871
	movw	fp, #:lower16:.LC178
	sub	r7, r7, #120
	mov	r5, r9
	movt	fp, #:upper16:.LC178
	mov	r10, #58
.L2858:
	mov	r6, r7
	ldr	r4, [r6, #112]!
	cmp	r6, r4
	sub	r4, r4, #4
	beq	.L2861
.L2862:
	ldr	r3, [r4]
	mov	r0, r5
	mov	r2, fp
	mov	r1, #4096
	ldr	r3, [r3]
	bl	snprintf
	ldr	r4, [r4, #4]
	add	r5, r5, r0
	cmp	r6, r4
	sub	r4, r4, #4
	bne	.L2862
.L2861:
	ldr	r7, [r7, #120]
	cmp	r8, r7
	sub	r7, r7, #120
	beq	.L2872
	cmp	r9, r5
	strbne	r10, [r5, #-1]
	b	.L2858
.L2872:
	ldr	r0, [sp, #4]
	bl	mutex_unlock
	cmp	r9, r5
	beq	.L2870
	mov	r3, #10
	sub	r0, r5, r9
	strb	r3, [r5, #-1]
.L2857:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L2871:
	ldr	r0, [sp, #4]
	bl	mutex_unlock
.L2870:
	mov	r0, #0
	b	.L2857
	.fnend
	.size	functions_show, .-functions_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_aliases_show, %function
ffs_aliases_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r2
	movt	r3, #:upper16:.LANCHOR0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r6, [r3, #196]
	sub	r5, r6, #184
	mov	r0, r5
	bl	mutex_lock
	movw	r1, #:lower16:.LC70
	add	r2, r6, #8
	mov	r0, r4
	movt	r1, #:upper16:.LC70
	bl	sprintf
	mov	r4, r0
	mov	r0, r5
	bl	mutex_unlock
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	ffs_aliases_show, .-ffs_aliases_show
	.section	.rodata.str1.4
	.align	2
.LC179:
	.ascii	"<4>ttyGS%d: unexpected RX status %d\012\000"
	.align	2
.LC180:
	.ascii	"<4>ttyGS%d: RX not scheduled?\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_rx_push, %function
gs_rx_push:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	sub	r3, r0, #60
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	sub	r7, r0, #12
	mov	r0, r3
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #20
	sub	sp, sp, #20
	str	r3, [sp, #8]
	bl	_raw_spin_lock_irq
	ldr	r6, [r5, #-52]
	ldr	r4, [r5, #-12]
	cmp	r7, r4
	beq	.L2876
	movw	r3, #:lower16:.LC179
	mov	r9, #0
	movt	r3, #:upper16:.LC179
	mov	r8, r9
	mov	r10, r9
	str	r3, [sp, #12]
	b	.L2883
.L2879:
	ldr	fp, [r4, #12]
	cmp	fp, #0
	beq	.L2877
	ldr	r2, [r5, #-4]
	ldr	r1, [r4, #-36]
	cmp	r2, #0
	beq	.L2880
	sub	fp, fp, r2
	add	r1, r1, r2
	mov	r3, fp
	mov	r2, #0
	mov	r0, r6
	bl	tty_insert_flip_string_fixed_flag
	ldr	r3, [r5, #72]
	cmp	r0, #0
	add	r3, r3, r0
	str	r3, [r5, #72]
	bne	.L2893
.L2881:
	cmp	r0, fp
	bne	.L2915
	str	r10, [r5, #-4]
.L2877:
	ldm	r4, {r1, r2}
	mov	r3, r5
	str	r2, [r1, #4]
	str	r1, [r2]
	ldr	r2, [r3, #-28]!
	str	r4, [r2, #4]
	strd	r2, [r4]
	ldr	r3, [r5, #-20]
	str	r4, [r5, #-28]
	ldr	r4, [r5, #-12]
	sub	r3, r3, #1
	cmp	r7, r4
	str	r3, [r5, #-20]
	beq	.L2916
.L2883:
	cmp	r6, #0
	beq	.L2877
	ldr	r3, [r6, #164]
	tst	r3, #1
	bne	.L2878
	ldr	r2, [r4, #8]
	cmn	r2, #108
	moveq	r8, #1
	beq	.L2879
	cmp	r2, #0
	beq	.L2879
	ldrb	r1, [r5, #-43]	@ zero_extendqisi2
	ldr	r0, [sp, #12]
	bl	printk
	b	.L2879
.L2880:
	mov	r3, fp
	mov	r0, r6
	str	r2, [sp, #4]
	bl	tty_insert_flip_string_fixed_flag
	ldr	r3, [r5, #72]
	cmp	r0, #0
	ldr	r2, [sp, #4]
	add	r3, r3, r0
	str	r3, [r5, #72]
	beq	.L2894
.L2893:
	mov	r9, #1
	b	.L2881
.L2915:
	mov	r2, r0
.L2894:
	ldr	r3, [r5, #-4]
	add	r3, r3, r2
	str	r3, [r5, #-4]
.L2878:
	cmp	r9, #0
	bne	.L2892
	ldr	r3, [r5, #-12]
	cmp	r7, r3
	beq	.L2887
	ldr	r3, [r6, #164]
	tst	r3, #1
	beq	.L2917
.L2887:
	cmp	r8, #0
	beq	.L2876
.L2889:
	ldr	r0, [sp, #8]
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irq
.L2876:
	ldr	r3, [r5, #-56]
	cmp	r3, #0
	beq	.L2889
	ldr	r0, [sp, #8]
	bl	gs_start_rx
	b	.L2889
.L2916:
	cmp	r6, #0
	moveq	r9, #0
	cmp	r9, #0
	beq	.L2887
.L2892:
	mov	r0, r6
	bl	tty_flip_buffer_push
	ldr	r3, [r5, #-12]
	cmp	r7, r3
	beq	.L2887
	ldr	r3, [r6, #164]
	tst	r3, #1
	bne	.L2887
	movw	r3, #:lower16:.LANCHOR0
	mov	r1, r5
	movt	r3, #:upper16:.LANCHOR0
	ldr	r0, [r3, #2032]
	bl	queue_work
	b	.L2887
.L2917:
	movw	r0, #:lower16:.LC180
	ldrb	r1, [r5, #-43]	@ zero_extendqisi2
	movt	r0, #:upper16:.LC180
	bl	printk
	b	.L2887
	.fnend
	.size	gs_rx_push, .-gs_rx_push
	.section	.rodata.str1.4
	.align	2
.LC181:
	.ascii	"<6>%s: name:%s is not found\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_ch_probe, %function
gsdio_ch_probe:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movw	r4, #:lower16:.LANCHOR0
	movt	r4, #:upper16:.LANCHOR0
	strd	r6, [sp, #8]
	ldr	r7, [r4, #2040]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r6, [r0]
	cmp	r7, #0
	beq	.L2919
	ldr	r5, [r4, #2068]
	mov	r2, #9
	mov	r1, r6
	ldr	r3, [r5, #120]
	ldr	r0, [r3]
	bl	strncmp
	cmp	r0, #0
	beq	.L2920
	cmp	r7, #1
	bls	.L2919
	ldr	r5, [r4, #2176]
	mov	r2, #9
	mov	r1, r6
	ldr	r3, [r5, #120]
	ldr	r0, [r3]
	bl	strncmp
	cmp	r0, #0
	bne	.L2919
.L2920:
	mov	r3, #1
	add	r1, r5, #124
	ldr	r0, [r4, #2036]
	movw	r2, #3000
	str	r3, [r5, #112]
	bl	queue_delayed_work
	mov	r0, #0
.L2918:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L2919:
	movw	r0, #:lower16:.LC181
	ldr	r1, .L2929
	mov	r2, r6
	movt	r0, #:upper16:.LC181
	bl	printk
	mvn	r0, #18
	b	.L2918
.L2930:
	.align	2
.L2929:
	.word	.LANCHOR2+1128
	.fnend
	.size	gsdio_ch_probe, .-gsdio_ch_probe
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_ch_remove, %function
gsmd_ch_remove:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movw	r4, #:lower16:.LANCHOR0
	movt	r4, #:upper16:.LANCHOR0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r6, [r4, #2904]
	ldr	r7, [r0]
	cmp	r6, #0
	beq	.L2934
	ldr	r3, [r4, #2932]
	mov	r2, #20
	mov	r1, r7
	ldr	r5, [r3, #72]
	ldr	r0, [r5, #4]
	bl	strncmp
	cmp	r0, #0
	beq	.L2933
	cmp	r6, #1
	bls	.L2934
	ldr	r3, [r4, #3040]
	mov	r1, r7
	mov	r2, #20
	ldr	r5, [r3, #72]
	ldr	r0, [r5, #4]
	bl	strncmp
	cmp	r0, #0
	beq	.L2933
.L2934:
	ldrd	r4, [sp]
	mov	r0, #0
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L2933:
	add	r4, r5, #8
	mov	r0, #1
	mov	r1, r4
	bl	_clear_bit
	mov	r0, #0
	mov	r1, r4
	bl	_clear_bit
	ldr	r0, [r5]
	cmp	r0, #0
	beq	.L2934
	bl	smd_close
	mov	r3, #0
	str	r3, [r5]
	b	.L2934
	.fnend
	.size	gsmd_ch_remove, .-gsmd_ch_remove
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_ch_probe, %function
gsmd_ch_probe:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movw	r4, #:lower16:.LANCHOR0
	movt	r4, #:upper16:.LANCHOR0
	strd	r6, [sp, #8]
	ldr	r7, [r4, #2904]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r8, [r0]
	cmp	r7, #0
	beq	.L2946
	ldr	r5, [r4, #2932]
	mov	r2, #20
	mov	r1, r8
	ldr	r6, [r5, #72]
	ldr	r0, [r6, #4]
	bl	strncmp
	cmp	r0, #0
	beq	.L2947
	cmp	r7, #1
	bls	.L2946
	ldr	r5, [r4, #3040]
	mov	r1, r8
	mov	r2, #20
	ldr	r6, [r5, #72]
	ldr	r0, [r6, #4]
	bl	strncmp
	cmp	r0, #0
	beq	.L2947
.L2946:
	ldrd	r4, [sp]
	mov	r0, #0
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L2947:
	add	r1, r6, #8
	mov	r0, #1
	add	r7, r5, #4
	bl	_set_bit
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #68]
	mov	r6, r0
	cmp	r3, #0
	beq	.L2948
	add	r1, r5, #76
	mov	r2, #0
	ldr	r0, [r4, #2260]
	bl	queue_delayed_work
.L2948:
	mov	r1, r6
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	b	.L2946
	.fnend
	.size	gsmd_ch_probe, .-gsmd_ch_probe
	.section	.rodata.str1.4
	.align	2
.LC182:
	.ascii	"bam_dmux_ch_8\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_data_ch_probe, %function
gbam_data_ch_probe:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movw	r4, #:lower16:.LANCHOR0
	movt	r4, #:upper16:.LANCHOR0
	strd	r6, [sp, #8]
	ldr	r3, [r4, #3124]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r1, [r0]
	cmp	r3, #0
	ble	.L2960
	movw	r0, #:lower16:.LC182
	movt	r0, #:upper16:.LC182
	bl	strcmp
	cmp	r0, #0
	beq	.L2966
.L2960:
	ldrd	r4, [sp]
	mov	r0, #0
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L2966:
	ldr	r5, [r4, #3128]
	mov	r0, #2
	add	r1, r5, #20
	add	r7, r5, #4
	bl	_set_bit
	mov	r0, r7
	add	r8, r5, #8
	bl	_raw_spin_lock_irqsave
	mov	r6, r0
	mov	r0, r8
	bl	_raw_spin_lock
	ldr	r3, [r5, #12]
	cmp	r3, #0
	beq	.L2961
	add	r1, r5, #284
	ldr	r0, [r4, #2796]
	bl	queue_work
.L2961:
	mov	r0, r8
	bl	_raw_spin_unlock
	mov	r1, r6
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	b	.L2960
	.fnend
	.size	gbam_data_ch_probe, .-gbam_data_ch_probe
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	grmnet_ctrl_smd_ch_remove, %function
grmnet_ctrl_smd_ch_remove:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r5, #:lower16:.LANCHOR0
	movt	r5, #:upper16:.LANCHOR0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r5, #2288]
	ldr	r6, [r0]
	cmp	r4, #0
	beq	.L2968
	mov	r2, #20
	mov	r1, r6
	ldr	r0, [r4, #4]
	bl	strncmp
	cmp	r0, #0
	beq	.L2969
.L2968:
	ldr	r4, [r5, #2372]
	cmp	r4, #0
	beq	.L2970
	mov	r2, #20
	mov	r1, r6
	ldr	r0, [r4, #4]
	bl	strncmp
	cmp	r0, #0
	beq	.L2969
.L2970:
	ldr	r4, [r5, #2456]
	cmp	r4, #0
	beq	.L2971
	mov	r2, #20
	mov	r1, r6
	ldr	r0, [r4, #4]
	bl	strncmp
	cmp	r0, #0
	beq	.L2969
.L2971:
	ldr	r4, [r5, #2540]
	cmp	r4, #0
	beq	.L2972
	mov	r2, #20
	mov	r1, r6
	ldr	r0, [r4, #4]
	bl	strncmp
	cmp	r0, #0
	beq	.L2969
.L2972:
	ldr	r4, [r5, #2624]
	cmp	r4, #0
	beq	.L2973
	mov	r2, #20
	mov	r1, r6
	ldr	r0, [r4, #4]
	bl	strncmp
	cmp	r0, #0
	beq	.L2969
.L2973:
	ldr	r4, [r5, #2708]
	cmp	r4, #0
	beq	.L2975
	mov	r1, r6
	mov	r2, #20
	ldr	r0, [r4, #4]
	bl	strncmp
	cmp	r0, #0
	beq	.L2969
.L2975:
	ldrd	r4, [sp]
	mov	r0, #0
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L2969:
	add	r5, r4, #8
	mov	r0, #1
	mov	r1, r5
	bl	_clear_bit
	mov	r0, #0
	mov	r1, r5
	bl	_clear_bit
	ldr	r0, [r4]
	cmp	r0, #0
	beq	.L2975
	bl	smd_close
	mov	r3, #0
	str	r3, [r4]
	b	.L2975
	.fnend
	.size	grmnet_ctrl_smd_ch_remove, .-grmnet_ctrl_smd_ch_remove
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	grmnet_ctrl_smd_ch_probe, %function
grmnet_ctrl_smd_ch_probe:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movw	r5, #:lower16:.LANCHOR0
	movt	r5, #:upper16:.LANCHOR0
	strd	r6, [sp, #8]
	ldr	r4, [r5, #2288]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r6, [r0]
	cmp	r4, #0
	beq	.L3014
	mov	r2, #20
	mov	r1, r6
	ldr	r0, [r4, #4]
	bl	strncmp
	cmp	r0, #0
	beq	.L3015
.L3014:
	ldr	r4, [r5, #2372]
	cmp	r4, #0
	beq	.L3016
	mov	r2, #20
	mov	r1, r6
	ldr	r0, [r4, #4]
	bl	strncmp
	cmp	r0, #0
	beq	.L3015
.L3016:
	ldr	r4, [r5, #2456]
	cmp	r4, #0
	beq	.L3017
	mov	r2, #20
	mov	r1, r6
	ldr	r0, [r4, #4]
	bl	strncmp
	cmp	r0, #0
	beq	.L3015
.L3017:
	ldr	r4, [r5, #2540]
	cmp	r4, #0
	beq	.L3018
	mov	r2, #20
	mov	r1, r6
	ldr	r0, [r4, #4]
	bl	strncmp
	cmp	r0, #0
	beq	.L3015
.L3018:
	ldr	r4, [r5, #2624]
	cmp	r4, #0
	beq	.L3019
	mov	r2, #20
	mov	r1, r6
	ldr	r0, [r4, #4]
	bl	strncmp
	cmp	r0, #0
	beq	.L3015
.L3019:
	ldr	r4, [r5, #2708]
	cmp	r4, #0
	beq	.L3020
	mov	r1, r6
	mov	r2, #20
	ldr	r0, [r4, #4]
	bl	strncmp
	cmp	r0, #0
	beq	.L3015
.L3020:
	ldrd	r4, [sp]
	mov	r0, #0
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L3015:
	add	r6, r4, #8
	mov	r0, #2
	mov	r1, r6
	add	r7, r4, #108
	bl	_clear_bit
	mov	r1, r6
	mov	r0, #1
	bl	_set_bit
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #104]
	mov	r6, r0
	cmp	r3, #0
	beq	.L3021
	add	r1, r4, #112
	mov	r2, #0
	ldr	r0, [r5, #2280]
	bl	queue_delayed_work
.L3021:
	mov	r1, r6
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	b	.L3020
	.fnend
	.size	grmnet_ctrl_smd_ch_probe, .-grmnet_ctrl_smd_ch_probe
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_ctrl_remove, %function
ghsic_ctrl_remove:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movw	r5, #:lower16:.LANCHOR0
	movt	r5, #:upper16:.LANCHOR0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r6, [r5, #404]
	ldr	r7, [r0]
	cmp	r6, #0
	beq	.L3060
	ldr	r4, [r5, #408]
	mov	r2, #20
	mov	r1, r7
	ldr	r0, [r4, #64]
	bl	strncmp
	cmp	r0, #0
	beq	.L3061
	cmp	r6, #1
	bls	.L3060
	ldr	r4, [r5, #512]
	mov	r2, #20
	mov	r1, r7
	ldr	r0, [r4, #64]
	bl	strncmp
	cmp	r0, #0
	beq	.L3061
	cmp	r6, #2
	beq	.L3060
	ldr	r4, [r5, #616]
	mov	r2, #20
	mov	r1, r7
	ldr	r0, [r4, #64]
	bl	strncmp
	cmp	r0, #0
	beq	.L3061
	cmp	r6, #3
	beq	.L3060
	ldr	r4, [r5, #720]
	mov	r1, r7
	mov	r2, #20
	ldr	r0, [r4, #64]
	bl	strncmp
	cmp	r0, #0
	beq	.L3061
.L3060:
	movw	r0, #:lower16:.LC99
	ldr	r1, .L3096
	mvn	r2, #21
	movt	r0, #:upper16:.LC99
	bl	printk
	mvn	r0, #21
	b	.L3059
.L3061:
	add	r6, r4, #4
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r4, #8]
	mov	r1, r0
	cmp	r5, #0
	beq	.L3095
	ldr	r3, [r4, #48]
	cmp	r3, #0
	bne	.L3066
	mov	r0, r6
	str	r3, [r4, #92]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r5, #112]
	cmp	r3, #0
	beq	.L3068
.L3067:
	mov	r0, r5
	blx	r3
.L3068:
	add	r4, r4, #84
	mov	r0, #0
	mov	r1, r4
	bl	_clear_bit
.L3065:
	mov	r0, #1
	mov	r1, r4
	bl	_clear_bit
	mov	r0, #0
.L3059:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L3066:
	mov	r3, #0
	mov	r0, r6
	str	r3, [r4, #92]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r5, #96]
	cmp	r3, #0
	bne	.L3067
	b	.L3068
.L3095:
	mov	r0, r6
	add	r4, r4, #84
	bl	_raw_spin_unlock_irqrestore
	b	.L3065
.L3097:
	.align	2
.L3096:
	.word	.LANCHOR2+1144
	.fnend
	.size	ghsic_ctrl_remove, .-ghsic_ctrl_remove
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_notify_modem, %function
gsmd_notify_modem:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR0
	movt	r3, #:upper16:.LANCHOR0
	ldr	ip, [r3, #2904]
	cmp	r1, ip
	bcs	.L3126
	cmp	r0, #0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	beq	.L3127
	mov	ip, #108
	ands	r0, r2, #1
	movne	r0, #2
	mla	r1, ip, r1, r3
	ldr	r4, [r1, #2932]
	moveq	r1, #4
	movne	r1, #6
	tst	r2, #2
	moveq	r1, r0
	ldr	r3, [r4, #156]
	cmp	r3, r1
	beq	.L3098
	ldr	r3, [r4, #72]
	str	r1, [r4, #156]
	ldr	r2, [r3, #8]
	tst	r2, #1
	beq	.L3098
	cmp	r0, #0
	bne	.L3128
.L3106:
	mvn	r2, r1
	ldrd	r4, [sp]
	ldr	r0, [r3]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	smd_tiocmset
.L3098:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L3128:
	ldr	r0, [r3]
	bl	smd_tiocmget
	ands	r3, r0, #128
	movne	r1, #9
	moveq	r1, #1
	movne	r3, #8
	tst	r0, #64
	moveq	r1, r3
	tst	r0, #256
	orrne	r1, r1, #2
	str	r1, [r4, #160]
	ldr	r3, [r5, #128]
	cmp	r3, #0
	beq	.L3125
	ldr	r0, [r4, #68]
	blx	r3
.L3125:
	ldr	r3, [r4, #72]
	ldr	r1, [r4, #156]
	b	.L3106
.L3126:
	movw	r0, #:lower16:.LC96
	mov	r2, r1
	ldr	r1, .L3129
	movt	r0, #:upper16:.LC96
	b	printk
.L3127:
	movw	r0, #:lower16:.LC97
	ldr	r1, .L3129
	movt	r0, #:upper16:.LC97
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	printk
.L3130:
	.align	2
.L3129:
	.word	.LANCHOR2+1164
	.fnend
	.size	gsmd_notify_modem, .-gsmd_notify_modem
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_data_ch_remove, %function
gbam_data_ch_remove:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	r4, #:lower16:.LANCHOR0
	movt	r4, #:upper16:.LANCHOR0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r7, [r4, #3124]
	.pad #12
	sub	sp, sp, #12
	cmp	r7, #0
	ble	.L3155
	mov	fp, #0
	movw	r6, #:lower16:.LC182
	str	r4, [sp]
	mov	r5, r0
	mov	r9, fp
	mov	r8, fp
	movt	r6, #:upper16:.LC182
.L3132:
	mov	r0, r6
	ldr	r1, [r5]
	bl	strcmp
	cmp	r0, #0
	beq	.L3157
.L3133:
	add	fp, fp, #1
	cmp	fp, r7
	blt	.L3132
.L3155:
	mov	r0, #0
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L3157:
	mov	r3, #84
	ldr	r2, .L3158
	mul	r3, r3, fp
	ldr	r7, [r3, r2]
	add	r1, r7, #8
	add	r4, r7, #4
	mov	r0, r4
	str	r1, [sp, #4]
	bl	_raw_spin_lock_irqsave
	ldr	r1, [sp, #4]
	mov	r10, r0
	mov	r0, r1
	bl	_raw_spin_lock
	ldr	r3, [r7, #12]
	ldr	r1, [sp, #4]
	cmp	r3, #0
	ldrdne	r8, [r3, #76]
	mov	r0, r1
	bl	_raw_spin_unlock
	mov	r1, r10
	mov	r0, r4
	bl	_raw_spin_unlock_irqrestore
	cmp	r8, #0
	beq	.L3135
	ldr	r3, [r8, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L3135
	mov	r0, r8
	blx	r3
.L3135:
	cmp	r9, #0
	beq	.L3136
	ldr	r3, [r9, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L3136
	mov	r0, r9
	blx	r3
.L3136:
	mov	r0, r7
	add	r10, r7, #20
	bl	gbam_free_buffers
	ldr	r0, [r7, #24]
	bl	msm_bam_dmux_close
	mov	r3, #0
	mov	r1, r10
	mov	r0, #2
	str	r3, [r7, #240]
	bl	_clear_bit
	mov	r1, r10
	mov	r0, #1
	bl	_clear_bit
	ldr	r3, [sp]
	ldr	r7, [r3, #3124]
	b	.L3133
.L3159:
	.align	2
.L3158:
	.word	.LANCHOR0+3128
	.fnend
	.size	gbam_data_ch_remove, .-gbam_data_ch_remove
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_data_write_tobam, %function
gbam_data_write_tobam:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	fp, [r0, #-4]
	.pad #4
	sub	sp, sp, #4
	add	r9, fp, #4
	mov	r0, r9
	bl	_raw_spin_lock_irqsave
	ldr	r2, [fp, #12]
	mov	r6, r0
	cmp	r2, #0
	beq	.L3161
	movw	r8, #:lower16:.LANCHOR1
	ldr	r0, [r4, #160]
	movt	r8, #:upper16:.LANCHOR1
	ldr	r1, [r8, #672]
	cmp	r0, r1
	subcc	r10, r4, #20
	bcs	.L3163
.L3168:
	ldr	r5, [r4, #-20]
	mov	r1, r6
	mov	r0, r9
	cmp	r10, r5
	beq	.L3163
	cmp	r5, #0
	beq	.L3163
	ldr	ip, [r4, #-12]
	mov	r2, #0
	mov	r3, #0
	sub	ip, ip, #1
	str	ip, [r4, #-12]
	ldr	lr, [r5]
	ldr	ip, [r5, #4]
	strd	r2, [r5]
	str	ip, [lr, #4]
	str	lr, [ip]
	ldr	lr, [r4, #160]
	ldr	ip, [r4, #180]
	add	lr, lr, #1
	add	ip, ip, #1
	str	lr, [r4, #160]
	str	ip, [r4, #180]
	bl	_raw_spin_unlock_irqrestore
	mov	r1, r5
	ldr	r0, [r4, #-56]
	bl	msm_bam_dmux_write
	mov	r7, r0
	mov	r0, r9
	bl	_raw_spin_lock_irqsave
	cmp	r7, #0
	mov	r6, r0
	bne	.L3178
	ldr	r1, [r4, #160]
	ldr	r0, [r4, #200]
	cmp	r1, r0
	ldr	r0, [r8, #672]
	bls	.L3165
	cmp	r1, r0
	str	r1, [r4, #200]
	bcc	.L3168
.L3163:
	mov	r1, r6
	mov	r0, r9
	ldr	r5, [r4, #-12]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r8, #676]
	cmp	r5, r3
	bcs	.L3160
	ldr	r3, [r4, #196]
	cmp	r3, #0
	beq	.L3170
	ldr	r3, [r4, #188]
	mov	r2, #0
	str	r2, [r4, #196]
	add	r3, r3, #1
	str	r3, [r4, #188]
.L3170:
	mov	r0, fp
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	gbam_start_rx
.L3165:
	cmp	r1, r0
	bcc	.L3168
	b	.L3163
.L3160:
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L3161:
	mov	r1, r0
	mov	r0, r9
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L3178:
	ldr	lr, [r4, #160]
	mov	r0, r5
	ldr	ip, [r4, #168]
	ldr	r1, [r4, #180]
	sub	lr, lr, #1
	add	ip, ip, #1
	sub	r1, r1, #1
	str	lr, [r4, #160]
	str	ip, [r4, #168]
	str	r1, [r4, #180]
	bl	dev_kfree_skb_any
	b	.L3163
	.fnend
	.size	gbam_data_write_tobam, .-gbam_data_write_tobam
	.section	.rodata.str1.4
	.align	2
.LC183:
	.ascii	"<3>%s: unable open bam ch:%d err:%d\012\000"
	.align	2
.LC184:
	.ascii	"<3>%s: rx req allocation failed\012\000"
	.align	2
.LC185:
	.ascii	"<3>%s: tx req allocation failed\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_connect_work, %function
gbam_connect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	sub	r6, r0, #280
	sub	r7, r0, #276
	mov	r0, r6
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #20
	sub	sp, sp, #20
	bl	_raw_spin_lock_irqsave
	mov	r5, r0
	mov	r0, r7
	bl	_raw_spin_lock
	ldr	r3, [r4, #-272]
	mov	r0, r7
	cmp	r3, #0
	beq	.L3204
	bl	_raw_spin_unlock
	mov	r1, r5
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r4, #-264]
	tst	r3, #4
	bne	.L3205
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L3205:
	sub	r3, r4, #284
	movw	r2, #:lower16:gbam_notify
	ldr	r0, [r4, #-260]
	mov	r1, r3
	movt	r2, #:upper16:gbam_notify
	str	r3, [sp, #8]
	bl	msm_bam_dmux_open
	subs	r5, r0, #0
	bne	.L3206
	sub	r1, r4, #264
	mov	r0, #1
	bl	_set_bit
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #-272]
	str	r0, [sp, #4]
	cmp	r3, #0
	beq	.L3207
	movw	r2, #:lower16:.LANCHOR1
	ldr	r8, [r3, #80]
	sub	r10, r4, #232
	movt	r2, #:upper16:.LANCHOR1
	ldr	r3, [r2, #680]
	cmp	r3, #0
	str	r3, [sp]
	str	r2, [sp, #12]
	ble	.L3184
	movw	fp, #:lower16:gbam_epout_complete
	mov	r9, r5
	movt	fp, #:upper16:gbam_epout_complete
	mov	r3, fp
	mov	fp, r4
	mov	r4, r3
	b	.L3187
.L3185:
	ldr	r3, [sp]
	str	r4, [r0, #28]
	ldr	r1, [fp, #-232]
	cmp	r3, r9
	str	r2, [r1, #4]
	str	r1, [r0, #36]
	str	r10, [r0, #40]
	str	r2, [fp, #-232]
	beq	.L3208
.L3187:
	ldr	r2, [r8, #8]
	mov	r1, #32
	mov	r0, r8
	add	r9, r9, #1
	ldr	r2, [r2, #8]
	blx	r2
	cmp	r0, #0
	add	r2, r0, #36
	bne	.L3185
	ldr	r3, [fp, #-232]
	mov	r4, fp
	cmp	r10, r3
	beq	.L3209
.L3184:
	mov	r0, r6
	ldr	r1, [sp, #4]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #-272]
	str	r0, [sp]
	cmp	r3, #0
	beq	.L3210
	ldr	r2, [sp, #12]
	sub	fp, r4, #256
	ldr	r9, [r3, #76]
	ldr	r8, [r2, #684]
	cmp	r8, #0
	ble	.L3191
	movw	r6, #:lower16:gbam_epin_complete
	movt	r6, #:upper16:gbam_epin_complete
	b	.L3194
.L3192:
	str	r6, [r0, #28]
	ldr	r2, [r4, #-256]
	cmp	r8, r5
	str	r3, [r2, #4]
	str	r2, [r0, #36]
	str	fp, [r0, #40]
	str	r3, [r4, #-256]
	beq	.L3191
.L3194:
	ldr	r3, [r9, #8]
	mov	r1, #32
	mov	r0, r9
	add	r5, r5, #1
	ldr	r3, [r3, #8]
	blx	r3
	cmp	r0, #0
	add	r3, r0, #36
	bne	.L3192
	ldr	r2, [r4, #-256]
	cmp	fp, r2
	beq	.L3211
.L3191:
	mov	r0, r7
	ldr	r1, [sp]
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, [sp, #8]
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	gbam_start_rx
.L3204:
	bl	_raw_spin_unlock
	mov	r1, r5
.L3201:
	mov	r0, r6
.L3202:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L3208:
	mov	r4, fp
	b	.L3184
.L3210:
	ldr	r3, [r4, #-232]
	cmp	r10, r3
	beq	.L3203
	mov	r6, #256
	mov	r5, #512
.L3190:
	ldr	ip, [r3]
	sub	r1, r3, #36
	mov	r0, r8
	ldr	r2, [r3, #4]
	str	r2, [ip, #4]
	str	ip, [r2]
	str	r6, [r3]
	str	r5, [r3, #4]
	ldr	r3, [r8, #8]
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, [r4, #-232]
	cmp	r10, r3
	bne	.L3190
.L3203:
	mov	r0, r7
	ldr	r1, [sp]
	b	.L3202
.L3207:
	mov	r1, r0
	b	.L3201
.L3211:
	movw	r0, #:lower16:.LC185
	ldr	r1, .L3212
	mov	r5, #256
	movt	r0, #:upper16:.LC185
	mov	r6, #512
	bl	printk
.L3195:
	ldr	r3, [r4, #-232]
	cmp	r10, r3
	beq	.L3203
	ldr	ip, [r3]
	sub	r1, r3, #36
	mov	r0, r9
	ldr	r2, [r3, #4]
	str	r2, [ip, #4]
	str	ip, [r2]
	stm	r3, {r5, r6}
	ldr	r3, [r9, #8]
	ldr	r3, [r3, #12]
	blx	r3
	b	.L3195
.L3209:
	movw	r0, #:lower16:.LC184
	ldr	r1, .L3212
	movt	r0, #:upper16:.LC184
	bl	printk
	ldr	r1, [sp, #4]
	b	.L3201
.L3206:
	ldr	r1, .L3212+4
	movw	r0, #:lower16:.LC183
	mov	r3, r5
	ldr	r2, [r4, #-260]
	movt	r0, #:upper16:.LC183
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	printk
.L3213:
	.align	2
.L3212:
	.word	.LANCHOR2+1204
	.word	.LANCHOR2+1184
	.fnend
	.size	gbam_connect_work, .-gbam_connect_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam2bam_resume_work, %function
gbam2bam_resume_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	mov	r2, #0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	mov	r1, r2
	str	lr, [sp, #4]
	ldrb	r0, [r0, #-203]	@ zero_extendqisi2
	bl	usb_bam_register_wake_cb
	ldr	r3, [r4, #-200]
	cmp	r3, #7
	beq	.L3217
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L3217:
	sub	r0, r4, #196
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	usb_bam_resume
	.fnend
	.size	gbam2bam_resume_work, .-gbam2bam_resume_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam2bam_data_resume_work, %function
bam2bam_data_resume_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	mov	r2, #0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	mov	r1, r2
	str	lr, [sp, #4]
	ldrb	r0, [r0, #-163]	@ zero_extendqisi2
	bl	usb_bam_register_wake_cb
	ldr	r3, [r4, #-156]
	cmp	r3, #7
	beq	.L3221
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L3221:
	sub	r0, r4, #152
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	usb_bam_resume
	.fnend
	.size	bam2bam_data_resume_work, .-bam2bam_data_resume_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam2bam_suspend_work, %function
gbam2bam_suspend_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r1, #:lower16:gbam_wake_cb
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	sub	r5, r0, #316
	mov	r4, r0
	movt	r1, #:upper16:gbam_wake_cb
	str	r6, [sp, #8]
	mov	r2, r5
	str	lr, [sp, #12]
	ldrb	r0, [r0, #-187]	@ zero_extendqisi2
	bl	usb_bam_register_wake_cb
	ldr	r3, [r4, #-184]
	cmp	r3, #7
	beq	.L3225
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L3225:
	movw	r1, #:lower16:gbam_stop
	movw	r0, #:lower16:gbam_start
	mov	r2, r5
	movt	r1, #:upper16:gbam_stop
	movt	r0, #:upper16:gbam_start
	bl	usb_bam_register_start_stop_cbs
	sub	r0, r4, #180
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	usb_bam_suspend
	.fnend
	.size	gbam2bam_suspend_work, .-gbam2bam_suspend_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam2bam_data_suspend_work, %function
bam2bam_data_suspend_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r1, #:lower16:bam_data_wake_cb
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	sub	r5, r0, #200
	mov	r4, r0
	movt	r1, #:upper16:bam_data_wake_cb
	str	r6, [sp, #8]
	mov	r2, r5
	str	lr, [sp, #12]
	ldrb	r0, [r0, #-147]	@ zero_extendqisi2
	bl	usb_bam_register_wake_cb
	ldr	r3, [r4, #-140]
	cmp	r3, #7
	beq	.L3229
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L3229:
	movw	r1, #:lower16:bam_data_stop
	movw	r0, #:lower16:bam_data_start
	mov	r2, r5
	movt	r1, #:upper16:bam_data_stop
	movt	r0, #:upper16:bam_data_start
	bl	usb_bam_register_start_stop_cbs
	sub	r0, r4, #136
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	usb_bam_suspend
	.fnend
	.size	bam2bam_data_suspend_work, .-bam2bam_data_suspend_work
	.section	.rodata.str1.4
	.align	2
.LC186:
	.ascii	"<3>%s: %s:teth_bridge_init() failed\012\000"
	.align	2
.LC187:
	.ascii	"<3>%s: %s: usb_bam_connect_ipa failed: err:%d\012\000"
	.align	2
.LC188:
	.ascii	"<3>%s: %s:teth_bridge_connect() failed\012\000"
	.align	2
.LC189:
	.ascii	"<3>%s: usb_bam_connect (src) failed: err:%d\012\000"
	.align	2
.LC190:
	.ascii	"<3>%s: usb_bam_connect (dst) failed: err:%d\012\000"
	.align	2
.LC191:
	.ascii	"<3>%s: port_usb is NULL\000"
	.align	2
.LC192:
	.ascii	"<3>%s: port_usb->out (bulk out ep) is NULL\000"
	.align	2
.LC193:
	.ascii	"<3>%s: error enqueuing transfer, %d\012\000"
	.align	2
.LC194:
	.ascii	"<3>%s: %s: usb_bam_client_ready failed: err:%d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam2bam_data_connect_work, %function
bam2bam_data_connect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	sub	r5, r0, #168
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r3, [r0, #-108]
	cmp	r3, #7
	bne	.L3231
	ldr	r3, [r0, #-112]
	cmp	r3, #1
	beq	.L3275
	cmp	r3, #0
	mov	r2, #5
	mov	r3, #0
	str	r3, [r0, #-92]
	str	r2, [r0, #-80]
	beq	.L3276
.L3233:
	sub	r6, r4, #104
	mov	r0, r6
	bl	usb_bam_connect_ipa
	subs	r3, r0, #0
	bne	.L3274
	ldr	r3, [r4, #-112]
	mov	r2, #17
	mov	r1, #1
	str	r1, [r4, #-92]
	str	r2, [r4, #-80]
	cmp	r3, #0
	beq	.L3277
.L3235:
	mov	r0, r6
	bl	usb_bam_connect_ipa
	subs	r3, r0, #0
	bne	.L3274
	ldr	r3, [r4, #-112]
	cmp	r3, #1
	beq	.L3278
.L3237:
	ldr	r3, [r4, #-164]
	cmp	r3, #0
	beq	.L3279
	ldr	r0, [r3, #12]
	cmp	r0, #0
	beq	.L3280
	ldr	r3, [r0, #8]
	mov	r1, #208
	ldr	r3, [r3, #8]
	blx	r3
	cmp	r0, #0
	str	r0, [r4, #-132]
	beq	.L3230
	str	r5, [r0, #32]
	ldr	r2, [r4, #-132]
	movw	r3, #:lower16:bam_data_endless_rx_complete
	movt	r3, #:upper16:bam_data_endless_rx_complete
	mov	r8, #0
	movw	r7, #65439
	mov	r6, #32
	movt	r7, 65534
	movt	r6, 1
	str	r3, [r2, #28]
	ldr	r3, [r4, #-132]
	mov	r1, #208
	str	r8, [r3, #4]
	ldr	r2, [r4, #-132]
	ldrb	r3, [r2, #26]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r2, #26]
	ldr	r2, [r4, #-132]
	ldr	r3, [r4, #-124]
	and	r3, r3, r7
	orr	r3, r3, r6
	str	r3, [r2, #52]
	ldr	r3, [r4, #-164]
	ldr	r0, [r3, #8]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	cmp	r0, r8
	str	r0, [r4, #-128]
	beq	.L3230
	str	r5, [r0, #32]
	ldr	r2, [r4, #-128]
	movw	r3, #:lower16:bam_data_endless_tx_complete
	movt	r3, #:upper16:bam_data_endless_tx_complete
	str	r3, [r2, #28]
	ldr	r3, [r4, #-128]
	str	r8, [r3, #4]
	ldr	r2, [r4, #-128]
	ldrb	r3, [r2, #26]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r2, #26]
	ldr	r2, [r4, #-128]
	ldr	r3, [r4, #-120]
	and	r3, r3, r7
	orr	r3, r3, r6
	str	r3, [r2, #52]
	ldr	r3, [r4, #-164]
	cmp	r3, r8
	beq	.L3245
	ldr	r0, [r3, #12]
	mov	r2, #32
	ldr	r1, [r4, #-132]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	bne	.L3281
.L3246:
	ldr	r3, [r4, #-164]
	cmp	r3, #0
	beq	.L3245
	ldr	r0, [r3, #8]
	mov	r2, #32
	ldr	r1, [r4, #-128]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	bne	.L3282
.L3245:
	ldr	r3, [r4, #-108]
	cmp	r3, #7
	bne	.L3283
.L3230:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L3283:
	movw	r0, #:lower16:bam_data_peer_reset_cb
	mov	r1, r5
	movt	r0, #:upper16:bam_data_peer_reset_cb
	bl	usb_bam_register_peer_reset_cb
	mov	r0, #1
	bl	usb_bam_client_ready
	subs	r3, r0, #0
	beq	.L3230
	ldr	r2, .L3285
	movw	r0, #:lower16:.LC194
	movt	r0, #:upper16:.LC194
.L3271:
	mov	r1, r2
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	printk
.L3276:
	movw	r3, #:lower16:.LANCHOR0
	movt	r3, #:upper16:.LANCHOR0
	ldr	r2, [r3, #3212]
	str	r2, [r0, #-12]
	ldr	r3, [r3, #3232]
	str	r3, [r0, #-16]
	b	.L3233
.L3277:
	movw	r3, #:lower16:.LANCHOR0
	movt	r3, #:upper16:.LANCHOR0
	ldr	r2, [r3, #3216]
	str	r2, [r4, #-12]
	ldr	r3, [r3, #3232]
	str	r3, [r4, #-16]
	b	.L3235
.L3231:
	bl	usb_bam_reset_complete
	ldrb	r0, [r4, #-116]	@ zero_extendqisi2
	sub	r1, r4, #124
	bl	usb_bam_connect
	subs	r2, r0, #0
	bne	.L3284
	ldrb	r0, [r4, #-115]	@ zero_extendqisi2
	sub	r1, r4, #120
	bl	usb_bam_connect
	subs	r2, r0, #0
	beq	.L3237
	ldr	r1, .L3285
	movw	r0, #:lower16:.LC190
	movt	r0, #:upper16:.LC190
.L3273:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	printk
.L3281:
	movw	r0, #:lower16:.LC193
	ldr	r1, .L3285+4
	movt	r0, #:upper16:.LC193
	bl	printk
	b	.L3246
.L3282:
	movw	r0, #:lower16:.LC193
	ldr	r1, .L3285+8
	movt	r0, #:upper16:.LC193
	bl	printk
	b	.L3245
.L3284:
	movw	r0, #:lower16:.LC189
	ldr	r1, .L3285
	movt	r0, #:upper16:.LC189
	b	.L3273
.L3280:
	ldr	r1, .L3285
	movw	r0, #:lower16:.LC192
	movt	r0, #:upper16:.LC192
.L3272:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	printk
.L3275:
	ldr	r2, .L3285
	movw	r0, #:lower16:.LC186
	movt	r0, #:upper16:.LC186
.L3270:
	mov	r1, r2
	b	.L3273
.L3279:
	movw	r0, #:lower16:.LC191
	ldr	r1, .L3285
	movt	r0, #:upper16:.LC191
	b	.L3272
.L3274:
	movw	r0, #:lower16:.LC187
	ldr	r2, .L3285
	movt	r0, #:upper16:.LC187
	b	.L3271
.L3278:
	movw	r0, #:lower16:.LC188
	ldr	r2, .L3285
	movt	r0, #:upper16:.LC188
	b	.L3270
.L3286:
	.align	2
.L3285:
	.word	.LANCHOR2+1220
	.word	.LANCHOR2+1248
	.word	.LANCHOR2+1276
	.fnend
	.size	bam2bam_data_connect_work, .-bam2bam_data_connect_work
	.section	.rodata.str1.4
	.align	2
.LC195:
	.ascii	"<3>%s: BAM reset failed %d\012\000"
	.align	2
.LC196:
	.ascii	"<3>%s: usb_ep_enable failed eptype:IN ep:%pK\000"
	.align	2
.LC197:
	.ascii	"<3>%s: usb_ep_enable failed eptype:OUT ep:%pK\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_peer_reset_cb, %function
gbam_peer_reset_cb:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r0, #12]
	cmp	r3, #0
	moveq	r5, r3
	beq	.L3288
	ldr	r5, [r3, #76]
	cmp	r5, #0
	beq	.L3288
	ldr	r5, [r5]
	cmp	r5, #0
	beq	.L3288
	ldr	r0, [r3, #80]
	mov	r5, #1
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #12]
	ldr	r0, [r3, #76]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [r4, #12]
	mov	r3, #0
	ldr	r2, [r2, #76]
	str	r3, [r2]
	ldr	r2, [r4, #12]
	ldr	r2, [r2, #80]
	str	r3, [r2]
.L3288:
	mov	r0, #1
	bl	msm_hw_bam_disable
	mov	r0, #0
	bl	usb_bam_a2_reset
	subs	r2, r0, #0
	bne	.L3319
	bl	msm_hw_bam_disable
.L3290:
	cmp	r5, #0
	beq	.L3291
	ldr	r3, [r4, #12]
	ldr	r0, [r3, #76]
	ldr	r1, [r0, #28]
	ldrh	r2, [r1, #4]	@ unaligned
	cmp	r2, #0
	beq	.L3305
	ldr	r3, [r0, #8]
	ldr	r3, [r3]
	blx	r3
	subs	r5, r0, #0
	ldr	r3, [r4, #12]
	bne	.L3292
	ldr	r3, [r3, #76]
	str	r4, [r3]
	ldr	r3, [r4, #12]
	ldr	r0, [r3, #80]
	ldr	r1, [r0, #28]
	ldrh	r2, [r1, #4]	@ unaligned
	cmp	r2, #0
	beq	.L3306
	ldr	r3, [r0, #8]
	ldr	r3, [r3]
	blx	r3
	subs	r5, r0, #0
	ldr	r3, [r4, #12]
	bne	.L3295
	ldr	r3, [r3, #80]
	add	r5, r4, #4
	mov	r0, r5
	str	r4, [r3]
	bl	_raw_spin_lock
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L3320
	ldr	r0, [r3, #80]
	mov	r2, #32
	ldr	r1, [r4, #112]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	bne	.L3321
.L3299:
	mov	r0, r5
	bl	_raw_spin_unlock
.L3298:
	add	r5, r4, #8
	mov	r0, r5
	bl	_raw_spin_lock
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L3322
	ldr	r0, [r3, #76]
	mov	r2, #32
	ldr	r1, [r4, #116]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	bne	.L3323
.L3301:
	mov	r0, r5
	bl	_raw_spin_unlock
.L3291:
	ldr	r3, [r4, #132]
	cmp	r3, #6
	beq	.L3324
.L3308:
	mov	r5, #0
.L3287:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L3324:
	ldr	r5, [r4]
	cmp	r5, #0
	bne	.L3308
	mov	r1, r5
	mov	r0, r5
	bl	usb_bam_register_peer_reset_cb
	b	.L3287
.L3322:
	mov	r0, r5
	bl	_raw_spin_unlock
	movw	r0, #:lower16:.LC17
	ldr	r1, .L3325
	movt	r0, #:upper16:.LC17
	bl	printk
	b	.L3291
.L3320:
	mov	r0, r5
	bl	_raw_spin_unlock
	movw	r0, #:lower16:.LC17
	ldr	r1, .L3325+4
	movt	r0, #:upper16:.LC17
	bl	printk
	b	.L3298
.L3306:
	mvn	r5, #21
.L3295:
	movw	r0, #:lower16:.LC197
	ldr	r1, .L3325+8
	movt	r0, #:upper16:.LC197
	ldr	r2, [r3, #80]
	bl	printk
	ldr	r3, [r4, #12]
	mov	r2, #0
	ldr	r3, [r3, #76]
	str	r2, [r3]
	b	.L3287
.L3321:
	movw	r0, #:lower16:.LC193
	ldr	r1, .L3325+4
	movt	r0, #:upper16:.LC193
	bl	printk
	b	.L3299
.L3323:
	movw	r0, #:lower16:.LC193
	ldr	r1, .L3325
	movt	r0, #:upper16:.LC193
	bl	printk
	b	.L3301
.L3305:
	mvn	r5, #21
.L3292:
	movw	r0, #:lower16:.LC196
	ldr	r1, .L3325+8
	movt	r0, #:upper16:.LC196
	ldr	r2, [r3, #76]
	bl	printk
	b	.L3287
.L3319:
	movw	r0, #:lower16:.LC195
	ldr	r1, .L3325+8
	movt	r0, #:upper16:.LC195
	bl	printk
	b	.L3290
.L3326:
	.align	2
.L3325:
	.word	.LANCHOR2+1348
	.word	.LANCHOR2+1324
	.word	.LANCHOR2+1304
	.fnend
	.size	gbam_peer_reset_cb, .-gbam_peer_reset_cb
	.section	.rodata.str1.4
	.align	2
.LC198:
	.ascii	"<3>%s: %s: BAM reset failed %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam_data_peer_reset_cb, %function
bam_data_peer_reset_cb:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	mov	r0, #1
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	bl	msm_hw_bam_disable
	mov	r0, #0
	bl	usb_bam_a2_reset
	subs	r4, r0, #0
	bne	.L3331
	bl	msm_hw_bam_disable
	mov	r1, r4
	mov	r0, r4
	bl	usb_bam_register_peer_reset_cb
.L3327:
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L3331:
	ldr	r2, .L3332
	movw	r0, #:lower16:.LC198
	mov	r3, r4
	movt	r0, #:upper16:.LC198
	mov	r1, r2
	bl	printk
	b	.L3327
.L3333:
	.align	2
.L3332:
	.word	.LANCHOR2+1372
	.fnend
	.size	bam_data_peer_reset_cb, .-bam_data_peer_reset_cb
	.section	.rodata.str1.4
	.align	2
.LC199:
	.ascii	"<3>Failed to allocate rmnet control device\012\000"
	.align	2
.LC200:
	.ascii	"&port->read_wq\000"
	.align	2
.LC201:
	.ascii	"<3>rmnet control driver failed to register\000"
	.section	.init.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gqti_ctrl_init, %function
gqti_ctrl_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	push	{r4, r5, r6, r7, r8, lr}
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L3337
	movw	r1, #32976
	bl	kmem_cache_alloc
	subs	r4, r0, #0
	bne	.L3335
	movw	r0, #:lower16:.LC199
	mvn	r6, #11
	movt	r0, #:upper16:.LC199
	bl	printk
	b	.L3334
.L3337:
	mov	r4, #16
.L3335:
	mov	r5, #0
	add	r3, r4, #44
	ldr	r2, .L3342
	movw	r1, #:lower16:.LC200
	movw	r7, #:lower16:.LANCHOR0
	movt	r1, #:upper16:.LC200
	add	r0, r4, #32
	str	r5, [r4, #8]
	movt	r7, #:upper16:.LANCHOR0
	str	r5, [r4, #12]
	str	r5, [r4, #16]
	str	r5, [r4, #20]
	str	r5, [r4, #24]
	str	r5, [r4, #28]
	str	r3, [r4, #44]
	str	r3, [r4, #48]
	str	r5, [r4, #52]
	bl	__init_waitqueue_head
	ldr	r0, .L3342+4
	str	r4, [r7, #4]
	bl	misc_register
	subs	r6, r0, #0
	beq	.L3334
	movw	r0, #:lower16:.LC201
	movt	r0, #:upper16:.LC201
	bl	printk
	mov	r0, r4
	bl	kfree
	str	r5, [r7, #4]
.L3334:
	mov	r0, r6
	pop	{r4, r5, r6, r7, r8, pc}
.L3343:
	.align	2
.L3342:
	.word	.LANCHOR0+3240
	.word	.LANCHOR1+688
	.fnend
	.size	gqti_ctrl_init, .-gqti_ctrl_init
	.section	.rodata.str1.4
	.align	2
.LC202:
	.ascii	"&dev->read_wq\000"
	.align	2
.LC203:
	.ascii	"&dev->write_wq\000"
	.align	2
.LC204:
	.ascii	"<3>USB accessory gadget driver failed to initialize"
	.ascii	"\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	accessory_function_init, %function
accessory_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movt	r3, #:upper16:kmalloc_caches
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r0, [r3, #44]
	cmp	r0, #0
	beq	.L3347
	movw	r1, #32976
	bl	kmem_cache_alloc
	subs	r4, r0, #0
	beq	.L3353
.L3345:
	mov	r5, #0
	movw	r1, #:lower16:.LC202
	ldr	r2, .L3355
	add	r0, r4, #1648
	movt	r1, #:upper16:.LC202
	add	r0, r0, #8
	str	r5, [r4, #80]
	mov	r6, #2560
	bl	__init_waitqueue_head
	movw	r1, #:lower16:.LC203
	add	r0, r4, #1664
	ldr	r2, .L3355
	movt	r1, #:upper16:.LC203
	add	r0, r0, #4
	bl	__init_waitqueue_head
	add	r1, r4, #1744
	add	r2, r4, #1760
	str	r5, [r4, #1644]
	add	r1, r1, #12
	mov	r3, r2
	str	r6, [r4, #1692]
	add	r2, r2, #4
	movw	ip, #:lower16:acc_start_work
	add	r3, r3, #12
	movt	ip, #:upper16:acc_start_work
	add	r0, r4, #1648
	str	r1, [r4, #1756]
	str	r1, [r4, #1760]
	add	r1, r4, #1696
	str	r0, [r4, #1648]
	str	r2, [r4, #1764]
	str	r2, [r4, #1768]
	mov	r2, r5
	movw	r5, #:lower16:.LANCHOR0
	str	r0, [r4, #1652]
	add	r0, r0, #60
	movt	r5, #:upper16:.LANCHOR0
	str	r1, [r4, #1696]
	str	r1, [r4, #1700]
	mov	r1, r2
	str	ip, [r4, #1704]
	str	r3, [r4, #1772]
	str	r3, [r4, #1776]
	bl	init_timer_key
	movw	r1, #:lower16:delayed_work_timer_fn
	add	r2, r4, #1680
	ldr	r0, .L3355+4
	movt	r1, #:upper16:delayed_work_timer_fn
	movw	r3, #:lower16:acc_hid_work
	str	r4, [r5, #824]
	add	r2, r2, #12
	movt	r3, #:upper16:acc_hid_work
	str	r1, [r4, #1724]
	add	r1, r4, #1744
	str	r2, [r4, #1728]
	str	r6, [r4, #1740]
	str	r1, [r4, #1744]
	str	r1, [r4, #1748]
	str	r3, [r4, #1752]
	bl	misc_register
	subs	r5, r0, #0
	bne	.L3354
.L3344:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L3347:
	mov	r4, #16
	b	.L3345
.L3353:
	mvn	r5, #11
	b	.L3344
.L3354:
	mov	r0, r4
	bl	kfree
	movw	r0, #:lower16:.LC204
	movt	r0, #:upper16:.LC204
	bl	printk
	b	.L3344
.L3356:
	.align	2
.L3355:
	.word	.LANCHOR0+3240
	.word	.LANCHOR1+724
	.fnend
	.size	accessory_function_init, .-accessory_function_init
	.section	.rodata.str1.4
	.align	2
.LC205:
	.ascii	"<6>%s: initialize rndis QC instance\012\000"
	.align	2
.LC206:
	.ascii	"<3>%s: rndis QC driver failed to register\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_function_init, %function
rndis_qc_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	movt	r3, #:upper16:kmalloc_caches
	str	lr, [sp, #4]
	ldr	r0, [r3, #36]
	cmp	r0, #0
	moveq	r3, #16
	streq	r3, [r4, #4]
	beq	.L3359
	movw	r1, #32976
	bl	kmem_cache_alloc
	cmp	r0, #0
	str	r0, [r4, #4]
	mvneq	r4, #11
	bne	.L3359
.L3357:
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L3359:
	movw	r0, #:lower16:.LC205
	ldr	r1, .L3366
	movt	r0, #:upper16:.LC205
	bl	printk
	movw	r3, #:lower16:.LANCHOR0
	mov	r2, #0
	ldr	r0, .L3366+4
	movt	r3, #:upper16:.LANCHOR0
	str	r2, [r3, #828]
	bl	misc_register
	subs	r4, r0, #0
	beq	.L3357
	movw	r0, #:lower16:.LC206
	ldr	r1, .L3366
	movt	r0, #:upper16:.LC206
	bl	printk
	b	.L3357
.L3367:
	.align	2
.L3366:
	.word	.LANCHOR2+1396
	.word	.LANCHOR1+760
	.fnend
	.size	rndis_qc_function_init, .-rndis_qc_function_init
	.section	.rodata.str1.4
	.align	2
.LC207:
	.ascii	"&dev->intr_wq\000"
	.align	2
.LC208:
	.ascii	"f_mtp\000"
	.align	2
.LC209:
	.ascii	"<3>mtp gadget driver failed to initialize\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mtp_function_init, %function
mtp_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movt	r3, #:upper16:kmalloc_caches
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r0, [r3, #32]
	.pad #8
	sub	sp, sp, #8
	cmp	r0, #0
	beq	.L3372
	movw	r1, #32976
	bl	kmem_cache_alloc
	subs	r4, r0, #0
	beq	.L3379
.L3369:
	mov	r5, #0
	movw	r1, #:lower16:.LC202
	ldr	r2, .L3381
	movt	r1, #:upper16:.LC202
	add	r0, r4, #124
	str	r5, [r4, #80]
	movw	r6, #:lower16:.LANCHOR0
	bl	__init_waitqueue_head
	movw	r1, #:lower16:.LC203
	ldr	r2, .L3381
	add	r0, r4, #136
	movt	r1, #:upper16:.LC203
	movt	r6, #:upper16:.LANCHOR0
	bl	__init_waitqueue_head
	movw	r1, #:lower16:.LC207
	ldr	r2, .L3381
	add	r0, r4, #148
	movt	r1, #:upper16:.LC207
	bl	__init_waitqueue_head
	add	r2, r4, #108
	add	r1, r4, #116
	str	r5, [r4, #100]
	movw	r0, #:lower16:.LC208
	mov	r3, r5
	str	r5, [r4, #104]
	movt	r0, #:upper16:.LC208
	str	r2, [r4, #108]
	str	r2, [r4, #112]
	mov	r2, #1
	str	r1, [r4, #116]
	str	r1, [r4, #120]
	mov	r1, #10
	str	r5, [sp]
	bl	__alloc_workqueue_key
	cmp	r0, r5
	str	r0, [r4, #172]
	beq	.L3374
	movw	r2, #:lower16:send_file_work
	movw	r3, #:lower16:receive_file_work
	ldr	r0, .L3381+4
	movt	r2, #:upper16:send_file_work
	mov	r1, #2560
	str	r4, [r6, #836]
	add	ip, r4, #180
	movt	r3, #:upper16:receive_file_work
	str	r1, [r4, #176]
	str	r2, [r4, #188]
	add	r2, r4, #196
	str	ip, [r4, #180]
	str	ip, [r4, #184]
	str	r1, [r4, #192]
	str	r2, [r4, #196]
	str	r2, [r4, #200]
	str	r3, [r4, #204]
	bl	misc_register
	subs	r5, r0, #0
	bne	.L3380
.L3368:
	mov	r0, r5
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L3372:
	mov	r4, #16
	b	.L3369
.L3379:
	mvn	r5, #11
	b	.L3368
.L3380:
	ldr	r0, [r4, #172]
	bl	destroy_workqueue
.L3371:
	mov	r3, #0
	mov	r0, r4
	str	r3, [r6, #836]
	bl	kfree
	movw	r0, #:lower16:.LC209
	movt	r0, #:upper16:.LC209
	bl	printk
	b	.L3368
.L3374:
	mvn	r5, #11
	b	.L3371
.L3382:
	.align	2
.L3381:
	.word	.LANCHOR0+3240
	.word	.LANCHOR1+796
	.fnend
	.size	mtp_function_init, .-mtp_function_init
	.section	.rodata.str1.4
	.align	2
.LC210:
	.ascii	"<3>adb gadget driver failed to initialize\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_function_init, %function
adb_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r4, #:lower16:kmalloc_caches
	mov	r5, r0
	movt	r4, #:upper16:kmalloc_caches
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r0, [r4, #24]
	cmp	r0, #0
	moveq	r3, #16
	streq	r3, [r5, #4]
	beq	.L3385
	movw	r1, #32976
	bl	kmem_cache_alloc
	cmp	r0, #0
	str	r0, [r5, #4]
	beq	.L3388
.L3385:
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L3389
	movw	r1, #32976
	bl	kmem_cache_alloc
	subs	r4, r0, #0
	beq	.L3388
.L3387:
	mov	r5, #0
	movw	r1, #:lower16:.LC202
	ldr	r2, .L3398
	movt	r1, #:upper16:.LC202
	add	r0, r4, #120
	str	r5, [r4, #80]
	movw	r6, #:lower16:.LANCHOR0
	bl	__init_waitqueue_head
	movw	r1, #:lower16:.LC203
	ldr	r2, .L3398
	add	r0, r4, #132
	movt	r1, #:upper16:.LC203
	movt	r6, #:upper16:.LANCHOR0
	bl	__init_waitqueue_head
	add	r3, r4, #112
	mov	r2, #1
	ldr	r0, .L3398+4
	str	r5, [r4, #100]
	str	r5, [r4, #104]
	str	r5, [r4, #108]
	str	r3, [r4, #112]
	str	r3, [r4, #116]
	strb	r2, [r4, #153]
	str	r4, [r6, #2284]
	bl	misc_register
	subs	r5, r0, #0
	bne	.L3397
.L3383:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L3389:
	mov	r4, #16
	b	.L3387
.L3388:
	mvn	r5, #11
	b	.L3383
.L3397:
	mov	r0, r4
	bl	kfree
	movw	r0, #:lower16:.LC210
	movt	r0, #:upper16:.LC210
	bl	printk
	b	.L3383
.L3399:
	.align	2
.L3398:
	.word	.LANCHOR0+3240
	.word	.LANCHOR1+832
	.fnend
	.size	adb_function_init, .-adb_function_init
	.section	.rodata.str1.4
	.align	2
.LC211:
	.ascii	"k_rmnet_mux_work\000"
	.align	2
.LC212:
	.ascii	"&smd_dev->smd_data.wait\000"
	.align	2
.LC213:
	.ascii	"&ctrl_dev->tx_wait_q\000"
	.align	2
.LC214:
	.ascii	"<3>%s: failed to register misc device\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_sdio_function_init, %function
rmnet_smd_sdio_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	movt	r3, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	str	lr, [sp, #16]
	ldr	r0, [r3, #36]
	.pad #12
	sub	sp, sp, #12
	cmp	r0, #0
	beq	.L3404
	movw	r1, #32976
	bl	kmem_cache_alloc
	subs	r4, r0, #0
	beq	.L3411
.L3401:
	movw	ip, #:lower16:.LANCHOR0
	mov	r5, #0
	movt	ip, #:upper16:.LANCHOR0
	movw	r0, #:lower16:.LC211
	mov	r3, r5
	movt	r0, #:upper16:.LC211
	str	r5, [sp]
	mov	r2, #1
	mov	r1, #10
	str	r4, [ip, #400]
	bl	__alloc_workqueue_key
	cmp	r0, r5
	str	r0, [r4, #368]
	beq	.L3406
	movw	r3, #:lower16:rmnet_mux_disconnect_work
	mov	r7, #2560
	str	r5, [r4, #168]
	movt	r3, #:upper16:rmnet_mux_disconnect_work
	add	r0, r4, #376
	str	r5, [r4, #356]
	movw	r1, #:lower16:rmnet_mux_smd_data_rx_tlet
	mov	r2, r4
	str	r5, [r4, #360]
	movt	r1, #:upper16:rmnet_mux_smd_data_rx_tlet
	str	r5, [r4, #364]
	add	r6, r4, #96
	str	r7, [r4, #372]
	str	r0, [r4, #376]
	str	r0, [r4, #380]
	add	r0, r4, #144
	str	r3, [r4, #384]
	bl	tasklet_init
	movw	r1, #:lower16:rmnet_mux_smd_data_tx_tlet
	mov	r2, r4
	movt	r1, #:upper16:rmnet_mux_smd_data_tx_tlet
	add	r0, r4, #124
	bl	tasklet_init
	movw	r1, #:lower16:.LC212
	ldr	r2, .L3413
	add	r0, r4, #172
	movt	r1, #:upper16:.LC212
	bl	__init_waitqueue_head
	mov	r3, r6
	movw	r2, #:lower16:rmnet_mux_sdio_data_rx_work
	movw	ip, #:lower16:rmnet_mux_open_sdio_work
	add	lr, r4, #104
	movt	ip, #:upper16:rmnet_mux_open_sdio_work
	add	r0, r4, #112
	str	r3, [r4, #96]
	add	r1, r4, #236
	movt	r2, #:upper16:rmnet_mux_sdio_data_rx_work
	str	r3, [r4, #100]
	add	r3, r4, #252
	str	lr, [r4, #104]
	add	r6, r4, #184
	str	lr, [r4, #108]
	str	r0, [r4, #112]
	str	r0, [r4, #116]
	add	r0, r4, #264
	str	r7, [r4, #232]
	str	r1, [r4, #236]
	str	r1, [r4, #240]
	mov	r1, r5
	str	r2, [r4, #244]
	mov	r2, r5
	str	r7, [r4, #248]
	add	r7, r4, #248
	str	r3, [r4, #252]
	str	r3, [r4, #256]
	str	ip, [r4, #260]
	bl	init_timer_key
	add	r3, r4, #192
	add	r1, r4, #216
	ldr	r2, .L3413
	movw	r0, #:lower16:delayed_work_timer_fn
	add	lr, r4, #208
	str	r6, [r4, #184]
	add	ip, r4, #304
	movt	r0, #:upper16:delayed_work_timer_fn
	str	r6, [r4, #188]
	str	r3, [r4, #192]
	str	r3, [r4, #196]
	add	r3, r4, #328
	str	r1, [r4, #216]
	str	r1, [r4, #220]
	movw	r1, #:lower16:.LC213
	movt	r1, #:upper16:.LC213
	str	r5, [r4, #200]
	str	r5, [r4, #204]
	str	lr, [r4, #208]
	str	lr, [r4, #212]
	str	r5, [r4, #224]
	str	r5, [r4, #228]
	str	r0, [r4, #280]
	add	r0, r4, #312
	str	r7, [r4, #284]
	str	ip, [r4, #304]
	str	ip, [r4, #308]
	str	r3, [r4, #328]
	str	r3, [r4, #332]
	bl	__init_waitqueue_head
	ldr	r0, .L3413+4
	bl	misc_register
	subs	r5, r0, #0
	bne	.L3412
.L3400:
	mov	r0, r5
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L3404:
	mov	r4, #16
	b	.L3401
.L3406:
	mvn	r5, #11
.L3403:
	mov	r0, r4
	bl	kfree
	b	.L3400
.L3411:
	mvn	r5, #11
	b	.L3400
.L3412:
	movw	r0, #:lower16:.LC214
	ldr	r1, .L3413+8
	movt	r0, #:upper16:.LC214
	bl	printk
	ldr	r0, [r4, #368]
	bl	destroy_workqueue
	b	.L3403
.L3414:
	.align	2
.L3413:
	.word	.LANCHOR0+3240
	.word	.LANCHOR1+868
	.word	.LANCHOR2+1412
	.fnend
	.size	rmnet_smd_sdio_function_init, .-rmnet_smd_sdio_function_init
	.section	.exit.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gqti_ctrl_cleanup, %function
gqti_ctrl_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, lr}
	.save {r4, lr}
	movw	r4, #:lower16:.LANCHOR0
	movt	r4, #:upper16:.LANCHOR0
	ldr	r0, .L3417
	bl	misc_deregister
	ldr	r0, [r4, #4]
	bl	kfree
	mov	r3, #0
	str	r3, [r4, #4]
	pop	{r4, pc}
.L3418:
	.align	2
.L3417:
	.word	.LANCHOR1+688
	.fnend
	.size	gqti_ctrl_cleanup, .-gqti_ctrl_cleanup
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	accessory_function_cleanup, %function
accessory_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r4, #:lower16:.LANCHOR0
	ldr	r0, .L3421
	movt	r4, #:upper16:.LANCHOR0
	str	lr, [sp, #4]
	bl	misc_deregister
	ldr	r0, [r4, #824]
	bl	kfree
	mov	r3, #0
	str	r3, [r4, #824]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L3422:
	.align	2
.L3421:
	.word	.LANCHOR1+724
	.fnend
	.size	accessory_function_cleanup, .-accessory_function_cleanup
	.section	.rodata.str1.4
	.align	2
.LC215:
	.ascii	"<6>%s: rndis QC cleanup\000"
	.section	.text.unlikely
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_function_cleanup, %function
rndis_qc_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, lr}
	.save {r4, lr}
	mov	r4, r0
	movw	r0, #:lower16:.LC215
	ldr	r1, .L3425
	movt	r0, #:upper16:.LC215
	bl	printk
	ldr	r0, .L3425+4
	bl	misc_deregister
	movw	r3, #:lower16:.LANCHOR0
	mov	r2, #0
	ldr	r0, [r4, #4]
	movt	r3, #:upper16:.LANCHOR0
	str	r2, [r3, #832]
	pop	{r4, lr}
	b	kfree
.L3426:
	.align	2
.L3425:
	.word	.LANCHOR2+1440
	.word	.LANCHOR1+760
	.fnend
	.size	rndis_qc_function_cleanup, .-rndis_qc_function_cleanup
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mtp_function_cleanup, %function
mtp_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r4, #:lower16:.LANCHOR0
	movt	r4, #:upper16:.LANCHOR0
	str	r6, [sp, #8]
	ldr	r5, [r4, #836]
	str	lr, [sp, #12]
	cmp	r5, #0
	beq	.L3427
	ldr	r0, .L3430
	bl	misc_deregister
	ldr	r0, [r5, #172]
	bl	destroy_workqueue
	mov	r3, #0
	mov	r0, r5
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	str	r3, [r4, #836]
	ldrd	r4, [sp]
	add	sp, sp, #16
	b	kfree
.L3427:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L3431:
	.align	2
.L3430:
	.word	.LANCHOR1+796
	.fnend
	.size	mtp_function_cleanup, .-mtp_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_function_cleanup, %function
ccid_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	str	lr, [sp, #4]
	add	r0, r4, #904
	bl	misc_deregister
	add	r0, r4, #940
	bl	misc_deregister
	movw	r3, #:lower16:.LANCHOR0
	ldr	r4, [sp]
	movt	r3, #:upper16:.LANCHOR0
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	ldr	r0, [r3, #180]
	b	kfree
	.fnend
	.size	ccid_function_cleanup, .-ccid_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_function_cleanup, %function
adb_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r4, #:lower16:.LANCHOR0
	mov	r5, r0
	movt	r4, #:upper16:.LANCHOR0
	ldr	r0, .L3436
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	misc_deregister
	ldr	r0, [r4, #2284]
	bl	kfree
	mov	r3, #0
	ldr	r0, [r5, #4]
	ldr	r6, [sp, #8]
	str	r3, [r4, #2284]
	ldrd	r4, [sp]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	kfree
.L3437:
	.align	2
.L3436:
	.word	.LANCHOR1+832
	.fnend
	.size	adb_function_cleanup, .-adb_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_sdio_function_cleanup, %function
rmnet_smd_sdio_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	ldr	r0, .L3440
	movt	r3, #:upper16:.LANCHOR0
	str	lr, [sp, #4]
	ldr	r4, [r3, #400]
	bl	misc_deregister
	ldr	r0, [r4, #120]
	bl	smd_close
	ldr	r0, [r4, #368]
	bl	destroy_workqueue
	mov	r0, r4
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	kfree
.L3441:
	.align	2
.L3440:
	.word	.LANCHOR1+868
	.fnend
	.size	rmnet_smd_sdio_function_cleanup, .-rmnet_smd_sdio_function_cleanup
	.section	.rodata.str1.4
	.align	2
.LC216:
	.ascii	"<6>%s: Enter\000"
	.section	.text.unlikely
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_function_cleanup, %function
mbim_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, r7, r8, lr}
	.save {r4, r5, r6, r7, r8, lr}
	movw	r0, #:lower16:.LC216
	ldr	r6, .L3447
	mov	r5, #0
	movw	r4, #:lower16:.LANCHOR0
	ldr	r1, .L3447+4
	movt	r0, #:upper16:.LC216
	mov	r7, r5
	movt	r4, #:upper16:.LANCHOR0
	bl	printk
.L3443:
	ldr	r3, [r4, #3248]
	add	r6, r6, #8
	cmp	r3, r5
	bls	.L3446
	ldr	r0, [r6, #-8]
	add	r5, r5, #1
	bl	kfree
	str	r7, [r6, #-8]
	b	.L3443
.L3446:
	ldr	r0, .L3447+8
	str	r7, [r4, #3248]
	bl	misc_deregister
	str	r7, [r4, #840]
	pop	{r4, r5, r6, r7, r8, pc}
.L3448:
	.align	2
.L3447:
	.word	.LANCHOR0+3240
	.word	.LANCHOR2+1460
	.word	.LANCHOR1+976
	.fnend
	.size	mbim_function_cleanup, .-mbim_function_cleanup
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_epfile_io_complete, %function
ffs_epfile_io_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L3449
	ldr	r2, [r3, #4]
	cmp	r2, #0
	beq	.L3449
	ldr	r2, [r1, #32]
	cmp	r2, #0
	beq	.L3449
	ldr	r2, [r1, #44]
	cmp	r2, #0
	ldreq	r2, [r1, #48]
	str	r2, [r3, #24]
	ldr	r0, [r1, #32]
	b	complete
.L3449:
	bx	lr
	.fnend
	.size	ffs_epfile_io_complete, .-ffs_epfile_io_complete
	.section	.rodata.str1.4
	.align	2
.LC217:
	.ascii	"\012Name:           %s\012#PORT:%d port#:   %pK\012"
	.ascii	"data_ch_open:\011   %d\012data_ch_ready:    %d\012d"
	.ascii	"ata_ch_connected: %d\012\012******UL INFO*****\012\012"
	.ascii	"dpkts_to_modem:   %lu\012tomodem_drp_cnt:  %u\012rx"
	.ascii	"_buf_len:       %u\012TX_THROTTLED      %d\012\000"
	.align	2
.LC218:
	.ascii	"\012******DL INFO******\012\012dpkts_to_usbhost: %l"
	.ascii	"u\012tx_buf_len:\011   %u\012RX_THROTTLED\011   %d\012"
	.ascii	"\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_data_read_stats, %function
ghsuart_data_read_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:kmalloc_caches
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	r0, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r0, [r0, #40]
	.pad #76
	sub	sp, sp, #76
	str	r1, [sp, #60]
	strd	r2, [sp, #64]
	cmp	r0, #0
	beq	.L3470
	movw	r1, #32976
	bl	kmem_cache_alloc
	subs	r7, r0, #0
	beq	.L3474
.L3462:
	movw	r3, #:lower16:.LANCHOR0
	movt	r3, #:upper16:.LANCHOR0
	str	r3, [sp, #48]
	ldr	r3, [r3, #8]
	cmp	r3, #0
	beq	.L3468
	movw	r2, #:lower16:.LC217
	mov	r5, #0
	str	r7, [sp, #44]
	movt	r2, #:upper16:.LC217
	movw	r1, #:lower16:.LC218
	movt	r1, #:upper16:.LC218
	mov	fp, r5
	str	r2, [sp, #52]
	ldr	r2, [sp, #48]
	str	r1, [sp, #56]
	add	r6, r2, #12
.L3467:
	ldr	r4, [r6]
	cmp	r4, #0
	add	r9, r4, #104
	add	r7, r4, #72
	mov	r0, r9
	beq	.L3464
	bl	_raw_spin_lock_irqsave
	mov	r8, r0
	ldr	r10, [r4, #188]
	rsb	r1, r5, #1024
	ldr	ip, [r4, #188]
	add	r6, r6, #84
	ldr	r3, [r4, #188]
	ldr	r0, [r4, #184]
	and	r10, r10, #1
	ldr	r2, [sp, #52]
	ubfx	ip, ip, #1, #1
	ubfx	r3, r3, #2, #1
	ubfx	r0, r0, #1, #1
	str	r0, [sp, #32]
	ldr	lr, [r4, #96]
	ldr	r0, [sp, #44]
	str	lr, [sp, #28]
	ldr	lr, [r4, #212]
	add	r0, r0, r5
	str	lr, [sp, #24]
	ldr	lr, [r4, #204]
	str	fp, [sp]
	add	fp, fp, #1
	stmib	sp, {r4, r10, ip}
	str	r3, [sp, #16]
	ldr	r3, [r6, #-60]
	str	lr, [sp, #20]
	bl	scnprintf
	mov	r3, r0
	mov	r1, r8
	mov	r0, r9
	add	r5, r3, r5
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	ip, [r4, #184]
	mov	r8, r0
	rsb	r1, r5, #1024
	ldr	r0, [sp, #44]
	ldr	r3, [r4, #208]
	ldr	r2, [sp, #56]
	ubfx	ip, ip, #2, #1
	add	r0, r0, r5
	str	ip, [sp, #4]
	ldr	ip, [r4, #64]
	str	ip, [sp]
	bl	scnprintf
	mov	r3, r0
	mov	r1, r8
	mov	r0, r7
	add	r5, r5, r3
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [sp, #48]
	ldr	r3, [r3, #8]
	cmp	r3, fp
	bhi	.L3467
.L3473:
	ldr	r7, [sp, #44]
	mov	r3, r5
.L3468:
	str	r3, [sp]
	mov	r3, r7
	ldrd	r0, [sp, #60]
	ldr	r2, [sp, #68]
	bl	simple_read_from_buffer
	mov	r4, r0
	mov	r0, r7
	bl	kfree
.L3461:
	mov	r0, r4
	add	sp, sp, #76
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L3464:
	add	fp, fp, #1
	add	r6, r6, #84
	cmp	fp, r3
	bcc	.L3467
	b	.L3473
.L3470:
	mov	r7, #16
	b	.L3462
.L3474:
	mvn	r4, #11
	b	.L3461
	.fnend
	.size	ghsuart_data_read_stats, .-ghsuart_data_read_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	tx_complete, %function
tx_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r3, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r4, [r0]
	cmp	r4, #0
	beq	.L3509
	ldr	r2, [r4, #4]
	cmp	r2, #0
	beq	.L3509
	ldr	r3, [r1, #44]
	mov	r5, r1
	ldr	r7, [r4, #8]
	cmn	r3, #104
	beq	.L3496
	cmp	r3, #0
	beq	.L3479
	cmn	r3, #108
	beq	.L3496
	ldr	r3, [r7, #252]
	add	r3, r3, #1
	str	r3, [r7, #252]
	ldr	r2, [r4, #8]
.L3478:
	ldr	r3, [r2, #236]
	add	r6, r4, #16
	add	r8, r4, #20
	mov	r0, r6
	add	r3, r3, #1
	str	r3, [r2, #236]
	bl	_raw_spin_lock
	ldr	r3, [r4, #24]
	add	r2, r5, #36
	str	r2, [r4, #24]
	str	r8, [r5, #36]
	str	r3, [r5, #40]
	str	r2, [r3]
	ldr	r3, [r4, #4]
	ldr	r9, [r5, #32]
	ldrb	r10, [r3, #116]	@ zero_extendqisi2
	cmp	r10, #0
	bne	.L3510
.L3493:
	mov	r3, #0
	str	r3, [r5]
.L3489:
	mov	r0, r6
	bl	_raw_spin_unlock
	mov	r0, r9
	bl	dev_kfree_skb_any
.L3488:
	ldr	r3, [r4, #8]
	ldr	r2, [r3, #160]
	tst	r2, #4
	beq	.L3511
.L3475:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L3510:
	cmp	r9, #0
	beq	.L3512
	ldr	r0, [r4, #48]
	cmp	r0, #0
	beq	.L3493
	movw	r1, #32800
	bl	__kmalloc
	mov	r3, #0
	str	r0, [r5]
	str	r3, [r5, #32]
	b	.L3489
.L3479:
	ldrb	r3, [r1, #26]	@ zero_extendqisi2
	ldr	r2, [r1, #4]
	tst	r3, #2
	ldr	r3, [r7, #244]
	subeq	r2, r2, #1
	add	r3, r3, r2
	str	r3, [r7, #244]
	ldr	r2, [r4, #8]
	b	.L3478
.L3509:
	ldr	r3, [r3, #8]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r3, [r3, #12]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	bx	r3	@ indirect register sibling call
.L3496:
	mov	r2, r7
	b	.L3478
.L3511:
	ldr	r4, [r3, #576]
	mov	r0, #0
	add	r1, r4, #80
	bl	_test_and_clear_bit
	cmp	r0, #0
	beq	.L3475
	ldr	r0, [r4, #4]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	__netif_schedule
.L3512:
	ldr	r3, [r4, #40]
	sub	r3, r3, #1
	str	r3, [r4, #40]
	str	r9, [r5, #4]
	ldr	r5, [r4, #20]
	cmp	r8, r5
	beq	.L3483
	ldrd	r2, [r5]
	mov	ip, #256
	mov	r1, #512
	ldr	lr, [r4, #4]
	mov	r0, r6
	ldr	r9, [lr, #80]
	str	r3, [r2, #4]
	str	r2, [r3]
	str	ip, [r5]
	str	r1, [r5, #4]
	bl	_raw_spin_unlock
	ldr	r3, [r5, #-32]
	cmp	r3, #0
	beq	.L3484
	ldr	r2, [r4, #4]
	ldrb	r1, [r2, #96]	@ zero_extendqisi2
	cmp	r1, #0
	beq	.L3485
	ldr	r2, [r2, #104]
	cmp	r3, r2
	movne	r10, r1
	bne	.L3485
	ldrh	r2, [r9, #20]
	sdiv	r10, r3, r2
	mls	r10, r2, r10, r3
	subs	r10, r10, #0
	movne	r10, #1
.L3485:
	ldrb	r2, [r5, #-10]	@ zero_extendqisi2
	bfi	r2, r10, #1, #1
	tst	r2, #2
	uxtb	r1, r2
	strb	r2, [r5, #-10]
	beq	.L3486
	ldrb	r2, [r4, #124]	@ zero_extendqisi2
	cmp	r2, #0
	bne	.L3486
	ldrh	r0, [r9, #20]
	sdiv	r2, r3, r0
	mls	r2, r0, r2, r3
	cmp	r2, #0
	bne	.L3486
	bfi	r1, r2, #1, #1
	add	r3, r3, #1
	strb	r1, [r5, #-10]
.L3486:
	str	r3, [r5, #-32]
	ldr	r3, [r9, #8]
	mov	r0, r9
	mov	r2, #32
	sub	r1, r5, #36
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	beq	.L3487
	mov	r3, #0
	mov	r0, r6
	str	r3, [r5, #-32]
.L3508:
	bl	_raw_spin_lock
	ldr	r3, [r4, #24]
	mov	r0, r6
	str	r5, [r4, #24]
	str	r8, [r5]
	str	r3, [r5, #4]
	str	r5, [r3]
	bl	_raw_spin_unlock
	b	.L3488
.L3484:
	mov	r0, r6
	b	.L3508
.L3483:
	mov	r0, r6
	bl	_raw_spin_unlock
	b	.L3488
.L3487:
	mov	r0, r6
	bl	_raw_spin_lock
	ldr	r3, [r4, #40]
	mov	r0, r6
	add	r3, r3, #1
	str	r3, [r4, #40]
	bl	_raw_spin_unlock
	movw	r3, #:lower16:jiffies
	movt	r3, #:upper16:jiffies
	ldr	r3, [r3]
	str	r3, [r7, #604]
	b	.L3488
	.fnend
	.size	tx_complete, .-tx_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	eth_qc_open, %function
eth_qc_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r0, [r0, #1224]
	ldr	r3, [r0, #160]
	tst	r3, #4
	beq	.L3528
.L3515:
	add	r5, r4, #1216
	mov	r0, r5
	bl	_raw_spin_lock_irq
	ldr	r0, [r4, #1220]
	cmp	r0, #0
	beq	.L3517
	ldr	r3, [r0, #104]
	cmp	r3, #0
	beq	.L3517
	blx	r3
.L3517:
	mov	r0, r5
	bl	_raw_spin_unlock_irq
	ldrd	r4, [sp]
	mov	r0, #0
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L3528:
	bl	netif_carrier_off
	ldr	r0, [r4, #1224]
	bl	netif_carrier_on
	ldr	r3, [r4, #1224]
	mov	r0, #0
	ldr	r5, [r3, #576]
	add	r1, r5, #80
	bl	_test_and_clear_bit
	cmp	r0, #0
	beq	.L3515
	ldr	r0, [r5, #4]
	bl	__netif_schedule
	b	.L3515
	.fnend
	.size	eth_qc_open, .-eth_qc_open
	.section	.rodata.str1.4
	.align	2
.LC219:
	.ascii	"<3>invalid rndis pkt: skblen:%u hdr_len:%u\000"
	.align	2
.LC220:
	.ascii	"<3>invalid rndis message: %d/%d/%d/%d, len:%d\012\000"
	.align	2
.LC221:
	.ascii	"<3>%s:skb clone failed\012\000"
	.text
	.align	2
	.global	rndis_rm_hdr
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_rm_hdr, %function
rndis_rm_hdr:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	movw	r9, #:lower16:.LANCHOR0
	mov	r8, r2
	movt	r9, #:upper16:.LANCHOR0
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	lr, [r1, #80]
	.pad #8
	sub	sp, sp, #8
	ldr	r3, [r9, #3252]
	cmp	lr, r3
	strhi	lr, [r9, #3252]
	bhi	.L3531
	cmp	lr, #0
	beq	.L3543
.L3531:
	mov	r7, #0
	b	.L3541
.L3538:
	cmp	r2, r6
	beq	.L3539
	bl	skb_clone
	mov	r5, r0
	sub	r1, r10, #44
	cmp	r5, #0
	mov	r0, r4
	beq	.L3546
	bl	skb_pull
	mov	r1, r6
	mov	r0, r5
	bl	skb_trim
	mov	r1, r5
	mov	r0, r8
	bl	skb_queue_tail
	ldr	lr, [r4, #80]
	cmp	lr, #0
	beq	.L3532
.L3541:
	cmp	lr, #43
	mov	r0, r4
	add	r7, r7, #1
	bls	.L3547
	ldr	ip, [r4, #172]
	ldr	r10, [ip, #4]	@ unaligned
	ldr	r3, [ip, #8]	@ unaligned
	ldr	r6, [ip, #12]	@ unaligned
	cmp	r10, lr
	add	r1, r3, #8
	add	r2, r3, r6
	bhi	.L3536
	add	r2, r2, #8
	cmp	r2, r10
	bhi	.L3536
	ldr	ip, [ip]	@ unaligned
	cmp	ip, #1
	bne	.L3548
	bl	skb_pull
	ldr	r3, [r4, #80]
	mov	r1, #32
	mov	r0, r4
	cmp	r3, r6
	sub	r2, r3, #1
	bne	.L3538
.L3539:
	mov	r1, r6
	mov	r0, r4
	bl	skb_trim
.L3532:
	ldr	r3, [r9, #3256]
	mov	r0, r8
	mov	r1, r4
	cmp	r3, r7
	strlt	r7, [r9, #3256]
	bl	skb_queue_tail
	mov	r0, #0
.L3529:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L3543:
	mov	r7, lr
	b	.L3532
.L3546:
	movw	r0, #:lower16:.LC221
	ldr	r1, .L3549
	movt	r0, #:upper16:.LC221
	bl	printk
	mov	r0, r4
	bl	dev_kfree_skb_any
	mvn	r0, #11
	b	.L3529
.L3548:
	movw	r0, #:lower16:.LC220
	mov	r2, r10
	stm	sp, {r6, lr}
	mov	r1, ip
	movt	r0, #:upper16:.LC220
	bl	printk
	mov	r0, r4
	bl	dev_kfree_skb_any
	mvn	r0, #21
	b	.L3529
.L3536:
	movw	r0, #:lower16:.LC220
	ldr	r1, [ip]	@ unaligned
	mov	r2, r10
	movt	r0, #:upper16:.LC220
	stm	sp, {r6, lr}
	bl	printk
	mov	r0, r4
	bl	dev_kfree_skb_any
	mvn	r0, #74
	b	.L3529
.L3547:
	movw	r0, #:lower16:.LC219
	mov	r1, lr
	mov	r2, #44
	movt	r0, #:upper16:.LC219
	bl	printk
	mov	r0, r4
	bl	dev_kfree_skb_any
	mvn	r0, #21
	b	.L3529
.L3550:
	.align	2
.L3549:
	.word	.LANCHOR2+1476
	.fnend
	.size	rndis_rm_hdr, .-rndis_rm_hdr
	.align	2
	.global	rndis_qc_rm_hdr
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_rm_hdr, %function
rndis_qc_rm_hdr:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r6, [r1, #172]
	ldr	r3, [r6]	@ unaligned
	cmp	r3, #1
	bne	.L3556
	ldr	r1, [r6, #8]	@ unaligned
	mov	r0, r4
	mov	r5, r2
	add	r1, r1, #8
	bl	skb_pull
	cmp	r0, #0
	beq	.L3557
	ldr	r1, [r6, #12]	@ unaligned
	mov	r0, r4
	bl	skb_trim
	mov	r0, r5
	mov	r1, r4
	bl	skb_queue_tail
	mov	r0, #0
.L3551:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L3556:
	mov	r0, r1
	bl	dev_kfree_skb_any
	mvn	r0, #21
	b	.L3551
.L3557:
	mov	r0, r4
	bl	dev_kfree_skb_any
	mvn	r0, #74
	b	.L3551
	.fnend
	.size	rndis_qc_rm_hdr, .-rndis_qc_rm_hdr
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_proc_open, %function
rndis_proc_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #-20]
	mov	r2, r1
	movw	r1, #:lower16:rndis_proc_show
	mov	r0, r2
	movt	r1, #:upper16:rndis_proc_show
	ldr	r2, [r3, #44]
	b	single_open
	.fnend
	.size	rndis_proc_open, .-rndis_proc_open
	.section	.rodata.str1.4
	.align	2
.LC222:
	.ascii	"y\000"
	.align	2
.LC223:
	.ascii	"n\000"
	.align	2
.LC224:
	.ascii	"?\000"
	.align	2
.LC225:
	.ascii	"connected\000"
	.align	2
.LC226:
	.ascii	"disconnected\000"
	.align	2
.LC227:
	.ascii	"Config Nr. %d\012used      : %s\012state     : %s\012"
	.ascii	"medium    : 0x%08X\012speed     : %d\012cable     :"
	.ascii	" %s\012vendor ID : 0x%08X\012vendor    : %s\012ul-m"
	.ascii	"ax-xfer-size:%d max-xfer-size-rcvd: %d\012ul-max-pk"
	.ascii	"ts-per-xfer:%d max-pkts-per-xfer-rcvd:%d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_proc_show, %function
rndis_proc_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	movw	r1, #:lower16:.LC223
	movw	r3, #:lower16:.LC222
	strd	r6, [sp, #8]
	movt	r1, #:upper16:.LC223
	movt	r3, #:upper16:.LC222
	strd	r8, [sp, #16]
	str	lr, [sp, #24]
	ldr	ip, [r0, #80]
	.pad #44
	sub	sp, sp, #44
	ldrb	r4, [ip, #1]	@ zero_extendqisi2
	ldr	lr, [ip, #4]
	ldrb	r2, [ip]	@ zero_extendqisi2
	cmp	r4, #0
	moveq	r3, r1
	cmp	lr, #2
	movwhi	r7, #:lower16:.LC224
	movthi	r7, #:upper16:.LC224
	bhi	.L3561
	movw	r1, #:lower16:.LANCHOR2
	movt	r1, #:upper16:.LANCHOR2
	add	r1, r1, lr, lsl #2
	ldr	r7, [r1, #1492]
.L3561:
	ldr	r8, [ip, #8]
	ldr	r1, [ip, #16]
	cmp	r1, #0
	bne	.L3565
	ldr	r1, [ip, #12]
	mov	r6, #100
	movw	r5, #:lower16:.LC225
	movt	r5, #:upper16:.LC225
	mul	r6, r6, r1
.L3562:
	movw	lr, #:lower16:.LANCHOR0
	ldrb	r4, [ip, #36]	@ zero_extendqisi2
	movw	r1, #:lower16:.LC227
	movt	lr, #:upper16:.LANCHOR0
	movt	r1, #:upper16:.LC227
	ldr	r9, [lr, #3252]
	ldr	lr, [lr, #3256]
	str	r9, [sp, #28]
	str	r4, [sp, #32]
	str	lr, [sp, #36]
	ldr	lr, [ip, #28]
	ldr	lr, [lr, #364]
	add	lr, lr, #80
	mul	lr, r4, lr
	str	lr, [sp, #24]
	ldr	lr, [ip, #40]
	str	lr, [sp, #20]
	ldr	ip, [ip, #32]
	stm	sp, {r7, r8}
	str	r6, [sp, #8]
	str	r5, [sp, #12]
	str	ip, [sp, #16]
	bl	seq_printf
	mov	r0, #0
	add	sp, sp, #44
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L3565:
	movw	r5, #:lower16:.LC226
	mov	r6, #0
	movt	r5, #:upper16:.LC226
	b	.L3562
	.fnend
	.size	rndis_proc_show, .-rndis_proc_show
	.section	.rodata.str1.4
	.align	2
.LC228:
	.ascii	"<3>acc_complete_set_hid_report_desc, err %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_complete_set_hid_report_desc, %function
acc_complete_set_hid_report_desc:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r1, #32]
	ldr	r3, [r1, #44]
	ldr	r5, [r1, #48]
	ldr	r6, [r4, #12]
	cmp	r3, #0
	bne	.L3571
	ldr	r0, [r4, #20]
	mov	r2, r5
	ldr	r3, [r4, #28]
	ldr	r1, [r1]
	add	r0, r0, r3
	bl	memcpy
	ldr	r3, [r4, #24]
	ldr	r2, [r4, #28]
	add	r5, r5, r2
	cmp	r5, r3
	str	r5, [r4, #28]
	beq	.L3572
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L3572:
	add	r0, r6, #1728
	ldrd	r4, [sp]
	add	r0, r0, #12
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	schedule_work
.L3571:
	movw	r0, #:lower16:.LC228
	mov	r1, r3
	ldrd	r4, [sp]
	movt	r0, #:upper16:.LC228
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	printk
	.fnend
	.size	acc_complete_set_hid_report_desc, .-acc_complete_set_hid_report_desc
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_register_hid, %function
acc_register_hid:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	subs	r6, r2, #0
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	beq	.L3585
	add	r8, r0, #80
	mov	r5, r0
	mov	r0, r8
	mov	r4, r1
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #1756]
	add	lr, r5, #1744
	mov	r7, r0
	add	lr, lr, #12
	cmp	lr, r3
	bne	.L3577
	b	.L3575
.L3596:
	ldr	r3, [r3]
	cmp	lr, r3
	beq	.L3575
.L3577:
	ldr	ip, [r3, #16]
	cmp	r4, ip
	bne	.L3596
	cmp	r3, #0
	beq	.L3575
.L3578:
	ldrd	r0, [r3]
	add	r2, r5, #1760
	add	r2, r2, #12
	str	r1, [r0, #4]
	str	r0, [r1]
	ldr	r1, [r5, #1772]
	str	r3, [r1, #4]
	stm	r3, {r1, r2}
	str	r3, [r5, #1772]
.L3579:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L3586
	movw	r1, #32800
	bl	kmem_cache_alloc
	subs	r9, r0, #0
	beq	.L3583
.L3582:
	movw	r1, #32800
	mov	r0, r6
	bl	__kmalloc
	cmp	r0, #0
	str	r0, [r9, #20]
	beq	.L3597
	str	r5, [r9, #12]
	add	r3, r5, #1760
	mov	r1, r7
	str	r4, [r9, #16]
	add	r3, r3, #4
	mov	r0, r8
	str	r6, [r9, #24]
	ldr	r2, [r5, #1764]
	str	r9, [r2, #4]
	strd	r2, [r9]
	str	r9, [r5, #1764]
	bl	_raw_spin_unlock_irqrestore
	add	r0, r5, #1728
	add	r0, r0, #12
	bl	schedule_work
	mov	r0, #0
.L3573:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L3586:
	mov	r9, #16
	b	.L3582
.L3575:
	ldr	r3, [r5, #1764]
	add	r1, r5, #1760
	add	r1, r1, #4
	cmp	r1, r3
	bne	.L3581
	b	.L3579
.L3598:
	ldr	r3, [r3]
	cmp	r1, r3
	beq	.L3579
.L3581:
	ldr	r2, [r3, #16]
	cmp	r4, r2
	bne	.L3598
	cmp	r3, #0
	beq	.L3579
	b	.L3578
.L3597:
	mov	r0, r9
	bl	kfree
.L3583:
	mov	r0, r8
	mov	r1, r7
	bl	_raw_spin_unlock_irqrestore
	mvn	r0, #11
	b	.L3573
.L3585:
	mvn	r0, #21
	b	.L3573
	.fnend
	.size	acc_register_hid, .-acc_register_hid
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	kill_all_hid_devices, %function
kill_all_hid_devices:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	add	r5, r0, #80
	mov	r4, r0
	mov	r0, r5
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #1756]
	add	lr, r4, #1744
	mov	r1, r0
	add	lr, lr, #12
	cmp	r3, lr
	ldr	r2, [r3]
	addne	r0, r4, #1760
	movne	r7, #256
	addne	r0, r0, #12
	movne	r6, #512
	beq	.L3604
.L3603:
	ldr	ip, [r3, #4]
	cmp	lr, r2
	str	ip, [r2, #4]
	str	r2, [ip]
	str	r7, [r3]
	str	r6, [r3, #4]
	ldr	ip, [r4, #1772]
	str	r3, [ip, #4]
	str	ip, [r3]
	str	r0, [r3, #4]
	str	r3, [r4, #1772]
	mov	r3, r2
	ldr	r2, [r2]
	bne	.L3603
.L3604:
	ldr	r3, [r4, #1764]
	add	lr, r4, #1760
	add	lr, lr, #4
	cmp	r3, lr
	ldr	r2, [r3]
	addne	r6, r4, #1760
	movne	r7, #256
	addne	r6, r6, #12
	movne	r0, #512
	beq	.L3602
.L3605:
	ldr	ip, [r3, #4]
	cmp	lr, r2
	str	ip, [r2, #4]
	str	r2, [ip]
	str	r7, [r3]
	str	r0, [r3, #4]
	ldr	ip, [r4, #1772]
	str	r3, [ip, #4]
	str	ip, [r3]
	str	r6, [r3, #4]
	str	r3, [r4, #1772]
	mov	r3, r2
	ldr	r2, [r2]
	bne	.L3605
.L3602:
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	add	r0, r4, #1728
	ldrd	r4, [sp]
	add	r0, r0, #12
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	schedule_work
	.fnend
	.size	kill_all_hid_devices, .-kill_all_hid_devices
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	android_resume, %function
android_resume:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	mov	r6, r0
	add	r0, r0, #32
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	dev_get_drvdata
	movw	r2, #:lower16:.LANCHOR0
	movt	r2, #:upper16:.LANCHOR0
	ldr	r4, [r2, #196]!
	cmp	r4, r2
	sub	r4, r4, #208
	bne	.L3611
	b	.L3610
.L3618:
	ldr	r4, [r4, #208]
	cmp	r4, r2
	sub	r4, r4, #208
	beq	.L3610
.L3611:
	ldr	r3, [r4, #8]
	cmp	r0, r3
	bne	.L3618
.L3610:
	add	r5, r0, #60
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldrb	r3, [r4, #54]	@ zero_extendqisi2
	mov	r7, r0
	cmp	r3, #0
	bne	.L3619
.L3612:
	mov	r0, r5
	mov	r1, r7
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	composite_resume
.L3619:
	mov	r3, #0
	add	r0, r4, #180
	strb	r3, [r4, #54]
	bl	schedule_work
	b	.L3612
	.fnend
	.size	android_resume, .-android_resume
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	android_suspend, %function
android_suspend:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	mov	r6, r0
	add	r0, r0, #32
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	dev_get_drvdata
	movw	r2, #:lower16:.LANCHOR0
	movt	r2, #:upper16:.LANCHOR0
	ldr	r4, [r2, #196]!
	cmp	r4, r2
	sub	r4, r4, #208
	bne	.L3622
	b	.L3621
.L3626:
	ldr	r4, [r4, #208]
	cmp	r4, r2
	sub	r4, r4, #208
	beq	.L3621
.L3622:
	ldr	r3, [r4, #8]
	cmp	r0, r3
	bne	.L3626
.L3621:
	add	r5, r0, #60
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldrb	r3, [r4, #54]	@ zero_extendqisi2
	mov	r7, r0
	cmp	r3, #0
	beq	.L3627
.L3623:
	mov	r0, r5
	mov	r1, r7
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	composite_suspend
.L3627:
	mov	r3, #1
	add	r0, r4, #180
	strb	r3, [r4, #54]
	bl	schedule_work
	b	.L3623
	.fnend
	.size	android_suspend, .-android_suspend
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	android_disconnect, %function
android_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r0
	add	r0, r0, #32
	str	r6, [sp, #8]
	movw	r6, #:lower16:.LANCHOR0
	movt	r6, #:upper16:.LANCHOR0
	str	lr, [sp, #12]
	bl	dev_get_drvdata
	mov	r1, r6
	mov	r2, r0
	ldr	r4, [r1, #196]!
	cmp	r4, r1
	sub	r4, r4, #208
	bne	.L3630
	b	.L3629
.L3633:
	ldr	r4, [r4, #208]
	cmp	r4, r1
	sub	r4, r4, #208
	beq	.L3629
.L3630:
	ldr	r3, [r4, #8]
	cmp	r2, r3
	bne	.L3633
.L3629:
	mov	r0, r5
	add	r5, r2, #60
	bl	composite_disconnect
	ldr	r0, [r6, #824]
	bl	kill_all_hid_devices
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	mov	r3, #0
	mov	r6, r0
	add	r0, r4, #180
	strb	r3, [r4, #52]
	bl	schedule_work
	mov	r1, r6
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock_irqrestore
	.fnend
	.size	android_disconnect, .-android_disconnect
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	get_ether_addr, %function
get_ether_addr:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	subs	r4, r0, #0
	subne	r5, r1, #1
	strd	r6, [sp, #8]
	mov	r7, r1
	str	r8, [sp, #16]
	addne	r8, r1, #5
	str	lr, [sp, #20]
	bne	.L3640
	b	.L3641
.L3647:
	ldrb	r0, [r4, #1]	@ zero_extendqisi2
	bl	hex_to_bin
	mov	r3, r0
	ldrb	r0, [r4, #2]	@ zero_extendqisi2
.L3646:
	mov	r4, r3
	bl	hex_to_bin
	orr	r0, r0, r4, lsl #4
	strb	r0, [r5, #1]!
	cmp	r8, r5
	beq	.L3639
	mov	r4, r6
.L3640:
	ldrb	r0, [r4]	@ zero_extendqisi2
	add	r6, r4, #3
	cmp	r0, #58
	cmpne	r0, #46
	beq	.L3647
	bl	hex_to_bin
	mov	r3, r0
	add	r6, r4, #2
	ldrb	r0, [r4, #1]	@ zero_extendqisi2
	b	.L3646
.L3639:
	ldrb	r3, [r7]	@ zero_extendqisi2
	ands	r0, r3, #1
	beq	.L3648
.L3641:
	mov	r0, r7
	mov	r1, #6
	bl	get_random_bytes
	ldrb	r3, [r7]	@ zero_extendqisi2
	mov	r0, #1
	bic	r3, r3, #1
	orr	r3, r3, #2
	strb	r3, [r7]
.L3634:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L3648:
	ldrb	r2, [r7, #1]	@ zero_extendqisi2
	ldrb	lr, [r7, #2]	@ zero_extendqisi2
	ldrb	ip, [r7, #3]	@ zero_extendqisi2
	ldrb	r1, [r7, #4]	@ zero_extendqisi2
	orr	r3, r3, r2
	ldrb	r2, [r7, #5]	@ zero_extendqisi2
	orr	r3, r3, lr
	orr	r3, r3, ip
	orr	r3, r3, r1
	orrs	r3, r3, r2
	beq	.L3641
	b	.L3634
	.fnend
	.size	get_ether_addr, .-get_ether_addr
	.set	get_qc_ether_addr,get_ether_addr
	.section	.rodata.str1.4
	.align	2
.LC229:
	.ascii	"unable to open backing file: %s\012\000"
	.align	2
.LC230:
	.ascii	"invalid file type: %s\012\000"
	.align	2
.LC231:
	.ascii	"file not readable: %s\012\000"
	.align	2
.LC232:
	.ascii	"unable to find file size: %s\012\000"
	.align	2
.LC233:
	.ascii	"file too big: %s\012\000"
	.align	2
.LC234:
	.ascii	"using only first %d blocks\012\000"
	.align	2
.LC235:
	.ascii	"file too small: %s\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_lun_open, %function
fsg_lun_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	mov	r6, r1
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrb	r2, [r0, #24]	@ zero_extendqisi2
	.pad #4
	sub	sp, sp, #4
	ands	r2, r2, #1
	beq	.L3650
.L3652:
	mov	r2, #0
	mov	r1, #131072
	mov	r0, r6
	mov	r7, #1
	bl	filp_open
	mov	r4, r0
	cmn	r4, #4096
	bhi	.L3694
.L3653:
	ldr	r3, [r4, #12]
	ldr	r2, [r4, #40]
	tst	r2, #2
	moveq	r7, #1
	cmp	r3, #0
	beq	.L3656
	ldr	r2, [r3, #40]
	cmp	r2, #0
	beq	.L3656
	ldrh	r3, [r2]
	and	r3, r3, #61440
	sub	r3, r3, #24576
	tst	r3, #53248
	bne	.L3656
	ldr	r3, [r4, #20]
	cmp	r3, #0
	beq	.L3659
	ldr	r1, [r3, #8]
	cmp	r1, #0
	beq	.L3695
.L3660:
	ldr	r1, [r3, #12]
	cmp	r1, #0
	beq	.L3696
.L3661:
	ldr	r3, [r2, #32]
	ldr	r3, [r3]
.L3693:
	ldr	r1, [r3, #104]
	tst	r1, #1
	bne	.L3663
	.syntax divided
@ 164 "include/linux/seqlock.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	ldrd	r8, [r3, #96]
	.syntax divided
@ 220 "include/linux/seqlock.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r0, [r3, #104]
	cmp	r1, r0
	bne	.L3693
	cmp	r8, #0
	sbcs	r3, r9, #0
	blt	.L3697
	ldrb	r3, [r5, #24]	@ zero_extendqisi2
	tst	r3, #8
	bne	.L3698
	ldr	r3, [r2, #332]
	cmp	r3, #0
	beq	.L3669
	ldr	r3, [r3, #92]
	ldr	r3, [r3, #500]
	cmp	r3, #0
	moveq	r3, #512
	beq	.L3670
	add	r3, r3, #768
	ldrh	r3, [r3]
	cmp	r3, #0
	moveq	r3, #512
.L3670:
	mov	r1, #8
	str	r3, [r5, #44]
.L3671:
	lsr	r3, r3, #1
	add	r1, r1, #1
	cmp	r3, #256
	bhi	.L3671
	str	r1, [r5, #40]
.L3672:
	rsb	r0, r1, #32
	lsr	r2, r8, r1
	subs	ip, r1, #32
	orr	r2, r2, r9, lsl r0
	mov	r0, #1
	asr	r3, r9, r1
	orrpl	r2, r2, r9, asr ip
	mov	r1, #0
	b	.L3668
.L3656:
	movw	r1, #:lower16:.LC230
	mov	r2, r6
	add	r0, r5, #48
	movt	r1, #:upper16:.LC230
	mvn	r6, #21
	bl	_dev_info
.L3658:
	mov	r3, sp
	mov	r0, r4
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #12]
	ldr	r1, [r3, #716]
	bl	filp_close
.L3649:
	mov	r0, r6
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L3650:
	mov	r1, #2
	mov	r0, r6
	movt	r1, 2
	bl	filp_open
	cmn	r0, #30
	cmnne	r0, #13
	mov	r4, r0
	moveq	r7, #1
	movne	r7, #0
	beq	.L3652
	cmn	r4, #4096
	bls	.L3653
.L3694:
	movw	r1, #:lower16:.LC229
	mov	r2, r6
	add	r0, r5, #48
	movt	r1, #:upper16:.LC229
	mov	r6, r4
	bl	_dev_info
	b	.L3649
.L3698:
	lsr	r2, r8, #11
	mov	r0, #37888
	asr	r3, r9, #11
	orr	r2, r2, r9, lsl #21
	movt	r0, 17
	mov	r1, #0
	cmp	r2, r0
	mov	r10, #11
	mov	fp, #2048
	sbcs	r1, r3, r1
	strd	r10, [r5, #40]
	bge	.L3667
	mov	r0, #300
	mov	r1, #0
.L3668:
	cmp	r2, r0
	sbcs	r1, r3, r1
	blt	.L3699
.L3673:
	add	r1, r4, #32
	.syntax divided
@ 44 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	@ atomic_add
1:	ldrex	r0, [r1]
	add	r0, r0, #1
	strex	ip, r0, [r1]
	teq	ip, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	ldrb	r1, [r5, #24]	@ zero_extendqisi2
	mov	r6, #0
	str	r4, [r5]
	strd	r8, [r5, #8]
	strd	r2, [r5, #16]
	bfi	r1, r7, #1, #1
	strb	r1, [r5, #24]
	b	.L3658
.L3695:
	ldr	r1, [r3, #16]
	cmp	r1, #0
	bne	.L3660
.L3659:
	movw	r1, #:lower16:.LC231
	mov	r2, r6
	add	r0, r5, #48
	movt	r1, #:upper16:.LC231
	mvn	r6, #21
	bl	_dev_info
	b	.L3658
.L3696:
	ldr	r3, [r3, #20]
	cmp	r3, #0
	moveq	r7, #1
	b	.L3661
.L3699:
	movw	r1, #:lower16:.LC235
	mov	r2, r6
	add	r0, r5, #48
	movt	r1, #:upper16:.LC235
	mvn	r6, #524
	bl	_dev_info
	b	.L3658
.L3697:
	movw	r1, #:lower16:.LC232
	mov	r2, r6
	add	r0, r5, #48
	movt	r1, #:upper16:.LC232
	mov	r6, r8
	bl	_dev_info
	b	.L3658
.L3667:
	add	r3, r5, #48
	movw	r1, #:lower16:.LC233
	mov	r2, r6
	mov	r0, r3
	movt	r1, #:upper16:.LC233
	mov	r6, r3
	bl	_dev_info
	movw	r2, #37887
	movw	r1, #:lower16:.LC234
	movt	r2, 17
	mov	r0, r6
	movt	r1, #:upper16:.LC234
	bl	_dev_info
	adr	r3, .L3700
	ldrd	r2, [r3]
	b	.L3673
.L3669:
	mov	r2, #9
	mov	r3, #512
	mov	r1, #9
	strd	r2, [r5, #40]
	b	.L3672
.L3663:
	b	.L3693
.L3701:
	.align	3
.L3700:
	.word	1151999
	.word	0
	.fnend
	.size	fsg_lun_open, .-fsg_lun_open
	.section	.rodata.str1.4
	.align	2
.LC236:
	.ascii	"Wrong NTH SIGN, skblen %d\012\000"
	.align	2
.LC237:
	.ascii	"HEAD:\000"
	.align	2
.LC238:
	.ascii	"<6>\000"
	.align	2
.LC239:
	.ascii	"Wrong NTB headersize\012\000"
	.align	2
.LC240:
	.ascii	"OUT size exceeded\012\000"
	.align	2
.LC241:
	.ascii	"Bad index: %x\012\000"
	.align	2
.LC242:
	.ascii	"Wrong NDP SIGN\012\000"
	.align	2
.LC243:
	.ascii	"Bad NDP length: %x\012\000"
	.align	2
.LC244:
	.ascii	"Bad dgram length: %x\012\000"
	.align	2
.LC245:
	.ascii	"Bad CRC\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_unwrap_ntb, %function
ncm_unwrap_ntb:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	mov	r4, r1
	strd	r6, [sp, #8]
	mov	r7, r2
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r6, [r0, #168]
	.pad #44
	sub	sp, sp, #44
	ldr	r3, [r1, #172]
	ldrb	r0, [r0, #172]	@ zero_extendqisi2
	ldr	r1, [r6]
	ldr	r2, [r3]	@ unaligned
	cmp	r0, #0
	movne	r0, #18
	moveq	r0, #14
	str	r0, [sp, #20]
	movne	r0, #4
	moveq	r0, #0
	cmp	r1, r2
	str	r0, [sp, #16]
	bne	.L3754
	ldrb	r0, [r3, #5]	@ zero_extendqisi2
	ldrb	r2, [r3, #4]	@ zero_extendqisi2
	ldr	r1, [r6, #8]
	orr	r2, r2, r0, lsl #8
	cmp	r2, r1
	bne	.L3755
	ldr	r0, [r6, #24]
	add	lr, r3, #8
	cmp	r0, #1
	bne	.L3756
	ldrb	r2, [r3, #9]	@ zero_extendqisi2
	ldrb	ip, [r3, #8]	@ zero_extendqisi2
	orr	ip, ip, r2, lsl #8
.L3710:
	movw	r2, #:lower16:.LANCHOR1
	movt	r2, #:upper16:.LANCHOR1
	add	r8, lr, r0, lsl #1
	ldr	r2, [r2, #28]
	cmp	r2, ip
	bcc	.L3757
	ldr	r2, [r6, #28]
	cmp	r2, #1
	beq	.L3712
	cmp	r2, #2
	ldreq	r2, [r8]	@ unaligned
	bne	.L3749
.L3715:
	cmp	r1, r2
	movls	r1, #0
	movhi	r1, #1
	ands	r0, r2, #3
	movne	r0, r1
	cmp	r0, #0
	bne	.L3758
	ldr	r1, [r3, r2]	@ unaligned
	add	r3, r3, r2
	ldr	r2, [r6, #4]
	cmp	r2, r1
	bne	.L3759
	ldrb	r0, [r3, #5]	@ zero_extendqisi2
	ldrb	r2, [r3, #4]	@ zero_extendqisi2
	ldr	lr, [r6, #12]
	ldr	r1, [r6, #20]
	orr	r2, r2, r0, lsl #8
	add	r0, lr, r1, lsl #3
	cmp	r0, r2
	bhi	.L3718
	ldr	ip, [r6, #16]
	udiv	r0, r2, ip
	mls	r0, ip, r0, r2
	cmp	r0, #0
	bne	.L3718
	sub	r2, r2, lr
	ldr	ip, [r6, #32]
	cmp	r1, #1
	ldr	r0, [r6, #40]
	mov	r8, r2
	add	r3, r3, #6
	ldr	r2, [r6, #36]
	add	r0, ip, r0
	add	r0, r0, r2
	add	lr, r3, r0, lsl #1
	bne	.L3760
	ldrb	r3, [r3, r0, lsl #1]	@ zero_extendqisi2
	add	r10, lr, #2
	ldrb	ip, [lr, #1]	@ zero_extendqisi2
	mov	r2, #2
	ldrb	r0, [lr, #3]	@ zero_extendqisi2
	ldrb	fp, [lr, #2]	@ zero_extendqisi2
	orr	r3, r3, ip, lsl #8
	orr	fp, fp, r0, lsl #8
.L3723:
	add	r10, r10, r2
	str	r6, [sp, #24]
	mov	r9, r8
	str	r5, [sp, #28]
	b	.L3733
.L3727:
	mov	r2, r10
	ldrb	ip, [r10, #1]	@ zero_extendqisi2
	mov	r1, #2
	ldrb	r8, [r2], #2	@ zero_extendqisi2
	ldrb	r0, [r10, #3]	@ zero_extendqisi2
	ldrb	r6, [r10, #2]	@ zero_extendqisi2
	orr	r8, r8, ip, lsl #8
	orr	r6, r6, r0, lsl #8
.L3730:
	clz	r5, r6
	lsr	r5, r5, #5
	cmp	r8, #0
	moveq	r5, #1
	cmp	r5, #0
	add	r10, r2, r1
	str	r5, [sp, #32]
	bne	.L3731
	mov	r1, #32
	mov	r0, r4
	str	r3, [sp, #36]
	bl	skb_clone
	subs	r5, r0, #0
	ldr	r3, [sp, #36]
	beq	.L3761
	mov	r1, r3
	bl	skb_pull
	cmp	r0, #0
	beq	.L3736
	ldr	r3, [sp, #16]
	mov	r0, r5
	sub	r1, fp, r3
	bl	skb_trim
	mov	r1, r5
	mov	r0, r7
	bl	skb_queue_tail
	ldr	r3, [sp, #24]
	ldr	r1, [r3, #20]
	lsl	r3, r1, #2
	sub	r9, r9, r3
	cmp	r3, r9
	bcs	.L3753
	mov	fp, r6
	mov	r3, r8
.L3733:
	ldr	r2, [sp, #20]
	cmp	fp, r2
	bcc	.L3762
	ldr	r2, [sp, #28]
	ldrb	r2, [r2, #172]	@ zero_extendqisi2
	cmp	r2, #0
	bne	.L3763
.L3725:
	cmp	r1, #1
	beq	.L3727
	cmp	r1, #2
	bne	.L3749
	mov	r2, r10
	ldr	r6, [r10, #4]	@ unaligned
	mov	r1, #4
	ldr	r8, [r2], #4	@ unaligned
	b	.L3730
.L3755:
	ldr	r3, [r5, #20]
	movw	r1, #:lower16:.LC239
	mvn	r5, #21
	movt	r1, #:upper16:.LC239
	ldr	r3, [r3, #24]
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	_dev_info
.L3705:
	mov	r0, r7
	bl	skb_queue_purge
	mov	r0, r4
	bl	dev_kfree_skb_any
.L3702:
	mov	r0, r5
	add	sp, sp, #44
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L3756:
	cmp	r0, #2
	ldreq	ip, [r3, #8]	@ unaligned
	beq	.L3710
.L3749:
	.syntax divided
@ 440 "drivers/usb/gadget/f_ncm.c" 1
	.word 0xe7f001f2
@ 0 "" 2
	.arm
	.syntax unified
.L3754:
	ldr	r3, [r5, #20]
	movw	r1, #:lower16:.LC236
	mvn	r5, #21
	movt	r1, #:upper16:.LC236
	ldr	r2, [r4, #80]
	ldr	r3, [r3, #24]
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	_dev_info
	ldr	r0, [r4, #172]
	mov	ip, #0
	mov	r3, #32
	mov	r2, #1
	movw	r1, #:lower16:.LC237
	movt	r1, #:upper16:.LC237
	str	r2, [sp]
	stmib	sp, {r0, r3, ip}
	movw	r0, #:lower16:.LC238
	movt	r0, #:upper16:.LC238
	bl	print_hex_dump
	b	.L3705
.L3712:
	ldrb	ip, [r8, #1]	@ zero_extendqisi2
	ldrb	r2, [lr, r0, lsl #1]	@ zero_extendqisi2
	orr	r2, r2, ip, lsl #8
	b	.L3715
.L3718:
	ldr	r3, [r5, #20]
	movw	r1, #:lower16:.LC243
	movt	r1, #:upper16:.LC243
.L3752:
	ldr	r3, [r3, #24]
	mvn	r5, #21
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	_dev_info
	b	.L3705
.L3731:
	mov	r1, r3
	mov	r0, r4
	bl	skb_pull
	cmp	r0, #0
	bne	.L3764
.L3736:
	mvn	r5, #74
	b	.L3705
.L3763:
	ldr	r0, [sp, #16]
	add	ip, r3, fp
	str	r3, [sp, #32]
	ldr	r1, [r4, #172]
	sub	ip, ip, r0
	sub	r2, fp, r0
	ldr	r5, [r1, ip]	@ unaligned
	mvn	r0, #0
	add	r1, r1, r3
	bl	crc32_le
	mvn	r0, r0
	cmp	r0, r5
	bne	.L3726
	ldr	r3, [sp, #24]
	ldr	r1, [r3, #20]
	ldr	r3, [sp, #32]
	b	.L3725
.L3760:
	cmp	r1, #2
	bne	.L3749
	mov	r10, lr
	ldr	fp, [lr, #4]	@ unaligned
	mov	r2, #4
	ldr	r3, [r10], #4	@ unaligned
	b	.L3723
.L3759:
	ldr	r3, [r5, #20]
	movw	r1, #:lower16:.LC242
	mvn	r5, #21
	movt	r1, #:upper16:.LC242
	ldr	r3, [r3, #24]
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	_dev_info
	b	.L3705
.L3757:
	ldr	r3, [r5, #20]
	movw	r1, #:lower16:.LC240
	mvn	r5, #21
	movt	r1, #:upper16:.LC240
	ldr	r3, [r3, #24]
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	_dev_info
	b	.L3705
.L3764:
	ldr	r3, [sp, #16]
	mov	r0, r4
	sub	r1, fp, r3
	bl	skb_trim
	mov	r1, r4
	mov	r0, r7
	bl	skb_queue_tail
.L3753:
	mov	r5, #0
	b	.L3702
.L3758:
	movw	r1, #:lower16:.LC241
	ldr	r3, [r5, #20]
	movt	r1, #:upper16:.LC241
	b	.L3752
.L3762:
	ldr	r5, [sp, #28]
	movw	r1, #:lower16:.LC244
	mov	r2, fp
	movt	r1, #:upper16:.LC244
	ldr	r3, [r5, #20]
	b	.L3752
.L3761:
	mvn	r5, #21
	b	.L3705
.L3726:
	ldr	r5, [sp, #28]
	movw	r1, #:lower16:.LC245
	movt	r1, #:upper16:.LC245
	ldr	r3, [r5, #20]
	mvn	r5, #21
	ldr	r3, [r3, #24]
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	_dev_info
	b	.L3705
	.fnend
	.size	ncm_unwrap_ntb, .-ncm_unwrap_ntb
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_wrap_ntb, %function
ncm_wrap_ntb:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	r3, #:lower16:.LANCHOR1
	strd	r6, [sp, #8]
	movt	r3, #:upper16:.LANCHOR1
	mov	r7, r1
	strd	r8, [sp, #16]
	mov	r9, r0
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r5, [r0, #168]
	.pad #20
	sub	sp, sp, #20
	ldrh	r2, [r3, #24]
	ldrh	r0, [r3, #20]
	ldrh	r1, [r3, #22]
	ldr	fp, [r5, #8]
	ldr	r8, [r5, #12]
	sub	r6, r2, #1
	rsb	r2, r2, #0
	ldr	ip, [r5, #20]
	rsb	r3, r0, #0
	sub	r4, r0, #1
	ldrb	r0, [r9, #172]	@ zero_extendqisi2
	add	r6, r6, fp
	and	r6, r6, r2
	ldr	r2, [r7, #80]
	add	r8, r8, ip, lsl #3
	ldr	ip, [r9, #104]
	cmp	r0, #0
	add	r8, r8, r6
	movne	r0, #4
	add	r4, r4, r8
	moveq	r0, #0
	and	r4, r4, r3
	add	r4, r4, r1
	stmib	sp, {r0, ip}
	add	r3, r2, r4
	add	r3, r3, r0
	cmp	r3, ip
	bhi	.L3805
	sub	r2, ip, r2
	mov	r3, #32
	sub	r2, r2, r4
	mov	r1, r4
	sub	r2, r2, r0
	mov	r0, r7
	bl	skb_copy_expand
	mov	r10, r0
	mov	r0, r7
	bl	dev_kfree_skb_any
	cmp	r10, #0
	beq	.L3765
	mov	r1, r4
	mov	r0, r10
	bl	skb_push
	cmp	r4, #0
	mov	r7, r0
	bne	.L3806
.L3769:
	ldr	r2, [r5]
	add	r3, r7, #8
	lsr	r1, r2, #16
	ubfx	r0, r2, #8, #8
	strb	r2, [r7]
	lsr	r2, r1, #8
	strb	r0, [r7, #1]
	strb	r1, [r7, #2]
	strb	r2, [r7, #3]
	ldr	r2, [r5, #8]
	ubfx	r1, r2, #8, #8
	strb	r2, [r7, #4]
	strb	r1, [r7, #5]
	ldr	r1, [r5, #24]
	ldr	r2, [r10, #80]
	cmp	r1, #1
	beq	.L3770
	cmp	r1, #2
	bne	.L3803
	lsr	r0, r2, #16
	ubfx	ip, r2, #8, #8
	strb	r2, [r7, #8]
	lsr	r2, r0, #8
	strb	ip, [r7, #9]
	strb	r0, [r7, #10]
	strb	r2, [r7, #11]
.L3773:
	ldr	r2, [r5, #8]
	sub	r6, r6, fp
	add	r0, r3, r1, lsl #1
	ldr	ip, [r5, #28]
	add	r2, r6, r2
	cmp	ip, #1
	beq	.L3774
	cmp	ip, #2
	bne	.L3803
	lsr	lr, r2, #16
	ubfx	r7, r2, #8, #8
	lsr	fp, lr, #8
	strb	lr, [r0, #2]
	strb	fp, [r0, #3]
	strb	r2, [r3, r1, lsl #1]
	strb	r7, [r0, #1]
.L3777:
	ldr	r1, [r5, #4]
	add	r6, r6, ip, lsl #1
	sub	ip, r4, r8
	uxth	r3, r4
	add	r2, r0, r6
	lsr	r8, r1, #16
	ubfx	lr, r1, #8, #8
	lsr	r7, r8, #8
	strb	r8, [r2, #2]
	add	r8, r2, #6
	strb	r7, [r2, #3]
	strb	r1, [r0, r6]
	strb	lr, [r2, #1]
	ldr	r1, [r5, #8]
	sub	r1, r3, r1
	sub	ip, r1, ip
	uxth	ip, ip
	lsr	r1, ip, #8
	strb	ip, [r2, #4]
	strb	r1, [r2, #5]
	ldrb	r0, [r9, #172]	@ zero_extendqisi2
	ldr	r6, [r5, #32]
	ldr	r2, [r5, #36]
	ldr	r1, [r5, #40]
	cmp	r0, #0
	add	r6, r6, r1
	add	r6, r6, r2
	add	r7, r8, r6, lsl #1
	bne	.L3807
	ldr	r1, [r5, #20]
	cmp	r1, #1
	beq	.L3779
.L3809:
	cmp	r1, #2
	bne	.L3803
	lsr	r0, r4, #16
	lsr	r2, r3, #8
	lsr	ip, r0, #8
	strb	r0, [r7, #2]
	strb	ip, [r7, #3]
	strb	r4, [r8, r6, lsl #1]
	strb	r2, [r7, #1]
.L3782:
	ldr	r0, [r5, #20]
	add	ip, r7, r1, lsl #1
	ldr	r2, [r10, #80]
	cmp	r0, #1
	sub	r4, r2, r4
	beq	.L3783
	cmp	r0, #2
	bne	.L3803
	lsr	r2, r4, #16
	ubfx	r0, r4, #8, #8
	lsr	lr, r2, #8
	strb	r2, [ip, #2]
	strb	lr, [ip, #3]
	strb	r4, [r7, r1, lsl #1]
	strb	r0, [ip, #1]
	ldr	r1, [r10, #80]
	cmp	r1, #1536
	bhi	.L3808
.L3765:
	mov	r0, r10
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L3770:
	ubfx	r0, r2, #8, #8
	strb	r2, [r7, #8]
	strb	r0, [r7, #9]
	b	.L3773
.L3774:
	ubfx	lr, r2, #8, #8
	strb	r2, [r3, r1, lsl #1]
	strb	lr, [r0, #1]
	b	.L3777
.L3779:
	lsr	r2, r3, #8
	strb	r4, [r8, r6, lsl #1]
	strb	r2, [r7, #1]
	b	.L3782
.L3783:
	ubfx	r2, r4, #8, #8
	strb	r4, [r7, r1, lsl #1]
	strb	r2, [ip, #1]
	ldr	r1, [r10, #80]
	cmp	r1, #1536
	bls	.L3765
	b	.L3808
.L3806:
	mov	r1, r4
	bl	__memzero
	b	.L3769
.L3807:
	ldr	r2, [r10, #80]
	mvn	r0, #0
	str	r3, [sp, #12]
	ldr	r1, [r10, #172]
	sub	r2, r2, r4
	add	r1, r1, r4
	bl	crc32_le
	mvn	r2, r0
	ldr	fp, [r10, #80]
	mov	r0, r10
	lsr	r9, r2, #16
	ldr	lr, [r10, #172]
	ubfx	r3, r2, #8, #8
	ldr	r1, [sp, #4]
	lsr	ip, r9, #8
	str	ip, [sp, #4]
	add	ip, lr, fp
	strb	r9, [ip, #2]
	ldr	r9, [sp, #4]
	strb	r9, [ip, #3]
	strb	r2, [lr, fp]
	strb	r3, [ip, #1]
	bl	skb_put
	ldr	r1, [r5, #20]
	ldr	r3, [sp, #12]
	cmp	r1, #1
	bne	.L3809
	b	.L3779
.L3808:
	ldr	r4, [sp, #8]
	mov	r0, r10
	sub	r1, r4, r1
	bl	skb_put
	ldr	r1, [r10, #80]
	subs	r1, r4, r1
	beq	.L3765
	bl	__memzero
	b	.L3765
.L3805:
	mov	r0, r7
	mov	r10, #0
	bl	dev_kfree_skb_any
	b	.L3765
.L3803:
	.syntax divided
@ 422 "drivers/usb/gadget/f_ncm.c" 1
	.word 0xe7f001f2
@ 0 "" 2
	.arm
	.syntax unified
	.fnend
	.size	ncm_wrap_ntb, .-ncm_wrap_ntb
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	android_cleanup_functions, %function
android_cleanup_functions:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r0]
	cmp	r4, #0
	beq	.L3810
	movw	r7, #:lower16:.LANCHOR0
	mov	r6, r0
	movt	r7, #:upper16:.LANCHOR0
	b	.L3815
.L3812:
	ldr	r4, [r6, #4]!
	cmp	r4, #0
	beq	.L3810
.L3815:
	ldr	r3, [r4, #8]
	cmp	r3, #0
	beq	.L3812
	ldr	r1, [r3, #296]
	ldr	r0, [r7, #3260]
	bl	device_destroy
	ldr	r0, [r4, #12]
	bl	kfree
	ldr	r3, [r4, #28]
	cmp	r3, #0
	beq	.L3813
	mov	r0, r4
	blx	r3
.L3813:
	ldr	r5, [r4, #16]
	cmp	r5, #0
	bne	.L3834
	ldr	r4, [r6, #4]!
	cmp	r4, #0
	bne	.L3815
.L3810:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L3814:
	ldr	r0, [r4, #8]
	bl	device_remove_file
.L3834:
	ldr	r1, [r5], #4
	cmp	r1, #0
	bne	.L3814
	b	.L3812
	.fnend
	.size	android_cleanup_functions, .-android_cleanup_functions
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	android_usb_unbind, %function
android_usb_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r1, #:lower16:.LANCHOR0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movt	r1, #:upper16:.LANCHOR0
	str	r6, [sp, #8]
	mov	r2, r1
	str	lr, [sp, #12]
	ldr	r4, [r2, #196]!
	cmp	r4, r2
	sub	r4, r4, #208
	bne	.L3838
	b	.L3837
.L3841:
	ldr	r4, [r4, #208]
	cmp	r4, r2
	sub	r4, r4, #208
	beq	.L3837
.L3838:
	ldr	r3, [r4, #8]
	cmp	r0, r3
	bne	.L3841
.L3837:
	mov	r5, #0
	mov	r3, #48
	add	r0, r4, #180
	strb	r3, [r1, #844]
	strb	r5, [r1, #1100]
	strb	r5, [r1, #1356]
	bl	cancel_work_sync
	ldr	r0, [r4, #4]
	bl	android_cleanup_functions
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	android_usb_unbind, .-android_usb_unbind
	.section	.rodata.str1.4
	.align	2
.LC246:
	.ascii	"%d\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	remote_wakeup_store, %function
remote_wakeup_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r3
	str	r6, [sp, #8]
	mov	r6, r2
	str	lr, [sp, #12]
	.pad #8
	sub	sp, sp, #8
	bl	dev_get_drvdata
	mov	r3, #0
	movw	r1, #:lower16:.LC246
	mov	r4, r0
	add	r2, sp, #4
	mov	r0, r6
	movt	r1, #:upper16:.LC246
	str	r3, [sp, #4]
	bl	sscanf
	mov	r0, r4
	ldr	r3, [sp, #4]
	ldr	r2, [r0, #196]!
	cmp	r0, r2
	beq	.L3843
	cmp	r3, #0
	sub	r2, r2, #120
	bne	.L3844
.L3845:
	ldrb	r1, [r2, #22]	@ zero_extendqisi2
	ldr	r3, [r2, #120]
	bic	r1, r1, #32
	cmp	r0, r3
	strb	r1, [r2, #22]
	sub	r2, r3, #120
	bne	.L3845
.L3843:
	mov	r0, r5
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L3844:
	ldrb	r1, [r2, #22]	@ zero_extendqisi2
	ldr	r3, [r2, #120]
	orr	r1, r1, #32
	cmp	r0, r3
	strb	r1, [r2, #22]
	sub	r2, r3, #120
	bne	.L3844
	b	.L3843
	.fnend
	.size	remote_wakeup_store, .-remote_wakeup_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bDeviceProtocol_store, %function
bDeviceProtocol_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r1, #:lower16:.LC66
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r0, r2
	str	lr, [sp, #4]
	.pad #8
	sub	sp, sp, #8
	movt	r1, #:upper16:.LC66
	add	r2, sp, #4
	mov	r4, r3
	bl	sscanf
	cmp	r0, #1
	bne	.L3852
	ldr	r2, [sp, #4]
	movw	r3, #:lower16:.LANCHOR1
	mov	r0, r4
	movt	r3, #:upper16:.LANCHOR1
	strb	r2, [r3, #230]
.L3850:
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L3852:
	mvn	r0, #0
	b	.L3850
	.fnend
	.size	bDeviceProtocol_store, .-bDeviceProtocol_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bDeviceSubClass_store, %function
bDeviceSubClass_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r1, #:lower16:.LC66
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r0, r2
	str	lr, [sp, #4]
	.pad #8
	sub	sp, sp, #8
	movt	r1, #:upper16:.LC66
	add	r2, sp, #4
	mov	r4, r3
	bl	sscanf
	cmp	r0, #1
	bne	.L3856
	ldr	r2, [sp, #4]
	movw	r3, #:lower16:.LANCHOR1
	mov	r0, r4
	movt	r3, #:upper16:.LANCHOR1
	strb	r2, [r3, #229]
.L3854:
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L3856:
	mvn	r0, #0
	b	.L3854
	.fnend
	.size	bDeviceSubClass_store, .-bDeviceSubClass_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bDeviceClass_store, %function
bDeviceClass_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r1, #:lower16:.LC66
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r0, r2
	str	lr, [sp, #4]
	.pad #8
	sub	sp, sp, #8
	movt	r1, #:upper16:.LC66
	add	r2, sp, #4
	mov	r4, r3
	bl	sscanf
	cmp	r0, #1
	bne	.L3860
	ldr	r2, [sp, #4]
	movw	r3, #:lower16:.LANCHOR1
	mov	r0, r4
	movt	r3, #:upper16:.LANCHOR1
	strb	r2, [r3, #228]
.L3858:
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L3860:
	mvn	r0, #0
	b	.L3858
	.fnend
	.size	bDeviceClass_store, .-bDeviceClass_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bcdDevice_store, %function
bcdDevice_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r1, #:lower16:.LC72
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r0, r2
	str	lr, [sp, #4]
	.pad #8
	sub	sp, sp, #8
	movt	r1, #:upper16:.LC72
	add	r2, sp, #4
	mov	r4, r3
	bl	sscanf
	cmp	r0, #1
	bne	.L3864
	ldr	r2, [sp, #4]
	movw	r3, #:lower16:.LANCHOR1
	mov	r0, r4
	movt	r3, #:upper16:.LANCHOR1
	strh	r2, [r3, #236]	@ movhi
.L3862:
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L3864:
	mvn	r0, #0
	b	.L3862
	.fnend
	.size	bcdDevice_store, .-bcdDevice_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	idProduct_store, %function
idProduct_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r1, #:lower16:.LC72
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r0, r2
	str	lr, [sp, #4]
	.pad #8
	sub	sp, sp, #8
	movt	r1, #:upper16:.LC72
	add	r2, sp, #4
	mov	r4, r3
	bl	sscanf
	cmp	r0, #1
	bne	.L3868
	ldr	r2, [sp, #4]
	movw	r3, #:lower16:.LANCHOR1
	mov	r0, r4
	movt	r3, #:upper16:.LANCHOR1
	strh	r2, [r3, #234]	@ movhi
.L3866:
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L3868:
	mvn	r0, #0
	b	.L3866
	.fnend
	.size	idProduct_store, .-idProduct_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	idVendor_store, %function
idVendor_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r1, #:lower16:.LC72
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r0, r2
	str	lr, [sp, #4]
	.pad #8
	sub	sp, sp, #8
	movt	r1, #:upper16:.LC72
	add	r2, sp, #4
	mov	r4, r3
	bl	sscanf
	cmp	r0, #1
	bne	.L3872
	ldr	r2, [sp, #4]
	movw	r3, #:lower16:.LANCHOR1
	mov	r0, r4
	movt	r3, #:upper16:.LANCHOR1
	strh	r2, [r3, #232]	@ movhi
.L3870:
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L3872:
	mvn	r0, #0
	b	.L3870
	.fnend
	.size	idVendor_store, .-idVendor_store
	.section	.rodata.str1.4
	.align	2
.LC247:
	.ascii	"%28s\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mass_storage_inquiry_store, %function
mass_storage_inquiry_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r3
	mov	r5, r2
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	dev_get_drvdata
	cmp	r4, #28
	ldr	r3, [r0, #4]
	bhi	.L3877
	ldr	r2, [r3, #96]
	movw	r1, #:lower16:.LC247
	mov	r0, r5
	movt	r1, #:upper16:.LC247
	add	r2, r2, #180
	bl	sscanf
	cmp	r0, #1
	bne	.L3877
	mov	r0, r4
.L3874:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L3877:
	mvn	r0, #21
	b	.L3874
	.fnend
	.size	mass_storage_inquiry_store, .-mass_storage_inquiry_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_ethaddr_store, %function
ncm_ethaddr_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	mov	r5, r2
	mov	r4, r3
	str	lr, [sp, #8]
	.pad #20
	sub	sp, sp, #20
	bl	dev_get_drvdata
	ldr	r2, [r0, #4]
	mov	r0, r5
	movw	r1, #:lower16:.LC74
	movt	r1, #:upper16:.LC74
	add	r3, r2, #3
	add	ip, r2, #5
	add	r5, r2, #4
	add	lr, r2, #2
	str	lr, [sp]
	stmib	sp, {r3, r5, ip}
	add	r3, r2, #1
	bl	sscanf
	cmp	r0, #6
	moveq	r0, r4
	mvnne	r0, #21
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	add	sp, sp, #8
	ldr	pc, [sp], #4
	.fnend
	.size	ncm_ethaddr_store, .-ncm_ethaddr_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_ethaddr_store, %function
ecm_ethaddr_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	mov	r5, r2
	mov	r4, r3
	str	lr, [sp, #8]
	.pad #20
	sub	sp, sp, #20
	bl	dev_get_drvdata
	ldr	r2, [r0, #4]
	mov	r0, r5
	movw	r1, #:lower16:.LC74
	movt	r1, #:upper16:.LC74
	add	r3, r2, #3
	add	ip, r2, #5
	add	r5, r2, #4
	add	lr, r2, #2
	str	lr, [sp]
	stmib	sp, {r3, r5, ip}
	add	r3, r2, #1
	bl	sscanf
	cmp	r0, #6
	moveq	r0, r4
	mvnne	r0, #21
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	add	sp, sp, #8
	ldr	pc, [sp], #4
	.fnend
	.size	ecm_ethaddr_store, .-ecm_ethaddr_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_max_pkt_per_xfer_store, %function
rndis_max_pkt_per_xfer_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	mov	r5, r2
	mov	r4, r3
	str	lr, [sp, #8]
	.pad #12
	sub	sp, sp, #12
	bl	dev_get_drvdata
	movw	r1, #:lower16:.LC246
	mov	r3, r0
	movt	r1, #:upper16:.LC246
	mov	r0, r5
	ldr	r5, [r3, #4]
	add	r2, sp, #4
	bl	sscanf
	cmp	r0, #1
	ldreq	r3, [sp, #4]
	moveq	r0, r4
	mvnne	r0, #21
	strbeq	r3, [r5, #12]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	add	sp, sp, #8
	ldr	pc, [sp], #4
	.fnend
	.size	rndis_max_pkt_per_xfer_store, .-rndis_max_pkt_per_xfer_store
	.section	.rodata.str1.4
	.align	2
.LC248:
	.ascii	"%04x\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_vendorID_store, %function
rndis_vendorID_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	mov	r5, r2
	mov	r4, r3
	str	lr, [sp, #8]
	.pad #12
	sub	sp, sp, #12
	bl	dev_get_drvdata
	movw	r1, #:lower16:.LC248
	mov	r3, r0
	movt	r1, #:upper16:.LC248
	mov	r0, r5
	ldr	r5, [r3, #4]
	add	r2, sp, #4
	bl	sscanf
	cmp	r0, #1
	ldreq	r3, [sp, #4]
	moveq	r0, r4
	mvnne	r0, #21
	streq	r3, [r5, #8]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	add	sp, sp, #8
	ldr	pc, [sp], #4
	.fnend
	.size	rndis_vendorID_store, .-rndis_vendorID_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_ethaddr_store, %function
rndis_ethaddr_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	mov	r5, r2
	mov	r4, r3
	str	lr, [sp, #8]
	.pad #20
	sub	sp, sp, #20
	bl	dev_get_drvdata
	ldr	r2, [r0, #4]
	mov	r0, r5
	movw	r1, #:lower16:.LC74
	movt	r1, #:upper16:.LC74
	add	r3, r2, #3
	add	ip, r2, #5
	add	r5, r2, #4
	add	lr, r2, #2
	str	lr, [sp]
	stmib	sp, {r3, r5, ip}
	add	r3, r2, #1
	bl	sscanf
	cmp	r0, #6
	moveq	r0, r4
	mvnne	r0, #21
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	add	sp, sp, #8
	ldr	pc, [sp], #4
	.fnend
	.size	rndis_ethaddr_store, .-rndis_ethaddr_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_wceis_store, %function
rndis_wceis_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	mov	r5, r2
	mov	r4, r3
	str	lr, [sp, #8]
	.pad #12
	sub	sp, sp, #12
	bl	dev_get_drvdata
	movw	r1, #:lower16:.LC246
	mov	r3, r0
	movt	r1, #:upper16:.LC246
	mov	r0, r5
	ldr	r5, [r3, #4]
	add	r2, sp, #4
	bl	sscanf
	cmp	r0, #1
	bne	.L3901
	ldr	r3, [sp, #4]
	mov	r0, r4
	subs	r3, r3, #0
	movne	r3, #1
	strb	r3, [r5, #269]
.L3899:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	add	sp, sp, #8
	ldr	pc, [sp], #4
.L3901:
	mvn	r0, #21
	b	.L3899
	.fnend
	.size	rndis_wceis_store, .-rndis_wceis_store
	.section	.rodata.str1.4
	.align	2
.LC249:
	.ascii	"%255s\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_manufacturer_store, %function
rndis_manufacturer_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r3
	mov	r5, r2
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	dev_get_drvdata
	cmp	r4, #255
	ldr	r2, [r0, #4]
	bhi	.L3905
	movw	r1, #:lower16:.LC249
	add	r2, r2, #13
	mov	r0, r5
	movt	r1, #:upper16:.LC249
	bl	sscanf
	cmp	r0, #1
	moveq	r0, r4
	mvnne	r0, #0
.L3903:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L3905:
	mvn	r0, #21
	b	.L3903
	.fnend
	.size	rndis_manufacturer_store, .-rndis_manufacturer_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	iSerial_store, %function
iSerial_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r3, #255
	bhi	.L3910
	mov	r1, r2
	ldr	r0, .L3915
	mov	r2, #256
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r3
	str	lr, [sp, #4]
	bl	strlcpy
	ldr	r0, .L3915
	bl	strim
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L3910:
	mvn	r0, #21
	bx	lr
.L3916:
	.align	2
.L3915:
	.word	.LANCHOR0+844
	.fnend
	.size	iSerial_store, .-iSerial_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	iProduct_store, %function
iProduct_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r3, #255
	bhi	.L3919
	mov	r1, r2
	ldr	r0, .L3924
	mov	r2, #256
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r3
	str	lr, [sp, #4]
	bl	strlcpy
	ldr	r0, .L3924
	bl	strim
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L3919:
	mvn	r0, #21
	bx	lr
.L3925:
	.align	2
.L3924:
	.word	.LANCHOR0+1100
	.fnend
	.size	iProduct_store, .-iProduct_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	iManufacturer_store, %function
iManufacturer_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r3, #255
	bhi	.L3928
	mov	r1, r2
	ldr	r0, .L3933
	mov	r2, #256
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r3
	str	lr, [sp, #4]
	bl	strlcpy
	ldr	r0, .L3933
	bl	strim
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L3928:
	mvn	r0, #21
	bx	lr
.L3934:
	.align	2
.L3933:
	.word	.LANCHOR0+1356
	.fnend
	.size	iManufacturer_store, .-iManufacturer_store
	.section	.rodata.cst4
	.align	2
.LC250:
	.word	__stack_chk_guard
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_aliases_store, %function
ffs_aliases_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 264
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LANCHOR0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	movw	r1, #:lower16:.LC250
	movt	r0, #:upper16:.LANCHOR0
	strd	r6, [sp, #8]
	movt	r1, #:upper16:.LC250
	str	lr, [sp, #16]
	ldr	r5, [r0, #196]
	.pad #268
	sub	sp, sp, #268
	mov	r4, r3
	ldr	r1, [r1]
	str	r1, [sp, #260]
	mov	r1,#0
	mov	r6, r2
	sub	r7, r5, #184
	mov	r0, r7
	bl	mutex_lock
	ldrb	r3, [r5, #-192]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L3940
	mov	r1, r6
	mov	r2, #256
	add	r0, sp, #4
	bl	strlcpy
	add	r0, sp, #4
	bl	strim
	mov	r1, r0
	mov	r2, #256
	add	r0, r5, #8
	bl	strlcpy
	mov	r0, r7
	bl	mutex_unlock
	mov	r0, r4
.L3935:
	movw	r3, #:lower16:.LC250
	movt	r3, #:upper16:.LC250
	ldr	r2, [r3]
	ldr	r3, [sp, #260]
	eors	r2, r3, r2
	bne	.L3941
	add	sp, sp, #268
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L3940:
	mov	r0, r7
	bl	mutex_unlock
	mvn	r0, #15
	b	.L3935
.L3941:
	bl	__stack_chk_fail
	.fnend
	.size	ffs_aliases_store, .-ffs_aliases_store
	.section	.rodata.str1.4
	.align	2
.LC251:
	.ascii	":\000"
	.align	2
.LC252:
	.ascii	"<3>%s: %s(): Failed to alloc memory for android con"
	.ascii	"f\012\000"
	.align	2
.LC253:
	.ascii	",\000"
	.align	2
.LC254:
	.ascii	"ffs\000"
	.align	2
.LC255:
	.ascii	"<3>%s: android_usb: Cannot enable ffs (%d)\000"
	.align	2
.LC256:
	.ascii	"<3>%s: android_usb: Cannot enable '%s' (%d)\000"
	.align	2
.LC257:
	.ascii	"hid\000"
	.section	.rodata.cst4
	.align	2
.LC258:
	.word	__stack_chk_guard
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	functions_store, %function
functions_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 552
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r1, #:lower16:.LC258
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	movt	r1, #:upper16:.LC258
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	mov	fp, r2
	str	lr, [sp, #32]
	.pad #556
	sub	sp, sp, #556
	ldr	r1, [r1]
	str	r1, [sp, #548]
	mov	r1,#0
	str	r3, [sp, #20]
	bl	dev_get_drvdata
	add	r3, r0, #24
	mov	r7, r0
	add	r10, r0, #196
	mov	r0, r3
	str	r3, [sp, #16]
	bl	mutex_lock
	ldrb	r6, [r7, #16]	@ zero_extendqisi2
	cmp	r6, #0
	bne	.L3990
	ldr	r5, [r7, #196]
	cmp	r10, r5
	sub	r5, r5, #120
	beq	.L3946
	mov	r9, #256
	mov	r8, #512
.L3945:
	mov	r4, r5
	ldr	r3, [r4, #112]!
	cmp	r3, r4
	beq	.L3948
.L3947:
	ldr	r2, [r3, #-4]
	sub	r0, r3, #4
	str	r6, [r2, #20]
	ldm	r3, {r1, r2}
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r9, [r3]
	str	r8, [r3, #4]
	bl	kfree
	ldr	r3, [r5, #112]
	cmp	r3, r4
	bne	.L3947
.L3948:
	ldr	r3, [r5, #120]
	str	r4, [r5, #112]
	str	r4, [r5, #116]
	cmp	r10, r3
	sub	r5, r3, #120
	bne	.L3945
.L3946:
	mov	r1, fp
	mov	r2, #256
	add	r0, sp, #36
	mov	fp, #0
	bl	strlcpy
	movw	r3, #:lower16:.LC251
	add	r0, sp, #36
	mov	r4, r3
	bl	strim
	mov	r3, r4
	cmp	r0, #0
	str	r10, [sp, #4]
	movt	r3, #:upper16:.LC251
	str	r3, [sp, #8]
	str	r0, [sp, #28]
	beq	.L3991
.L3964:
	add	r0, sp, #28
	ldr	r1, [sp, #8]
	bl	strsep
	cmp	r0, #0
	str	r0, [sp, #24]
	beq	.L3989
	ldr	r3, [sp, #4]
	ldr	r3, [r3]
	cmp	r3, r10
	beq	.L3952
	sub	r9, r3, #120
	str	r3, [sp, #4]
.L3953:
	movw	r4, #:lower16:.LC253
	movw	r3, #:lower16:.LC256
	movt	r3, #:upper16:.LC256
	movt	r4, #:upper16:.LC253
	add	r8, r7, #216
	add	r6, sp, #292
	str	r3, [sp, #12]
.L3963:
	mov	r1, r4
	add	r0, sp, #24
	bl	strsep
	mov	r5, r0
	mov	r2, #256
	mov	r1, r8
	mov	r0, r6
	bl	strlcpy
	str	r6, [sp, #32]
.L3959:
	mov	r1, r4
	add	r0, sp, #32
	bl	strsep
	subs	r1, r0, #0
	beq	.L3957
	mov	r0, r5
	bl	strcmp
	cmp	r0, #0
	beq	.L3958
.L3957:
	ldr	r3, [sp, #32]
	cmp	r3, #0
	bne	.L3959
	mov	r2, r5
	mov	r1, r9
	mov	r0, r7
	bl	android_enable_function
	cmp	r0, #0
	bne	.L3992
.L3962:
	ldr	r3, [sp, #24]
	cmp	r3, #0
	bne	.L3963
.L3956:
	movw	r2, #:lower16:.LC257
	mov	r1, r9
	movt	r2, #:upper16:.LC257
	mov	r0, r7
	bl	android_enable_function
.L3989:
	ldr	r0, [sp, #28]
	cmp	r0, #0
	bne	.L3964
.L3991:
	ldr	r6, [sp, #4]
	ldr	r3, [r6]
	cmp	r10, r3
	beq	.L3966
	mov	r5, #256
	mov	r4, #512
.L3965:
	ldm	r3, {r1, r2}
	sub	r0, r3, #120
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r5, [r3]
	str	r4, [r3, #4]
	ldr	r3, [r7, #204]
	sub	r3, r3, #1
	str	r3, [r7, #204]
	bl	kfree
	ldr	r3, [r6]
	cmp	r3, r10
	bne	.L3965
.L3966:
	ldr	r0, [sp, #16]
	bl	mutex_unlock
	ldr	r0, [sp, #20]
.L3942:
	movw	r3, #:lower16:.LC258
	movt	r3, #:upper16:.LC258
	ldr	r2, [r3]
	ldr	r3, [sp, #548]
	eors	r2, r3, r2
	bne	.L3993
	add	sp, sp, #556
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L3958:
	cmp	fp, #0
	beq	.L3994
.L3968:
	mov	fp, #1
	b	.L3962
.L3994:
	movw	r2, #:lower16:.LC254
	mov	r1, r9
	movt	r2, #:upper16:.LC254
	mov	r0, r7
	bl	android_enable_function
	subs	r2, r0, #0
	beq	.L3968
	movw	r0, #:lower16:.LC255
	ldr	r1, .L3996
	movt	r0, #:upper16:.LC255
	bl	printk
	b	.L3962
.L3952:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #28]
	cmp	r0, #0
	beq	.L3971
	movw	r1, #32976
	bl	kmem_cache_alloc
	subs	r9, r0, #0
	beq	.L3995
.L3954:
	ldr	ip, [r7]
	movw	r1, #:lower16:android_unbind_config
	add	r2, r9, #112
	ldr	r0, [r7, #204]
	movt	r1, #:upper16:android_unbind_config
	add	r3, r9, #120
	add	r0, r0, #1
	str	r0, [r7, #204]
	str	ip, [r9]
	str	r1, [r9, #12]
	ldr	r1, [r7, #204]
	strb	r1, [r9, #20]
	str	r2, [r9, #112]
	str	r2, [r9, #116]
	ldr	r2, [r7, #200]
	str	r3, [r7, #200]
	str	r10, [r9, #120]
	str	r2, [r9, #124]
	str	r3, [r2]
.L3955:
	ldr	r2, [sp, #4]
	ldr	r3, [sp, #24]
	ldr	r2, [r2]
	cmp	r3, #0
	str	r2, [sp, #4]
	beq	.L3956
	b	.L3953
.L3971:
	mov	r9, #16
	b	.L3954
.L3993:
	bl	__stack_chk_fail
.L3990:
	ldr	r0, [sp, #16]
	bl	mutex_unlock
	mvn	r0, #15
	b	.L3942
.L3992:
	mov	r3, r0
	ldr	r1, .L3996
	mov	r2, r5
	ldr	r0, [sp, #12]
	bl	printk
	b	.L3962
.L3995:
	ldr	r2, .L3996+4
	movw	r0, #:lower16:.LC252
	mvn	r9, #11
	movt	r0, #:upper16:.LC252
	mov	r1, r2
	bl	printk
	b	.L3955
.L3997:
	.align	2
.L3996:
	.word	.LANCHOR2+1528
	.word	.LANCHOR2+1504
	.fnend
	.size	functions_store, .-functions_store
	.section	.rodata.str1.4
	.align	2
.LC259:
	.ascii	"f_%s\000"
	.align	2
.LC260:
	.ascii	"<3>%s: %s: Failed to create dev %s\000"
	.align	2
.LC261:
	.ascii	"<3>%s: %s: Failed to init %s\000"
	.align	2
.LC262:
	.ascii	"<3>%s: %s: Failed to create function %s attributes\000"
	.align	2
.LC263:
	.ascii	"Android\000"
	.align	2
.LC264:
	.ascii	"0123456789ABCDEF\000"
	.align	2
.LC265:
	.ascii	"net2280\000"
	.align	2
.LC266:
	.ascii	"dummy_udc\000"
	.align	2
.LC267:
	.ascii	"pxa25x_udc\000"
	.align	2
.LC268:
	.ascii	"goku_udc\000"
	.align	2
.LC269:
	.ascii	"omap_udc\000"
	.align	2
.LC270:
	.ascii	"pxa27x_udc\000"
	.align	2
.LC271:
	.ascii	"s3c2410_udc\000"
	.align	2
.LC272:
	.ascii	"at91_udc\000"
	.align	2
.LC273:
	.ascii	"imx_udc\000"
	.align	2
.LC274:
	.ascii	"musb-hdrc\000"
	.align	2
.LC275:
	.ascii	"atmel_usba_udc\000"
	.align	2
.LC276:
	.ascii	"fsl-usb2-udc\000"
	.align	2
.LC277:
	.ascii	"amd5536udc\000"
	.align	2
.LC278:
	.ascii	"m66592_udc\000"
	.align	2
.LC279:
	.ascii	"fsl_qe_udc\000"
	.align	2
.LC280:
	.ascii	"ci13xxx_pci\000"
	.align	2
.LC281:
	.ascii	"langwell_udc\000"
	.align	2
.LC282:
	.ascii	"r8a66597_udc\000"
	.align	2
.LC283:
	.ascii	"s3c-hsotg\000"
	.align	2
.LC284:
	.ascii	"pch_udc\000"
	.align	2
.LC285:
	.ascii	"ci13xxx_msm\000"
	.align	2
.LC286:
	.ascii	"renesas_usbhs_udc\000"
	.align	2
.LC287:
	.ascii	"s3c-hsudc\000"
	.align	2
.LC288:
	.ascii	"net2272\000"
	.align	2
.LC289:
	.ascii	"dwc3-gadget\000"
	.align	2
.LC290:
	.ascii	"msm72k_udc\000"
	.align	2
.LC291:
	.ascii	"ci13xxx_msm_hsic\000"
	.align	2
.LC292:
	.ascii	"<4>%s: %s: controller '%s' not recognized\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	android_bind, %function
android_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	movw	r8, #:lower16:.LANCHOR0
	movt	r8, #:upper16:.LANCHOR0
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r4, [r8, #200]
	.pad #20
	sub	sp, sp, #20
	ldr	fp, [r0]
	str	r0, [r4, #-200]
	ldr	r3, [fp]
	ldr	r3, [r3, #20]
	cmp	r3, #0
	beq	.L3999
	mov	r1, #0
	mov	r0, fp
	blx	r3
.L3999:
	ldr	r9, [r8, #2276]
	cmp	r9, #1
	beq	.L4000
.L4006:
	ldrb	r3, [r5, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L4002
	add	r2, r3, #1
	movw	r4, #:lower16:.LANCHOR1
	uxtb	r2, r2
	movt	r4, #:upper16:.LANCHOR1
	cmp	r2, #254
	strb	r2, [r5, #48]
	strb	r2, [r4, #238]
	strb	r2, [r4, #1012]
	beq	.L4002
	add	r3, r3, #2
	movw	r1, #:lower16:.LC263
	ldr	r0, .L4079
	uxtb	r3, r3
	movt	r1, #:upper16:.LC263
	mov	r2, #255
	strb	r3, [r5, #48]
	strb	r3, [r4, #239]
	strb	r3, [r4, #1020]
	bl	strlcpy
	movw	r1, #:lower16:.LC263
	mov	r2, #255
	ldr	r0, .L4079+4
	movt	r1, #:upper16:.LC263
	bl	strlcpy
	movw	r1, #:lower16:.LC264
	mov	r2, #255
	ldr	r0, .L4079+8
	movt	r1, #:upper16:.LC264
	bl	strlcpy
	ldrb	r2, [r5, #48]	@ zero_extendqisi2
	cmp	r2, #253
	bhi	.L4002
	add	r2, r2, #1
	movw	r0, #:lower16:.LC265
	uxtb	r2, r2
	movt	r0, #:upper16:.LC265
	strb	r2, [r5, #48]
	ldr	r5, [fp, #28]
	strb	r2, [r4, #240]
	strb	r2, [r4, #1028]
	mov	r1, r5
	bl	strcmp
	cmp	r0, #0
	beq	.L4023
	movw	r0, #:lower16:.LC266
	mov	r1, r5
	movt	r0, #:upper16:.LC266
	bl	strcmp
	cmp	r0, #0
	beq	.L4024
	movw	r0, #:lower16:.LC267
	mov	r1, r5
	movt	r0, #:upper16:.LC267
	bl	strcmp
	cmp	r0, #0
	beq	.L4025
	movw	r0, #:lower16:.LC268
	mov	r1, r5
	movt	r0, #:upper16:.LC268
	bl	strcmp
	cmp	r0, #0
	beq	.L4026
	movw	r0, #:lower16:.LC269
	mov	r1, r5
	movt	r0, #:upper16:.LC269
	bl	strcmp
	cmp	r0, #0
	beq	.L4027
	movw	r0, #:lower16:.LC270
	mov	r1, r5
	movt	r0, #:upper16:.LC270
	bl	strcmp
	cmp	r0, #0
	beq	.L4028
	movw	r0, #:lower16:.LC271
	mov	r1, r5
	movt	r0, #:upper16:.LC271
	bl	strcmp
	cmp	r0, #0
	beq	.L4029
	movw	r0, #:lower16:.LC272
	mov	r1, r5
	movt	r0, #:upper16:.LC272
	bl	strcmp
	cmp	r0, #0
	beq	.L4030
	movw	r0, #:lower16:.LC273
	mov	r1, r5
	movt	r0, #:upper16:.LC273
	bl	strcmp
	cmp	r0, #0
	beq	.L4031
	movw	r0, #:lower16:.LC274
	mov	r1, r5
	movt	r0, #:upper16:.LC274
	bl	strcmp
	cmp	r0, #0
	beq	.L4032
	movw	r0, #:lower16:.LC275
	mov	r1, r5
	movt	r0, #:upper16:.LC275
	bl	strcmp
	cmp	r0, #0
	beq	.L4033
	movw	r0, #:lower16:.LC276
	mov	r1, r5
	movt	r0, #:upper16:.LC276
	bl	strcmp
	cmp	r0, #0
	beq	.L4034
	movw	r0, #:lower16:.LC277
	mov	r1, r5
	movt	r0, #:upper16:.LC277
	bl	strcmp
	cmp	r0, #0
	beq	.L4035
	movw	r0, #:lower16:.LC278
	mov	r1, r5
	movt	r0, #:upper16:.LC278
	bl	strcmp
	cmp	r0, #0
	beq	.L4036
	movw	r0, #:lower16:.LC279
	mov	r1, r5
	movt	r0, #:upper16:.LC279
	bl	strcmp
	cmp	r0, #0
	beq	.L4037
	movw	r0, #:lower16:.LC280
	mov	r1, r5
	movt	r0, #:upper16:.LC280
	bl	strcmp
	cmp	r0, #0
	beq	.L4038
	movw	r0, #:lower16:.LC281
	mov	r1, r5
	movt	r0, #:upper16:.LC281
	bl	strcmp
	cmp	r0, #0
	beq	.L4039
	movw	r0, #:lower16:.LC282
	mov	r1, r5
	movt	r0, #:upper16:.LC282
	bl	strcmp
	cmp	r0, #0
	beq	.L4040
	movw	r0, #:lower16:.LC283
	mov	r1, r5
	movt	r0, #:upper16:.LC283
	bl	strcmp
	cmp	r0, #0
	beq	.L4041
	movw	r0, #:lower16:.LC284
	mov	r1, r5
	movt	r0, #:upper16:.LC284
	bl	strcmp
	cmp	r0, #0
	beq	.L4042
	movw	r0, #:lower16:.LC285
	mov	r1, r5
	movt	r0, #:upper16:.LC285
	bl	strcmp
	cmp	r0, #0
	beq	.L4043
	movw	r0, #:lower16:.LC286
	mov	r1, r5
	movt	r0, #:upper16:.LC286
	bl	strcmp
	cmp	r0, #0
	beq	.L4044
	movw	r0, #:lower16:.LC287
	mov	r1, r5
	movt	r0, #:upper16:.LC287
	bl	strcmp
	cmp	r0, #0
	beq	.L4045
	movw	r0, #:lower16:.LC288
	mov	r1, r5
	movt	r0, #:upper16:.LC288
	bl	strcmp
	cmp	r0, #0
	beq	.L4046
	movw	r0, #:lower16:.LC289
	mov	r1, r5
	movt	r0, #:upper16:.LC289
	bl	strcmp
	cmp	r0, #0
	beq	.L4047
	movw	r0, #:lower16:.LC290
	mov	r1, r5
	movt	r0, #:upper16:.LC290
	bl	strcmp
	cmp	r0, #0
	beq	.L4048
	movw	r0, #:lower16:.LC291
	mov	r1, r5
	movt	r0, #:upper16:.LC291
	bl	strcmp
	cmp	r0, #0
	moveq	r3, #564
	beq	.L4022
	ldr	r2, .L4079+12
	movw	r0, #:lower16:.LC292
	mov	r3, r5
	movt	r0, #:upper16:.LC292
	mov	r6, #0
	add	r1, r2, #16
	bl	printk
	movw	r3, #39321
	movt	r3, 65535
	strh	r3, [r4, #236]	@ movhi
	b	.L3998
.L4023:
	movw	r3, #513
.L4022:
	mov	r6, #0
	strh	r3, [r4, #236]	@ movhi
.L3998:
	mov	r0, r6
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L4000:
	ldr	r1, .L4079+16
	ldr	r7, [r8, #196]
	ldr	r3, [r4, #-204]
	cmp	r7, r1
	sub	r7, r7, #208
	bne	.L4007
.L4003:
	ldr	r4, [r3], #4
	cmp	r4, #0
	beq	.L4006
	movw	r10, #:lower16:.LC259
	str	r8, [sp, #8]
	movt	r10, #:upper16:.LC259
	str	fp, [sp, #12]
	mov	fp, r5
	mov	r5, r3
	b	.L4005
.L4014:
	ldr	r4, [r5], #4
	add	r9, r9, #1
	cmp	r4, #0
	beq	.L4075
.L4005:
	mov	r1, r10
	mov	r0, #208
	ldr	r2, [r4]
	bl	kasprintf
	mov	r3, #0
	str	r0, [r4, #12]
	cmp	r0, r3
	str	r3, [r4, #20]
	beq	.L4008
	ldr	r1, [r7, #12]
	str	r0, [sp]
	mov	r3, r4
	ldr	r0, [sp, #8]
	mov	r2, r9
	ldr	r0, [r0, #3260]
	bl	device_create
	cmn	r0, #4096
	str	r0, [r4, #8]
	bhi	.L4076
	ldr	r3, [r4, #24]
	cmp	r3, #0
	beq	.L4011
	mov	r1, fp
	mov	r0, r4
	blx	r3
	cmp	r0, #0
	bne	.L4077
	ldr	r3, [r4, #16]
	cmp	r3, #0
	beq	.L4014
	mov	r8, r3
	ldr	r1, [r8], #4
	cmp	r1, #0
	bne	.L4074
	b	.L4014
.L4078:
	cmp	r0, #0
	bne	.L4072
	mov	r8, r6
.L4074:
	ldr	r0, [r4, #8]
.L4019:
	mov	r6, r8
	bl	device_create_file
	ldr	r1, [r6], #4
	cmp	r1, #0
	bne	.L4078
	cmp	r0, #0
	beq	.L4014
.L4072:
	ldr	r2, .L4079+20
	mov	r10, r6
	mov	r6, r0
	movw	r0, #:lower16:.LC262
	ldr	r3, [r4]
	sub	r5, r8, #4
	movt	r0, #:upper16:.LC262
	ldr	r8, [sp, #8]
	mov	r1, r2
	bl	printk
	ldr	r1, [r10, #-8]
.L4020:
	ldr	r3, [r4, #16]
	cmp	r5, r3
	bne	.L4021
	ldr	r3, [r4, #28]
	cmp	r3, #0
	beq	.L4013
	mov	r0, r4
	blx	r3
	b	.L4013
.L4004:
	ldr	r7, [r7, #208]
	cmp	r7, r1
	sub	r7, r7, #208
	beq	.L4003
.L4007:
	ldr	r2, [r7, #8]
	cmp	r5, r2
	bne	.L4004
	b	.L4003
.L4024:
	movw	r3, #514
	b	.L4022
.L4011:
	ldr	r3, [r4, #16]
	cmp	r3, #0
	beq	.L4014
	mov	r8, r3
	ldr	r1, [r8], #4
	cmp	r1, #0
	bne	.L4019
	b	.L4014
.L4002:
	mvn	r6, #18
	b	.L3998
.L4025:
	movw	r3, #515
	b	.L4022
.L4075:
	mov	r5, fp
	ldr	fp, [sp, #12]
	b	.L4006
.L4026:
	movw	r3, #518
	b	.L4022
.L4008:
	ldr	r0, [r7, #4]
	mvn	r6, #11
	bl	android_cleanup_functions
	b	.L3998
.L4027:
	mov	r3, #520
	b	.L4022
.L4028:
	movw	r3, #529
	b	.L4022
.L4033:
	mov	r3, #536
	b	.L4022
.L4029:
	movw	r3, #530
	b	.L4022
.L4030:
	movw	r3, #531
	b	.L4022
.L4031:
	mov	r3, #532
	b	.L4022
.L4032:
	movw	r3, #534
	b	.L4022
.L4034:
	movw	r3, #537
	b	.L4022
.L4035:
	mov	r3, #544
	b	.L4022
.L4036:
	movw	r3, #545
	b	.L4022
.L4037:
	movw	r3, #546
	b	.L4022
.L4038:
	movw	r3, #547
	b	.L4022
.L4039:
	mov	r3, #548
	b	.L4022
.L4040:
	movw	r3, #549
	b	.L4022
.L4041:
	movw	r3, #550
	b	.L4022
.L4042:
	movw	r3, #551
	b	.L4022
.L4043:
	mov	r3, #552
	b	.L4022
.L4044:
	movw	r3, #553
	b	.L4022
.L4045:
	mov	r3, #560
	b	.L4022
.L4046:
	movw	r3, #561
	b	.L4022
.L4047:
	movw	r3, #562
	b	.L4022
.L4048:
	movw	r3, #563
	b	.L4022
.L4077:
	ldr	r2, .L4079+20
	mov	r6, r0
	movw	r0, #:lower16:.LC261
	movt	r0, #:upper16:.LC261
	ldr	r3, [r4]
	ldr	r8, [sp, #8]
	mov	r1, r2
	bl	printk
.L4013:
	ldr	r3, [r4, #8]
	ldr	r0, [r8, #3260]
	ldr	r1, [r3, #296]
	bl	device_destroy
	mov	r3, #0
	ldr	r0, [r4, #12]
	str	r3, [r4, #8]
	bl	kfree
	ldr	r0, [r7, #4]
	bl	android_cleanup_functions
	b	.L3998
.L4076:
	ldr	r2, .L4079+20
	movw	r0, #:lower16:.LC260
	mov	r5, fp
	movt	r0, #:upper16:.LC260
	ldr	r3, [r4, #12]
	ldr	fp, [sp, #12]
	mov	r1, r2
	bl	printk
	mov	r3, #0
	ldr	r6, [r4, #8]
	ldr	r0, [r4, #12]
	str	r3, [r4, #8]
	bl	kfree
	ldr	r0, [r7, #4]
	bl	android_cleanup_functions
	cmp	r6, #0
	beq	.L4006
	b	.L3998
.L4021:
	ldr	r0, [r4, #8]
	bl	device_remove_file
	ldr	r1, [r5], #-4
	b	.L4020
.L4080:
	.align	2
.L4079:
	.word	.LANCHOR0+1356
	.word	.LANCHOR0+1100
	.word	.LANCHOR0+844
	.word	.LANCHOR2+1568
	.word	.LANCHOR0+196
	.word	.LANCHOR2+1544
	.fnend
	.size	android_bind, .-android_bind
	.section	.rodata.str1.4
	.align	2
.LC293:
	.ascii	"ACCESSORY=START\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_start_work, %function
acc_start_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r2, #:lower16:.LANCHOR1
	.save {lr}
	str	lr, [sp, #-4]!
	movw	r3, #:lower16:.LC293
	movt	r2, #:upper16:.LANCHOR1
	.pad #12
	sub	sp, sp, #12
	ldr	r0, [r2, #748]
	movt	r3, #:upper16:.LC293
	mov	ip, #0
	mov	r1, #2
	mov	r2, sp
	stm	sp, {r3, ip}
	add	r0, r0, #8
	bl	kobject_uevent_env
	add	sp, sp, #12
	@ sp needed
	ldr	pc, [sp], #4
	.fnend
	.size	acc_start_work, .-acc_start_work
	.section	.rodata.str1.4
	.align	2
.LC294:
	.ascii	"USB_STATE=DISCONNECTED\000"
	.align	2
.LC295:
	.ascii	"USB_STATE=CONNECTED\000"
	.align	2
.LC296:
	.ascii	"USB_STATE=CONFIGURED\000"
	.align	2
.LC297:
	.ascii	"USB_STATE=SUSPENDED\000"
	.align	2
.LC298:
	.ascii	"USB_STATE=RESUMED\000"
	.align	2
.LC299:
	.ascii	"low\000"
	.align	2
.LC300:
	.ascii	"<6>%s: %s: did not send uevent (%d %d %pK)\012\000"
	.align	2
.LC301:
	.ascii	"<6>%s: %s: sent uevent %s\012\000"
	.align	2
.LC302:
	.ascii	"<6>%s: %s: sent missed DISCONNECT event\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	android_work, %function
android_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 40
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r2, #:lower16:.LC294
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	movw	r3, #:lower16:.LC295
	strd	r6, [sp, #8]
	movt	r2, #:upper16:.LC294
	mov	r4, r0
	strd	r8, [sp, #16]
	movt	r3, #:upper16:.LC295
	movw	r1, #:lower16:.LC297
	str	lr, [sp, #24]
	ldr	r5, [r0, #-172]
	.pad #52
	sub	sp, sp, #52
	movw	r0, #:lower16:.LC296
	movt	r1, #:upper16:.LC297
	movt	r0, #:upper16:.LC296
	str	r2, [sp, #8]
	movw	r2, #:lower16:.LC298
	movt	r2, #:upper16:.LC298
	str	r3, [sp, #16]
	mov	r3, #0
	add	r6, r5, #60
	str	r3, [sp, #12]
	str	r0, [sp, #24]
	mov	r0, r6
	str	r3, [sp, #20]
	str	r3, [sp, #28]
	str	r1, [sp, #32]
	str	r3, [sp, #36]
	strd	r2, [sp, #40]
	bl	_raw_spin_lock_irqsave
	ldrb	r2, [r4, #-126]	@ zero_extendqisi2
	mov	r1, r0
	ldrb	r3, [r4, #-125]	@ zero_extendqisi2
	cmp	r3, r2
	beq	.L4084
	ldr	r3, [r5, #12]
	cmp	r3, #0
	beq	.L4085
	ldrb	r3, [r4, #-124]	@ zero_extendqisi2
	cmp	r3, #108
	beq	.L4143
.L4086:
	eor	r8, r2, #1
.L4088:
	cmp	r2, #0
	beq	.L4144
	movw	r5, #:lower16:.LANCHOR0
	mov	r3, #3
	movt	r5, #:upper16:.LANCHOR0
	add	r7, sp, #32
	str	r3, [r5, #3264]
.L4107:
	ldrb	r3, [r4, #-128]	@ zero_extendqisi2
	mov	r0, r6
	strb	r3, [r4, #-127]
	strb	r2, [r4, #-125]
	bl	_raw_spin_unlock_irqrestore
	cmn	r8, #1
	beq	.L4100
	ldr	r3, [r4, #-132]
	cmp	r3, #0
	addne	r9, sp, #16
	beq	.L4100
.L4114:
	movw	r6, #:lower16:.LANCHOR1
	movt	r6, #:upper16:.LANCHOR1
	ldr	r2, [r6, #1044]
	cmp	r2, r8
	beq	.L4101
.L4115:
	ldr	r1, [r3, #4]
	cmp	r1, #0
	beq	.L4101
	cmp	r8, #0
	sub	r0, r4, #116
	addne	r1, r1, #1
	mvneq	r1, #0
	bl	pm_qos_update_request
	str	r8, [r6, #1044]
.L4101:
	cmp	r7, r9
	bne	.L4100
.L4096:
	ldr	r3, [r5, #3268]
	cmp	r3, #0
	bne	.L4104
	mov	r7, r9
.L4100:
	ldr	r3, [r5, #3264]
	sub	r3, r3, #3
	cmp	r3, #1
	bls	.L4105
	ldr	r0, [r4, #-168]
	mov	r2, r7
	mov	r1, #2
	add	r0, r0, #8
	bl	kobject_uevent_env
	ldr	r3, [r5, #3264]
	str	r3, [r5, #3268]
.L4105:
	ldr	r2, .L4147
	movw	r0, #:lower16:.LC301
	movt	r0, #:upper16:.LC301
	ldr	r3, [r7]
	mov	r1, r2
	bl	printk
.L4083:
	add	sp, sp, #52
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L4084:
	ldr	r0, [r5, #12]
	cmp	r0, #0
	beq	.L4085
	ldrb	r2, [r4, #-128]	@ zero_extendqisi2
	movw	r5, #:lower16:.LANCHOR0
	mov	r0, r6
	movt	r5, #:upper16:.LANCHOR0
	strb	r2, [r4, #-127]
	strb	r3, [r4, #-125]
	mov	r3, #2
	str	r3, [r5, #3264]
	bl	_raw_spin_unlock_irqrestore
	ldr	r6, [r5, #3268]
	cmp	r6, #2
	beq	.L4145
.L4092:
	mov	r0, #50
	add	r7, sp, #24
	bl	msleep
	b	.L4100
.L4144:
	movw	r5, #:lower16:.LANCHOR0
	mov	r3, #4
	movt	r5, #:upper16:.LANCHOR0
	add	r7, sp, #40
	str	r3, [r5, #3264]
	b	.L4107
.L4085:
	ldrb	r3, [r4, #-128]	@ zero_extendqisi2
	ldrb	ip, [r4, #-127]	@ zero_extendqisi2
	cmp	ip, r3
	beq	.L4093
	cmp	r3, #0
	bne	.L4094
	movw	r5, #:lower16:.LANCHOR0
	mov	r0, r6
	strb	r3, [r4, #-127]
	movt	r5, #:upper16:.LANCHOR0
	strb	r2, [r4, #-125]
	str	r3, [r5, #3264]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r4, #-132]
	add	r7, sp, #8
	cmp	r3, #0
	addne	r9, sp, #16
	bne	.L4113
	b	.L4100
.L4143:
	ldrb	r3, [r4, #-123]	@ zero_extendqisi2
	cmp	r3, #111
	bne	.L4086
	ldrb	r3, [r4, #-122]	@ zero_extendqisi2
	cmp	r3, #119
	mvneq	r8, #0
	bne	.L4086
	b	.L4088
.L4094:
	ldrb	r0, [r4, #-124]	@ zero_extendqisi2
	movw	r5, #:lower16:.LANCHOR0
	mov	ip, #1
	movt	r5, #:upper16:.LANCHOR0
	str	ip, [r5, #3264]
	cmp	r0, #108
	beq	.L4146
.L4108:
	mov	r8, #1
	mov	r0, r6
	strb	r8, [r4, #-127]
	strb	r2, [r4, #-125]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r4, #-132]
	cmp	r3, #0
	beq	.L4142
	movw	r6, #:lower16:.LANCHOR1
	movt	r6, #:upper16:.LANCHOR1
	ldr	r2, [r6, #1044]
	cmp	r2, #1
	addne	r9, sp, #16
	movne	r7, r9
	bne	.L4115
.L4142:
	add	r9, sp, #16
	b	.L4096
.L4146:
	ldrb	r0, [r4, #-123]	@ zero_extendqisi2
	cmp	r0, #111
	bne	.L4108
	ldrb	r0, [r4, #-122]	@ zero_extendqisi2
	cmp	r0, #119
	bne	.L4108
	mov	r0, r6
	strb	r3, [r4, #-127]
	strb	r2, [r4, #-125]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r4, #-132]
	cmp	r3, #0
	addne	r9, sp, #16
	movne	r7, r9
	beq	.L4142
.L4113:
	mov	r8, #0
	b	.L4114
.L4104:
	ldr	r2, .L4147
	movw	r0, #:lower16:.LC302
	mov	r7, r9
	movt	r0, #:upper16:.LC302
	mov	r1, r2
	bl	printk
	ldr	r0, [r4, #-168]
	add	r2, sp, #8
	mov	r1, #2
	add	r0, r0, #8
	bl	kobject_uevent_env
	mov	r0, #20
	bl	msleep
	b	.L4100
.L4093:
	mov	r0, r6
	strb	ip, [r4, #-127]
	strb	r2, [r4, #-125]
	bl	_raw_spin_unlock_irqrestore
	ldrb	r1, [r4, #-127]	@ zero_extendqisi2
	movw	r0, #:lower16:.LC300
	ldr	r2, .L4147
	movt	r0, #:upper16:.LC300
	ldr	ip, [r5, #12]
	ldrb	r3, [r4, #-128]	@ zero_extendqisi2
	stm	sp, {r1, ip}
	mov	r1, r2
	bl	printk
	b	.L4083
.L4145:
	ldr	r2, .L4147
	movw	r0, #:lower16:.LC302
	movt	r0, #:upper16:.LC302
	mov	r1, r2
	bl	printk
	ldr	r0, [r4, #-168]
	mov	r1, r6
	add	r2, sp, #8
	add	r0, r0, #8
	bl	kobject_uevent_env
	mov	r0, #20
	bl	msleep
	b	.L4092
.L4148:
	.align	2
.L4147:
	.word	.LANCHOR2+1600
	.fnend
	.size	android_work, .-android_work
	.section	.rodata.str1.4
	.align	2
.LC303:
	.ascii	"<6>hid keyboard\012\000"
	.align	2
.LC304:
	.ascii	"<6>%s: %s: hid_function_bind_config keyboard failed"
	.ascii	": %d\012\000"
	.align	2
.LC305:
	.ascii	"<6>hid mouse\012\000"
	.align	2
.LC306:
	.ascii	"<6>%s: %s: hid_function_bind_config mouse failed: %"
	.ascii	"d\012\000"
	.section	.text.unlikely
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	hid_function_bind_config, %function
hid_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC303
	push	{r4, r5, r6, lr}
	.save {r4, r5, r6, lr}
	movt	r0, #:upper16:.LC303
	mov	r5, r1
	bl	printk
	ldr	r1, .L4156
	mov	r0, r5
	mov	r2, #0
	bl	hidg_bind_config
	subs	r4, r0, #0
	beq	.L4150
	ldr	r2, .L4156+4
	movw	r0, #:lower16:.LC304
	mov	r3, r4
	movt	r0, #:upper16:.LC304
	mov	r1, r2
	bl	printk
	b	.L4149
.L4150:
	movw	r0, #:lower16:.LC305
	movt	r0, #:upper16:.LC305
	bl	printk
	ldr	r1, .L4156+8
	mov	r0, r5
	mov	r2, #1
	bl	hidg_bind_config
	subs	r4, r0, #0
	beq	.L4149
	ldr	r2, .L4156+4
	movw	r0, #:lower16:.LC306
	mov	r3, r4
	movt	r0, #:upper16:.LC306
	mov	r1, r2
	bl	printk
.L4149:
	mov	r0, r4
	pop	{r4, r5, r6, pc}
.L4157:
	.align	2
.L4156:
	.word	.LANCHOR1+1048
	.word	.LANCHOR2+1616
	.word	.LANCHOR1+1120
	.fnend
	.size	hid_function_bind_config, .-hid_function_bind_config
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	hid_function_cleanup, %function
hid_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	b	ghid_cleanup
	.fnend
	.size	hid_function_cleanup, .-hid_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	hid_function_init, %function
hid_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r3, r1
	mov	r1, #2
	ldr	r0, [r3]
	b	ghid_setup
	.fnend
	.size	hid_function_init, .-hid_function_init
	.section	.rodata.str1.4
	.align	2
.LC307:
	.ascii	"<3>acc_complete_send_hid_event, err %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_complete_send_hid_event, %function
acc_complete_send_hid_event:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	mov	r2, r1
	ldr	r1, [r1, #44]
	ldr	r0, [r2, #32]
	ldr	r3, [r2, #48]
	cmp	r1, #0
	bne	.L4164
	mov	ip, #1
	.save {lr}
	str	lr, [sp, #-4]!
	.pad #12
	sub	sp, sp, #12
	ldr	r2, [r2]
	ldr	r0, [r0, #8]
	str	ip, [sp]
	bl	hid_report_raw_event
	add	sp, sp, #12
	@ sp needed
	ldr	pc, [sp], #4
.L4164:
	movw	r0, #:lower16:.LC307
	movt	r0, #:upper16:.LC307
	b	printk
	.fnend
	.size	acc_complete_send_hid_event, .-acc_complete_send_hid_event
	.section	.rodata.str1.4
	.align	2
.LC308:
	.ascii	"<3>can't add hid device: %d\012\000"
	.align	2
.LC309:
	.ascii	"<3>can't add HID device %pK\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_hid_work, %function
acc_hid_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	r3, #:upper16:.LANCHOR0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r6, [r3, #824]
	.pad #28
	sub	sp, sp, #28
	add	r8, sp, #8
	str	r8, [sp, #8]
	add	r7, r6, #80
	str	r8, [sp, #12]
	add	r5, r6, #1760
	mov	r0, r7
	add	r5, r5, #4
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r6, #1764]
	mov	r1, r0
	ldr	r2, [r3]
	cmp	r3, r5
	movne	ip, r2
	bne	.L4166
	b	.L4171
.L4169:
	cmp	r5, ip
	ldr	r2, [r2]
	beq	.L4171
.L4170:
	mov	r3, ip
	mov	ip, r2
.L4166:
	ldr	lr, [r3, #24]
	ldr	r4, [r3, #28]
	cmp	r4, lr
	bne	.L4169
	ldr	lr, [r3, #4]
	cmp	r5, ip
	str	lr, [r2, #4]
	str	r2, [lr]
	ldr	lr, [sp, #8]
	str	r3, [lr, #4]
	str	lr, [r3]
	str	r8, [r3, #4]
	str	r3, [sp, #8]
	ldr	r2, [r2]
	bne	.L4170
.L4171:
	ldr	r2, [r6, #1772]
	add	r3, r6, #1760
	add	r3, r3, #12
	cmp	r3, r2
	beq	.L4190
	ldr	r0, [r6, #1776]
	add	r9, sp, #16
	str	r2, [sp, #16]
	str	r0, [sp, #20]
	str	r9, [r2, #4]
	ldr	r2, [sp, #20]
	str	r9, [r2]
	str	r3, [r6, #1772]
	str	r3, [r6, #1776]
.L4172:
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	ldr	fp, [sp, #8]
	cmp	fp, r8
	ldr	r5, [fp]
	beq	.L4181
	add	r10, r6, #1744
	movw	r3, #:lower16:.LC309
	movt	r3, #:upper16:.LC309
	add	r10, r10, #12
	str	r3, [sp, #4]
.L4173:
	bl	hid_allocate_device
	cmn	r0, #4096
	movw	r2, #:lower16:.LANCHOR1
	ldr	ip, .L4194
	movt	r2, #:upper16:.LANCHOR1
	mvn	r1, #0
	mov	lr, #3
	mov	r4, r0
	bhi	.L4191
	ldr	r2, [r2, #748]
	strh	lr, [r0, #32]	@ movhi
	str	r1, [r0, #36]
	str	r1, [r0, #40]
	str	r2, [r0, #3200]
	str	ip, [r0, #3556]
	str	fp, [r0, #3852]
	bl	hid_add_device
	subs	r1, r0, #0
	streq	r4, [fp, #8]
	bne	.L4192
.L4178:
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	ip, [fp]
	mov	r1, r0
	mov	r0, r7
	ldr	r2, [fp, #4]
	str	r2, [ip, #4]
	str	ip, [r2]
	ldr	r2, [r6, #1756]
	str	fp, [r2, #4]
	stm	fp, {r2, r10}
	str	fp, [r6, #1756]
	bl	_raw_spin_unlock_irqrestore
.L4180:
	cmp	r5, r8
	mov	fp, r5
	ldr	r5, [r5]
	bne	.L4173
.L4181:
	ldr	r4, [sp, #16]
	ldr	r5, [r4]
	cmp	r4, r9
	movne	r8, #256
	movne	r7, #512
	movne	r6, r5
	bne	.L4174
	b	.L4165
.L4193:
	mov	r4, r6
	mov	r6, r5
.L4174:
	ldr	r3, [r4, #4]
	str	r3, [r5, #4]
	str	r5, [r3]
	ldr	r0, [r4, #8]
	str	r8, [r4]
	str	r7, [r4, #4]
	cmp	r0, #0
	beq	.L4182
	bl	hid_destroy_device
.L4182:
	ldr	r0, [r4, #20]
	bl	kfree
	mov	r0, r4
	bl	kfree
	cmp	r6, r9
	ldr	r5, [r5]
	bne	.L4193
.L4165:
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L4191:
	cmp	r0, #0
	beq	.L4178
.L4177:
	mov	r1, fp
	ldr	r0, [sp, #4]
	bl	printk
	ldr	r0, [fp, #20]
	bl	kfree
	mov	r0, fp
	bl	kfree
	b	.L4180
.L4190:
	add	r9, sp, #16
	str	r9, [sp, #16]
	str	r9, [sp, #20]
	b	.L4172
.L4192:
	movw	r0, #:lower16:.LC308
	movt	r0, #:upper16:.LC308
	bl	printk
	mov	r0, r4
	bl	hid_destroy_device
	b	.L4177
.L4195:
	.align	2
.L4194:
	.word	.LANCHOR1+1180
	.fnend
	.size	acc_hid_work, .-acc_hid_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_hid_parse, %function
acc_hid_parse:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	ldr	r3, [r0, #3852]
	ldr	r1, [r3, #20]
	ldr	r2, [r3, #24]
	bl	hid_parse_report
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, #0
	ldr	pc, [sp], #4
	.fnend
	.size	acc_hid_parse, .-acc_hid_parse
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_show_file, %function
fsg_show_file:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r2
	mov	r5, r0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	dev_get_drvdata
	mov	r6, r0
	bl	down_read
	ldr	r0, [r5, #-48]
	cmp	r0, #0
	moveq	r5, r0
	strbeq	r0, [r4]
	beq	.L4201
	add	r0, r0, #8
	movw	r2, #4095
	mov	r1, r4
	bl	d_path
	cmn	r0, #4096
	mov	r5, r0
	bhi	.L4201
	bl	strlen
	mov	r7, r0
	mov	r1, r5
	mov	r2, r7
	mov	r0, r4
	bl	memmove
	add	r5, r7, #1
	mov	r2, #10
	mov	r3, #0
	strb	r2, [r4, r7]
	strb	r3, [r4, r5]
.L4201:
	mov	r0, r6
	bl	up_read
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
	.fnend
	.size	fsg_show_file, .-fsg_show_file
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_store_ro, %function
fsg_store_ro:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	mov	r4, r2
	strd	r6, [sp, #8]
	mov	r7, r3
	mov	r6, r0
	str	lr, [sp, #16]
	.pad #12
	sub	sp, sp, #12
	bl	dev_get_drvdata
	mov	r5, r0
	add	r2, sp, #4
	mov	r0, r4
	mov	r1, #2
	bl	kstrtouint
	subs	r4, r0, #0
	beq	.L4208
.L4203:
	mov	r0, r4
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L4208:
	mov	r0, r5
	bl	down_read
	ldr	r3, [r6, #-48]
	cmp	r3, #0
	mvnne	r4, #15
	beq	.L4209
.L4205:
	mov	r0, r5
	bl	up_read
	b	.L4203
.L4209:
	ldr	r2, [sp, #4]
	mov	r4, r7
	ldrb	r3, [r6, #-24]	@ zero_extendqisi2
	and	r2, r2, #1
	bfi	r3, r2, #1, #1
	bfi	r3, r2, #0, #1
	strb	r3, [r6, #-24]
	b	.L4205
	.fnend
	.size	fsg_store_ro, .-fsg_store_ro
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_store_cdrom, %function
fsg_store_cdrom:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	mov	r4, r2
	strd	r6, [sp, #8]
	mov	r7, r3
	mov	r6, r0
	str	lr, [sp, #16]
	.pad #12
	sub	sp, sp, #12
	bl	dev_get_drvdata
	mov	r5, r0
	add	r2, sp, #4
	mov	r0, r4
	mov	r1, #2
	bl	kstrtouint
	subs	r4, r0, #0
	beq	.L4215
.L4210:
	mov	r0, r4
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L4215:
	mov	r0, r5
	bl	down_read
	ldr	r3, [r6, #-48]
	cmp	r3, #0
	mvnne	r4, #15
	beq	.L4216
.L4212:
	mov	r0, r5
	bl	up_read
	b	.L4210
.L4216:
	ldrb	r3, [r6, #-24]	@ zero_extendqisi2
	mov	r4, r7
	ldr	r2, [sp, #4]
	bfi	r3, r2, #3, #1
	strb	r3, [r6, #-24]
	b	.L4212
	.fnend
	.size	fsg_store_cdrom, .-fsg_store_cdrom
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_store_nofua, %function
fsg_store_nofua:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	mov	r1, #2
	mov	r4, r0
	str	lr, [sp, #8]
	.pad #12
	sub	sp, sp, #12
	mov	r0, r2
	add	r2, sp, #4
	mov	r5, r3
	bl	kstrtouint
	cmp	r0, #0
	bne	.L4217
	ldr	r2, [sp, #4]
	cmp	r2, #0
	beq	.L4221
.L4219:
	ldrb	r3, [r4, #-24]	@ zero_extendqisi2
	mov	r0, r5
	bfi	r3, r2, #7, #1
	strb	r3, [r4, #-24]
.L4217:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	add	sp, sp, #8
	ldr	pc, [sp], #4
.L4221:
	ldrb	r3, [r4, #-24]	@ zero_extendqisi2
	tst	r3, #128
	beq	.L4219
	ldr	r0, [r4, #-48]
	ubfx	r3, r3, #1, #1
	cmp	r0, #0
	moveq	r3, #1
	cmp	r3, #0
	bne	.L4219
	mov	r1, #1
	bl	vfs_fsync
	ldr	r2, [sp, #4]
	b	.L4219
	.fnend
	.size	fsg_store_nofua, .-fsg_store_nofua
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_store_file, %function
fsg_store_file:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r3
	mov	r5, r0
	strd	r6, [sp, #8]
	mov	r7, r2
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	dev_get_drvdata
	cmp	r4, #0
	mov	r6, r0
	beq	.L4223
	sub	r3, r4, #1
	ldrb	r2, [r7, r3]	@ zero_extendqisi2
	cmp	r2, #10
	moveq	r2, #0
	strbeq	r2, [r7, r3]
	bl	down_write
	ldr	r0, [r5, #-48]
	cmp	r0, #0
	beq	.L4230
	bl	fput
	mov	r3, #14848
	mov	r2, #0
	movt	r3, 2
	str	r2, [r5, #-48]
	str	r3, [r5, #-12]
.L4230:
	ldrb	r3, [r7]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L4234
.L4226:
	mov	r0, r6
	bl	up_write
.L4225:
	mov	r7, r4
.L4222:
	mov	r0, r7
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L4223:
	bl	down_write
	ldr	r0, [r5, #-48]
	cmp	r0, #0
	beq	.L4226
	bl	fput
	mov	r3, #14848
	str	r4, [r5, #-48]
	movt	r3, 2
	str	r3, [r5, #-12]
	b	.L4226
.L4234:
	mov	r1, r7
	sub	r0, r5, #48
	bl	fsg_lun_open
	subs	r7, r0, #0
	bne	.L4227
	mov	r3, #10240
	mov	r0, r6
	movt	r3, 6
	str	r3, [r5, #-12]
	bl	up_write
	b	.L4225
.L4227:
	mov	r0, r6
	bl	up_write
	cmp	r7, #0
	blt	.L4222
	b	.L4225
	.fnend
	.size	fsg_store_file, .-fsg_store_file
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bulk_out_complete, %function
bulk_out_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r2, [r1, #44]
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	ldr	r6, [r1, #32]
	str	lr, [sp, #12]
	ldr	r4, [r0]
	cmn	r2, #104
	beq	.L4245
.L4236:
	.syntax divided
@ 600 "drivers/usb/gadget/f_mass_storage.c" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	add	r5, r4, #44
	mov	r0, r5
	bl	_raw_spin_lock
	mov	r2, #0
	mov	r3, #1
	str	r3, [r6, #4]
	str	r2, [r6, #28]
	.syntax divided
@ 518 "drivers/usb/gadget/f_mass_storage.c" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r0, [r4, #168]
	str	r3, [r4, #148]
	cmp	r0, r2
	beq	.L4237
	bl	wake_up_process
.L4237:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock
.L4245:
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L4236
	blx	r3
	b	.L4236
	.fnend
	.size	bulk_out_complete, .-bulk_out_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bulk_in_complete, %function
bulk_in_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r2, [r1, #44]
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	ldr	r6, [r1, #32]
	str	lr, [sp, #12]
	ldr	r4, [r0]
	cmn	r2, #104
	beq	.L4256
.L4247:
	.syntax divided
@ 579 "drivers/usb/gadget/f_mass_storage.c" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	add	r5, r4, #44
	mov	r0, r5
	bl	_raw_spin_lock
	mov	r3, #0
	str	r3, [r6, #4]
	str	r3, [r6, #20]
	.syntax divided
@ 518 "drivers/usb/gadget/f_mass_storage.c" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r0, [r4, #168]
	mov	r3, #1
	str	r3, [r4, #148]
	cmp	r0, #0
	beq	.L4248
	bl	wake_up_process
.L4248:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock
.L4256:
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L4247
	blx	r3
	b	.L4247
	.fnend
	.size	bulk_in_complete, .-bulk_in_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	sleep_thread, %function
sleep_thread:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r3, sp
	add	r5, r0, #44
	strd	r6, [sp, #8]
	mov	r7, r0
	strd	r8, [sp, #16]
	mov	r8, #57344
	movw	r9, #:lower16:system_freezing_cnt
	movt	r8, 65535
	movt	r9, #:upper16:system_freezing_cnt
	str	r10, [sp, #24]
	and	r6, r3, r8
	str	lr, [sp, #28]
	b	.L4262
.L4258:
	mov	r3, #1
	str	r3, [r0]
	.syntax divided
@ 730 "drivers/usb/gadget/f_mass_storage.c" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r2, [r6, #12]
	mov	r0, r5
	ldr	r3, [r2, #4]
	ldr	r3, [r3]
	ands	r4, r3, #1
	bne	.L4263
	bl	_raw_spin_lock_irq
	ldr	r3, [r7, #148]
	mov	r0, r5
	cmp	r3, #0
	bne	.L4269
	bl	_raw_spin_unlock_irq
	bl	schedule
.L4262:
	ldr	r3, [r9]
	ldr	r0, [r6, #12]
	cmp	r3, #0
	beq	.L4258
	bl	freezing_slow_path
	cmp	r0, #0
	bne	.L4259
	ldr	r0, [r6, #12]
	b	.L4258
.L4259:
	mov	r0, #0
	bl	__refrigerator
	ldr	r0, [r6, #12]
	b	.L4258
.L4263:
	mvn	r4, #3
.L4260:
	mov	r6, #0
	mov	r0, r5
	str	r6, [r2]
	bl	_raw_spin_lock_irq
	mov	r0, r5
	str	r6, [r7, #148]
	bl	_raw_spin_unlock_irq
	.syntax divided
@ 747 "drivers/usb/gadget/f_mass_storage.c" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L4269:
	bl	_raw_spin_unlock_irq
	mov	r3, sp
	and	r8, r8, r3
	ldr	r2, [r8, #12]
	b	.L4260
	.fnend
	.size	sleep_thread, .-sleep_thread
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	receive_file_work, %function
receive_file_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 40
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #44
	sub	sp, sp, #44
	.syntax divided
@ 853 "drivers/usb/gadget/f_mtp.c" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	ldr	fp, [r0, #16]
	ldrd	r6, [r0, #32]
	ldrd	r2, [r0, #24]
	cmp	r6, #0
	sbcs	r1, r7, #0
	strd	r2, [sp, #8]
	blt	.L4271
	orrs	r3, r6, r7
	beq	.L4273
	mov	r3, sp
	cmp	r6, #1
	bic	r3, r3, #8128
	mov	r8, #0
	bic	r3, r3, #63
	mov	r10, r8
	str	r3, [sp, #4]
	sbcs	r3, r7, #0
	blt	.L4275
.L4307:
	movw	r9, #:lower16:.LANCHOR1
	movt	r9, #:upper16:.LANCHOR1
.L4294:
	add	r3, r10, #40
	ldr	r1, [r9, #668]
	mov	ip, #0
	add	r3, r5, r3, lsl #2
	mov	r2, #208
	eor	r10, r10, #1
	ldr	r4, [r3, #-192]
	str	r1, [r4, #4]
	ldr	r0, [r5, #-104]
	mov	r1, r4
	str	ip, [r5, #-24]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L4304
	cmp	r8, #0
	beq	.L4279
.L4295:
	add	r3, sp, #8
	mov	r0, fp
	ldr	r1, [r8]
	ldr	r2, [r8, #48]
	bl	vfs_write
	ldr	r3, [r8, #48]
	cmp	r3, r0
	bne	.L4304
	cmp	r4, #0
	beq	.L4282
.L4296:
	ldr	r3, [r5, #-96]
	ldr	r2, [r5, #-24]
	cmp	r2, #0
	bne	.L4284
	cmp	r3, #2
	beq	.L4305
.L4284:
	cmp	r3, #0
	cmpne	r3, #3
	moveq	r0, #1
	movne	r0, #0
	beq	.L4306
	ldr	r1, [r4, #4]
	mov	r3, #0
	cmp	r6, r1
	sbcs	r3, r7, r3
	bge	.L4289
	ldr	r8, [r4, #48]
	cmp	r6, r8
	sbcs	r3, r7, r0
	movlt	r8, r6
	mov	r3, r8
	str	r8, [r4, #48]
.L4291:
	subs	r6, r6, r3
	sbc	r7, r7, #0
	cmp	r1, r3
	bhi	.L4293
	cmp	r6, #1
	mov	r8, r4
	sbcs	r3, r7, #0
	bge	.L4307
.L4275:
	cmp	r8, #0
	mov	r4, #0
	bne	.L4295
.L4273:
	mov	r6, #0
.L4278:
	str	r6, [r5, #52]
	.syntax divided
@ 941 "drivers/usb/gadget/f_mtp.c" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
.L4270:
	add	sp, sp, #44
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L4293:
	mov	r8, r4
	mov	r6, #0
	mov	r7, #0
	b	.L4275
.L4289:
	mov	r3, #0
	mvn	r2, #0
	cmp	r7, r3
	ldr	r3, [r4, #48]
	cmpeq	r6, r2
	bne	.L4291
	cmp	r1, r3
	bhi	.L4293
	movw	r9, #:lower16:.LANCHOR1
	mov	r8, r4
	movt	r9, #:upper16:.LANCHOR1
	b	.L4294
.L4279:
	cmp	r4, #0
	bne	.L4296
	mov	r8, #0
	b	.L4294
.L4282:
	cmp	r6, #1
	sbcs	r3, r7, #0
	blt	.L4273
	movw	r9, #:lower16:.LANCHOR1
	mov	r8, #0
	movt	r9, #:upper16:.LANCHOR1
	b	.L4294
.L4305:
	ldr	r9, [sp, #4]
	movw	r3, #:lower16:autoremove_wake_function
	add	r1, sp, #32
	movt	r3, #:upper16:autoremove_wake_function
	sub	r8, r5, #68
	str	r3, [sp, #28]
	ldr	r0, [r9, #12]
	str	r2, [sp, #20]
	str	r0, [sp, #24]
	str	r1, [sp, #32]
	str	r1, [sp, #36]
	b	.L4286
.L4308:
	bl	schedule
.L4286:
	mov	r2, #1
	add	r1, sp, #20
	mov	r0, r8
	bl	prepare_to_wait
	ldr	r3, [r5, #-24]
	cmp	r3, #0
	bne	.L4285
	ldr	r3, [r5, #-96]
	cmp	r3, #2
	bne	.L4285
	ldr	r3, [r9, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L4308
.L4285:
	add	r1, sp, #20
	mov	r0, r8
	bl	finish_wait
	ldr	r3, [r5, #-96]
	b	.L4284
.L4304:
	ldr	r3, [r5, #-96]
	cmp	r3, #0
	movne	r3, #4
	mvneq	r6, #4
	mvnne	r6, #4
	strne	r3, [r5, #-96]
	b	.L4278
.L4271:
	mvn	r3, #21
	str	r3, [r0, #52]
	b	.L4270
.L4306:
	ldr	r2, [r5, #-24]
	cmp	r3, #0
	mvneq	r6, #4
	mvnne	r6, #124
	cmp	r2, #0
	bne	.L4278
	ldr	r0, [r5, #-104]
	mov	r1, r4
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	b	.L4278
	.fnend
	.size	receive_file_work, .-receive_file_work
	.section	.rodata.str1.4
	.align	2
.LC310:
	.ascii	"<6>unloading\012\000"
	.section	.text.unlikely
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_function_cleanup, %function
ffs_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, lr}
	.save {r4, lr}
	mov	r4, r0
	movw	r0, #:lower16:.LC310
	movt	r0, #:upper16:.LC310
	bl	printk
	ldr	r0, .L4311
	bl	unregister_filesystem
	ldr	r0, [r4, #4]
	pop	{r4, lr}
	b	kfree
.L4312:
	.align	2
.L4311:
	.word	.LANCHOR1+1208
	.fnend
	.size	ffs_function_cleanup, .-ffs_function_cleanup
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	__ffs_ep0_queue_wait, %function
__ffs_ep0_queue_wait:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	add	r0, r0, #120
	strd	r6, [sp, #8]
	mov	r6, r2
	mov	r7, r1
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrh	r3, [r0, #-2]
	ldr	r5, [r0, #-88]
	cmp	r3, r2
	ldrb	r2, [r5, #26]	@ zero_extendqisi2
	movls	r3, #0
	movhi	r3, #1
	bfi	r2, r3, #1, #1
	strb	r2, [r5, #26]
	bl	_raw_spin_unlock_irq
	cmp	r7, #0
	str	r7, [r5]
	str	r6, [r5, #4]
	beq	.L4318
.L4314:
	ldr	r3, [r4]
	mov	r0, #0
	mov	r2, #32
	mov	r1, r5
	str	r0, [r4, #36]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L4313
	add	r0, r4, #36
	bl	wait_for_completion_interruptible
	subs	r3, r0, #0
	bne	.L4319
	ldr	r0, [r4, #52]
	str	r3, [r4, #100]
.L4313:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L4318:
	movw	r3, #47806
	movt	r3, 57005
	str	r3, [r5]
	b	.L4314
.L4319:
	ldr	r3, [r4]
	mov	r1, r5
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	mvn	r0, #3
	b	.L4313
	.fnend
	.size	__ffs_ep0_queue_wait, .-__ffs_ep0_queue_wait
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_ep0_complete, %function
ffs_ep0_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r0, [r1, #32]
	add	r0, r0, #36
	b	complete_all
	.fnend
	.size	ffs_ep0_complete, .-ffs_ep0_complete
	.section	.rodata.str1.4
	.align	2
.LC311:
	.ascii	"<6>file system registered\012\000"
	.align	2
.LC312:
	.ascii	"<3>failed registering file system (%d)\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_function_init, %function
ffs_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	movt	r3, #:upper16:kmalloc_caches
	str	lr, [sp, #4]
	ldr	r0, [r3, #24]
	cmp	r0, #0
	moveq	r3, #16
	streq	r3, [r4, #4]
	beq	.L4323
	movw	r1, #32976
	bl	kmem_cache_alloc
	cmp	r0, #0
	str	r0, [r4, #4]
	beq	.L4326
.L4323:
	ldr	r0, .L4328
	bl	register_filesystem
	subs	r4, r0, #0
	bne	.L4325
	movw	r0, #:lower16:.LC311
	movt	r0, #:upper16:.LC311
	bl	printk
	b	.L4321
.L4326:
	mvn	r4, #11
.L4321:
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L4325:
	movw	r0, #:lower16:.LC312
	mov	r1, r4
	movt	r0, #:upper16:.LC312
	bl	printk
	b	.L4321
.L4329:
	.align	2
.L4328:
	.word	.LANCHOR1+1208
	.fnend
	.size	ffs_function_init, .-ffs_function_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	qdss_eps_disable, %function
qdss_eps_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldrb	r3, [r0, #184]	@ zero_extendqisi2
	tst	r3, #2
	beq	.L4331
	ldr	r0, [r0, #96]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldrb	r2, [r4, #184]	@ zero_extendqisi2
	bfc	r2, #1, #1
	uxtb	r3, r2
	strb	r2, [r4, #184]
.L4331:
	tst	r3, #4
	beq	.L4332
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldrb	r2, [r4, #184]	@ zero_extendqisi2
	bfc	r2, #2, #1
	uxtb	r3, r2
	strb	r2, [r4, #184]
.L4332:
	tst	r3, #1
	beq	.L4330
	ldr	r0, [r4, #100]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldrb	r3, [r4, #184]	@ zero_extendqisi2
	bfc	r3, #0, #1
	strb	r3, [r4, #184]
.L4330:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	qdss_eps_disable, .-qdss_eps_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	qdss_disable, %function
qdss_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	add	r5, r0, #180
	mov	r4, r0
	mov	r0, r5
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #84]
	mov	r1, r0
	cmp	r3, #0
	beq	.L4347
	mov	r3, #0
	mov	r0, r5
	str	r3, [r4, #84]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r4
	bl	qdss_eps_disable
	add	r1, r4, #164
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	ldr	r0, [r4, #188]
	ldrd	r4, [sp]
	add	sp, sp, #16
	b	queue_work
.L4347:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock_irqrestore
	.fnend
	.size	qdss_disable, .-qdss_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_disable, %function
audio_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldrb	r3, [r0, #144]	@ zero_extendqisi2
	cmp	r3, #0
	bxeq	lr
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r0, [r0, #96]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	mov	r3, #0
	strb	r3, [r4, #144]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	audio_disable, .-audio_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	__ffs_data_do_entity, %function
__ffs_data_do_entity:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	cmp	r0, #2
	beq	.L4358
	cmp	r0, #3
	beq	.L4359
	cmp	r0, #1
	beq	.L4361
	mov	r0, #0
	bx	lr
.L4358:
	ldrb	r2, [r1]	@ zero_extendqisi2
	mov	r0, #0
	ldrh	r1, [r3, #180]
	cmp	r1, r2
	strhcc	r2, [r3, #180]	@ movhi
	bx	lr
.L4361:
	ldrb	r2, [r1]	@ zero_extendqisi2
	mov	r0, #0
	ldrh	r1, [r3, #182]
	cmp	r1, r2
	addls	r2, r2, #1
	strhls	r2, [r3, #182]	@ movhi
	bx	lr
.L4359:
	ldrb	r2, [r1]	@ zero_extendqisi2
	mov	r0, #0
	ldrh	r1, [r3, #184]
	and	r2, r2, #15
	cmp	r2, r1
	strhgt	r2, [r3, #184]	@ movhi
	bx	lr
	.fnend
	.size	__ffs_data_do_entity, .-__ffs_data_do_entity
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acm_complete_set_line_coding, %function
acm_complete_set_line_coding:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r2, [r1, #44]
	cmp	r2, #0
	bne	.L4362
	ldr	r2, [r1, #48]
	cmp	r2, #7
	beq	.L4364
	ldr	r3, [r0, #8]
	mov	r1, #1
	ldr	r3, [r3, #24]
	bx	r3
.L4364:
	ldr	r2, [r1]
	ldr	r1, [r0]
	ldr	r0, [r2]	@ unaligned
	add	r3, r1, #160
	str	r0, [r1, #160]
	ldrh	r1, [r2, #4]	@ unaligned
	strh	r1, [r3, #4]	@ movhi
	ldrb	r2, [r2, #6]	@ zero_extendqisi2
	strb	r2, [r3, #6]
.L4362:
	bx	lr
	.fnend
	.size	acm_complete_set_line_coding, .-acm_complete_set_line_coding
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_hid_probe, %function
acc_hid_probe:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	hid_open_report
	subs	r4, r0, #0
	bne	.L4365
	ldr	r3, [r5, #3556]
	mov	r0, r5
	ldr	r3, [r3]
	blx	r3
	subs	r4, r0, #0
	beq	.L4371
.L4365:
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4371:
	mov	r1, #45
	mov	r0, r5
	bl	hid_connect
	subs	r4, r0, #0
	beq	.L4365
	ldr	r3, [r5, #3556]
	mov	r0, r5
	ldr	r3, [r3, #4]
	blx	r3
	b	.L4365
	.fnend
	.size	acc_hid_probe, .-acc_hid_probe
	.section	.text.unlikely
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_free_ctrl_pkt.part.0, %function
mbim_free_ctrl_pkt.part.0:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, lr}
	.save {r4, lr}
	mov	r4, r0
	ldr	r0, [r0]
	bl	kfree
	mov	r0, r4
	pop	{r4, lr}
	b	kfree
	.fnend
	.size	mbim_free_ctrl_pkt.part.0, .-mbim_free_ctrl_pkt.part.0
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_clear_queues, %function
mbim_clear_queues:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, r7, r8, r9, r10, lr}
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	add	r7, r0, #196
	mov	r6, r0
	mov	r4, r0
	mov	r0, r7
	mov	r8, #256
	bl	_raw_spin_lock
	ldr	r3, [r6, #200]!
	mov	r9, #512
	ldr	r5, [r3]
.L4375:
	cmp	r3, r6
	beq	.L4388
	ldm	r3, {r1, r2}
	subs	r0, r3, #8
	str	r2, [r1, #4]
	str	r1, [r2]
	strd	r8, [r3]
	beq	.L4376
	bl	mbim_free_ctrl_pkt.part.0
.L4376:
	mov	r3, r5
	ldr	r5, [r5]
	b	.L4375
.L4388:
	ldr	r3, [r4, #208]!
	mov	r8, #256
	mov	r6, #512
	ldr	r5, [r3]
.L4378:
	cmp	r3, r4
	beq	.L4389
	ldm	r3, {r1, r2}
	subs	r0, r3, #8
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r8, [r3]
	str	r6, [r3, #4]
	beq	.L4379
	bl	mbim_free_ctrl_pkt.part.0
.L4379:
	mov	r3, r5
	ldr	r5, [r5]
	b	.L4378
.L4389:
	mov	r0, r7
	pop	{r4, r5, r6, r7, r8, r9, r10, lr}
	b	_raw_spin_unlock
	.fnend
	.size	mbim_clear_queues, .-mbim_clear_queues
	.section	.rodata.str1.4
	.align	2
.LC313:
	.ascii	"<3>%s: Received NULL mbim pointer\012\000"
	.align	2
.LC314:
	.ascii	"<3>%s: given pkt size too big:%d > max_pkt_size:%d\012"
	.ascii	"\000"
	.align	2
.LC315:
	.ascii	"<3>%s: Previous writing not finished yet\012\000"
	.align	2
.LC316:
	.ascii	"<3>%s: failed to allocate ctrl pkt\012\000"
	.align	2
.LC317:
	.ascii	"<3>%s: dev:%pK is not connected\012\000"
	.align	2
.LC318:
	.ascii	"<3>%s: dev:%pK state=%d, recover!!\012\000"
	.align	2
.LC319:
	.ascii	"<3>%s: dev:%pK is not online\012\000"
	.align	2
.LC320:
	.ascii	"<3>%s: dev:%pK req is NULL\012\000"
	.align	2
.LC321:
	.ascii	"<3>%s: dev:%pK req->buf is NULL\012\000"
	.align	2
.LC322:
	.ascii	"<3>%s: ep enqueue error %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_write, %function
mbim_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r4, [r0, #132]
	cmp	r4, #0
	beq	.L4415
	cmp	r2, #0
	mov	r5, r2
	beq	.L4416
	cmp	r2, #4096
	bhi	.L4417
	add	r6, r4, #96
	.syntax divided
@ 60 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 111 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/processor.h" 1
	pld	[r6]
@ 0 "" 2
@ 63 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r3, [r6]
	add	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 73 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #1
	bne	.L4395
	ldr	r3, [r4, #80]
	cmp	r3, #0
	beq	.L4418
	mov	r8, r1
	mov	r0, r5
	mov	r1, #208
	bl	mbim_alloc_ctrl_pkt
	subs	r7, r0, #0
	beq	.L4419
	mov	r3, sp
	ldr	r0, [r7]
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 439 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/uaccess.h" 1
	adds r2, r8, r5; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L4420
	mov	r1, r5
	bl	__memzero
	mov	r2, r5
.L4400:
	movw	r0, #:lower16:.LC164
	ldr	r1, .L4428
	movt	r0, #:upper16:.LC164
	bl	printk
	mov	r0, r7
	bl	mbim_free_ctrl_pkt.part.0
	.syntax divided
@ 83 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mov	r0, #0
	b	.L4390
.L4420:
	mov	r2, r5
	mov	r1, r8
	bl	__copy_from_user
	subs	r2, r0, #0
	bne	.L4400
	ldr	r3, [r4, #80]
	cmp	r3, #0
	beq	.L4421
	ldrb	r3, [r4, #156]	@ zero_extendqisi2
	cmp	r3, #3
	bne	.L4422
	add	r8, r4, #196
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r2, [r4, #212]
	add	ip, r7, #8
	add	r3, r4, #208
	mov	r1, r0
	mov	r0, r8
	str	ip, [r4, #212]
	str	r3, [r7, #8]
	str	r2, [r7, #12]
	str	ip, [r2]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r8
	ldr	r9, [r4, #152]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #80]
	mov	r10, r0
	cmp	r3, #0
	beq	.L4423
	cmp	r9, #0
	beq	.L4424
	ldr	r3, [r9]
	cmp	r3, #0
	beq	.L4425
	add	r7, r4, #160
	.syntax divided
@ 60 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 111 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/processor.h" 1
	pld	[r7]
@ 0 "" 2
@ 63 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r2, [r7]
	add	r2, r2, #1
	strex	r3, r2, [r7]
	teq	r3, #0
	bne	1b
@ 0 "" 2
@ 73 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r2, #1
	bne	.L4426
	ldr	r3, [r9]
	mov	ip, #0
	mvn	lr, #94
	mov	r0, #8
	mov	r1, r10
	str	r0, [r9, #4]
	mov	r0, r8
	strb	lr, [r3]
	strb	r2, [r3, #1]
	strb	ip, [r3, #2]
	strb	ip, [r3, #3]
	ldrb	r2, [r4, #188]	@ zero_extendqisi2
	strh	r2, [r3, #4]	@ unaligned
	strb	ip, [r3, #6]
	strb	ip, [r3, #7]
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, [r4, #148]
	mov	r2, #32
	mov	r1, r9
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	bne	.L4427
.L4403:
	.syntax divided
@ 83 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mov	r0, r5
.L4390:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L4426:
	mov	r1, r0
	mov	r0, r8
	ldr	r3, [r4, #160]
	bl	_raw_spin_unlock_irqrestore
	b	.L4403
.L4395:
	.syntax divided
@ 83 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	r0, #:lower16:.LC315
	ldr	r1, .L4428
	movt	r0, #:upper16:.LC315
	bl	printk
	mvn	r0, #15
	b	.L4390
.L4427:
	.syntax divided
@ 83 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r7]
	sub	r3, r3, #1
	strex	r1, r3, [r7]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	r0, #:lower16:.LC322
	ldr	r1, .L4428+4
	movt	r0, #:upper16:.LC322
	bl	printk
	b	.L4403
.L4418:
	movw	r0, #:lower16:.LC63
	ldr	r1, .L4428
	movt	r0, #:upper16:.LC63
	bl	printk
	.syntax divided
@ 83 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mvn	r0, #31
	b	.L4390
.L4419:
	movw	r0, #:lower16:.LC316
	ldr	r1, .L4428
	movt	r0, #:upper16:.LC316
	bl	printk
	.syntax divided
@ 83 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mvn	r0, #11
	b	.L4390
.L4417:
	movw	r0, #:lower16:.LC314
	ldr	r1, .L4428
	mov	r3, #4096
	movt	r0, #:upper16:.LC314
	bl	printk
	mvn	r0, #11
	b	.L4390
.L4416:
	movw	r0, #:lower16:.LC161
	ldr	r1, .L4428
	movt	r0, #:upper16:.LC161
	bl	printk
	mvn	r0, #18
	b	.L4390
.L4415:
	movw	r0, #:lower16:.LC313
	ldr	r1, .L4428
	movt	r0, #:upper16:.LC313
	bl	printk
	mvn	r0, #18
	b	.L4390
.L4425:
	movw	r0, #:lower16:.LC321
	ldr	r1, .L4428+4
	mov	r2, r4
	movt	r0, #:upper16:.LC321
	bl	printk
	mov	r1, r10
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	b	.L4403
.L4424:
	movw	r0, #:lower16:.LC320
	ldr	r1, .L4428+4
	mov	r2, r4
	movt	r0, #:upper16:.LC320
	bl	printk
	mov	r1, r10
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	b	.L4403
.L4423:
	movw	r0, #:lower16:.LC319
	ldr	r1, .L4428+4
	mov	r2, r4
	movt	r0, #:upper16:.LC319
	bl	printk
	mov	r1, r10
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	b	.L4403
.L4422:
	movw	r0, #:lower16:.LC318
	ldr	r1, .L4428+8
	mov	r2, r4
	movt	r0, #:upper16:.LC318
	bl	printk
	mov	r0, r7
	bl	mbim_free_ctrl_pkt.part.0
	b	.L4403
.L4421:
	movw	r0, #:lower16:.LC317
	ldr	r1, .L4428+8
	mov	r2, r4
	movt	r0, #:upper16:.LC317
	bl	printk
	mov	r0, r7
	bl	mbim_free_ctrl_pkt.part.0
	b	.L4403
.L4429:
	.align	2
.L4428:
	.word	.LANCHOR2+1644
	.word	.LANCHOR2+1684
	.word	.LANCHOR2+1656
	.fnend
	.size	mbim_write, .-mbim_write
	.section	.rodata.str1.4
	.align	2
.LC323:
	.ascii	"<3>%s: Failed to enable capture ep\000"
	.align	2
.LC324:
	.ascii	"<3>%s: request allocation failed\012\000"
	.align	2
.LC325:
	.ascii	"<3>%s: request buffer allocation failed\012\000"
	.align	2
.LC326:
	.ascii	"<3>%s: Failed to queue %s req: err %d\012\000"
	.align	2
.LC327:
	.ascii	"<3>%s: Failed to enable playback ep\000"
	.align	2
.LC328:
	.ascii	"<3>%s: Failed to queue %s queue req: err %d\012\000"
	.align	2
.LC329:
	.ascii	"<3>%s: Schedule playback_work\000"
	.align	2
.LC330:
	.ascii	"<3>%s: playback_buf is empty. Stop.\000"
	.align	2
.LC331:
	.ascii	"<3>%s: Interface %d. Do nothing. Return %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_audio_set_alt, %function
f_audio_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	movw	r6, #:lower16:.LANCHOR1
	movt	r6, #:upper16:.LANCHOR1
	strd	r8, [sp, #16]
	mov	r8, r0
	strd	r10, [sp, #24]
	mov	r10, r2
	str	lr, [sp, #32]
	ldrb	r3, [r6, #8]	@ zero_extendqisi2
	.pad #12
	sub	sp, sp, #12
	cmp	r3, r1
	beq	.L4471
	ldrb	r3, [r6, #9]	@ zero_extendqisi2
	cmp	r3, r1
	bne	.L4443
	cmp	r2, #1
	bne	.L4444
	ldr	r5, [r0, #164]
	ldr	r1, [r5, #28]
	ldrh	r3, [r1, #4]	@ unaligned
	cmp	r3, #0
	beq	.L4455
	ldr	r3, [r5, #8]
	mov	r0, r5
	ldr	r3, [r3]
	blx	r3
	subs	r7, r0, #0
	bne	.L4445
	str	r8, [r5]
	ldr	r0, [r6, #1248]
	bl	f_audio_buffer_alloc
	cmn	r0, #4096
	str	r0, [r8, #176]
	bhi	.L4447
	ldr	r3, [r6, #1252]
	cmp	r3, #0
	ble	.L4469
	movw	r9, #:lower16:f_audio_complete
	movt	r9, #:upper16:f_audio_complete
.L4448:
	ldr	r3, [r5, #8]
	mov	r1, #32
	mov	r0, r5
	add	r7, r7, #1
	ldr	r3, [r3, #8]
	blx	r3
	subs	r4, r0, #0
	movw	r1, #32800
	beq	.L4450
	ldr	r0, [r6, #1256]
	bl	__kmalloc
	mov	r3, r0
	mov	r2, #32
	cmp	r3, #0
	mov	r1, r4
	mov	r0, r5
	str	r3, [r4]
	beq	.L4451
	ldr	r3, [r6, #1256]
	str	r3, [r4, #4]
	str	r9, [r4, #28]
	str	r8, [r4, #32]
	ldr	r3, [r5, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	bne	.L4472
	ldr	r3, [r6, #1252]
	cmp	r3, r7
	bgt	.L4448
.L4449:
	strb	r10, [r8, #241]
.L4430:
	mov	r0, r4
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L4471:
	cmp	r2, #1
	bne	.L4432
	ldr	r5, [r0, #168]
	ldr	r1, [r5, #28]
	ldrh	r3, [r1, #4]	@ unaligned
	cmp	r3, #0
	beq	.L4454
	ldr	r3, [r5, #8]
	mov	r0, r5
	ldr	r3, [r3]
	blx	r3
	subs	r4, r0, #0
	bne	.L4433
	str	r8, [r5]
	mov	r1, #32
	mov	r0, r5
	str	r4, [r8, #208]
	ldr	r3, [r5, #8]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r4, r0, #0
	beq	.L4450
	movw	r1, #32800
	ldr	r0, [r6, #1244]
	bl	__kmalloc
	cmp	r0, #0
	str	r0, [r4]
	beq	.L4451
	ldr	ip, [r6, #1244]
	movw	r3, #:lower16:f_audio_complete
	mov	r1, r4
	movt	r3, #:upper16:f_audio_complete
	mov	r2, #32
	mov	r0, r5
	str	ip, [r4, #4]
	str	r3, [r4, #28]
	str	r8, [r4, #32]
	str	r4, [r8, #236]
	ldr	r3, [r5, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	bne	.L4473
.L4438:
	add	r0, r8, #212
	bl	schedule_work
.L4439:
	strb	r10, [r8, #240]
	b	.L4430
.L4432:
	add	fp, r0, #204
	add	r5, r0, #228
	mov	r7, #256
	mov	r0, fp
	mov	r6, #512
	bl	_raw_spin_lock_irqsave
	str	r0, [sp, #4]
.L4441:
	ldr	r4, [r8, #228]
	cmp	r5, r4
	beq	.L4474
.L4442:
	ldrd	r2, [r4]
	subs	r9, r4, #8
	str	r3, [r2, #4]
	str	r2, [r3]
	str	r7, [r4]
	str	r6, [r4, #4]
	beq	.L4441
	ldr	r0, [r4, #-8]
	bl	kfree
	mov	r3, #0
	mov	r0, r9
	str	r3, [r4, #-8]
	bl	kfree
	ldr	r4, [r8, #228]
	cmp	r5, r4
	bne	.L4442
.L4474:
	mov	r0, fp
	ldr	r1, [sp, #4]
	mov	r4, #0
	bl	_raw_spin_unlock_irqrestore
	b	.L4439
.L4469:
	mov	r4, r7
	b	.L4449
.L4454:
	mvn	r4, #21
.L4433:
	movw	r0, #:lower16:.LC323
	ldr	r1, .L4475
	movt	r0, #:upper16:.LC323
	bl	printk
	b	.L4430
.L4451:
	movw	r0, #:lower16:.LC325
	ldr	r1, .L4475
	mvn	r4, #11
	movt	r0, #:upper16:.LC325
	bl	printk
	b	.L4430
.L4450:
	movw	r0, #:lower16:.LC324
	ldr	r1, .L4475
	mvn	r4, #11
	movt	r0, #:upper16:.LC324
	bl	printk
	b	.L4430
.L4455:
	mvn	r7, #21
.L4445:
	movw	r0, #:lower16:.LC327
	ldr	r1, .L4475
	mov	r4, r7
	movt	r0, #:upper16:.LC327
	bl	printk
	b	.L4430
.L4472:
	movw	r0, #:lower16:.LC328
	ldr	r1, .L4475
	mov	r3, r4
	movt	r0, #:upper16:.LC328
	ldr	r2, [r5, #4]
	bl	printk
	b	.L4449
.L4447:
	movw	r0, #:lower16:.LC29
	ldr	r1, .L4475
	mvn	r4, #11
	movt	r0, #:upper16:.LC29
	bl	printk
	b	.L4430
.L4444:
	ldr	r4, [r0, #176]
	cmp	r4, #0
	beq	.L4453
	movw	r0, #:lower16:.LC329
	ldr	r1, .L4475
	movt	r0, #:upper16:.LC329
	bl	printk
	ldr	r2, [r8, #200]
	add	r1, r4, #8
	add	r3, r8, #196
	add	r0, r8, #180
	str	r1, [r8, #200]
	str	r3, [r4, #8]
	str	r2, [r4, #12]
	str	r1, [r2]
	bl	schedule_work
	mov	r3, #0
	mov	r4, r3
	str	r3, [r8, #176]
	b	.L4449
.L4443:
	movw	r0, #:lower16:.LC331
	mov	r2, r1
	ldr	r1, .L4475
	mov	r3, #0
	movt	r0, #:upper16:.LC331
	mov	r4, r3
	bl	printk
	b	.L4430
.L4453:
	movw	r0, #:lower16:.LC330
	ldr	r1, .L4475
	movt	r0, #:upper16:.LC330
	bl	printk
	b	.L4449
.L4473:
	movw	r0, #:lower16:.LC326
	ldr	r1, .L4475
	mov	r3, r4
	movt	r0, #:upper16:.LC326
	ldr	r2, [r5, #4]
	bl	printk
	b	.L4438
.L4476:
	.align	2
.L4475:
	.word	.LANCHOR2+1716
	.fnend
	.size	f_audio_set_alt, .-f_audio_set_alt
	.section	.text.unlikely
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_request_free.part.0, %function
acc_request_free.part.0:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, lr}
	.save {r4, r5, r6, lr}
	mov	r4, r1
	mov	r5, r0
	ldr	r0, [r0]
	bl	kfree
	ldr	r3, [r4, #8]
	mov	r1, r5
	mov	r0, r4
	pop	{r4, r5, r6, lr}
	ldr	r3, [r3, #12]
	bx	r3	@ indirect register sibling call
	.fnend
	.size	acc_request_free.part.0, .-acc_request_free.part.0
	.set	ccid_request_free.part.0,acc_request_free.part.0
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ep_matches.part.0, %function
ep_matches.part.0:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldrb	ip, [r2, #3]	@ zero_extendqisi2
	ands	r4, ip, #3
	beq	.L4482
	ldr	r9, [r1, #4]
	mov	r7, r3
	mov	r6, r1
	ldrb	r3, [r9]	@ zero_extendqisi2
	cmp	r3, #101
	beq	.L4536
.L4482:
	mov	r0, #0
.L4479:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L4536:
	ldrb	r3, [r9, #2]	@ zero_extendqisi2
	mov	r5, r2
	mov	r8, r0
	cmp	r3, #45
	beq	.L4483
	mov	r1, #45
	mov	r0, r9
	bl	strrchr
	subs	r10, r0, #0
	beq	.L4484
	cmp	r4, #2
	beq	.L4485
	cmp	r4, #3
	ldrb	r3, [r10, #2]	@ zero_extendqisi2
	bne	.L4486
	cmp	r3, #115
	beq	.L4482
	movw	r0, #:lower16:.LC267
	ldr	r1, [r8, #28]
	movt	r0, #:upper16:.LC267
	bl	strcmp
	cmp	r0, #0
	bne	.L4487
	ldrb	r3, [r10, #1]	@ zero_extendqisi2
	cmp	r3, #105
	beq	.L4482
.L4487:
	ldrb	r3, [r10, #-1]	@ zero_extendqisi2
	movw	r2, #:lower16:_ctype
	movt	r2, #:upper16:_ctype
	ldrb	r2, [r2, r3]	@ zero_extendqisi2
	tst	r2, #4
	beq	.L4501
	ldrh	r3, [r5, #4]	@ unaligned
	cmp	r3, #0
	beq	.L4506
	ubfx	r2, r3, #0, #11
	mov	r9, #0
	b	.L4503
.L4484:
	mov	r0, r9
	bl	strlen
	add	r10, r9, r0
.L4488:
	ldrb	r3, [r10, #-1]	@ zero_extendqisi2
	movw	r2, #:lower16:_ctype
	movt	r2, #:upper16:_ctype
	ldrb	r2, [r2, r3]	@ zero_extendqisi2
	tst	r2, #4
	beq	.L4501
.L4483:
	sub	r9, r4, #2
	cmp	r7, #0
	clz	r9, r9
	moveq	r3, #0
	lsr	r9, r9, #5
	movne	r3, r9
	cmp	r3, #0
	bne	.L4537
.L4491:
	ldrh	r3, [r5, #4]	@ unaligned
	cmp	r3, #0
	bne	.L4493
.L4499:
	ldrh	r3, [r6, #20]
	strh	r3, [r5, #4]	@ unaligned
.L4493:
	cmp	r4, #1
	ubfx	r2, r3, #0, #11
	beq	.L4494
	cmp	r4, #3
	bne	.L4495
.L4503:
	ldr	r1, [r8, #20]
	cmp	r1, #2
	movls	r1, #1
	movhi	r1, #0
	cmp	r2, #64
	movls	r1, #0
	cmp	r1, #0
	bne	.L4482
.L4494:
	ldrh	r1, [r6, #20]
	cmp	r1, r2
	bcc	.L4482
	ldr	r2, [r8, #20]
	cmp	r2, #2
	bls	.L4538
.L4495:
	ldrb	r2, [r5, #2]	@ zero_extendqisi2
	movw	r3, #:lower16:_ctype
	movt	r3, #:upper16:_ctype
	and	r2, r2, #128
	strb	r2, [r5, #2]
	ldr	r0, [r6, #4]
	ldrb	r1, [r0, #2]	@ zero_extendqisi2
	ldrb	r3, [r3, r1]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L4539
	movw	r1, #:lower16:.LANCHOR0
	movt	r1, #:upper16:.LANCHOR0
	ldr	r3, [r1, #3272]
	add	r3, r3, #1
	cmp	r3, #15
	str	r3, [r1, #3272]
	bhi	.L4482
	orr	r2, r2, r3
	uxtb	r2, r2
	strb	r2, [r5, #2]
.L4497:
	cmp	r7, #0
	moveq	r3, r9
	movne	r3, #0
	cmp	r3, #0
	beq	.L4498
	ldrh	r3, [r6, #20]
	cmp	r3, #64
	movge	r3, #64
	strh	r3, [r5, #4]	@ unaligned
.L4498:
	mov	r0, #1
	strb	r2, [r6, #25]
	b	.L4479
.L4501:
	ldrsb	r2, [r5, #2]
	cmp	r2, #0
	blt	.L4540
	cmp	r3, #116
	bne	.L4482
	b	.L4483
.L4537:
	ldr	r2, [r8, #20]
	cmp	r2, #4
	bhi	.L4541
.L4492:
	ldrh	r2, [r5, #4]	@ unaligned
	cmp	r2, #0
	movne	r9, r3
	bne	.L4495
.L4506:
	mov	r9, r3
	b	.L4499
.L4486:
	cmp	r3, #115
	bne	.L4482
	ldrb	r3, [r10, #-1]	@ zero_extendqisi2
	movw	r2, #:lower16:_ctype
	movt	r2, #:upper16:_ctype
	ldrb	r2, [r2, r3]	@ zero_extendqisi2
	tst	r2, #4
	beq	.L4501
	sub	r9, r4, #2
	clz	r9, r9
	lsr	r9, r9, #5
	b	.L4491
.L4485:
	ldrb	r3, [r10, #1]	@ zero_extendqisi2
	cmp	r3, #98
	bne	.L4482
	b	.L4488
.L4538:
	tst	r3, #7168
	bne	.L4482
	b	.L4495
.L4540:
	cmp	r3, #110
	bne	.L4482
	b	.L4483
.L4541:
	ldrb	r2, [r7, #3]	@ zero_extendqisi2
	ldrh	r1, [r6, #22]
	and	r2, r2, #31
	cmp	r1, r2
	bcs	.L4492
	b	.L4482
.L4539:
	mov	r2, #10
	add	r0, r0, #2
	mov	r1, #0
	bl	simple_strtoul
	ldrb	r2, [r5, #2]	@ zero_extendqisi2
	orr	r2, r2, r0
	uxtb	r2, r2
	strb	r2, [r5, #2]
	b	.L4497
	.fnend
	.size	ep_matches.part.0, .-ep_matches.part.0
	.align	2
	.global	gsdio_ctrl_wq
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_ctrl_wq, %function
gsdio_ctrl_wq:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	cmp	r0, #80
	beq	.L4544
	bx	lr
.L4544:
	movw	r0, #:lower16:.LC15
	ldr	r1, .L4545
	movt	r0, #:upper16:.LC15
	b	printk
.L4546:
	.align	2
.L4545:
	.word	.LANCHOR2+1732
	.fnend
	.size	gsdio_ctrl_wq, .-gsdio_ctrl_wq
	.section	.rodata.str1.4
	.align	2
.LC332:
	.ascii	"<3>%s on a NULL device\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_ctrl_poll, %function
rmnet_ctrl_poll:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r0, #132]
	cmp	r4, #0
	beq	.L4560
	cmp	r1, #0
	mov	r2, r1
	beq	.L4550
	ldr	r5, [r2]
	adds	r1, r4, #32
	movne	r3, #1
	moveq	r3, #0
	cmp	r5, #0
	moveq	r3, #0
	cmp	r3, #0
	bne	.L4561
.L4550:
	add	r5, r4, #52
	add	r4, r4, #44
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4]
	mov	r1, r0
	mov	r0, r5
	cmp	r3, r4
	movne	r4, #65
	moveq	r4, #0
	bl	_raw_spin_unlock_irqrestore
.L4547:
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4561:
	blx	r5
	b	.L4550
.L4560:
	movw	r0, #:lower16:.LC332
	ldr	r1, .L4562
	mov	r4, #8
	movt	r0, #:upper16:.LC332
	bl	printk
	b	.L4547
.L4563:
	.align	2
.L4562:
	.word	.LANCHOR2+1748
	.fnend
	.size	rmnet_ctrl_poll, .-rmnet_ctrl_poll
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_send_cbits_tomodem, %function
ghsic_send_cbits_tomodem:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR0
	movt	r3, #:upper16:.LANCHOR0
	ldr	ip, [r3, #404]
	cmp	r0, #0
	cmpne	r1, ip
	bcs	.L4568
	mov	r0, #104
	mla	r1, r0, r1, r3
	ldr	r3, [r1, #408]
	cmp	r3, #0
	beq	.L4569
	ldr	r1, [r3, #88]
	cmp	r1, r2
	ldrne	r1, [r3, #84]
	strne	r2, [r3, #88]
	bx	lr
.L4568:
	movw	r0, #:lower16:.LC19
	mov	r2, r1
	ldr	r1, .L4570
	movt	r0, #:upper16:.LC19
	b	printk
.L4569:
	movw	r0, #:lower16:.LC15
	ldr	r1, .L4570
	movt	r0, #:upper16:.LC15
	b	printk
.L4571:
	.align	2
.L4570:
	.word	.LANCHOR2+1764
	.fnend
	.size	ghsic_send_cbits_tomodem, .-ghsic_send_cbits_tomodem
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_send_cbits_tomodem, %function
ghsuart_send_cbits_tomodem:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR0
	movt	r3, #:upper16:.LANCHOR0
	ldr	ip, [r3, #2020]
	cmp	r0, #0
	cmpne	r1, ip
	bcs	.L4576
	mov	r0, #84
	mla	r1, r0, r1, r3
	ldr	r3, [r1, #1852]
	cmp	r3, #0
	beq	.L4577
	ldr	r1, [r3, #92]
	cmp	r1, r2
	ldrne	r1, [r3, #88]
	strne	r2, [r3, #92]
	bx	lr
.L4576:
	movw	r0, #:lower16:.LC19
	mov	r2, r1
	ldr	r1, .L4578
	movt	r0, #:upper16:.LC19
	b	printk
.L4577:
	movw	r0, #:lower16:.LC15
	ldr	r1, .L4578
	movt	r0, #:upper16:.LC15
	b	printk
.L4579:
	.align	2
.L4578:
	.word	.LANCHOR2+1792
	.fnend
	.size	ghsuart_send_cbits_tomodem, .-ghsuart_send_cbits_tomodem
	.section	.rodata.str1.4
	.align	2
.LC333:
	.ascii	"<3>%s: FAILED: d_port == NULL\000"
	.align	2
.LC334:
	.ascii	"<3>%s: FAILED: d_port->cdev == NULL\000"
	.align	2
.LC335:
	.ascii	"<3>%s: FAILED: d_port->cdev->gadget == NULL\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam_data_wake_cb, %function
bam_data_wake_cb:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	ldr	r3, [r0, #4]
	cmp	r3, #0
	beq	.L4587
	ldr	r3, [r3]
	cmp	r3, #0
	beq	.L4588
	ldr	r0, [r3]
	cmp	r0, #0
	beq	.L4589
	ldr	r3, [r0]
	ldr	r3, [r3, #4]
	cmp	r3, #0
	beq	.L4585
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	bx	r3
.L4585:
	mvn	r0, #94
.L4580:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L4589:
	movw	r0, #:lower16:.LC335
	ldr	r1, .L4590
	movt	r0, #:upper16:.LC335
	bl	printk
	mvn	r0, #18
	b	.L4580
.L4588:
	movw	r0, #:lower16:.LC334
	ldr	r1, .L4590
	movt	r0, #:upper16:.LC334
	bl	printk
	mvn	r0, #18
	b	.L4580
.L4587:
	movw	r0, #:lower16:.LC333
	ldr	r1, .L4590
	movt	r0, #:upper16:.LC333
	bl	printk
	mvn	r0, #18
	b	.L4580
.L4591:
	.align	2
.L4590:
	.word	.LANCHOR2+1820
	.fnend
	.size	bam_data_wake_cb, .-bam_data_wake_cb
	.section	.rodata.str1.4
	.align	2
.LC336:
	.ascii	"<3>%s: Invalid grmnet:%pK\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gps_connect, %function
gps_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	subs	r2, r0, #0
	beq	.L4594
	mov	r3, #1
	str	r3, [r2, #116]
	bx	lr
.L4594:
	movw	r0, #:lower16:.LC336
	ldr	r1, .L4595
	movt	r0, #:upper16:.LC336
	b	printk
.L4596:
	.align	2
.L4595:
	.word	.LANCHOR2+1840
	.fnend
	.size	gps_connect, .-gps_connect
	.section	.rodata.str1.4
	.align	2
.LC337:
	.ascii	"<3>%s: gps notify ep enqueue error %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gps_disconnect, %function
gps_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	subs	r4, r0, #0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	beq	.L4614
	ldr	r3, [r4, #112]
	mov	r2, #0
	str	r2, [r4, #116]
	cmp	r3, r2
	beq	.L4597
	ldr	r0, [r4, #128]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, r2
	beq	.L4601
	blx	r3
.L4601:
	ldr	r3, [r4, #132]
	mov	r1, #0
	mvn	r0, #94
	mov	r2, #32
	ldr	r3, [r3]
	strb	r0, [r3]
	strb	r1, [r3, #1]
	strb	r1, [r3, #2]
	strb	r1, [r3, #3]
	ldrh	r0, [r4, #108]
	strh	r0, [r3, #4]	@ unaligned
	strb	r1, [r3, #6]
	strb	r1, [r3, #7]
	ldrd	r0, [r4, #128]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	blt	.L4615
.L4602:
	add	r10, r4, #124
	add	r6, r4, #136
	mov	r0, r10
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #136]
	mov	r7, r0
	cmp	r3, r6
	beq	.L4604
	mov	r9, #256
	mov	r8, #512
.L4605:
	ldm	r3, {r1, r2}
	mov	r5, r3
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r9, [r3]
	str	r8, [r3, #4]
	ldr	r0, [r5, #-8]!
	bl	kfree
	mov	r0, r5
	bl	kfree
	ldr	r3, [r4, #136]
	cmp	r3, r6
	bne	.L4605
.L4604:
	mov	r3, #0
	mov	r1, r7
	mov	r0, r10
	str	r3, [r4, #144]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irqrestore
.L4615:
	ldr	r3, [r4, #112]
	cmp	r3, #0
	bne	.L4616
.L4597:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L4616:
	movw	r0, #:lower16:.LC337
	ldr	r1, .L4617
	movt	r0, #:upper16:.LC337
	bl	printk
	b	.L4602
.L4614:
	movw	r0, #:lower16:.LC336
	mov	r2, r4
	ldr	r1, .L4617
	movt	r0, #:upper16:.LC336
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	printk
.L4618:
	.align	2
.L4617:
	.word	.LANCHOR2+1852
	.fnend
	.size	gps_disconnect, .-gps_disconnect
	.section	.rodata.str1.4
	.align	2
.LC338:
	.ascii	"<3>%s: dev is null\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gps_cmd_complete, %function
gps_cmd_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r2, [r1, #32]
	cmp	r2, #0
	beq	.L4624
	.save {lr}
	str	lr, [sp, #-4]!
	ldr	lr, [r2, #88]
	cmp	lr, #0
	beq	.L4619
	mov	r3, r1
	ldrb	r0, [r2, #104]	@ zero_extendqisi2
	ldr	r1, [r1]
	ldr	r2, [r3, #48]
	mov	r3, lr
	ldr	lr, [sp], #4
	bx	r3
.L4619:
	ldr	pc, [sp], #4
.L4624:
	movw	r0, #:lower16:.LC338
	ldr	r1, .L4625
	movt	r0, #:upper16:.LC338
	b	printk
.L4626:
	.align	2
.L4625:
	.word	.LANCHOR2+1868
	.fnend
	.size	gps_cmd_complete, .-gps_cmd_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	frmnet_connect, %function
frmnet_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	subs	r2, r0, #0
	beq	.L4629
	mov	r3, #1
	str	r3, [r2, #116]
	bx	lr
.L4629:
	movw	r0, #:lower16:.LC336
	ldr	r1, .L4630
	movt	r0, #:upper16:.LC336
	b	printk
.L4631:
	.align	2
.L4630:
	.word	.LANCHOR2+1888
	.fnend
	.size	frmnet_connect, .-frmnet_connect
	.section	.rodata.str1.4
	.align	2
.LC339:
	.ascii	"<3>%s: rmnet notify ep enqueue error %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	frmnet_disconnect, %function
frmnet_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	subs	r4, r0, #0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	beq	.L4649
	ldr	r3, [r4, #112]
	mov	r2, #0
	str	r2, [r4, #116]
	cmp	r3, r2
	beq	.L4632
	ldr	r0, [r4, #128]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, r2
	beq	.L4636
	blx	r3
.L4636:
	ldr	r3, [r4, #132]
	mov	r1, #0
	mvn	r0, #94
	mov	r2, #32
	ldr	r3, [r3]
	strb	r0, [r3]
	strb	r1, [r3, #1]
	strb	r1, [r3, #2]
	strb	r1, [r3, #3]
	ldrh	r0, [r4, #104]
	strh	r0, [r3, #4]	@ unaligned
	strb	r1, [r3, #6]
	strb	r1, [r3, #7]
	ldrd	r0, [r4, #128]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	blt	.L4650
.L4637:
	add	r10, r4, #124
	add	r6, r4, #136
	mov	r0, r10
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #136]
	mov	r7, r0
	cmp	r3, r6
	beq	.L4639
	mov	r9, #256
	mov	r8, #512
.L4640:
	ldm	r3, {r1, r2}
	mov	r5, r3
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r9, [r3]
	str	r8, [r3, #4]
	ldr	r0, [r5, #-8]!
	bl	kfree
	mov	r0, r5
	bl	kfree
	ldr	r3, [r4, #136]
	cmp	r3, r6
	bne	.L4640
.L4639:
	mov	r3, #0
	mov	r1, r7
	mov	r0, r10
	str	r3, [r4, #144]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irqrestore
.L4650:
	ldr	r3, [r4, #112]
	cmp	r3, #0
	bne	.L4651
.L4632:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L4651:
	movw	r0, #:lower16:.LC339
	ldr	r1, .L4652
	movt	r0, #:upper16:.LC339
	bl	printk
	b	.L4637
.L4649:
	movw	r0, #:lower16:.LC336
	mov	r2, r4
	ldr	r1, .L4652
	movt	r0, #:upper16:.LC336
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	printk
.L4653:
	.align	2
.L4652:
	.word	.LANCHOR2+1904
	.fnend
	.size	frmnet_disconnect, .-frmnet_disconnect
	.section	.rodata.str1.4
	.align	2
.LC340:
	.ascii	"<3>%s: rmnet dev is null\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	frmnet_cmd_complete, %function
frmnet_cmd_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r2, [r1, #32]
	cmp	r2, #0
	beq	.L4659
	.save {lr}
	str	lr, [sp, #-4]!
	ldr	lr, [r2, #88]
	cmp	lr, #0
	beq	.L4654
	ldrb	ip, [r2, #108]	@ zero_extendqisi2
	movw	r0, #:lower16:.LANCHOR0
	mov	r3, r1
	movt	r0, #:upper16:.LANCHOR0
	ldr	r1, [r1]
	ldr	r2, [r3, #48]
	mov	r3, lr
	ldr	lr, [sp], #4
	add	ip, ip, ip, lsl #1
	add	r0, r0, ip, lsl #3
	ldrb	r0, [r0, #232]	@ zero_extendqisi2
	bx	r3
.L4654:
	ldr	pc, [sp], #4
.L4659:
	movw	r0, #:lower16:.LC340
	ldr	r1, .L4660
	movt	r0, #:upper16:.LC340
	b	printk
.L4661:
	.align	2
.L4660:
	.word	.LANCHOR2+1924
	.fnend
	.size	frmnet_cmd_complete, .-frmnet_cmd_complete
	.section	.rodata.str1.4
	.align	2
.LC341:
	.ascii	"<3>%s: ctrl bridge open failed :%d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_ctrl_connect_w, %function
ghsic_ctrl_connect_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	cmp	r0, #16
	beq	.L4662
	ldr	r3, [r0, #68]
	tst	r3, #2
	bne	.L4670
.L4662:
	bx	lr
.L4670:
	movw	r0, #:lower16:.LC341
	ldr	r1, .L4671
	mvn	r2, #18
	movt	r0, #:upper16:.LC341
	b	printk
.L4672:
	.align	2
.L4671:
	.word	.LANCHOR2+1944
	.fnend
	.size	ghsic_ctrl_connect_w, .-ghsic_ctrl_connect_w
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_ctrl_disconnect_w, %function
ghsuart_ctrl_disconnect_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r2, [r0, #36]
	mov	r3, r0
	tst	r2, #1
	bne	.L4675
	bx	lr
.L4675:
	mov	r2, #0
	add	r1, r0, #36
	mov	r0, #2
	str	r2, [r3, #-36]
	b	_clear_bit
	.fnend
	.size	ghsuart_ctrl_disconnect_w, .-ghsuart_ctrl_disconnect_w
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_data_disconnect_w, %function
ghsuart_data_disconnect_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r2, [r0, #60]
	mov	r3, r0
	tst	r2, #1
	bne	.L4678
	bx	lr
.L4678:
	mov	r2, #0
	add	r1, r0, #60
	mov	r0, #2
	str	r2, [r3, #-100]
	b	_clear_bit
	.fnend
	.size	ghsuart_data_disconnect_w, .-ghsuart_data_disconnect_w
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_suspend, %function
rmnet_sdio_suspend:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r2, [r0, #184]
	mov	r3, r0
	cmp	r2, #0
	bne	.L4681
	bx	lr
.L4681:
	ldr	r2, [r3, #320]
	add	r1, r0, #324
	ldr	r0, [r0, #192]
	bic	r2, r2, #2
	str	r2, [r3, #320]
	b	queue_work
	.fnend
	.size	rmnet_sdio_suspend, .-rmnet_sdio_suspend
	.align	2
	.global	gsdio_read_complete
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_read_complete, %function
gsdio_read_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r0]
	cmp	r4, #0
	beq	.L4685
	add	r7, r4, #4
	mov	r5, r1
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r2, [r4, #24]
	add	ip, r5, #36
	add	r1, r4, #20
	movw	r3, #:lower16:.LANCHOR0
	mov	r6, r0
	movt	r3, #:upper16:.LANCHOR0
	str	ip, [r4, #24]
	str	r1, [r5, #36]
	ldr	r0, [r3, #2036]
	add	r1, r4, #28
	str	r2, [r5, #40]
	str	ip, [r2]
	ldr	r3, [r4, #48]
	add	r3, r3, #1
	str	r3, [r4, #48]
	bl	queue_work
	mov	r1, r6
	mov	r0, r7
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore
.L4685:
	movw	r0, #:lower16:.LC15
	ldr	r1, .L4686
	movt	r0, #:upper16:.LC15
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	printk
.L4687:
	.align	2
.L4686:
	.word	.LANCHOR2+1968
	.fnend
	.size	gsdio_read_complete, .-gsdio_read_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_read_complete, %function
gsmd_read_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r5, [r0]
	cmp	r5, #0
	beq	.L4696
	add	r7, r5, #4
	mov	r6, r0
	mov	r0, r7
	mov	r4, r1
	bl	_raw_spin_lock
	ldr	r3, [r5, #72]
	ldr	r3, [r3, #8]
	tst	r3, #1
	beq	.L4690
	ldr	r3, [r4, #44]
	cmn	r3, #108
	beq	.L4690
	ldr	r2, [r5, #24]
	add	ip, r4, #36
	add	r0, r5, #20
	movw	r3, #:lower16:.LANCHOR0
	add	r1, r5, #28
	movt	r3, #:upper16:.LANCHOR0
	str	ip, [r5, #24]
	str	r0, [r4, #36]
	ldr	r0, [r3, #2260]
	str	r2, [r4, #40]
	str	ip, [r2]
	bl	queue_work
	mov	r0, r7
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock
.L4690:
	mov	r0, r7
	bl	_raw_spin_unlock
	ldr	r0, [r4]
	bl	kfree
	ldr	r3, [r6, #8]
	mov	r1, r4
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	r3, [r3, #12]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	bx	r3	@ indirect register sibling call
.L4696:
	movw	r0, #:lower16:.LC15
	ldr	r1, .L4697
	movt	r0, #:upper16:.LC15
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	printk
.L4698:
	.align	2
.L4697:
	.word	.LANCHOR2+1988
	.fnend
	.size	gsmd_read_complete, .-gsmd_read_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_data_unthrottle_tx, %function
ghsic_data_unthrottle_tx:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	subs	r4, r0, #0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	beq	.L4699
	ldr	r3, [r4, #4]
	cmp	r3, #0
	bne	.L4708
.L4699:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4708:
	add	r5, r4, #80
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #208]
	mov	r1, r0
	mov	r0, r5
	add	r3, r3, #1
	str	r3, [r4, #208]
	bl	_raw_spin_unlock_irqrestore
	add	r1, r4, #120
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	ldr	r0, [r4, #84]
	ldrd	r4, [sp]
	add	sp, sp, #16
	b	queue_work
	.fnend
	.size	ghsic_data_unthrottle_tx, .-ghsic_data_unthrottle_tx
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_disable, %function
rmnet_mux_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r0, #360]
	cmp	r3, #0
	bxeq	lr
	mov	r3, #0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	str	r3, [r0, #360]
	ldr	r0, [r0, #88]
	ldr	r3, [r0, #8]
	ldr	r2, [r3, #36]
	cmp	r2, #0
	beq	.L4711
	blx	r2
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
.L4711:
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r5, [r4, #88]
	ldr	r6, [r4, #92]
	ldr	r0, [r6]
	bl	kfree
	ldr	r3, [r5, #8]
	mov	r0, r5
	mov	r1, r6
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r0, [r4, #80]
	ldr	r3, [r0, #8]
	ldr	r2, [r3, #36]
	cmp	r2, #0
	beq	.L4712
	blx	r2
	ldr	r0, [r4, #80]
	ldr	r3, [r0, #8]
.L4712:
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #84]
	ldr	r3, [r0, #8]
	ldr	r2, [r3, #36]
	cmp	r2, #0
	beq	.L4713
	blx	r2
	ldr	r0, [r4, #84]
	ldr	r3, [r0, #8]
.L4713:
	ldr	r3, [r3, #4]
	blx	r3
	mov	r3, #0
	add	r1, r4, #372
	ldr	r0, [r4, #368]
	str	r3, [r4, #340]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	queue_work
	.fnend
	.size	rmnet_mux_disable, .-rmnet_mux_disable
	.section	.rodata.str1.4
	.align	2
.LC342:
	.ascii	"<3>%s: grmnet is null\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_ctrl_send_cbits_tomodem, %function
gsmd_ctrl_send_cbits_tomodem:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	cmp	r1, #5
	bhi	.L4727
	movw	ip, #:lower16:.LANCHOR0
	mov	r3, #84
	movt	ip, #:upper16:.LANCHOR0
	mla	r3, r3, r1, ip
	ldr	ip, [r3, #2288]
	cmp	ip, #0
	beq	.L4727
	cmp	r0, #0
	beq	.L4742
	ands	r3, r2, #1
	moveq	r2, #2
	moveq	r1, r3
	beq	.L4730
	mov	r1, #2
	mov	r2, #0
	mov	r3, r1
.L4730:
	ldr	r0, [ip, #88]
	cmp	r0, r3
	beq	.L4726
	ldr	r0, [ip, #8]
	str	r3, [ip, #88]
	tst	r0, #1
	bne	.L4743
.L4726:
	bx	lr
.L4743:
	ldr	r0, [ip]
	b	smd_tiocmset
.L4742:
	movw	r0, #:lower16:.LC342
	ldr	r1, .L4744
	movt	r0, #:upper16:.LC342
	b	printk
.L4727:
	movw	r0, #:lower16:.LC19
	mov	r2, r1
	ldr	r1, .L4744
	movt	r0, #:upper16:.LC19
	b	printk
.L4745:
	.align	2
.L4744:
	.word	.LANCHOR2+2008
	.fnend
	.size	gsmd_ctrl_send_cbits_tomodem, .-gsmd_ctrl_send_cbits_tomodem
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	grmnet_ctrl_smd_disconnect_w, %function
grmnet_ctrl_smd_disconnect_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r0, [r0, #-160]
	cmp	r0, #0
	beq	.L4747
	bl	smd_close
	mov	r3, #0
	str	r3, [r4, #-160]
.L4747:
	ldr	r3, [r4, #-152]
	tst	r3, #2
	bne	.L4748
	ldr	r3, [r4, #-152]
	tst	r3, #4
	beq	.L4746
.L4748:
	sub	r1, r4, #152
	mov	r0, #2
	bl	_clear_bit
	ldr	r3, .L4754
	mov	r2, #84
	ldr	r0, [r4, #-60]
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	mla	r0, r2, r0, r3
	add	r0, r0, #4
	b	platform_driver_unregister
.L4746:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L4755:
	.align	2
.L4754:
	.word	.LANCHOR0+2288
	.fnend
	.size	grmnet_ctrl_smd_disconnect_w, .-grmnet_ctrl_smd_disconnect_w
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_disable, %function
rmnet_sdio_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r0, #184]
	cmp	r3, #0
	bxeq	lr
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	mov	r5, #0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r0, [r0, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #80]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #84]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	mov	r0, r4
	str	r5, [r4, #184]
	str	r5, [r4, #188]
	bl	rmnet_sdio_free_buf
	add	r1, r4, #196
	ldr	r0, [r4, #192]
	bl	queue_work
	str	r5, [r4, #320]
	add	r1, r4, #324
	ldr	r0, [r4, #192]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	queue_work
	.fnend
	.size	rmnet_sdio_disable, .-rmnet_sdio_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_data_free_buffers.part.0, %function
ghsic_data_free_buffers.part.0:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	add	r8, r0, #48
	mov	r0, r8
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	bl	_raw_spin_lock_irqsave
	ldr	r10, [r4, #8]
	mov	r5, r0
	cmp	r10, #0
	beq	.L4770
	ldr	r3, [r4, #24]
	add	r6, r4, #24
	cmp	r6, r3
	beq	.L4763
	mov	r9, #256
	mov	r7, #512
.L4764:
	ldr	ip, [r3]
	sub	r1, r3, #36
	mov	r0, r10
	ldr	r2, [r3, #4]
	str	r2, [ip, #4]
	str	ip, [r2]
	str	r9, [r3]
	str	r7, [r3, #4]
	ldr	r3, [r10, #8]
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, [r4, #24]
	cmp	r6, r3
	bne	.L4764
.L4763:
	ldr	r3, [r4, #32]
	add	r9, r4, #32
	cmp	r9, r3
	beq	.L4765
	mov	r6, #0
	mov	r7, #0
	b	.L4766
.L4783:
	ldr	r2, [r4, #40]
	sub	r2, r2, #1
	str	r2, [r4, #40]
	ldm	r3, {r1, r2}
	strd	r6, [r3]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any
	ldr	r3, [r4, #32]
	cmp	r3, r9
	beq	.L4765
.L4766:
	subs	r0, r3, #0
	bne	.L4783
.L4765:
	mov	r1, r5
	mov	r0, r8
	add	r8, r4, #80
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r10, [r4, #12]
	mov	r5, r0
	cmp	r10, #0
	beq	.L4770
	ldr	r3, [r4, #56]
	add	r6, r4, #56
	cmp	r6, r3
	beq	.L4768
	mov	r9, #256
	mov	r7, #512
.L4769:
	ldr	ip, [r3]
	sub	r1, r3, #36
	mov	r0, r10
	ldr	r2, [r3, #4]
	str	r2, [ip, #4]
	str	ip, [r2]
	str	r9, [r3]
	str	r7, [r3, #4]
	ldr	r3, [r10, #8]
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, [r4, #56]
	cmp	r6, r3
	bne	.L4769
.L4768:
	ldr	r3, [r4, #64]
	add	r9, r4, #64
	cmp	r3, r9
	beq	.L4770
	mov	r6, #0
	mov	r7, #0
	b	.L4771
.L4784:
	ldr	r2, [r4, #72]
	sub	r2, r2, #1
	str	r2, [r4, #72]
	ldm	r3, {r1, r2}
	strd	r6, [r3]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any
	ldr	r3, [r4, #64]
	cmp	r3, r9
	beq	.L4770
.L4771:
	subs	r0, r3, #0
	bne	.L4784
.L4770:
	mov	r1, r5
	mov	r0, r8
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irqrestore
	.fnend
	.size	ghsic_data_free_buffers.part.0, .-ghsic_data_free_buffers.part.0
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_data_remove, %function
ghsic_data_remove:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movw	r5, #:lower16:.LANCHOR0
	movt	r5, #:upper16:.LANCHOR0
	strd	r6, [sp, #8]
	ldr	r6, [r5, #3276]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r7, [r0]
	cmp	r6, #0
	beq	.L4786
	ldr	r4, [r5, #3280]
	mov	r2, #20
	mov	r1, r7
	ldr	r0, [r4, #160]
	bl	strncmp
	cmp	r0, #0
	beq	.L4787
	cmp	r6, #1
	bls	.L4786
	ldr	r4, [r5, #3384]
	mov	r2, #20
	mov	r1, r7
	ldr	r0, [r4, #160]
	bl	strncmp
	cmp	r0, #0
	beq	.L4787
	cmp	r6, #2
	beq	.L4786
	ldr	r4, [r5, #3488]
	mov	r2, #20
	mov	r1, r7
	ldr	r0, [r4, #160]
	bl	strncmp
	cmp	r0, #0
	beq	.L4787
	cmp	r6, #3
	beq	.L4786
	ldr	r4, [r5, #3592]
	mov	r1, r7
	mov	r2, #20
	ldr	r0, [r4, #160]
	bl	strncmp
	cmp	r0, #0
	beq	.L4787
.L4786:
	movw	r0, #:lower16:.LC99
	ldr	r1, .L4830
	mvn	r2, #21
	movt	r0, #:upper16:.LC99
	bl	printk
	mvn	r0, #21
	b	.L4785
.L4787:
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L4790
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L4790
	blx	r3
.L4790:
	ldr	r0, [r4, #12]
	cmp	r0, #0
	beq	.L4791
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L4791
	blx	r3
.L4791:
	add	r0, r4, #120
	bl	cancel_work_sync
	cmp	r4, #0
	beq	.L4792
	mov	r0, r4
	bl	ghsic_data_free_buffers.part.0
.L4792:
	add	r0, r4, #88
	add	r4, r4, #180
	bl	cancel_work_sync
	mov	r1, r4
	mov	r0, #0
	bl	_test_and_clear_bit
	mov	r0, #1
	mov	r1, r4
	bl	_clear_bit
	mov	r0, #0
.L4785:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L4831:
	.align	2
.L4830:
	.word	.LANCHOR2+2040
	.fnend
	.size	ghsic_data_remove, .-ghsic_data_remove
	.section	.rodata.str1.4
	.align	2
.LC343:
	.ascii	"<3>%s: rx queue failed\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_data_write_tomdm, %function
ghsic_data_write_tomdm:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r0, #120
	bxeq	lr
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r3, [r0, #-116]
	.pad #12
	sub	sp, sp, #12
	cmp	r3, #0
	bne	.L4871
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L4871:
	sub	r7, r0, #40
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #44]
	mov	r5, r0
	tst	r3, #2
	ubfx	r3, r3, #1, #1
	bne	.L4836
	mov	r2, r4
	ldr	r6, [r2, #-56]!
	cmp	r6, r2
	beq	.L4836
	cmp	r6, #0
	beq	.L4836
	ldr	r2, [r4, #-48]
	mov	r8, #0
	mov	r9, #0
	mov	r1, r0
	mov	r0, r7
	sub	r2, r2, #1
	str	r2, [r4, #-48]
	ldr	ip, [r6]
	ldr	r2, [r6, #4]
	strd	r8, [r6]
	str	r2, [ip, #4]
	str	ip, [r2]
	str	r3, [r6, #40]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	mov	r5, r0
	ldr	r1, .L4877
	ldr	r0, .L4877+4
	bl	___ratelimit
	cmp	r0, #0
	bne	.L4872
.L4838:
	ldr	r3, [r4, #92]
	mov	r0, r6
	add	r3, r3, #1
	str	r3, [r4, #92]
	bl	dev_kfree_skb_any
.L4836:
.L4835:
	mov	r1, r5
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r9, [r4, #-108]
	mov	r3, r0
	cmp	r9, #0
	beq	.L4840
	sub	r2, r4, #64
	movw	r8, #:lower16:.LANCHOR1
	movt	r8, #:upper16:.LANCHOR1
	str	r2, [sp]
	b	.L4839
.L4875:
	ldr	r5, [r4, #-64]
	ldr	r2, [sp]
	sub	r10, r5, #36
	cmp	r5, r2
	beq	.L4840
	ldr	lr, [r4, #-48]
	ldr	r2, [r8, #1284]
	cmp	lr, r2
	bhi	.L4840
	ldrd	r2, [r5]
	str	r3, [r2, #4]
	str	r2, [r3]
	mov	r3, #256
	str	r3, [r5]
	str	ip, [r5, #4]
	bl	_raw_spin_unlock_irqrestore
	mvn	r3, #0
	mov	r2, #0
	ldr	r0, [r8, #1288]
	mov	r1, #208
	bl	__alloc_skb
	mov	r6, r0
	mov	r3, #0
	cmp	r6, #0
	mov	r2, #208
	mov	r1, r10
	mov	r0, r9
	beq	.L4873
	ldr	ip, [r6, #172]
	str	r3, [r6, #28]
	str	ip, [r5, #-36]
	ldr	ip, [r8, #1288]
	str	ip, [r5, #-32]
	str	r6, [r5, #-4]
	str	r3, [r6, #32]
	ldr	r3, [r9, #8]
	ldr	r3, [r3, #16]
	blx	r3
	mov	fp, r0
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	cmp	fp, #0
	mov	r3, r0
	bne	.L4874
.L4839:
	ldr	r2, [r4, #-116]
	mov	ip, #512
	mov	r1, r3
	mov	r0, r7
	cmp	r2, #0
	bne	.L4875
.L4840:
	mov	r1, r3
	mov	r0, r7
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L4873:
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r2, [r4, #-64]
	mov	r3, r0
.L4870:
	str	r5, [r2, #4]
	str	r2, [r5]
	ldr	r2, [sp]
	str	r2, [r5, #4]
	str	r5, [r4, #-64]
	b	.L4840
.L4874:
	mov	r0, r6
	str	r3, [sp, #4]
	bl	dev_kfree_skb_any
	ldr	r1, .L4877+8
	ldr	r0, .L4877+12
	bl	___ratelimit
	cmp	r0, #0
	ldr	r3, [sp, #4]
	bne	.L4876
.L4842:
	ldr	r2, [r4, #-116]
	cmp	r2, #0
	beq	.L4843
	ldr	r2, [r4, #-64]
	b	.L4870
.L4843:
	ldr	r2, [r9, #8]
	mov	r1, r10
	mov	r0, r9
	str	r3, [sp]
	ldr	r2, [r2, #12]
	blx	r2
	ldr	r3, [sp]
	b	.L4840
.L4876:
	movw	r0, #:lower16:.LC343
	ldr	r1, .L4877+8
	movt	r0, #:upper16:.LC343
	bl	printk
	ldr	r3, [sp, #4]
	b	.L4842
.L4872:
	movw	r0, #:lower16:.LC91
	ldr	r1, .L4877
	mvn	r2, #18
	movt	r0, #:upper16:.LC91
	bl	printk
	b	.L4838
.L4878:
	.align	2
.L4877:
	.word	.LANCHOR2+2060
	.word	.LANCHOR1+1260
	.word	.LANCHOR2+2084
	.word	.LANCHOR1+1292
	.fnend
	.size	ghsic_data_write_tomdm, .-ghsic_data_write_tomdm
	.section	.rodata.str1.4
	.align	2
.LC344:
	.ascii	"<3>%s: unable open bridge ch:%d err:%d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_data_connect_w, %function
ghsic_data_connect_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	cmp	r0, #88
	mov	r2, r0
	beq	.L4879
	ldr	r3, [r0, #-84]
	cmp	r3, #0
	bne	.L4890
.L4879:
	bx	lr
.L4890:
	ldr	r3, [r0, #92]
	tst	r3, #2
	beq	.L4879
	movw	r0, #:lower16:.LC344
	ldr	r1, .L4891
	mvn	r3, #18
	movt	r0, #:upper16:.LC344
	ldr	r2, [r2, #68]
	b	printk
.L4892:
	.align	2
.L4891:
	.word	.LANCHOR2+2104
	.fnend
	.size	ghsic_data_connect_w, .-ghsic_data_connect_w
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_data_free_buffers.part.0, %function
ghsuart_data_free_buffers.part.0:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	add	r8, r0, #72
	mov	r0, r8
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	bl	_raw_spin_lock_irqsave
	ldr	r10, [r4, #8]
	mov	r5, r0
	cmp	r10, #0
	beq	.L4902
	ldr	r3, [r4, #48]
	add	r6, r4, #48
	cmp	r6, r3
	beq	.L4895
	mov	r9, #256
	mov	r7, #512
.L4896:
	ldr	ip, [r3]
	sub	r1, r3, #36
	mov	r0, r10
	ldr	r2, [r3, #4]
	str	r2, [ip, #4]
	str	ip, [r2]
	str	r9, [r3]
	str	r7, [r3, #4]
	ldr	r3, [r10, #8]
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, [r4, #48]
	cmp	r6, r3
	bne	.L4896
.L4895:
	ldr	r3, [r4, #56]
	add	r9, r4, #56
	cmp	r9, r3
	beq	.L4897
	mov	r6, #0
	mov	r7, #0
	b	.L4898
.L4915:
	ldr	r2, [r4, #64]
	sub	r2, r2, #1
	str	r2, [r4, #64]
	ldm	r3, {r1, r2}
	strd	r6, [r3]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any
	ldr	r3, [r4, #56]
	cmp	r3, r9
	beq	.L4897
.L4898:
	subs	r0, r3, #0
	bne	.L4915
.L4897:
	mov	r1, r5
	mov	r0, r8
	add	r8, r4, #104
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r10, [r4, #12]
	mov	r5, r0
	cmp	r10, #0
	beq	.L4902
	ldr	r3, [r4, #80]
	add	r6, r4, #80
	cmp	r6, r3
	beq	.L4900
	mov	r9, #256
	mov	r7, #512
.L4901:
	ldr	ip, [r3]
	sub	r1, r3, #36
	mov	r0, r10
	ldr	r2, [r3, #4]
	str	r2, [ip, #4]
	str	ip, [r2]
	str	r9, [r3]
	str	r7, [r3, #4]
	ldr	r3, [r10, #8]
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, [r4, #80]
	cmp	r6, r3
	bne	.L4901
.L4900:
	ldr	r3, [r4, #88]
	add	r9, r4, #88
	cmp	r3, r9
	beq	.L4902
	mov	r6, #0
	mov	r7, #0
	b	.L4903
.L4916:
	ldr	r2, [r4, #96]
	sub	r2, r2, #1
	str	r2, [r4, #96]
	ldm	r3, {r1, r2}
	strd	r6, [r3]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any
	ldr	r3, [r4, #88]
	cmp	r3, r9
	beq	.L4902
.L4903:
	subs	r0, r3, #0
	bne	.L4916
.L4902:
	mov	r1, r5
	mov	r0, r8
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irqrestore
	.fnend
	.size	ghsuart_data_free_buffers.part.0, .-ghsuart_data_free_buffers.part.0
	.section	.rodata.str1.4
	.align	2
.LC345:
	.ascii	"<3>%s:Unable to close smux channel: %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_data_remove, %function
ghsuart_data_remove:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r2, #:lower16:.LANCHOR0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r2, #:upper16:.LANCHOR0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r3, [r0, #4]
	ldr	r1, [r2, #8]
	cmp	r3, r1
	bcs	.L4948
	mov	r1, #84
	mla	r3, r1, r3, r2
	ldr	r4, [r3, #12]
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L4920
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L4920
	blx	r3
.L4920:
	ldr	r0, [r4, #12]
	cmp	r0, #0
	beq	.L4921
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L4921
	blx	r3
.L4921:
	cmp	r4, #0
	beq	.L4922
	mov	r0, r4
	bl	ghsuart_data_free_buffers.part.0
.L4922:
	ldr	r6, [r4, #16]
	cmp	r6, #0
	bne	.L4924
	add	r7, r4, #20
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r4, #24]
	mov	r1, r0
	mov	r0, r7
	str	r6, [r4, #200]
	bl	_raw_spin_unlock_irqrestore
	cmp	r5, #0
	beq	.L4924
	ldr	r3, [r5, #112]
	cmp	r3, #0
	beq	.L4924
	mov	r0, r5
	blx	r3
.L4924:
	movw	r0, #:lower16:.LC345
	add	r5, r4, #188
	ldr	r1, .L4949
	movt	r0, #:upper16:.LC345
	ldr	r2, [r4, #180]
	bl	printk
	mov	r1, r5
	mov	r0, #1
	bl	_clear_bit
	mov	r1, r5
	mov	r0, #0
	bl	_clear_bit
	mov	r0, #2
	mov	r1, r5
	bl	_clear_bit
	mov	r0, #0
.L4917:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L4948:
	movw	r0, #:lower16:.LC99
	ldr	r1, .L4949
	mov	r2, r3
	movt	r0, #:upper16:.LC99
	bl	printk
	mvn	r0, #21
	b	.L4917
.L4950:
	.align	2
.L4949:
	.word	.LANCHOR2+2128
	.fnend
	.size	ghsuart_data_remove, .-ghsuart_data_remove
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_data_write_tomdm, %function
ghsuart_data_write_tomdm:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r0, #144
	bxeq	lr
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r3, [r0, #-140]
	.pad #12
	sub	sp, sp, #12
	cmp	r3, #0
	bne	.L4989
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L4989:
	sub	r7, r0, #40
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #40]
	mov	r6, r0
	tst	r3, #2
	bne	.L4959
	mov	r3, r5
	ldr	r4, [r3, #-56]!
	cmp	r4, r3
	beq	.L4954
	cmp	r4, #0
	beq	.L4954
	ldr	ip, [r5, #-48]
	mov	r2, #0
	mov	r3, #0
	ldr	r1, .L4994
	ldr	r0, .L4994+4
	sub	ip, ip, #1
	str	ip, [r5, #-48]
	ldr	lr, [r4]
	ldr	ip, [r4, #4]
	strd	r2, [r4]
	str	ip, [lr, #4]
	str	lr, [ip]
	bl	___ratelimit
	cmp	r0, #0
	bne	.L4990
.L4956:
	ldr	r3, [r5, #68]
	mov	r0, r4
	add	r3, r3, #1
	str	r3, [r5, #68]
	bl	dev_kfree_skb_any
.L4954:
	mov	r1, r6
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r8, [r5, #-132]
	mov	r6, r0
	cmp	r8, #0
	beq	.L4959
	ldr	r3, [r5, #40]
	tst	r3, #2
	bne	.L4959
	sub	r3, r5, #64
	movw	r9, #:lower16:.LANCHOR1
	movt	r9, #:upper16:.LANCHOR1
	str	r3, [sp, #4]
	b	.L4958
.L4992:
	ldr	r4, [r5, #-64]
	ldr	r0, [sp, #4]
	sub	r10, r4, #36
	cmp	r4, r0
	beq	.L4959
	ldr	r0, [r9, #1340]
	bl	__alloc_skb
	mov	fp, r0
	mov	lr, #256
	cmp	fp, #0
	mov	ip, #512
	mov	r1, r6
	mov	r0, r7
	beq	.L4959
	ldr	r6, [r4]
	ldr	r2, [r4, #4]
	str	r2, [r6, #4]
	str	r6, [r2]
	str	lr, [r4]
	str	ip, [r4, #4]
	ldr	r2, [fp, #172]
	str	r2, [r4, #-36]
	ldr	r2, [r9, #1340]
	str	r2, [r4, #-32]
	str	fp, [r4, #-4]
	bl	_raw_spin_unlock_irqrestore
	ldr	ip, [r8, #8]
	mov	r2, #208
	mov	r1, r10
	mov	r0, r8
	ldr	r6, [ip, #16]
	blx	r6
	mov	r6, r0
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	cmp	r6, #0
	mov	r6, r0
	bne	.L4991
.L4958:
	ldr	r0, [r5, #-140]
	mov	r2, #0
	mvn	r3, #0
	mov	r1, #32
	cmp	r0, r2
	bne	.L4992
.L4959:
	mov	r1, r6
	mov	r0, r7
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L4991:
	mov	r0, fp
	bl	dev_kfree_skb_any
	ldr	r1, .L4994+8
	ldr	r0, .L4994+12
	bl	___ratelimit
	cmp	r0, #0
	bne	.L4993
.L4960:
	ldr	r3, [r5, #-140]
	cmp	r3, #0
	beq	.L4961
	ldr	r3, [r5, #-64]
	str	r4, [r3, #4]
	str	r3, [r4]
	ldr	r3, [sp, #4]
	str	r3, [r4, #4]
	str	r4, [r5, #-64]
	b	.L4959
.L4961:
	ldr	r3, [r8, #8]
	mov	r1, r10
	mov	r0, r8
	ldr	r3, [r3, #12]
	blx	r3
	b	.L4959
.L4993:
	movw	r0, #:lower16:.LC343
	ldr	r1, .L4994+8
	movt	r0, #:upper16:.LC343
	bl	printk
	b	.L4960
.L4990:
	movw	r0, #:lower16:.LC91
	ldr	r1, .L4994
	mvn	r2, #18
	movt	r0, #:upper16:.LC91
	bl	printk
	b	.L4956
.L4995:
	.align	2
.L4994:
	.word	.LANCHOR2+2148
	.word	.LANCHOR1+1316
	.word	.LANCHOR2+2176
	.word	.LANCHOR1+1344
	.fnend
	.size	ghsuart_data_write_tomdm, .-ghsuart_data_write_tomdm
	.section	.rodata.str1.4
	.align	2
.LC346:
	.ascii	"<3>%s: usb epIn failed\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_data_write_tohost, %function
ghsuart_data_write_tohost:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r0, #160
	bxeq	lr
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r3, [r0, #-156]
	.pad #20
	sub	sp, sp, #20
	cmp	r3, #0
	bne	.L5021
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L5021:
	sub	r8, r0, #88
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r9, [r4, #-152]
	mov	r7, r0
	cmp	r9, #0
	beq	.L5000
	ldr	r3, [r4, #-112]
	sub	r2, r4, #112
	str	r2, [sp, #8]
	cmp	r2, r3
	beq	.L5000
	movw	fp, #:lower16:.LANCHOR1
	sub	r10, r4, #104
	movt	fp, #:upper16:.LANCHOR1
	mov	r1, r0
	str	r10, [sp, #4]
	str	fp, [sp, #12]
.L5004:
	ldr	r6, [r4, #-104]
	ldr	r3, [sp, #4]
	cmp	r6, r3
	beq	.L5016
	cmp	r6, #0
	beq	.L5016
	ldr	r3, [r4, #-96]
	mov	r10, #0
	mov	fp, #0
	sub	r3, r3, #1
	str	r3, [r4, #-96]
	ldrd	r2, [r6]
	strd	r10, [r6]
	str	r3, [r2, #4]
	str	r2, [r3]
	ldr	r5, [r4, #-112]
	ldr	r2, [sp, #12]
	str	r6, [r5, #-4]
	ldr	r3, [r6, #172]
	sub	r7, r5, #36
	str	r3, [r5, #-36]
	ldr	r3, [r6, #80]
	str	r3, [r5, #-32]
	ldr	r3, [r4, #32]
	ldr	r2, [r2, #1368]
	add	r3, r3, #1
	cmp	r3, r2
	str	r3, [r4, #32]
	ldrb	r3, [r5, #-10]	@ zero_extendqisi2
	orrne	r3, r3, #1
	strbne	r3, [r5, #-10]
	bne	.L5002
	bfc	r3, #0, #1
	strb	r3, [r5, #-10]
	mov	r3, #0
	str	r3, [r4, #32]
.L5002:
	ldrd	r2, [r5]
	mov	lr, #256
	mov	ip, #512
	mov	r0, r8
	str	r3, [r2, #4]
	str	r2, [r3]
	str	lr, [r5]
	str	ip, [r5, #4]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r9, #8]
	mov	r1, r7
	mov	r2, #208
	mov	r0, r9
	ldr	r3, [r3, #16]
	blx	r3
	mov	r7, r0
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	cmp	r7, #0
	mov	r1, r0
	bne	.L5022
	ldr	r2, [r4, #-112]
	ldr	r0, [sp, #8]
	ldr	r3, [r4, #48]
	cmp	r0, r2
	add	r3, r3, #1
	str	r3, [r4, #48]
	bne	.L5004
.L5016:
	mov	r7, r1
.L5000:
	mov	r1, r7
	mov	r0, r8
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L5022:
	mov	r7, r0
	movw	r0, #:lower16:.LC346
	ldr	r1, .L5023
	movt	r0, #:upper16:.LC346
	bl	printk
	ldr	r3, [r4, #-112]
	mov	r0, r6
	str	r5, [r3, #4]
	str	r3, [r5]
	ldr	r3, [sp, #8]
	str	r3, [r5, #4]
	str	r5, [r4, #-112]
	bl	dev_kfree_skb_any
	b	.L5000
.L5024:
	.align	2
.L5023:
	.word	.LANCHOR2+2200
	.fnend
	.size	ghsuart_data_write_tohost, .-ghsuart_data_write_tohost
	.section	.rodata.str1.4
	.align	2
.LC347:
	.ascii	"<6>%s: setting notify count to zero\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_close_sdio_work, %function
rmnet_close_sdio_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r0, #-108]
	cmp	r3, #0
	bxeq	lr
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r0, [r0, #-204]
	.pad #12
	sub	sp, sp, #12
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L5028
	blx	r3
.L5028:
	sub	r6, r4, #112
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #-200]
	mov	r2, #0
	mvn	ip, #94
	mov	r1, r0
	mov	r0, r6
	ldr	r3, [r3]
	strb	ip, [r3]
	strb	r2, [r3, #1]
	strb	r2, [r3, #2]
	strb	r2, [r3, #3]
	ldrb	ip, [r4, #-196]	@ zero_extendqisi2
	strh	ip, [r3, #4]	@ unaligned
	strb	r2, [r3, #6]
	strb	r2, [r3, #7]
	bl	_raw_spin_unlock_irqrestore
	ldrd	r0, [r4, #-204]
	mov	r2, #208
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	blt	.L5073
.L5029:
	ldr	r0, [r4, #-212]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L5031
	blx	r3
.L5031:
	ldr	r0, [r4, #-208]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L5032
	blx	r3
.L5032:
	sub	r0, r4, #64
	bl	cancel_work_sync
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #-108]
	mov	r10, r0
	cmp	r3, #0
	bne	.L5074
.L5044:
	mov	r1, r10
	mov	r0, r6
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L5073:
	ldr	r3, [r4, #-108]
	cmp	r3, #0
	bne	.L5075
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L5074:
	ldr	r3, [r4, #-168]
	sub	r7, r4, #168
	cmp	r3, r7
	beq	.L5035
	mov	fp, #256
	mov	r9, #512
	mov	r8, #0
.L5034:
	ldm	r3, {r1, r2}
	mov	r5, r3
	mov	r0, #0
	str	r2, [r1, #4]
	str	r1, [r2]
	str	fp, [r3]
	str	r9, [r3, #4]
	ldr	r3, [r4, #-160]
	sub	r3, r3, #1
	str	r3, [r4, #-160]
	str	r8, [r5, #-36]!
	ldr	r3, [r4, #-212]
	str	r3, [sp, #4]
	bl	kfree
	ldr	r3, [sp, #4]
	mov	r1, r5
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r3, [r2, #12]
	blx	r3
	ldr	r3, [r4, #-168]
	cmp	r3, r7
	bne	.L5034
.L5035:
	ldr	r3, [r4, #-140]
	sub	r7, r4, #140
	cmp	r3, r7
	beq	.L5036
	mov	fp, #256
	mov	r9, #512
	mov	r8, #0
.L5037:
	ldm	r3, {r1, r2}
	mov	r5, r3
	mov	r0, #0
	str	r2, [r1, #4]
	str	r1, [r2]
	str	fp, [r3]
	str	r9, [r3, #4]
	ldr	r3, [r4, #-132]
	sub	r3, r3, #1
	str	r3, [r4, #-132]
	str	r8, [r5, #-36]!
	ldr	r3, [r4, #-208]
	str	r3, [sp, #4]
	bl	kfree
	ldr	r3, [sp, #4]
	mov	r1, r5
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r3, [r2, #12]
	blx	r3
	ldr	r3, [r4, #-140]
	cmp	r3, r7
	bne	.L5037
.L5036:
	ldr	r3, [r4, #-192]
	sub	r7, r4, #192
	cmp	r7, r3
	beq	.L5038
	mov	r9, #256
	mov	r8, #512
.L5039:
	ldm	r3, {r1, r2}
	mov	r5, r3
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r9, [r3]
	str	r8, [r3, #4]
	ldr	r3, [r4, #-184]
	sub	r3, r3, #1
	str	r3, [r4, #-184]
	ldr	r0, [r5, #-8]!
	bl	kfree
	mov	r0, r5
	bl	kfree
	ldr	r3, [r4, #-192]
	cmp	r3, r7
	bne	.L5039
.L5038:
	ldr	r3, [r4, #-180]
	sub	r7, r4, #180
	cmp	r3, r7
	beq	.L5040
	mov	r9, #256
	mov	r8, #512
.L5041:
	ldm	r3, {r1, r2}
	mov	r5, r3
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r9, [r3]
	str	r8, [r3, #4]
	ldr	r3, [r4, #-172]
	sub	r3, r3, #1
	str	r3, [r4, #-172]
	ldr	r0, [r5, #-8]!
	bl	kfree
	mov	r0, r5
	bl	kfree
	ldr	r3, [r4, #-180]
	cmp	r3, r7
	bne	.L5041
.L5040:
	mov	r3, #0
	movw	r0, #:lower16:.LC347
	ldr	r1, .L5077
	movt	r0, #:upper16:.LC347
	sub	r5, r4, #156
	str	r3, [r4, #-104]
	mov	r8, #0
	mov	r9, #0
	bl	printk
.L5043:
	ldr	r0, [r4, #-156]
	cmp	r0, r5
	bne	.L5076
.L5042:
	sub	r5, r4, #128
	mov	r8, #0
	mov	r9, #0
.L5045:
	ldr	r0, [r4, #-128]
	cmp	r0, r5
	beq	.L5044
	cmp	r0, #0
	beq	.L5044
	ldr	r3, [r4, #-120]
	sub	r3, r3, #1
	str	r3, [r4, #-120]
	ldrd	r2, [r0]
	strd	r8, [r0]
	str	r3, [r2, #4]
	str	r2, [r3]
	bl	dev_kfree_skb_any
	b	.L5045
.L5075:
	movw	r0, #:lower16:.LC339
	ldr	r1, .L5077
	movt	r0, #:upper16:.LC339
	bl	printk
	b	.L5029
.L5076:
	cmp	r0, #0
	beq	.L5042
	ldr	r3, [r4, #-148]
	sub	r3, r3, #1
	str	r3, [r4, #-148]
	ldrd	r2, [r0]
	strd	r8, [r0]
	str	r3, [r2, #4]
	str	r2, [r3]
	bl	dev_kfree_skb_any
	b	.L5043
.L5078:
	.align	2
.L5077:
	.word	.LANCHOR2+2228
	.fnend
	.size	rmnet_close_sdio_work, .-rmnet_close_sdio_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_data_write_tohost, %function
ghsic_data_write_tohost:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r0, #136
	bxeq	lr
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	sub	r9, r0, #88
	mov	r0, r9
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	bl	_raw_spin_lock_irqsave
	ldr	fp, [r4, #-128]
	mov	r7, r0
	cmp	fp, #0
	beq	.L5083
	ldr	r3, [r4, #-112]
	sub	r2, r4, #112
	str	r2, [sp, #4]
	cmp	r3, r2
	subne	r3, r4, #104
	movwne	r8, #:lower16:.LANCHOR1
	movtne	r8, #:upper16:.LANCHOR1
	strne	r3, [sp]
	beq	.L5083
.L5090:
	ldr	r6, [r4, #-104]
	ldr	r3, [sp]
	cmp	r6, r3
	beq	.L5083
	cmp	r6, #0
	beq	.L5083
	ldr	r3, [r4, #-96]
	mov	r1, #0
	mov	r0, #0
	sub	r3, r3, #1
	str	r3, [r4, #-96]
	ldrd	r2, [r6]
	strd	r0, [r6]
	str	r3, [r2, #4]
	str	r2, [r3]
	ldr	r5, [r4, #-112]
	str	r6, [r5, #-4]
	ldr	r1, [r6, #172]
	sub	r10, r5, #36
	ldrb	r3, [r5, #-10]	@ zero_extendqisi2
	str	r1, [r5, #-36]
	ldr	r1, [r6, #80]
	orr	r3, r3, #2
	str	r1, [r5, #-32]
	strb	r3, [r5, #-10]
	ldr	r3, [r4, #48]
	ldr	r1, [r8, #1372]
	add	r3, r3, #1
	cmp	r3, r1
	str	r3, [r4, #48]
	ldrb	r3, [r5, #-10]	@ zero_extendqisi2
	orrne	r3, r3, #1
	strbne	r3, [r5, #-10]
	bne	.L5085
	bfc	r3, #0, #1
	strb	r3, [r5, #-10]
	mov	r3, #0
	str	r3, [r4, #48]
.L5085:
	ldr	ip, [r5]
	mov	lr, #512
	mov	r1, r7
	ldr	r3, [r5, #4]
	mov	r7, #256
	mov	r0, r9
	str	r3, [ip, #4]
	str	ip, [r3]
	mov	r3, #0
	stm	r5, {r7, lr}
	str	r3, [r6, #44]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [fp, #8]
	mov	r1, r10
	mov	r2, #208
	mov	r0, fp
	ldr	r3, [r3, #16]
	blx	r3
	mov	r7, r0
	mov	r0, r9
	bl	_raw_spin_lock_irqsave
	cmp	r7, #0
	mov	r7, r0
	bne	.L5103
	ldr	r3, [r4, #56]
	ldr	r2, [r8, #640]
	add	r3, r3, #1
	cmp	r2, #0
	str	r3, [r4, #56]
	beq	.L5088
	ldr	r2, [r4, #-96]
	ldr	r3, [r8, #1376]
	cmp	r2, r3
	bls	.L5104
.L5088:
	ldr	r3, [r4, #-112]
	ldr	r2, [sp, #4]
	cmp	r2, r3
	bne	.L5090
.L5083:
	mov	r1, r7
	mov	r0, r9
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L5104:
	add	r1, r4, #28
	mov	r0, #2
	bl	_test_and_clear_bit
	cmp	r0, #0
	beq	.L5088
	ldr	r2, [r4, #-96]
	ldr	r3, [r4, #64]
	str	r2, [r4, #80]
	add	r3, r3, #1
	str	r3, [r4, #64]
	b	.L5088
.L5103:
	movw	r0, #:lower16:.LC346
	ldr	r1, .L5105
	movt	r0, #:upper16:.LC346
	bl	printk
	ldr	r3, [r4, #-112]
	mov	r0, r6
	str	r5, [r3, #4]
	str	r3, [r5]
	ldr	r3, [sp, #4]
	str	r3, [r5, #4]
	str	r5, [r4, #-112]
	bl	dev_kfree_skb_any
	b	.L5083
.L5106:
	.align	2
.L5105:
	.word	.LANCHOR2+2252
	.fnend
	.size	ghsic_data_write_tohost, .-ghsic_data_write_tohost
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_connect_work, %function
gsmd_connect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	str	lr, [sp, #8]
	ldr	r5, [r0, #-4]
	.pad #12
	sub	sp, sp, #12
	ldr	r3, [r5, #8]
	tst	r3, #2
	bne	.L5116
.L5107:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	add	sp, sp, #8
	ldr	pc, [sp], #4
.L5116:
	movw	ip, #:lower16:gsmd_notify
	sub	r3, r0, #76
	movt	ip, #:upper16:gsmd_notify
	mov	r4, r0
	ldr	r0, [r5, #4]
	mov	r2, r5
	mov	r1, #0
	str	ip, [sp]
	bl	smd_named_open_on_edge
	subs	r3, r0, #0
	beq	.L5107
	cmn	r3, #11
	bne	.L5111
	movw	r3, #:lower16:.LANCHOR0
	mov	r1, r4
	movt	r3, #:upper16:.LANCHOR0
	mov	r2, #75
	ldr	r0, [r3, #2260]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldr	lr, [sp, #8]
	add	sp, sp, #12
	b	queue_delayed_work
.L5111:
	ldr	r1, .L5117
	movw	r0, #:lower16:.LC142
	ldr	r2, [r5, #4]
	movt	r0, #:upper16:.LC142
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldr	lr, [sp, #8]
	add	sp, sp, #12
	b	printk
.L5118:
	.align	2
.L5117:
	.word	.LANCHOR2+2276
	.fnend
	.size	gsmd_connect_work, .-gsmd_connect_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_disconnect_work, %function
gbam_disconnect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r0, #-280]
	tst	r3, #2
	bxeq	lr
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r0, [r0, #-276]
	bl	msm_bam_dmux_close
	sub	r1, r4, #280
	mov	r0, #1
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	_clear_bit
	.fnend
	.size	gbam_disconnect_work, .-gbam_disconnect_work
	.section	.rodata.str1.4
	.align	2
.LC348:
	.ascii	"<3>%s: usb_bam_disconnect_ipa failed: err:%d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam2bam_disconnect_work, %function
gbam2bam_disconnect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r0, #-168]
	cmp	r3, #7
	bxne	lr
	sub	r0, r0, #164
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	bl	usb_bam_disconnect_ipa
	subs	r2, r0, #0
	bne	.L5135
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L5135:
	movw	r0, #:lower16:.LC348
	ldr	r1, .L5136
	movt	r0, #:upper16:.LC348
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	printk
.L5137:
	.align	2
.L5136:
	.word	.LANCHOR2+2296
	.fnend
	.size	gbam2bam_disconnect_work, .-gbam2bam_disconnect_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam2bam_data_disconnect_work, %function
bam2bam_data_disconnect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r0, #-124]
	cmp	r3, #7
	bxne	lr
	sub	r0, r0, #120
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	bl	usb_bam_disconnect_ipa
	subs	r2, r0, #0
	bne	.L5149
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L5149:
	movw	r0, #:lower16:.LC348
	ldr	r1, .L5150
	movt	r0, #:upper16:.LC348
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	printk
.L5151:
	.align	2
.L5150:
	.word	.LANCHOR2+2324
	.fnend
	.size	bam2bam_data_disconnect_work, .-bam2bam_data_disconnect_work
	.section	.rodata.str1.4
	.align	2
.LC349:
	.ascii	"<3>%s: smux close timedout\012\000"
	.align	2
.LC350:
	.ascii	"<3> %s smux_open failed\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_ctrl_connect_w, %function
ghsuart_ctrl_connect_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r0, #36
	bxeq	lr
	ldr	r3, [r0, #52]
	tst	r3, #2
	bxeq	lr
	ldr	r3, [r0, #52]
	tst	r3, #1
	beq	.L5165
	sub	r0, r0, #20
	mov	r1, #900
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	bl	wait_for_completion_timeout
	cmp	r0, #0
	bne	.L5154
	movw	r0, #:lower16:.LC349
	ldr	r1, .L5168
	movt	r0, #:upper16:.LC349
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	printk
.L5165:
	movw	r0, #:lower16:.LC350
	ldr	r1, .L5168
	movt	r0, #:upper16:.LC350
	b	printk
.L5154:
	movw	r0, #:lower16:.LC350
	ldr	r1, .L5168
	movt	r0, #:upper16:.LC350
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	printk
.L5169:
	.align	2
.L5168:
	.word	.LANCHOR2+2356
	.fnend
	.size	ghsuart_ctrl_connect_w, .-ghsuart_ctrl_connect_w
	.section	.rodata.str1.4
	.align	2
.LC351:
	.ascii	"<3>%s: unable to open smux ch:%d err:%d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_data_connect_w, %function
ghsuart_data_connect_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r0, #112
	bxeq	lr
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r3, [r0, #-108]
	cmp	r3, #0
	beq	.L5170
	ldr	r3, [r0, #76]
	tst	r3, #2
	beq	.L5170
	ldr	r3, [r0, #76]
	tst	r3, #1
	beq	.L5172
	mov	r1, #900
	sub	r0, r0, #84
	bl	wait_for_completion_timeout
	cmp	r0, #0
	bne	.L5172
	movw	r0, #:lower16:.LC349
	ldr	r1, .L5189
	movt	r0, #:upper16:.LC349
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	printk
.L5170:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L5172:
	movw	r0, #:lower16:.LC351
	ldr	r1, .L5189
	mvn	r3, #18
	movt	r0, #:upper16:.LC351
	ldr	lr, [sp, #4]
	ldr	r2, [r4, #68]
	ldr	r4, [sp]
	add	sp, sp, #8
	b	printk
.L5190:
	.align	2
.L5189:
	.word	.LANCHOR2+2380
	.fnend
	.size	ghsuart_data_connect_w, .-ghsuart_data_connect_w
	.section	.rodata.str1.4
	.align	2
.LC352:
	.ascii	"TTY\000"
	.align	2
.LC353:
	.ascii	"SDIO\000"
	.align	2
.LC354:
	.ascii	"SMD\000"
	.align	2
.LC355:
	.ascii	"QTI\000"
	.align	2
.LC356:
	.ascii	"BAM\000"
	.align	2
.LC357:
	.ascii	"BAM2BAM\000"
	.align	2
.LC358:
	.ascii	"BAM2BAM_IPA\000"
	.align	2
.LC359:
	.ascii	"HSIC\000"
	.align	2
.LC360:
	.ascii	"HSUART\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	str_to_xport, %function
str_to_xport:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	movw	r0, #:lower16:.LC352
	movt	r0, #:upper16:.LC352
	mov	r1, r4
	str	lr, [sp, #4]
	mov	r2, #12
	bl	strncasecmp
	cmp	r0, #0
	moveq	r0, #1
	beq	.L5191
	movw	r0, #:lower16:.LC353
	mov	r2, #12
	movt	r0, #:upper16:.LC353
	mov	r1, r4
	bl	strncasecmp
	cmp	r0, #0
	moveq	r0, #2
	beq	.L5191
	movw	r0, #:lower16:.LC354
	mov	r2, #12
	movt	r0, #:upper16:.LC354
	mov	r1, r4
	bl	strncasecmp
	cmp	r0, #0
	moveq	r0, #3
	beq	.L5191
	movw	r0, #:lower16:.LC355
	mov	r2, #12
	movt	r0, #:upper16:.LC355
	mov	r1, r4
	bl	strncasecmp
	cmp	r0, #0
	moveq	r0, #4
	beq	.L5191
	movw	r0, #:lower16:.LC356
	mov	r2, #12
	movt	r0, #:upper16:.LC356
	mov	r1, r4
	bl	strncasecmp
	cmp	r0, #0
	moveq	r0, #5
	beq	.L5191
	movw	r0, #:lower16:.LC357
	mov	r2, #12
	movt	r0, #:upper16:.LC357
	mov	r1, r4
	bl	strncasecmp
	cmp	r0, #0
	moveq	r0, #6
	beq	.L5191
	movw	r0, #:lower16:.LC358
	mov	r2, #12
	movt	r0, #:upper16:.LC358
	mov	r1, r4
	bl	strncasecmp
	cmp	r0, #0
	moveq	r0, #7
	beq	.L5191
	movw	r0, #:lower16:.LC359
	mov	r2, #12
	movt	r0, #:upper16:.LC359
	mov	r1, r4
	bl	strncasecmp
	cmp	r0, #0
	moveq	r0, #8
	beq	.L5191
	movw	r0, #:lower16:.LC360
	mov	r2, #12
	movt	r0, #:upper16:.LC360
	mov	r1, r4
	bl	strncasecmp
	cmp	r0, #0
	moveq	r0, #9
	beq	.L5191
	ldrb	r3, [r4]	@ zero_extendqisi2
	cmp	r3, #0
	movne	r0, #0
	moveq	r0, #10
.L5191:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	str_to_xport, .-str_to_xport
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_epfile_io, %function
ffs_epfile_io:
	.fnstart
	@ args = 0, pretend = 0, frame = 40
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	subs	r7, r3, #0
	strd	r8, [sp, #16]
	mov	r8, r0
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	fp, [r0, #132]
	.pad #44
	sub	sp, sp, #44
	str	r2, [sp, #8]
	str	r1, [sp, #12]
	ldr	r3, [fp, #40]
	str	r3, [sp]
	moveq	r3, r2
	streq	r3, [sp, #4]
	beq	.L5205
	sub	r2, r2, #1
	mvn	r2, r2, lsr #10
	mvn	r2, r2, lsl #10
	add	r3, r2, #1
	str	r3, [sp, #4]
.L5205:
	ldr	r4, [fp, #36]
	cmp	r4, #0
	bne	.L5233
	ldr	r3, [sp]
	ldr	r2, [r3, #96]
	cmp	r2, #2
	bne	.L5207
	mov	r3, sp
	bic	r10, r3, #8128
	bic	r10, r10, #63
.L5208:
	ldr	r6, [fp, #44]
	cmp	r6, #0
	beq	.L5254
.L5230:
	ldrb	r5, [fp, #57]	@ zero_extendqisi2
	and	r9, r7, #1
	clz	r5, r5
	lsr	r5, r5, #5
	cmp	r9, r5
	eor	r3, r9, r5
	beq	.L5213
	ldrb	r2, [fp, #58]	@ zero_extendqisi2
	cmp	r2, #0
	bne	.L5238
.L5213:
	cmp	r4, #0
	eoreq	r3, r3, #1
	movne	r3, #0
	cmp	r3, #0
	beq	.L5214
	movw	r1, #32976
	ldr	r0, [sp, #4]
	bl	__kmalloc
	subs	r4, r0, #0
	beq	.L5239
	cmp	r7, #0
	beq	.L5255
.L5214:
	ldr	r3, [r8, #36]
	mov	r0, fp
	tst	r3, #2048
	beq	.L5215
	bl	mutex_trylock
	cmp	r0, #0
	beq	.L5241
.L5218:
	ldr	r0, [fp, #40]
	add	r0, r0, #28
	bl	_raw_spin_lock_irq
	ldr	r3, [fp, #44]
	cmp	r3, r6
	bne	.L5256
	cmp	r9, r5
	bne	.L5257
	ldr	r8, [r6, #4]
	movw	r2, #:lower16:ffs_epfile_io_complete
	cmp	r7, #0
	movt	r2, #:upper16:ffs_epfile_io_complete
	ldr	r9, [sp]
	ldr	r3, [sp, #4]
	str	r4, [r8]
	mov	r1, r8
	str	r2, [r8, #28]
	movne	r2, #0
	str	r3, [r8, #4]
	strne	r2, [r9, #72]!
	mov	r2, #32
	streq	r7, [r9, #56]!
	str	r9, [r8, #32]
	ldr	r0, [r6]
	ldr	ip, [r0, #8]
	ldr	r7, [ip, #16]
	blx	r7
	ldr	r2, [fp, #40]
	mov	r7, r0
	add	r0, r2, #28
	bl	_raw_spin_unlock_irq
	cmp	r7, #0
	blt	.L5242
	mov	r0, r9
	bl	wait_for_completion_interruptible
	cmp	r0, #0
	ldr	r0, [fp, #40]
	add	r0, r0, #28
	bne	.L5258
	bl	_raw_spin_lock_irq
	ldr	r0, [fp, #40]
	ldr	r2, [fp, #44]
	cmp	r2, r6
	beq	.L5259
	add	r0, r0, #28
	mvn	r9, #18
	bl	_raw_spin_unlock_irq
.L5221:
	mov	r0, fp
	bl	mutex_unlock
	b	.L5209
.L5215:
	bl	mutex_lock_interruptible
	cmp	r0, #0
	beq	.L5218
	mov	r9, r0
.L5209:
	mov	r0, r4
	bl	kfree
.L5204:
	mov	r0, r9
	add	sp, sp, #44
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L5254:
	ldr	r3, [r8, #36]
	tst	r3, #2048
	bne	.L5241
	cmp	r7, #0
	beq	.L5237
	ldr	r3, [fp, #36]
	cmp	r3, #0
	bne	.L5237
	ldr	r0, [r10, #12]
	movw	r2, #:lower16:autoremove_wake_function
	add	r1, sp, #32
	movt	r2, #:upper16:autoremove_wake_function
	add	r5, fp, #24
	str	r3, [sp, #20]
	str	r1, [sp, #32]
	str	r0, [sp, #24]
	str	r2, [sp, #28]
	str	r1, [sp, #36]
	b	.L5212
.L5260:
	bl	schedule
.L5212:
	mov	r2, #1
	add	r1, sp, #20
	mov	r0, r5
	bl	prepare_to_wait
	ldr	r6, [fp, #44]
	cmp	r6, #0
	bne	.L5210
	ldr	r3, [r10, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L5260
	add	r1, sp, #20
	mov	r0, r5
	mov	r9, #65024
	movt	r9, 65535
	bl	finish_wait
	b	.L5209
.L5259:
	ldr	r9, [r6, #24]
	add	r0, r0, #28
	bl	_raw_spin_unlock_irq
	cmp	r9, #0
	movle	r5, #0
	andgt	r5, r5, #1
	cmp	r5, #0
	beq	.L5221
	ldr	r3, [sp, #8]
	cmp	r9, r3
	mvnhi	r9, #74
	bhi	.L5221
	mov	r3, sp
	bic	r2, r3, #8128
	ldr	r3, [sp, #12]
	bic	r2, r2, #63
	ldr	r2, [r2, #8]
	.syntax divided
@ 448 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/uaccess.h" 1
	adds r1, r3, r9; sbcccs r1, r1, r2; movcc r2, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r2, #0
	beq	.L5227
.L5228:
	mvn	r9, #13
	b	.L5221
.L5255:
	ldr	r2, [sp, #8]
	ldr	r1, [sp, #12]
	bl	__copy_from_user
	cmp	r0, #0
	beq	.L5214
	mvn	r9, #13
	b	.L5209
.L5237:
	mvn	r9, #18
	b	.L5209
.L5210:
	add	r1, sp, #20
	mov	r0, r5
	bl	finish_wait
	b	.L5230
.L5227:
	mov	r0, r3
	mov	r2, r9
	mov	r1, r4
	bl	__copy_to_user
	cmp	r0, #0
	beq	.L5221
	b	.L5228
.L5256:
	ldr	r0, [fp, #40]
	add	r0, r0, #28
	bl	_raw_spin_unlock_irq
	mov	r0, fp
	bl	mutex_unlock
	ldr	r3, [fp, #40]
	ldr	r3, [r3, #96]
	cmp	r3, #2
	beq	.L5208
.L5207:
	movw	r0, #:lower16:.LC12
	movw	r1, #787
	movt	r0, #:upper16:.LC12
	mvn	r9, #18
	bl	warn_slowpath_null
	b	.L5209
.L5239:
	mvn	r9, #11
	b	.L5204
.L5242:
	mvn	r9, #4
	b	.L5221
.L5257:
	ldr	r0, [r6]
	cmp	r0, #0
	beq	.L5261
	ldr	r2, [r0, #8]
	mov	r1, #1
	ldr	r2, [r2, #24]
	blx	r2
.L5229:
	ldr	r0, [fp, #40]
	mvn	r9, #73
	add	r0, r0, #28
	bl	_raw_spin_unlock_irq
	b	.L5221
.L5258:
	bl	_raw_spin_lock_irq
	ldr	r2, [fp, #44]
	cmp	r2, r6
	beq	.L5262
.L5225:
	ldr	r0, [fp, #40]
	mvn	r9, #3
	add	r0, r0, #28
	bl	_raw_spin_unlock_irq
	b	.L5221
.L5262:
	ldr	r0, [r6]
	mov	r1, r8
	ldr	r2, [r0, #8]
	ldr	r2, [r2, #20]
	blx	r2
	b	.L5225
.L5241:
	mvn	r9, #10
	b	.L5209
.L5233:
	mvn	r9, #18
	b	.L5204
.L5238:
	mvn	r9, #21
	b	.L5209
.L5261:
	movw	r0, #:lower16:.LC12
	movw	r1, #862
	movt	r0, #:upper16:.LC12
	bl	warn_slowpath_null
	b	.L5229
	.fnend
	.size	ffs_epfile_io, .-ffs_epfile_io
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_epfile_write, %function
ffs_epfile_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r3, #0
	b	ffs_epfile_io
	.fnend
	.size	ffs_epfile_write, .-ffs_epfile_write
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_epfile_read, %function
ffs_epfile_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r3, #1
	b	ffs_epfile_io
	.fnend
	.size	ffs_epfile_read, .-ffs_epfile_read
	.section	.rodata.str1.4
	.align	2
.LC361:
	.ascii	"<3>%s: usb disconnected\012\000"
	.align	2
.LC362:
	.ascii	"<3>%s: port:%pK port#%d sdio read failed err:%d\000"
	.text
	.align	2
	.global	gsdio_tx_pull
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_tx_pull, %function
gsdio_tx_pull:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	sub	r8, r0, #60
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r3, [r0, #36]
	.pad #8
	sub	sp, sp, #8
	cmp	r3, #0
	beq	.L5276
	sub	r5, r0, #56
	sub	r7, r0, #8
	mov	r0, r5
	bl	_raw_spin_lock_irq
	ldr	r6, [r4, #-8]
	cmp	r7, r6
	beq	.L5270
	ldr	r3, [r4, #48]
	cmp	r3, #0
	bne	.L5277
.L5270:
	mov	r0, r5
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irq
.L5277:
	ldrd	r2, [r6]
	mov	ip, #256
	mov	r1, #512
	ldr	lr, [r4, #36]
	mov	r0, r5
	sub	r10, r6, #36
	ldr	r9, [lr, #80]
	str	r3, [r2, #4]
	str	r2, [r3]
	str	ip, [r6]
	str	r1, [r6, #4]
	ldr	r3, [r4, #16]
	sub	r3, r3, #1
	str	r3, [r4, #16]
	bl	_raw_spin_unlock_irq
	mov	r0, r5
	bl	_raw_spin_lock_irq
	mvn	r3, #18
	movw	r0, #:lower16:.LC362
	ldr	r1, .L5279
	mov	r2, r8
	movt	r0, #:upper16:.LC362
	str	r3, [sp]
	ldr	r3, [r4, #-60]
	bl	printk
	ldr	r3, [r4, #36]
	cmp	r3, #0
	beq	.L5278
	ldr	r3, [r4, #-8]
	str	r6, [r3, #4]
	stm	r6, {r3, r7}
	ldr	r3, [r4, #16]
	str	r6, [r4, #-8]
	add	r3, r3, #1
	str	r3, [r4, #16]
	b	.L5270
.L5278:
	ldr	r0, [r6, #-36]
	bl	kfree
	ldr	r3, [r9, #8]
	mov	r1, r10
	mov	r0, r9
	ldr	r3, [r3, #12]
	blx	r3
	b	.L5270
.L5276:
	movw	r0, #:lower16:.LC361
	ldr	r1, .L5279
	movt	r0, #:upper16:.LC361
	bl	printk
	cmp	r8, #0
	bne	.L5267
	ldr	r1, .L5279+4
	movw	r0, #:lower16:.LC15
	movt	r0, #:upper16:.LC15
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	printk
.L5267:
	ldr	r3, [r4, #60]
	ldr	r3, [r3, #4]
	cmp	r3, #0
	bne	.L5269
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L5269:
	b	.L5269
.L5280:
	.align	2
.L5279:
	.word	.LANCHOR2+2404
	.word	.LANCHOR2+2420
	.fnend
	.size	gsdio_tx_pull, .-gsdio_tx_pull
	.section	.rodata.str1.4
	.align	2
.LC363:
	.ascii	"<3>%s: tx pkt dropped: tx_drop_cnt:%u\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_notify, %function
gbam_notify:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	mov	r5, r2
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	beq	.L5282
	cmp	r1, #1
	bne	.L5281
	cmp	r2, #0
	beq	.L5281
	mov	r0, r2
	add	r5, r4, #4
	bl	dev_kfree_skb_any
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #240]
	mov	r1, r0
	mov	r0, r5
	sub	r3, r3, #1
	str	r3, [r4, #240]
	bl	_raw_spin_unlock_irqrestore
	movw	r3, #:lower16:.LANCHOR0
	add	r1, r4, #80
	ldrd	r4, [sp]
	movt	r3, #:upper16:.LANCHOR0
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	ldr	r0, [r3, #2796]
	b	queue_work
.L5281:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L5282:
	cmp	r2, #0
	beq	.L5281
	add	r7, r0, #8
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #12]
	mov	r6, r0
	cmp	r3, #0
	beq	.L5287
	movw	r3, #:lower16:.LANCHOR1
	ldr	r2, [r4, #44]
	movt	r3, #:upper16:.LANCHOR1
	ldr	r3, [r3, #1380]
	cmp	r2, r3
	bhi	.L5298
	ldr	r3, [r4, #40]
	add	r2, r4, #36
	mov	r1, r0
	mov	r0, r7
	strd	r2, [r5]
	str	r5, [r3]
	ldr	r3, [r4, #44]
	str	r5, [r4, #40]
	add	r3, r3, #1
	str	r3, [r4, #44]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	gbam_write_data_tohost
.L5298:
	ldr	r3, [r4, #244]
	ldr	r0, .L5300
	add	r3, r3, #1
	str	r3, [r4, #244]
	bl	__printk_ratelimit
	cmp	r0, #0
	bne	.L5299
.L5287:
	mov	r0, r7
	mov	r1, r6
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	dev_kfree_skb_any
.L5299:
	movw	r0, #:lower16:.LC363
	ldr	r1, .L5300
	movt	r0, #:upper16:.LC363
	ldr	r2, [r4, #244]
	bl	printk
	b	.L5287
.L5301:
	.align	2
.L5300:
	.word	.LANCHOR2+2440
	.fnend
	.size	gbam_notify, .-gbam_notify
	.section	.rodata.str1.4
	.align	2
.LC364:
	.ascii	"UNDEFINED\000"
	.align	2
.LC365:
	.ascii	"<3>%s: Un-supported transport: %s\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	frmnet_resume, %function
frmnet_resume:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldrb	r3, [r0, #108]	@ zero_extendqisi2
	movw	r1, #:lower16:.LANCHOR0
	movt	r1, #:upper16:.LANCHOR0
	add	r3, r3, r3, lsl #1
	add	r3, r1, r3, lsl #3
	ldr	r0, [r3, #220]
	sub	ip, r0, #1
	cmp	ip, #9
	bhi	.L5306
	movw	r2, #:lower16:.LANCHOR2
	cmp	r0, #7
	movt	r2, #:upper16:.LANCHOR2
	add	r2, r2, ip, lsl #2
	ldr	r2, [r2, #2460]
	bhi	.L5302
	cmp	r0, #5
	bhi	.L5305
	bne	.L5303
.L5302:
	bx	lr
.L5306:
	movw	r2, #:lower16:.LC364
	movt	r2, #:upper16:.LC364
.L5303:
	movw	r0, #:lower16:.LC365
	ldr	r1, .L5307
	movt	r0, #:upper16:.LC365
	b	printk
.L5305:
	ldrb	r3, [r3, #228]	@ zero_extendqisi2
	ldr	r0, [r1, #2796]
	add	r1, r1, r3, lsl #2
	ldr	r1, [r1, #3696]
	add	r1, r1, #332
	b	queue_work
.L5308:
	.align	2
.L5307:
	.word	.LANCHOR2+2500
	.fnend
	.size	frmnet_resume, .-frmnet_resume
	.section	.rodata.str1.4
	.align	2
.LC366:
	.ascii	"<3>RNDIS header is NULL.\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_add_header, %function
rndis_add_header:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrb	r6, [r0, #116]	@ zero_extendqisi2
	cmp	r6, #0
	beq	.L5310
	ldr	r4, [r0, #136]
	cmp	r4, #0
	beq	.L5311
	mov	r1, #44
	mov	r0, r4
	bl	__memzero
	mov	r3, #0
	mov	r2, #1
	mov	r1, #36
	strb	r2, [r4]
	strb	r3, [r4, #1]
	strb	r3, [r4, #2]
	strb	r3, [r4, #3]
	ldr	r2, [r5, #80]
	strb	r1, [r4, #8]
	strb	r3, [r4, #9]
	strb	r3, [r4, #10]
	add	r2, r2, #44
	str	r2, [r4, #4]	@ unaligned
	strb	r3, [r4, #11]
	ldr	r3, [r5, #80]
	str	r3, [r4, #12]	@ unaligned
	mov	r4, r5
.L5309:
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L5310:
	mov	r1, #44
	mov	r0, r5
	bl	skb_realloc_headroom
	subs	r4, r0, #0
	beq	.L5313
	mov	r1, #44
	bl	skb_push
	mov	r1, #44
	mov	r7, r0
	bl	__memzero
	mov	r3, #1
	mov	r2, #36
	strb	r3, [r7]
	strb	r6, [r7, #1]
	strb	r6, [r7, #2]
	strb	r6, [r7, #3]
	ldr	r3, [r4, #80]
	str	r3, [r7, #4]	@ unaligned
	strb	r2, [r7, #8]
	strb	r6, [r7, #9]
	strb	r6, [r7, #10]
	strb	r6, [r7, #11]
	ldr	r3, [r4, #80]
	sub	r3, r3, #44
	str	r3, [r7, #12]	@ unaligned
.L5313:
	mov	r0, r5
	bl	dev_kfree_skb_any
	b	.L5309
.L5311:
	movw	r0, #:lower16:.LC366
	movt	r0, #:upper16:.LC366
	bl	printk
	b	.L5309
	.fnend
	.size	rndis_add_header, .-rndis_add_header
	.section	.rodata.str1.4
	.align	2
.LC367:
	.ascii	"<3>%s: %s: %s failed\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	android_bind_config, %function
android_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r1, #:lower16:.LANCHOR0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r0
	movt	r1, #:upper16:.LANCHOR0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r3, [r1, #196]!
	ldr	r0, [r0, #24]
	cmp	r3, r1
	beq	.L5319
	sub	r3, r3, #208
	b	.L5320
.L5336:
	ldr	r3, [r3, #208]
	cmp	r3, r1
	sub	r3, r3, #208
	beq	.L5319
.L5320:
	ldr	r2, [r3, #8]
	cmp	r0, r2
	bne	.L5336
.L5319:
	mov	r7, r5
	ldr	r4, [r7, #112]!
	cmp	r7, r4
	sub	r4, r4, #4
	beq	.L5321
.L5327:
	ldr	r0, [r4]
	mov	r1, r5
	ldr	r3, [r0, #40]
	blx	r3
	subs	r6, r0, #0
	bne	.L5337
	ldr	r4, [r4, #4]
	cmp	r7, r4
	sub	r4, r4, #4
	bne	.L5327
.L5321:
	mov	r6, #0
.L5318:
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L5337:
	ldr	r2, .L5338
	movw	r0, #:lower16:.LC367
	add	r7, r5, #36
	ldr	r3, [r4]
	movt	r0, #:upper16:.LC367
	mov	r8, #512
	mov	r4, #256
	mov	r1, r2
	ldr	r3, [r3]
	bl	printk
.L5324:
	ldr	r1, [r5, #36]
	cmp	r1, r7
	bne	.L5325
	ldr	r3, [r5, #12]
	cmp	r3, #0
	beq	.L5318
	mov	r0, r5
	blx	r3
	b	.L5318
.L5325:
	ldrd	r2, [r1]
	str	r3, [r2, #4]
	str	r2, [r3]
	ldr	r3, [r1, #-36]
	stm	r1, {r4, r8}
	cmp	r3, #0
	beq	.L5324
	sub	r1, r1, #64
	mov	r0, r5
	blx	r3
	b	.L5324
.L5339:
	.align	2
.L5338:
	.word	.LANCHOR2+2516
	.fnend
	.size	android_bind_config, .-android_bind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ptp_function_init, %function
ptp_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	ptp_function_init, .-ptp_function_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	_snd_pcm_hw_param_set.constprop.0, %function
_snd_pcm_hw_param_set.constprop.0:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	add	r0, r0, #4
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L5365
	sub	r2, r3, #1
	tst	r2, r3
	bne	.L5344
	ldr	r3, [r4, #8]
	cmp	r3, #0
	beq	.L5343
.L5344:
	lsr	r6, r1, #5
	and	r3, r1, #31
	mov	r5, #1
	add	r6, r4, r6, lsl #2
	mov	r1, #32
	ldr	r7, [r6, #4]
	and	r7, r7, r5, lsl r3
	bl	__memzero
	str	r7, [r6, #4]
	ldr	r3, [r4, #4]
	cmp	r3, #0
	bne	.L5351
	ldr	r3, [r4, #8]
	cmp	r3, #0
	beq	.L5347
.L5351:
	mov	r0, r5
	b	.L5346
.L5365:
	ldr	r3, [r4, #8]
	cmp	r3, #0
	beq	.L5343
	sub	r2, r3, #1
	tst	r2, r3
	bne	.L5344
.L5343:
	lsr	r5, r1, #5
	and	r3, r1, #31
	mov	r2, #1
	add	r5, r4, r5, lsl #2
	mov	r1, #32
	ldr	r6, [r5, #4]
	and	r6, r6, r2, lsl r3
	bl	__memzero
	str	r6, [r5, #4]
	ldr	r0, [r4, #4]
	cmp	r0, #0
	bne	.L5366
	ldr	r3, [r4, #8]
	cmp	r3, #0
	bne	.L5341
.L5347:
	mvn	r0, #21
.L5346:
	ldr	r2, [r4, #512]
	ldr	r3, [r4, #516]
	orr	r2, r2, #1
	orr	r3, r3, #1
	str	r2, [r4, #512]
	str	r3, [r4, #516]
.L5341:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L5366:
	mov	r0, #0
	b	.L5341
	.fnend
	.size	_snd_pcm_hw_param_set.constprop.0, .-_snd_pcm_hw_param_set.constprop.0
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	_snd_pcm_hw_param_set.constprop.1, %function
_snd_pcm_hw_param_set.constprop.1:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	add	r0, r0, #36
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L5391
	sub	r2, r3, #1
	tst	r2, r3
	bne	.L5370
	ldr	r3, [r4, #40]
	cmp	r3, #0
	beq	.L5369
.L5370:
	lsr	r6, r1, #5
	and	r3, r1, #31
	mov	r5, #1
	add	r6, r4, r6, lsl #2
	mov	r1, #32
	ldr	r7, [r6, #36]
	and	r7, r7, r5, lsl r3
	bl	__memzero
	str	r7, [r6, #36]
	ldr	r3, [r4, #36]
	cmp	r3, #0
	bne	.L5377
	ldr	r3, [r4, #40]
	cmp	r3, #0
	beq	.L5373
.L5377:
	mov	r0, r5
	b	.L5372
.L5391:
	ldr	r3, [r4, #40]
	cmp	r3, #0
	beq	.L5369
	sub	r2, r3, #1
	tst	r2, r3
	bne	.L5370
.L5369:
	lsr	r5, r1, #5
	and	r3, r1, #31
	mov	r2, #1
	add	r5, r4, r5, lsl #2
	mov	r1, #32
	ldr	r6, [r5, #36]
	and	r6, r6, r2, lsl r3
	bl	__memzero
	str	r6, [r5, #36]
	ldr	r0, [r4, #36]
	cmp	r0, #0
	bne	.L5392
	ldr	r3, [r4, #40]
	cmp	r3, #0
	bne	.L5367
.L5373:
	mvn	r0, #21
.L5372:
	ldr	r2, [r4, #512]
	ldr	r3, [r4, #516]
	orr	r2, r2, #2
	orr	r3, r3, #2
	str	r2, [r4, #512]
	str	r3, [r4, #516]
.L5367:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L5392:
	mov	r0, #0
	b	.L5367
	.fnend
	.size	_snd_pcm_hw_param_set.constprop.1, .-_snd_pcm_hw_param_set.constprop.1
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	_snd_pcm_hw_param_set.constprop.2, %function
_snd_pcm_hw_param_set.constprop.2:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r2, r1
	mov	r4, r0
	str	lr, [sp, #4]
	.pad #16
	sub	sp, sp, #16
	add	r0, r0, #284
	ldrb	r3, [sp, #8]	@ zero_extendqisi2
	mov	r1, sp
	str	r2, [sp]
	str	r2, [sp, #4]
	bic	r3, r3, #15
	orr	r3, r3, #4
	strb	r3, [sp, #8]
	bl	snd_interval_refine
	cmp	r0, #0
	beq	.L5393
	ldr	r2, [r4, #512]
	ldr	r3, [r4, #516]
	orr	r2, r2, #1024
	orr	r3, r3, #1024
	str	r2, [r4, #512]
	str	r3, [r4, #516]
.L5393:
	add	sp, sp, #16
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	_snd_pcm_hw_param_set.constprop.2, .-_snd_pcm_hw_param_set.constprop.2
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	_snd_pcm_hw_param_set.constprop.3, %function
_snd_pcm_hw_param_set.constprop.3:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r2, r1
	mov	r4, r0
	str	lr, [sp, #4]
	.pad #16
	sub	sp, sp, #16
	add	r0, r0, #296
	ldrb	r3, [sp, #8]	@ zero_extendqisi2
	mov	r1, sp
	str	r2, [sp]
	str	r2, [sp, #4]
	bic	r3, r3, #15
	orr	r3, r3, #4
	strb	r3, [sp, #8]
	bl	snd_interval_refine
	cmp	r0, #0
	beq	.L5399
	ldr	r2, [r4, #512]
	ldr	r3, [r4, #516]
	orr	r2, r2, #2048
	orr	r3, r3, #2048
	str	r2, [r4, #512]
	str	r3, [r4, #516]
.L5399:
	add	sp, sp, #16
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	_snd_pcm_hw_param_set.constprop.3, .-_snd_pcm_hw_param_set.constprop.3
	.section	.rodata.str1.4
	.align	2
.LC368:
	.ascii	"<3>%s: %s: Card is NULL\000"
	.align	2
.LC369:
	.ascii	"<3>%s: SNDRV_PCM_IOCTL_DROP failed: %d\012\000"
	.align	2
.LC370:
	.ascii	"<3>%s: Preparing playback failed: %d\012\000"
	.align	2
.LC371:
	.ascii	"<3>%s: Setting playback params failed: err %d\000"
	.align	2
.LC372:
	.ascii	"<3>%s: Failed to allocate hw params\000"
	.align	2
.LC373:
	.ascii	"<3>%s: SNDRV_PCM_IOCTL_HW_PARAMS failed: %d\012\000"
	.align	2
.LC374:
	.ascii	"<3>%s: Preparing capture failed: %d\012\000"
	.align	2
.LC375:
	.ascii	"<3>%s: Failed to allocate sw params\000"
	.align	2
.LC376:
	.ascii	"<3>%s: SNDRV_PCM_IOCTL_SW_PARAMS failed: %d\012\000"
	.align	2
.LC377:
	.ascii	"<3>%s: Setting capture params failed: err %d\000"
	.align	2
.LC378:
	.ascii	"<6>%s: Initialized capture params\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gaudio_open_streams, %function
gaudio_open_streams:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	movw	r8, #:lower16:.LANCHOR0
	movt	r8, #:upper16:.LANCHOR0
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r5, [r8, #3708]
	cmp	r5, #0
	beq	.L5446
	movw	r7, #:lower16:kmalloc_caches
	mov	r3, #3
	ldr	r9, [r5, #116]
	movt	r7, #:upper16:kmalloc_caches
	mov	r2, #8000
	ldr	r0, [r7, #40]
	str	r3, [r5, #120]
	mov	r3, #2
	str	r3, [r5, #124]
	str	r3, [r5, #128]
	cmp	r0, #0
	str	r2, [r5, #132]
	beq	.L5431
	movw	r1, #32976
	bl	kmem_cache_alloc
	subs	r4, r0, #0
	beq	.L5447
.L5408:
	mov	r0, r4
	bl	_snd_pcm_hw_params_any
	mov	r0, r4
	ldr	r1, [r5, #120]
	bl	_snd_pcm_hw_param_set.constprop.0
	mov	r0, r4
	ldr	r1, [r5, #124]
	bl	_snd_pcm_hw_param_set.constprop.1
	mov	r0, r4
	ldr	r1, [r5, #128]
	bl	_snd_pcm_hw_param_set.constprop.2
	mov	r0, r4
	ldr	r1, [r5, #132]
	bl	_snd_pcm_hw_param_set.constprop.3
	mov	r2, #0
	movw	r1, #16707
	mov	r0, r9
	bl	snd_pcm_kernel_ioctl
	subs	r2, r0, #0
	blt	.L5448
.L5410:
	movw	r1, #16657
	mov	r2, r4
	movt	r1, 49756
	mov	r0, r9
	bl	snd_pcm_kernel_ioctl
	subs	r6, r0, #0
	blt	.L5449
	mov	r2, #0
	mov	r0, r9
	movw	r1, #16704
	bl	snd_pcm_kernel_ioctl
	subs	r2, r0, #0
	blt	.L5450
.L5411:
	ldr	r3, [r4, #4]
	cmp	r3, #0
	bne	.L5433
	ldr	r3, [r4, #8]
	cmp	r3, #0
	movne	r2, #32
	bne	.L5412
.L5413:
	str	r3, [r5, #120]
	ldr	r3, [r4, #36]
	cmp	r3, #0
	bne	.L5435
	ldr	r3, [r4, #40]
	cmp	r3, #0
	movne	r2, #32
	bne	.L5414
.L5415:
	str	r3, [r5, #124]
	ldr	r3, [r4, #284]
	mov	r0, r4
	str	r3, [r5, #128]
	ldr	r3, [r4, #296]
	str	r3, [r5, #132]
	bl	kfree
	ldr	r5, [r8, #3708]
	mov	ip, #3
	mov	r1, #2
	ldr	r0, [r7, #40]
	mov	r2, #1
	mov	r3, #8000
	ldr	r8, [r5, #144]
	cmp	r0, #0
	ldr	r9, [r8, #208]
	str	ip, [r5, #148]
	str	r1, [r5, #152]
	strd	r2, [r5, #156]
	beq	.L5451
	movw	r1, #32976
	bl	kmem_cache_alloc
	subs	r4, r0, #0
	beq	.L5452
.L5416:
	mov	r0, r4
	bl	_snd_pcm_hw_params_any
	mov	r0, r4
	ldr	r1, [r5, #148]
	bl	_snd_pcm_hw_param_set.constprop.0
	mov	r0, r4
	ldr	r1, [r5, #152]
	bl	_snd_pcm_hw_param_set.constprop.1
	mov	r0, r4
	ldr	r1, [r5, #156]
	bl	_snd_pcm_hw_param_set.constprop.2
	mov	r0, r4
	ldr	r1, [r5, #160]
	bl	_snd_pcm_hw_param_set.constprop.3
	mov	r2, #0
	movw	r1, #16707
	mov	r0, r8
	bl	snd_pcm_kernel_ioctl
	subs	r2, r0, #0
	blt	.L5453
.L5419:
	movw	r1, #16657
	mov	r2, r4
	movt	r1, 49756
	mov	r0, r8
	bl	snd_pcm_kernel_ioctl
	subs	r6, r0, #0
	blt	.L5454
	mov	r2, #0
	movw	r1, #16704
	mov	r0, r8
	bl	snd_pcm_kernel_ioctl
	subs	r2, r0, #0
	blt	.L5455
.L5421:
	ldr	r3, [r4, #4]
	cmp	r3, #0
	bne	.L5438
	ldr	r3, [r4, #8]
	cmp	r3, #0
	movne	r2, #32
	bne	.L5422
.L5423:
	str	r3, [r5, #148]
	ldr	r3, [r4, #36]
	cmp	r3, #0
	bne	.L5440
	ldr	r3, [r4, #40]
	cmp	r3, #0
	movne	r2, #32
	bne	.L5424
.L5425:
	str	r3, [r5, #152]
	ldr	r3, [r4, #284]
	str	r3, [r5, #156]
	ldr	r3, [r4, #296]
	str	r3, [r5, #160]
	ldr	r0, [r9, #52]
	bl	snd_pcm_format_physical_width
	mov	r3, r0
	mov	r0, r4
	str	r3, [r9, #88]
	bl	kfree
	ldr	r0, [r7, #28]
	cmp	r0, #0
	beq	.L5442
	movw	r1, #32976
	bl	kmem_cache_alloc
	subs	r5, r0, #0
	beq	.L5456
.L5426:
	ldr	r3, [r4, #332]
	mov	r2, #1
	mov	ip, #0
	mvn	lr, #-2147483648
	movw	r1, #16659
	mov	r0, r8
	movt	r1, 49256
	str	ip, [r5]
	str	r2, [r5, #4]
	lsr	r3, r3, r2
	str	r3, [r5, #12]
	str	r3, [r5, #16]
	str	r2, [r5, #20]
	mov	r2, r5
	str	lr, [r5, #24]
	str	ip, [r5, #28]
	str	ip, [r5, #32]
	bl	snd_pcm_kernel_ioctl
	subs	r6, r0, #0
	blt	.L5457
	mov	r0, r5
	bl	kfree
	cmp	r6, #0
	bne	.L5418
	movw	r0, #:lower16:.LC378
	ldr	r1, .L5458
	movt	r0, #:upper16:.LC378
	bl	printk
	b	.L5405
.L5431:
	mov	r4, #16
	b	.L5408
.L5442:
	mov	r5, #16
	b	.L5426
.L5451:
	mov	r4, #16
	b	.L5416
.L5440:
	mov	r2, #0
.L5424:
	add	r1, r2, #31
	rsb	r2, r3, #0
	and	r3, r3, r2
	.syntax divided
@ 268 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/bitops.h" 1
	clz	r3, r3
@ 0 "" 2
	.arm
	.syntax unified
	sub	r3, r1, r3
	b	.L5425
.L5438:
	mov	r2, #0
.L5422:
	add	r1, r2, #31
	rsb	r2, r3, #0
	and	r3, r3, r2
	.syntax divided
@ 268 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/bitops.h" 1
	clz	r3, r3
@ 0 "" 2
	.arm
	.syntax unified
	sub	r3, r1, r3
	b	.L5423
.L5435:
	mov	r2, #0
.L5414:
	add	r1, r2, #31
	rsb	r2, r3, #0
	and	r3, r3, r2
	.syntax divided
@ 268 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/bitops.h" 1
	clz	r3, r3
@ 0 "" 2
	.arm
	.syntax unified
	sub	r3, r1, r3
	b	.L5415
.L5433:
	mov	r2, #0
.L5412:
	add	r1, r2, #31
	rsb	r2, r3, #0
	and	r3, r3, r2
	.syntax divided
@ 268 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/bitops.h" 1
	clz	r3, r3
@ 0 "" 2
	.arm
	.syntax unified
	sub	r3, r1, r3
	b	.L5413
.L5447:
	mvn	r6, #11
.L5409:
	movw	r0, #:lower16:.LC371
	ldr	r1, .L5458
	mov	r2, r6
	movt	r0, #:upper16:.LC371
	bl	printk
.L5405:
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L5455:
	movw	r0, #:lower16:.LC374
	ldr	r1, .L5458+4
	movt	r0, #:upper16:.LC374
	bl	printk
	b	.L5421
.L5448:
	movw	r0, #:lower16:.LC369
	ldr	r1, .L5458+8
	movt	r0, #:upper16:.LC369
	bl	printk
	b	.L5410
.L5450:
	movw	r0, #:lower16:.LC370
	ldr	r1, .L5458+8
	movt	r0, #:upper16:.LC370
	bl	printk
	b	.L5411
.L5449:
	movw	r0, #:lower16:.LC373
	ldr	r1, .L5458+8
	mov	r2, r6
	movt	r0, #:upper16:.LC373
	bl	printk
	mov	r0, r4
	bl	kfree
	b	.L5409
.L5452:
	movw	r0, #:lower16:.LC372
	ldr	r1, .L5458+4
	mvn	r6, #11
	movt	r0, #:upper16:.LC372
	bl	printk
.L5418:
	movw	r0, #:lower16:.LC377
	ldr	r1, .L5458
	mov	r2, r6
	movt	r0, #:upper16:.LC377
	bl	printk
	b	.L5405
.L5446:
	ldr	r2, .L5458
	movw	r0, #:lower16:.LC368
	mvn	r6, #18
	movt	r0, #:upper16:.LC368
	mov	r1, r2
	bl	printk
	b	.L5405
.L5457:
	movw	r0, #:lower16:.LC376
	ldr	r1, .L5458+4
	mov	r2, r6
	movt	r0, #:upper16:.LC376
	bl	printk
	mov	r0, r5
	bl	kfree
	b	.L5418
.L5456:
	movw	r0, #:lower16:.LC375
	ldr	r1, .L5458+4
	mvn	r6, #11
	movt	r0, #:upper16:.LC375
	bl	printk
	b	.L5418
.L5454:
	movw	r0, #:lower16:.LC373
	ldr	r1, .L5458+4
	mov	r2, r6
	movt	r0, #:upper16:.LC373
	bl	printk
	mov	r0, r4
	bl	kfree
	b	.L5418
.L5453:
	movw	r0, #:lower16:.LC369
	ldr	r1, .L5458+4
	movt	r0, #:upper16:.LC369
	bl	printk
	b	.L5419
.L5459:
	.align	2
.L5458:
	.word	.LANCHOR2+2548
	.word	.LANCHOR2+2592
	.word	.LANCHOR2+2568
	.fnend
	.size	gaudio_open_streams, .-gaudio_open_streams
	.section	.rodata.str1.4
	.align	2
.LC379:
	.ascii	"<3>%s: %s: buffer alloc failed\012\000"
	.align	2
.LC380:
	.ascii	"<3>%s: Failed to init audio streams: err %d\000"
	.align	2
.LC381:
	.ascii	"<3>%s: copying failed\000"
	.align	2
.LC382:
	.ascii	"<3>%s: Capture error: %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_audio_capture_work, %function
f_audio_capture_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	movw	r6, #:lower16:.LANCHOR1
	movt	r6, #:upper16:.LANCHOR1
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	ldr	r0, [r6, #1384]
	bl	f_audio_buffer_alloc
	subs	r4, r0, #0
	beq	.L5469
	movw	r9, #:lower16:.LANCHOR0
	ldr	r8, [r5, #-68]
	movt	r9, #:upper16:.LANCHOR0
	ldr	r3, [r4]
	ldrb	r2, [r9, #184]	@ zero_extendqisi2
	ldr	r7, [r6, #1384]
	ldr	r10, [r8, #208]
	str	r3, [sp]
	cmp	r2, #0
	beq	.L5470
.L5462:
	lsl	r7, r7, #3
	mov	r6, #57344
	movt	r6, 65535
	mov	r3, sp
	mov	r9, r7
	and	fp, r3, r6
.L5467:
	ldr	r3, [r10, #168]
	mov	r2, #146
	movw	r1, #16704
	mov	r0, r8
	ldr	r3, [r3]
	cmp	r3, #7
	mvn	r2, r2, lsr r3
	bhi	.L5465
	ands	r2, r2, #1
	bne	.L5465
	bl	snd_pcm_kernel_ioctl
	cmp	r0, #0
	blt	.L5471
.L5465:
	ldr	r2, [r10, #88]
	mov	ip, #0
	mov	r0, r8
	ldr	r1, [sp]
	ldr	r7, [fp, #8]
	str	ip, [fp, #8]
	udiv	r2, r9, r2
	str	r2, [sp, #4]
	bl	snd_pcm_lib_read
	ldr	r2, [sp, #4]
	mov	r1, r0
	cmp	r2, r0
	bne	.L5472
	mov	r3, sp
	and	r6, r6, r3
	str	r7, [r6, #8]
.L5464:
	sub	r6, r5, #8
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #20]
	add	r2, r4, #8
	mov	r1, r0
	add	ip, r5, #16
	mov	r0, r6
	str	r2, [r5, #20]
	str	ip, [r4, #8]
	str	r3, [r4, #12]
	str	r2, [r3]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L5470:
	bl	gaudio_open_streams
	subs	r2, r0, #0
	moveq	r2, #1
	strbeq	r2, [r9, #184]
	beq	.L5462
	movw	r0, #:lower16:.LC380
	ldr	r1, .L5473
	movt	r0, #:upper16:.LC380
	bl	printk
	b	.L5464
.L5469:
	ldr	r2, .L5473+4
	movw	r0, #:lower16:.LC379
	movt	r0, #:upper16:.LC379
	mov	r1, r2
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	printk
.L5472:
	movw	r0, #:lower16:.LC382
	mov	r2, r1
	ldr	r1, .L5473
	movt	r0, #:upper16:.LC382
	bl	printk
	str	r7, [fp, #8]
	b	.L5467
.L5471:
	mov	r2, r0
	movw	r0, #:lower16:.LC374
	ldr	r1, .L5473
	movt	r0, #:upper16:.LC374
	bl	printk
	movw	r0, #:lower16:.LC381
	ldr	r1, .L5473+4
	movt	r0, #:upper16:.LC381
	bl	printk
	b	.L5464
.L5474:
	.align	2
.L5473:
	.word	.LANCHOR2+2640
	.word	.LANCHOR2+2616
	.fnend
	.size	f_audio_capture_work, .-f_audio_capture_work
	.section	.rodata.str1.4
	.align	2
.LC383:
	.ascii	"<6>%s: initialize %d instances\012\000"
	.align	2
.LC384:
	.ascii	"<3>%s: Failed to allocate mbim dev\012\000"
	.align	2
.LC385:
	.ascii	"<3>%s: mbim driver failed to register\000"
	.align	2
.LC386:
	.ascii	"<6>%s: Initialized %d ports\012\000"
	.align	2
.LC387:
	.ascii	"<3>%s: Failed\000"
	.section	.text.unlikely
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_function_init, %function
mbim_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC383
	push	{r4, r5, r6, r7, r8, lr}
	.save {r4, r5, r6, r7, r8, lr}
	ldr	r1, .L5484
	mov	r2, #1
	movt	r0, #:upper16:.LC383
	bl	printk
	movw	r3, #:lower16:kmalloc_caches
	movw	r5, #:lower16:.LANCHOR0
	movt	r3, #:upper16:kmalloc_caches
	movt	r5, #:upper16:.LANCHOR0
	ldr	r0, [r3, #32]
	cmp	r0, #0
	beq	.L5482
	movw	r1, #32976
	bl	kmem_cache_alloc
	subs	r4, r0, #0
	bne	.L5476
	movw	r0, #:lower16:.LC384
	ldr	r1, .L5484
	mvn	r4, #11
	movt	r0, #:upper16:.LC384
	bl	printk
	b	.L5477
.L5482:
	mov	r4, #16
.L5476:
	mov	r6, #0
	add	ip, r4, #200
	ldr	r2, .L5484+4
	add	r3, r4, #208
	movw	r1, #:lower16:.LC202
	str	r4, [r5, #3240]
	add	r0, r4, #100
	movt	r1, #:upper16:.LC202
	strb	r6, [r4, #128]
	str	r6, [r4, #196]
	str	ip, [r4, #200]
	str	ip, [r4, #204]
	str	r3, [r4, #208]
	str	r3, [r4, #212]
	str	r6, [r5, #3244]
	bl	__init_waitqueue_head
	movw	r1, #:lower16:.LC203
	add	r0, r4, #112
	ldr	r2, .L5484+4
	movt	r1, #:upper16:.LC203
	bl	__init_waitqueue_head
	ldr	r3, [r5, #3248]
	str	r6, [r4, #84]
	ldr	r0, .L5484+8
	str	r6, [r4, #88]
	str	r6, [r4, #92]
	str	r6, [r4, #96]
	add	r3, r3, #1
	str	r4, [r5, #840]
	str	r3, [r5, #3248]
	bl	misc_register
	subs	r4, r0, #0
	beq	.L5478
	movw	r0, #:lower16:.LC385
	ldr	r1, .L5484
	movt	r0, #:upper16:.LC385
	bl	printk
	b	.L5477
.L5478:
	movw	r0, #:lower16:.LC386
	ldr	r1, .L5484
	movt	r0, #:upper16:.LC386
	ldr	r2, [r5, #3248]
	bl	printk
	b	.L5475
.L5477:
	ldr	r6, .L5484+12
	movw	r0, #:lower16:.LC387
	mov	r7, #0
	ldr	r1, .L5484
	movt	r0, #:upper16:.LC387
	mov	r8, r7
	bl	printk
.L5480:
	ldr	r3, [r5, #3248]
	add	r6, r6, #8
	cmp	r7, r3
	bcs	.L5475
	ldr	r0, [r6, #-8]
	add	r7, r7, #1
	bl	kfree
	str	r8, [r6, #-8]
	b	.L5480
.L5475:
	mov	r0, r4
	pop	{r4, r5, r6, r7, r8, pc}
.L5485:
	.align	2
.L5484:
	.word	.LANCHOR2+2656
	.word	.LANCHOR0+3712
	.word	.LANCHOR1+976
	.word	.LANCHOR0+3240
	.fnend
	.size	mbim_function_init, .-mbim_function_init
	.section	.rodata.str1.4
	.align	2
.LC388:
	.ascii	"<3>%s: invalid bam2bam portno#%d\012\000"
	.align	2
.LC389:
	.ascii	"<3>%s: data port is null\012\000"
	.align	2
.LC390:
	.ascii	"<3>%s: %s: usb_bam_client_ready failed\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam_data_disconnect.constprop.0, %function
bam_data_disconnect.constprop.0:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r4, #:lower16:.LANCHOR0
	movt	r4, #:upper16:.LANCHOR0
	str	r6, [sp, #8]
	ldr	r3, [r4, #3712]
	str	lr, [sp, #12]
	cmp	r3, #0
	ble	.L5503
	cmp	r0, #0
	beq	.L5504
	ldr	r5, [r4, #2264]
	ldr	r3, [r5, #4]
	cmp	r3, #0
	beq	.L5489
	ldr	r2, [r3, #8]
	cmp	r2, #0
	beq	.L5489
	ldr	r2, [r2]
	cmp	r2, #0
	beq	.L5489
	ldr	r0, [r3, #12]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r5, #4]
	ldr	r0, [r3, #8]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [r5, #4]
	mov	r3, #0
	ldr	r2, [r2, #8]
	str	r3, [r2]
	ldr	r2, [r5, #4]
	ldr	r2, [r2, #12]
	str	r3, [r2]
	str	r3, [r5, #4]
.L5489:
	ldr	r3, [r5, #60]
	cmp	r3, #7
	beq	.L5505
	mov	r0, #0
	bl	usb_bam_client_ready
	cmp	r0, #0
	bne	.L5506
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L5505:
	add	r1, r5, #184
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	ldr	r0, [r4, #2268]
	ldrd	r4, [sp]
	add	sp, sp, #16
	b	queue_work
.L5506:
	ldr	r2, .L5507
	movw	r0, #:lower16:.LC390
	movt	r0, #:upper16:.LC390
	mov	r1, r2
.L5502:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	printk
.L5504:
	movw	r0, #:lower16:.LC389
	ldr	r1, .L5507
	movt	r0, #:upper16:.LC389
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	printk
.L5503:
	movw	r0, #:lower16:.LC388
	ldr	r1, .L5507
	mov	r2, #0
	movt	r0, #:upper16:.LC388
	b	.L5502
.L5508:
	.align	2
.L5507:
	.word	.LANCHOR2+2668
	.fnend
	.size	bam_data_disconnect.constprop.0, .-bam_data_disconnect.constprop.0
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam_data_connect.constprop.0, %function
bam_data_connect.constprop.0:
	.fnstart
	@ args = 4, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	movw	r7, #:lower16:.LANCHOR0
	movt	r7, #:upper16:.LANCHOR0
	strd	r8, [sp, #16]
	ldr	ip, [r7, #3712]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	ldr	fp, [sp, #40]
	cmp	ip, #0
	ble	.L5521
	cmp	r0, #0
	mov	r6, r0
	beq	.L5522
	ldr	r0, [r0, #8]
	mov	r8, r1
	mov	r9, r3
	ldr	r4, [r7, #2264]
	ldr	r1, [r0, #28]
	ldrh	r3, [r1, #4]	@ unaligned
	cmp	r3, #0
	beq	.L5518
	ldr	r3, [r0, #8]
	mov	r10, r2
	ldr	r3, [r3]
	blx	r3
	subs	r5, r0, #0
	bne	.L5513
	ldr	r3, [r6, #8]
	str	r4, [r3]
	ldr	r0, [r6, #12]
	ldr	r1, [r0, #28]
	ldrh	r3, [r1, #4]	@ unaligned
	cmp	r3, #0
	beq	.L5519
	ldr	r3, [r0, #8]
	ldr	r3, [r3]
	blx	r3
	subs	r5, r0, #0
	bne	.L5515
	ldr	r3, [r6, #12]
	cmp	r8, #7
	str	r4, [r3]
	str	r6, [r4, #4]
	strb	r10, [r4, #52]
	strb	r9, [r4, #53]
	str	fp, [r4, #56]
	str	r8, [r4, #60]
	bne	.L5517
	add	r2, r4, #44
	add	r3, r4, #48
	strb	r10, [r4, #64]
	strb	r9, [r4, #65]
	strd	r2, [r4, #68]
.L5517:
	add	r1, r4, #168
	ldr	r0, [r7, #2268]
	bl	queue_work
.L5509:
	mov	r0, r5
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L5519:
	mvn	r5, #21
.L5515:
	movw	r0, #:lower16:.LC197
	ldr	r1, .L5523
	movt	r0, #:upper16:.LC197
	ldr	r2, [r6, #12]
	bl	printk
	ldr	r3, [r6, #8]
	mov	r2, #0
	str	r2, [r3]
	b	.L5509
.L5518:
	mvn	r5, #21
.L5513:
	movw	r0, #:lower16:.LC196
	ldr	r1, .L5523
	movt	r0, #:upper16:.LC196
	ldr	r2, [r6, #8]
	bl	printk
	b	.L5509
.L5522:
	movw	r0, #:lower16:.LC389
	ldr	r1, .L5523
	mvn	r5, #18
	movt	r0, #:upper16:.LC389
	bl	printk
	b	.L5509
.L5521:
	movw	r0, #:lower16:.LC96
	ldr	r1, .L5523
	mov	r2, #0
	movt	r0, #:upper16:.LC96
	mvn	r5, #18
	bl	printk
	b	.L5509
.L5524:
	.align	2
.L5523:
	.word	.LANCHOR2+2688
	.fnend
	.size	bam_data_connect.constprop.0, .-bam_data_connect.constprop.0
	.section	.rodata.str1.4
	.align	2
.LC391:
	.ascii	"<3>%s: Failed to alloc port:%d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam_data_setup.part.0, %function
bam_data_setup.part.0:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movw	r4, #:lower16:.LANCHOR0
	movt	r4, #:upper16:.LANCHOR0
	movt	r3, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r0, [r3, #32]
	ldr	r3, [r4, #3712]
	cmp	r0, #0
	add	r3, r3, #1
	str	r3, [r4, #3712]
	beq	.L5532
	movw	r1, #32976
	bl	kmem_cache_alloc
	subs	r2, r0, #0
	beq	.L5534
.L5527:
	movw	lr, #:lower16:bam2bam_data_disconnect_work
	movw	r3, #:lower16:bam2bam_data_connect_work
	str	r2, [r2, #16]
	movt	lr, #:upper16:bam2bam_data_disconnect_work
	add	r5, r2, #172
	movt	r3, #:upper16:bam2bam_data_connect_work
	movw	ip, #:lower16:bam2bam_data_suspend_work
	movw	r1, #:lower16:bam2bam_data_resume_work
	movt	ip, #:upper16:bam2bam_data_suspend_work
	str	r5, [r2, #172]
	str	lr, [r2, #196]
	add	lr, r2, #188
	movt	r1, #:upper16:bam2bam_data_resume_work
	mov	r0, #0
	str	ip, [r2, #212]
	str	r5, [r2, #176]
	add	r5, r2, #204
	str	r3, [r2, #180]
	mov	r3, #2560
	str	lr, [r2, #188]
	str	lr, [r2, #192]
	add	lr, r2, #220
	str	r0, [r2]
	str	r3, [r2, #168]
	str	r3, [r2, #184]
	str	r3, [r2, #200]
	str	r5, [r2, #204]
	str	r5, [r2, #208]
	str	r3, [r2, #216]
	str	lr, [r2, #220]
	str	lr, [r2, #224]
	str	r1, [r2, #228]
	str	r2, [r4, #2264]
.L5525:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L5532:
	mov	r2, #16
	b	.L5527
.L5534:
	ldr	r3, [r4, #3712]
	movw	r0, #:lower16:.LC391
	mov	r5, r2
	ldr	r1, .L5535
	movt	r0, #:upper16:.LC391
	mov	r7, r2
	ldr	r6, .L5535+4
	sub	r3, r3, #1
	str	r3, [r4, #3712]
	bl	printk
.L5528:
	ldr	r3, [r4, #3712]
	cmp	r5, r3
	blt	.L5531
	ldr	r0, [r4, #2268]
	bl	destroy_workqueue
	mvn	r0, #11
	b	.L5525
.L5531:
	ldr	r0, [r6]
	add	r5, r5, #1
	bl	kfree
	str	r7, [r6], #4
	b	.L5528
.L5536:
	.align	2
.L5535:
	.word	.LANCHOR2+2708
	.word	.LANCHOR0+2264
	.fnend
	.size	bam_data_setup.part.0, .-bam_data_setup.part.0
	.section	.rodata.str1.4
	.align	2
.LC392:
	.ascii	"<3>%s: kevent %d may have been dropped\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rx_complete, %function
rx_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r5, [r0]
	ldr	r3, [r1, #44]
	ldr	r6, [r1, #32]
	cmn	r3, #75
	beq	.L5538
	cmn	r3, #74
	bge	.L5539
	cmn	r3, #103
	beq	.L5540
	cmn	r3, #102
	blt	.L5558
.L5541:
	mov	r0, r6
	bl	dev_kfree_skb_any
	ldr	r2, [r5, #8]
	ldr	r3, [r2, #248]
	add	r3, r3, #1
	str	r3, [r2, #248]
.L5548:
	add	r6, r5, #16
	mov	r0, r6
	bl	_raw_spin_lock
	mov	r3, r5
	add	r2, r4, #36
	ldr	r1, [r3, #28]!
	mov	r0, r6
	str	r2, [r1, #4]
	str	r1, [r4, #36]
	str	r3, [r4, #40]
	str	r2, [r5, #28]
	bl	_raw_spin_unlock
	movw	r3, #:lower16:.LANCHOR0
	add	r1, r5, #104
	ldrd	r4, [sp]
	movt	r3, #:upper16:.LANCHOR0
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	ldr	r0, [r3, #2024]
	b	queue_work
.L5539:
	cmp	r3, #0
	bne	.L5541
	mov	r0, r6
	ldr	r1, [r1, #48]
	bl	skb_put
	ldr	r3, [r5, #84]
	cmp	r3, #0
	beq	.L5543
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #4]
	mov	r7, r0
	cmp	r3, #0
	beq	.L5544
	mov	r1, r6
	mov	r0, r3
	ldr	r3, [r5, #84]
	add	r2, r5, #52
	blx	r3
	cmn	r0, #22
	mov	r6, r0
	beq	.L5559
	cmn	r0, #75
	beq	.L5560
	mov	r1, r7
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	cmp	r6, #0
	beq	.L5548
	b	.L5546
.L5558:
	add	r3, r3, #108
	bics	r3, r3, #4
	bne	.L5541
.L5542:
	mov	r0, r6
	bl	dev_kfree_skb_any
.L5546:
	add	r6, r5, #16
	mov	r0, r6
	bl	_raw_spin_lock
	mov	r3, r5
	add	r2, r4, #36
	ldr	r1, [r3, #28]!
	mov	r0, r6
	str	r2, [r1, #4]
	str	r1, [r4, #36]
	str	r3, [r4, #40]
	str	r2, [r5, #28]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock
.L5543:
	mov	r1, r6
	add	r0, r5, #52
	bl	skb_queue_tail
	b	.L5548
.L5538:
	ldr	r2, [r5, #8]
	ldr	r3, [r2, #276]
	add	r3, r3, #1
	str	r3, [r2, #276]
	b	.L5541
.L5540:
	add	r1, r5, #120
	mov	r0, #0
	bl	_test_and_set_bit
	cmp	r0, #0
	bne	.L5542
	add	r0, r5, #88
	bl	schedule_work
	subs	r2, r0, #0
	bne	.L5542
	movw	r0, #:lower16:.LC392
	ldr	r1, [r5, #8]
	movt	r0, #:upper16:.LC392
	bl	printk
	b	.L5542
.L5559:
	ldr	r2, [r5, #8]
	mov	r1, r7
	mov	r0, r5
	ldr	r3, [r2, #248]
	add	r3, r3, #1
	str	r3, [r2, #248]
	bl	_raw_spin_unlock_irqrestore
	b	.L5546
.L5560:
	ldr	r2, [r5, #8]
	mov	r1, r7
	mov	r0, r5
	ldr	r3, [r2, #276]
	add	r3, r3, #1
	str	r3, [r2, #276]
	bl	_raw_spin_unlock_irqrestore
	b	.L5546
.L5544:
	mov	r0, r6
	bl	dev_kfree_skb_any
	mov	r1, r7
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	b	.L5546
	.fnend
	.size	rx_complete, .-rx_complete
	.section	.rodata.str1.4
	.align	2
.LC393:
	.ascii	"<4>%s: query unknown OID 0x%08X\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gen_ndis_query_resp.constprop.0, %function
gen_ndis_query_resp.constprop.0:
	.fnstart
	@ args = 0, pretend = 0, frame = 184
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	subs	r6, r1, #0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	.pad #184
	sub	sp, sp, #184
	beq	.L5605
	ldr	r5, [r6, #8]
	cmp	r5, #0
	beq	.L5605
	mov	r3, #16
	movw	r8, #:lower16:.LANCHOR0
	movt	r8, #:upper16:.LANCHOR0
	mov	r4, r0
	mov	r1, sp
	str	r3, [r5, #20]
	ldr	r0, [r8, #3744]
	bl	dev_get_stats
	movw	r3, #278
	add	r7, r5, #24
	movt	r3, 1
	mov	r2, r0
	cmp	r4, r3
	bhi	.L5563
	mov	r3, #256
	movt	r3, 1
	cmp	r4, r3
	bls	.L5565
	movw	r3, #65279
	movt	r3, 65534
	add	r3, r4, r3
	cmp	r3, #21
	ldrls	pc, [pc, r3, asl #2]
	b	.L5565
.L5579:
	.word	.L5593
	.word	.L5599
	.word	.L5590
	.word	.L5590
	.word	.L5565
	.word	.L5586
	.word	.L5588
	.word	.L5565
	.word	.L5565
	.word	.L5586
	.word	.L5586
	.word	.L5585
	.word	.L5584
	.word	.L5583
	.word	.L5565
	.word	.L5565
	.word	.L5582
	.word	.L5565
	.word	.L5581
	.word	.L5580
	.word	.L5565
	.word	.L5569
.L5563:
	movw	r3, #261
	movt	r3, 257
	cmp	r4, r3
	bhi	.L5594
	movw	r3, #257
	movt	r3, 257
	cmp	r4, r3
	bcs	.L5595
	movw	r3, #514
	movt	r3, 1
	cmp	r4, r3
	beq	.L5599
	movw	r3, #65279
	movt	r3, 65533
	add	r3, r4, r3
	cmp	r3, #4
	bhi	.L5565
	cmp	r3, #4
	ldrls	pc, [pc, r3, asl #2]
	b	.L5565
.L5573:
	.word	.L5577
	.word	.L5576
	.word	.L5575
	.word	.L5574
	.word	.L5572
.L5595:
	movw	r0, #65278
	bfi	r0, r0, #16, #16
	add	r0, r4, r0
	cmp	r0, #3
	ldrls	pc, [pc, r0, asl #2]
	b	.L5571
.L5568:
	.word	.L5571
	.word	.L5570
	.word	.L5569
	.word	.L5599
.L5594:
	movw	r3, #258
	movt	r3, 258
	cmp	r4, r3
	beq	.L5599
	movw	r3, #259
	movt	r3, 258
	cmp	r4, r3
	bne	.L5627
.L5599:
	mov	r2, #0
	mov	r3, #28
	mov	r0, r2
	mov	r4, #4
	str	r2, [r5, #24]
.L5601:
	str	r4, [r5, #16]
	str	r3, [r6, #12]
	str	r3, [r5, #4]
.L5561:
	add	sp, sp, #184
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L5627:
	movw	r3, #257
	movt	r3, 258
	cmp	r4, r3
	bne	.L5565
	cmp	r0, #0
	beq	.L5616
	ldr	r2, [r2, #104]
	mov	r3, #28
	mov	r0, #0
	mov	r4, #4
	str	r2, [r5, #24]
	b	.L5601
.L5586:
	ldr	r2, [r8, #3744]
	cmp	r2, #0
	beq	.L5616
	ldr	r2, [r2, #364]
	mov	r3, #28
	mov	r0, #0
	mov	r4, #4
	str	r2, [r5, #24]
	b	.L5601
.L5569:
	mov	r2, #1
	mov	r3, #28
	mov	r0, #0
	mov	r4, #4
	str	r2, [r5, #24]
	b	.L5601
.L5590:
	ldr	r2, [r8, #3724]
	mov	r3, #28
	mov	r0, #0
	mov	r4, #4
	str	r2, [r5, #24]
	b	.L5601
.L5616:
	movw	r0, #65012
	mov	r4, r2
	movt	r0, 65535
	mov	r3, #24
	b	.L5601
.L5588:
	ldr	r3, [r8, #3732]
	cmp	r3, #1
	beq	.L5599
	ldr	r2, [r8, #3728]
	mov	r3, #28
	mov	r0, #0
	mov	r4, #4
	str	r2, [r5, #24]
	b	.L5601
.L5585:
	ldr	r2, [r8, #3748]
	mov	r3, #28
	mov	r0, #0
	mov	r4, #4
	str	r2, [r5, #24]
	b	.L5601
.L5571:
	ldr	r2, [r8, #3744]
	cmp	r2, #0
	beq	.L5616
	ldr	r2, [r8, #3736]
	mov	r3, #30
	mov	r0, #0
	mov	r4, #6
	ldr	r1, [r2]	@ unaligned
	str	r1, [r5, #24]	@ unaligned
	ldrh	r2, [r2, #4]	@ unaligned
	strh	r2, [r7, #4]	@ unaligned
	b	.L5601
.L5572:
	cmp	r2, #0
	beq	.L5616
	ldr	r2, [r2, #48]
	mov	r3, #28
	mov	r0, #0
	mov	r4, #4
	str	r2, [r5, #24]
	b	.L5601
.L5574:
	cmp	r2, #0
	beq	.L5616
	ldr	r2, [r2, #32]
	mov	r3, #28
	mov	r0, #0
	mov	r4, #4
	str	r2, [r5, #24]
	b	.L5601
.L5575:
	cmp	r2, #0
	beq	.L5616
	ldr	r2, [r2, #40]
	mov	r3, #28
	mov	r0, #0
	mov	r4, #4
	str	r2, [r5, #24]
	b	.L5601
.L5576:
	cmp	r2, #0
	beq	.L5616
	ldr	r1, [r2, #32]
	mov	r3, #28
	ldr	ip, [r2, #48]
	ldr	r2, [r2]
.L5623:
	add	r1, r1, ip
	mov	r0, #0
	sub	r2, r2, r1
	mov	r4, #4
	str	r2, [r5, #24]
	b	.L5601
.L5577:
	cmp	r2, #0
	beq	.L5616
	mov	r3, #28
	ldr	r1, [r2, #40]
	ldr	ip, [r2, #56]
	ldr	r2, [r2, #8]
	b	.L5623
.L5582:
	movw	r2, #1558
	mov	r3, #28
	mov	r0, #0
	mov	r4, #4
	str	r2, [r5, #24]
	b	.L5601
.L5580:
	ldr	r2, [r8, #3732]
	mov	r3, #28
	mov	r0, #0
	mov	r4, #4
	str	r2, [r5, #24]
	b	.L5601
.L5593:
	ldr	r1, .L5628
	mov	r0, r7
	mov	r2, #112
	bl	memcpy
	mov	r4, #112
	mov	r3, #136
	mov	r0, #0
	b	.L5601
.L5570:
	mov	r2, #-536870912
	mov	r3, #28
	mov	r0, #0
	mov	r4, #4
	str	r2, [r5, #24]
	b	.L5601
.L5584:
	ldr	r8, [r8, #3756]
	subs	r0, r8, #0
	beq	.L5603
	bl	strlen
	mov	r4, r0
	mov	r1, r8
	mov	r0, r7
	mov	r2, r4
	bl	memcpy
	add	r3, r4, #24
	mov	r0, #0
	b	.L5601
.L5583:
	ldr	r2, [r8, #3740]
	mov	r3, #28
	mov	r0, #0
	mov	r4, #4
	ldrh	r2, [r2]
	str	r2, [r5, #24]
	b	.L5601
.L5581:
	mov	r2, #18
	mov	r3, #28
	mov	r0, #0
	mov	r4, #4
	str	r2, [r5, #24]
	b	.L5601
.L5603:
	mov	r3, #28
	mov	r4, #4
	str	r8, [r5, #24]
	b	.L5601
.L5605:
	mvn	r0, #11
	b	.L5561
.L5565:
	movw	r0, #:lower16:.LC393
	mov	r2, r4
	ldr	r1, .L5628+4
	movt	r0, #:upper16:.LC393
	mov	r4, #0
	bl	printk
	movw	r0, #65012
	mov	r3, #24
	movt	r0, 65535
	b	.L5601
.L5629:
	.align	2
.L5628:
	.word	.LANCHOR2+2724
	.word	.LANCHOR2+2836
	.fnend
	.size	gen_ndis_query_resp.constprop.0, .-gen_ndis_query_resp.constprop.0
	.section	.rodata.str1.4
	.align	2
.LC394:
	.ascii	"&bulk_dev->read_wq\000"
	.align	2
.LC395:
	.ascii	"&bulk_dev->write_wq\000"
	.align	2
.LC396:
	.ascii	"<3>ccid gadget driver failed to initialize\012\000"
	.align	2
.LC397:
	.ascii	"<3>%s: ccid_bulk_device_init failed, err:%d\012\000"
	.align	2
.LC398:
	.ascii	"<3>%s: ccid_ctrl_device_init failed, err:%d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_function_init, %function
ccid_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movt	r3, #:upper16:kmalloc_caches
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r0, [r3, #32]
	cmp	r0, #0
	beq	.L5637
	movw	r1, #32976
	bl	kmem_cache_alloc
	subs	r4, r0, #0
	beq	.L5641
.L5631:
	add	r3, r4, #112
	mov	r0, #0
	movw	r6, #:lower16:.LANCHOR0
	movw	r1, #:lower16:.LC213
	movt	r6, #:upper16:.LANCHOR0
	movt	r1, #:upper16:.LC213
	str	r0, [r4, #84]
	add	r2, r6, #3776
	add	r0, r4, #120
	str	r3, [r4, #112]
	str	r3, [r4, #116]
	str	r4, [r6, #180]
	bl	__init_waitqueue_head
	ldr	r0, .L5644
	bl	misc_register
	subs	r5, r0, #0
	bne	.L5642
	movw	r1, #:lower16:.LC394
	add	r2, r6, #3776
	movt	r1, #:upper16:.LC394
	add	r0, r4, #152
	bl	__init_waitqueue_head
	movw	r1, #:lower16:.LC395
	add	r2, r6, #3776
	movt	r1, #:upper16:.LC395
	add	r0, r4, #164
	bl	__init_waitqueue_head
	add	r3, r4, #184
	ldr	r0, .L5644+4
	str	r3, [r4, #184]
	str	r3, [r4, #188]
	bl	misc_register
	subs	r5, r0, #0
	bne	.L5643
.L5630:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L5637:
	mov	r4, #16
	b	.L5631
.L5641:
	mvn	r5, #11
	b	.L5630
.L5643:
	movw	r0, #:lower16:.LC214
	ldr	r1, .L5644+8
	movt	r0, #:upper16:.LC214
	bl	printk
	movw	r0, #:lower16:.LC397
	ldr	r1, .L5644+12
	mov	r2, r5
	movt	r0, #:upper16:.LC397
	bl	printk
	ldr	r0, .L5644
	bl	misc_deregister
.L5634:
	mov	r0, r4
	bl	kfree
	movw	r0, #:lower16:.LC396
	movt	r0, #:upper16:.LC396
	bl	printk
	b	.L5630
.L5642:
	movw	r0, #:lower16:.LC214
	ldr	r1, .L5644+16
	movt	r0, #:upper16:.LC214
	bl	printk
	movw	r0, #:lower16:.LC398
	ldr	r1, .L5644+12
	mov	r2, r5
	movt	r0, #:upper16:.LC398
	bl	printk
	b	.L5634
.L5645:
	.align	2
.L5644:
	.word	.LANCHOR1+940
	.word	.LANCHOR1+904
	.word	.LANCHOR2+2856
	.word	.LANCHOR2+2880
	.word	.LANCHOR2+2892
	.fnend
	.size	ccid_function_init, .-ccid_function_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_request_new.constprop.0, %function
adb_request_new.constprop.0:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r1, #208
	mov	r5, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r4, r0, #0
	beq	.L5646
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #48]
	cmp	r0, #0
	moveq	r3, #16
	streq	r3, [r4]
	beq	.L5646
	mov	r1, #208
	bl	kmem_cache_alloc
	cmp	r0, #0
	mov	r3, r0
	str	r0, [r4]
	beq	.L5653
.L5646:
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L5653:
	ldr	r2, [r5, #8]
	mov	r1, r4
	mov	r0, r5
	mov	r4, r3
	ldr	r3, [r2, #12]
	blx	r3
	b	.L5646
	.fnend
	.size	adb_request_new.constprop.0, .-adb_request_new.constprop.0
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_request_new.constprop.2, %function
adb_request_new.constprop.2:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r1, #208
	mov	r5, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r4, r0, #0
	beq	.L5654
	mov	r1, #2
	movw	r0, #16592
	bl	__get_free_pages
	cmp	r0, #0
	mov	r3, r0
	str	r0, [r4]
	beq	.L5660
.L5654:
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L5660:
	ldr	r2, [r5, #8]
	mov	r1, r4
	mov	r0, r5
	mov	r4, r3
	ldr	r3, [r2, #12]
	blx	r3
	b	.L5654
	.fnend
	.size	adb_request_new.constprop.2, .-adb_request_new.constprop.2
	.section	.rodata.str1.4
	.align	2
.LC399:
	.ascii	"acm ttyGS%d can't notify serial state, %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acm_cdc_notify_complete, %function
acm_cdc_notify_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r5, [r1, #32]
	add	r6, r5, #148
	mov	r0, r6
	bl	_raw_spin_lock
	ldr	r3, [r4, #44]
	cmn	r3, #108
	moveq	r0, r6
	streq	r4, [r5, #156]
	beq	.L5667
	ldrb	r7, [r5, #144]	@ zero_extendqisi2
	mov	r0, r6
	str	r4, [r5, #156]
	bl	_raw_spin_unlock
	cmp	r7, #0
	beq	.L5661
	mov	r0, r6
	bl	_raw_spin_lock
	ldr	r4, [r5, #156]
	cmp	r4, #0
	moveq	r3, #1
	strbeq	r3, [r5, #144]
	beq	.L5665
	mov	r1, #0
	mov	r0, #10
	ldr	r7, [r5, #152]
	mvn	r2, #94
	mov	r8, #32
	strb	r1, [r5, #144]
	mov	ip, #2
	str	r1, [r5, #156]
	ldr	r3, [r4]
	str	r0, [r4, #4]
	mov	r0, r6
	strb	r2, [r3]
	strb	r8, [r3, #1]
	strb	r1, [r3, #2]
	strb	r1, [r3, #3]
	ldrb	r2, [r5, #136]	@ zero_extendqisi2
	strh	r2, [r3, #4]	@ unaligned
	strb	ip, [r3, #6]
	strb	r1, [r3, #7]
	ldrh	r2, [r5, #170]	@ unaligned
	strh	r2, [r3, #8]	@ unaligned
	bl	_raw_spin_unlock
	ldr	r3, [r7, #8]
	mov	r2, r8
	mov	r0, r7
	mov	r1, r4
	ldr	r3, [r3, #16]
	blx	r3
	mov	r7, r0
	mov	r0, r6
	bl	_raw_spin_lock
	cmp	r7, #0
	blt	.L5668
.L5665:
	mov	r0, r6
.L5667:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock
.L5661:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L5668:
	ldr	r0, [r5, #20]
	movw	r1, #:lower16:.LC399
	mov	r3, r7
	ldrb	r2, [r5, #138]	@ zero_extendqisi2
	movt	r1, #:upper16:.LC399
	ldr	r0, [r0, #24]
	ldr	r0, [r0]
	add	r0, r0, r8
	bl	dev_err
	str	r4, [r5, #156]
	b	.L5665
	.fnend
	.size	acm_cdc_notify_complete, .-acm_cdc_notify_complete
	.section	.rodata.str1.4
	.align	2
.LC400:
	.ascii	"gser ttyGS%d can't notify serial state, %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gser_notify_complete, %function
gser_notify_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r5, [r1, #32]
	add	r6, r5, #148
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #44]
	mov	r1, r0
	cmn	r3, #108
	moveq	r0, r6
	streq	r4, [r5, #156]
	beq	.L5681
	ldrb	r7, [r5, #144]	@ zero_extendqisi2
	mov	r0, r6
	str	r4, [r5, #156]
	bl	_raw_spin_unlock_irqrestore
	cmp	r7, #0
	beq	.L5669
	ldrb	r3, [r5, #138]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L5682
.L5669:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L5682:
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r7, [r5, #156]
	mov	r4, r0
	cmp	r7, #0
	moveq	r3, #1
	strbeq	r3, [r5, #144]
	beq	.L5673
	ldr	r3, [r5, #20]
	mov	r1, #0
	mvn	ip, #94
	mov	r2, #32
	mov	r9, #10
	ldr	r0, [r5, #152]
	mov	lr, #2
	ldr	r8, [r3, #24]
	strb	r1, [r5, #144]
	str	r1, [r5, #156]
	ldr	r3, [r7]
	str	r9, [r7, #4]
	strb	ip, [r3]
	strb	r2, [r3, #1]
	strb	r1, [r3, #2]
	strb	r1, [r3, #3]
	ldrb	ip, [r5, #136]	@ zero_extendqisi2
	strh	ip, [r3, #4]	@ unaligned
	strb	lr, [r3, #6]
	strb	r1, [r3, #7]
	ldrh	ip, [r5, #170]	@ unaligned
	mov	r1, r7
	strh	ip, [r3, #8]	@ unaligned
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r3, r0, #0
	blt	.L5683
.L5673:
	mov	r1, r4
	mov	r0, r6
.L5681:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irqrestore
.L5683:
	ldr	r0, [r8]
	movw	r1, #:lower16:.LC400
	ldrb	r2, [r5, #137]	@ zero_extendqisi2
	movt	r1, #:upper16:.LC400
	add	r0, r0, #32
	bl	dev_err
	str	r7, [r5, #156]
	b	.L5673
	.fnend
	.size	gser_notify_complete, .-gser_notify_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_send_controlbits_tomodem, %function
ghsuart_send_controlbits_tomodem:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:.LANCHOR0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	ip, [r3, #2020]
	cmp	r0, #0
	cmpne	r1, ip
	movcs	r5, #1
	movcc	r5, #0
	bcs	.L5703
	mov	r0, #84
	mla	r1, r0, r1, r3
	ldr	r4, [r1, #12]
	cmp	r4, #0
	beq	.L5704
	ldr	r3, [r4, #196]
	cmp	r3, r2
	beq	.L5684
	ldr	r3, [r4, #188]
	str	r2, [r4, #196]
	tst	r3, #4
	beq	.L5684
	tst	r2, #1
	bne	.L5705
.L5684:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L5705:
	add	r7, r4, #20
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r6, [r4, #24]
	mov	r1, r0
	mov	r0, r7
	str	r5, [r4, #200]
	bl	_raw_spin_unlock_irqrestore
	cmp	r6, #0
	beq	.L5684
	ldr	r3, [r6, #128]
	cmp	r3, #0
	beq	.L5684
	mov	r1, r5
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	bx	r3
.L5703:
	movw	r0, #:lower16:.LC19
	mov	r2, r1
	ldr	r1, .L5706
	movt	r0, #:upper16:.LC19
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	printk
.L5704:
	movw	r0, #:lower16:.LC15
	ldr	r1, .L5706
	movt	r0, #:upper16:.LC15
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	printk
.L5707:
	.align	2
.L5706:
	.word	.LANCHOR2+2916
	.fnend
	.size	ghsuart_send_controlbits_tomodem, .-ghsuart_send_controlbits_tomodem
	.section	.rodata.str1.4
	.align	2
.LC401:
	.ascii	"<3>%s: usb alloc request failed\012\000"
	.align	2
.LC402:
	.ascii	"<3>%s: request buf allocation failed\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_alloc_req.constprop.0, %function
gsmd_alloc_req.constprop.0:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r1
	mov	r1, #32
	str	r6, [sp, #8]
	mov	r6, r0
	str	lr, [sp, #12]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r4, r0, #0
	beq	.L5712
	mov	r0, r5
	mov	r1, #32
	str	r5, [r4, #4]
	bl	__kmalloc
	cmp	r0, #0
	mov	r5, r0
	str	r0, [r4]
	beq	.L5713
.L5708:
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L5712:
	movw	r0, #:lower16:.LC401
	ldr	r1, .L5714
	movt	r0, #:upper16:.LC401
	bl	printk
	b	.L5708
.L5713:
	movw	r0, #:lower16:.LC402
	ldr	r1, .L5714
	movt	r0, #:upper16:.LC402
	bl	printk
	ldr	r3, [r6, #8]
	mov	r1, r4
	mov	r0, r6
	mov	r4, r5
	ldr	r3, [r3, #12]
	blx	r3
	b	.L5708
.L5715:
	.align	2
.L5714:
	.word	.LANCHOR2+2952
	.fnend
	.size	gsmd_alloc_req.constprop.0, .-gsmd_alloc_req.constprop.0
	.section	.rodata.str1.4
	.align	2
.LC403:
	.ascii	"queue\000"
	.align	2
.LC404:
	.ascii	"<3>%s: %s err %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_start_tx, %function
gs_start_tx:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	add	r3, r0, #76
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	ldrb	r7, [r0, #120]	@ zero_extendqisi2
	str	r3, [sp, #4]
	ldr	r3, [r0, #4]
	cmp	r7, #0
	ldr	r8, [r3, #80]
	bne	.L5731
	mov	r4, r0
	ldr	r3, [sp, #4]
	movw	r10, #:lower16:.LANCHOR0
	ldr	r5, [r4, #76]
	movt	r10, #:upper16:.LANCHOR0
	cmp	r3, r5
	beq	.L5732
.L5730:
	ldr	r3, [r4, #84]
	cmp	r3, #7
	bgt	.L5732
	ldr	r2, [r4, #92]
	sub	r9, r5, #36
	ldr	r1, [r4, #100]
	ldr	r3, [r4, #104]
	add	r3, r3, r2
	sub	r3, r3, r1
	udiv	r6, r3, r2
	mls	r3, r2, r6, r3
	cmp	r3, #0
	bne	.L5747
	movw	r10, #:lower16:.LANCHOR0
	movt	r10, #:upper16:.LANCHOR0
	ldr	fp, [r10, #3776]
	cmp	fp, #0
	beq	.L5724
	ldrh	r1, [r8, #20]
	sdiv	r2, fp, r1
	mls	fp, r1, r2, fp
	cmp	fp, #0
	movne	fp, r3
	beq	.L5748
.L5724:
	mov	r2, #1
	mov	r3, #0
	mov	r1, r2
	add	r0, r4, #108
	bl	__wake_up
	b	.L5719
.L5747:
	ldr	r7, [r4, #96]
	cmp	r3, #4096
	movcc	r6, r3
	movcs	r6, #4096
	ldr	r3, [r5, #-36]
	add	r7, r7, r2
	sub	r7, r7, r1
	cmp	r6, r7
	bls	.L5721
	mov	r0, r3
	mov	r2, r7
	bl	memcpy
	sub	fp, r6, r7
	add	r0, r0, r7
	ldr	r1, [r4, #96]
	mov	r2, fp
	bl	memcpy
	ldr	r3, [r4, #96]
	add	fp, r3, fp
	str	fp, [r4, #100]
.L5722:
	ldrd	r2, [r5]
	mov	r7, #1
	str	r6, [r5, #-32]
	mov	r0, r4
	str	r3, [r2, #4]
	str	r2, [r3]
	mov	r2, #256
	mov	r3, #512
	strd	r2, [r5]
	strb	r7, [r4, #120]
	bl	_raw_spin_unlock
	ldr	r3, [r8, #8]
	mov	r2, #32
	mov	r1, r9
	mov	r0, r8
	ldr	r3, [r3, #16]
	blx	r3
	mov	fp, r0
	mov	r0, r4
	bl	_raw_spin_lock
	ldr	r3, [r4, #4]
	cmp	r3, #0
	beq	.L5749
	mov	r3, #0
	cmp	fp, #0
	strb	r3, [r4, #120]
	bne	.L5750
	ldr	r1, [r5, #-32]
	ldr	r5, [r4, #76]
	ldr	r3, [r4, #136]
	ldr	r2, [r4, #84]
	str	r1, [r10, #3776]
	add	r3, r3, r1
	add	r2, r2, #1
	str	r3, [r4, #136]
	ldr	r3, [sp, #4]
	str	r2, [r4, #84]
	cmp	r3, r5
	bne	.L5730
.L5732:
	mov	fp, #0
.L5719:
	cmp	r7, #0
	beq	.L5716
.L5729:
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L5716
	bl	tty_wakeup
.L5716:
	mov	r0, fp
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L5721:
	mov	r0, r3
	mov	r2, r6
	bl	memcpy
	cmp	r6, r7
	ldrcc	r3, [r4, #100]
	ldrcs	r3, [r4, #96]
	addcc	r3, r3, r6
	str	r3, [r4, #100]
	b	.L5722
.L5749:
	ldr	r0, [r5, #-36]
	bl	kfree
	ldr	r3, [r8, #8]
	mov	r1, r9
	mov	r0, r8
	ldr	r3, [r3, #12]
	blx	r3
	b	.L5716
.L5750:
	ldr	r3, [r4, #76]
	str	r5, [r3, #4]
	str	r3, [r5]
	ldr	r3, [sp, #4]
	str	r3, [r5, #4]
	str	r5, [r4, #76]
	b	.L5729
.L5748:
	ldrd	r2, [r5]
	mov	ip, #256
	mov	r1, #512
	mov	r0, r4
	str	fp, [r5, #-32]
	str	r3, [r2, #4]
	str	r2, [r3]
	str	ip, [r5]
	str	r1, [r5, #4]
	bl	_raw_spin_unlock
	ldr	r3, [r8, #8]
	mov	r2, #32
	mov	r1, r9
	mov	r0, r8
	ldr	r3, [r3, #16]
	blx	r3
	mov	fp, r0
	mov	r0, r4
	bl	_raw_spin_lock
	ldr	r3, [r4, #4]
	cmp	r3, #0
	beq	.L5751
	cmp	fp, #0
	bne	.L5752
.L5726:
	mov	r3, #0
	str	r3, [r10, #3776]
	b	.L5724
.L5731:
	mov	fp, #0
	b	.L5716
.L5751:
	ldr	r0, [r5, #-36]
	bl	kfree
	ldr	r3, [r8, #8]
	mov	r1, r9
	mov	r0, r8
	ldr	r3, [r3, #12]
	blx	r3
	b	.L5719
.L5752:
	movw	r2, #:lower16:.LC403
	movw	r0, #:lower16:.LC404
	ldr	r1, .L5753
	mov	r3, fp
	movt	r2, #:upper16:.LC403
	movt	r0, #:upper16:.LC404
	bl	printk
	ldr	r3, [r4, #76]
	str	r5, [r3, #4]
	str	r3, [r5]
	ldr	r3, [sp, #4]
	str	r3, [r5, #4]
	str	r5, [r4, #76]
	b	.L5726
.L5754:
	.align	2
.L5753:
	.word	.LANCHOR2+2968
	.fnend
	.size	gs_start_tx, .-gs_start_tx
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_flush_chars, %function
gs_flush_chars:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r0, #280]
	mov	r0, r4
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #4]
	mov	r5, r0
	cmp	r3, #0
	beq	.L5756
	mov	r0, r4
	bl	gs_start_tx
.L5756:
	mov	r1, r5
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock_irqrestore
	.fnend
	.size	gs_flush_chars, .-gs_flush_chars
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_write, %function
gs_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r2
	strd	r6, [sp, #8]
	mov	r7, r1
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r4, [r0, #280]
	mov	r0, r4
	bl	_raw_spin_lock_irqsave
	cmp	r5, #0
	mov	r6, r0
	bne	.L5775
.L5762:
	ldr	r3, [r4, #4]
	cmp	r3, #0
	beq	.L5766
	mov	r0, r4
	bl	gs_start_tx
.L5766:
	mov	r0, r4
	mov	r1, r6
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L5775:
	ldr	r2, [r4, #92]
	ldr	r3, [r4, #100]
	ldr	r0, [r4, #104]
	add	r3, r3, r2
	sub	r3, r3, r0
	sub	r3, r3, #1
	udiv	r8, r3, r2
	mls	r8, r2, r8, r3
	cmp	r8, r5
	movcs	r8, r5
	cmp	r8, #0
	moveq	r5, r8
	beq	.L5762
	ldr	r5, [r4, #96]
	add	r5, r5, r2
	sub	r5, r5, r0
	cmp	r8, r5
	bhi	.L5776
	mov	r1, r7
	mov	r2, r8
	bl	memcpy
	cmp	r8, r5
	bcs	.L5765
	ldr	r3, [r4, #104]
	mov	r5, r8
	add	r8, r3, r8
	str	r8, [r4, #104]
	b	.L5762
.L5776:
	mov	r2, r5
	sub	r9, r8, r5
	mov	r1, r7
	bl	memcpy
	add	r1, r7, r5
	mov	r2, r9
	ldr	r0, [r4, #96]
	bl	memcpy
	ldr	r2, [r4, #96]
	mov	r5, r8
	add	r2, r2, r9
	str	r2, [r4, #104]
	b	.L5762
.L5765:
	ldr	r3, [r4, #96]
	mov	r5, r8
	str	r3, [r4, #104]
	b	.L5762
	.fnend
	.size	gs_write, .-gs_write
	.section	.rodata.str1.4
	.align	2
.LC405:
	.ascii	"<4>%s: unexpected %s status %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_write_complete, %function
gs_write_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	mov	r6, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r0]
	mov	r0, r4
	bl	_raw_spin_lock_irqsave
	ldr	ip, [r5, #48]
	mov	r3, r4
	add	r1, r5, #36
	ldr	r2, [r4, #140]
	mov	r7, r0
	add	r2, r2, ip
	str	r2, [r4, #140]
	ldr	r2, [r3, #76]!
	str	r1, [r2, #4]
	strd	r2, [r5, #36]
	ldr	r3, [r4, #84]
	str	r1, [r4, #76]
	sub	r3, r3, #1
	str	r3, [r4, #84]
	ldr	r3, [r5, #44]
	cmn	r3, #108
	bne	.L5790
.L5778:
	mov	r1, r7
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore
.L5790:
	cmp	r3, #0
	bne	.L5791
.L5779:
	ldr	r3, [r4, #4]
	cmp	r3, #0
	beq	.L5778
	mov	r0, r4
	bl	gs_start_tx
	b	.L5778
.L5791:
	movw	r0, #:lower16:.LC405
	ldr	r1, .L5792
	movt	r0, #:upper16:.LC405
	ldr	r2, [r6, #4]
	bl	printk
	b	.L5779
.L5793:
	.align	2
.L5792:
	.word	.LANCHOR2+2980
	.fnend
	.size	gs_write_complete, .-gs_write_complete
	.section	.rodata.str1.4
	.align	2
.LC406:
	.ascii	", H%c=%u\000"
	.section	.rodata.cst4
	.align	2
.LC407:
	.word	__stack_chk_guard
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	check_command.constprop.0, %function
check_command.constprop.0:
	.fnstart
	@ args = 4, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	mov	r4, r0
	mov	ip, #0
	strd	r6, [sp, #8]
	mov	r5, r3
	mov	r6, r1
	str	lr, [sp, #16]
	ldr	r0, [r0, #120]
	.pad #28
	sub	sp, sp, #28
	movw	lr, #:lower16:.LC407
	mov	r7, r2
	movt	lr, #:upper16:.LC407
	ldr	lr, [lr]
	str	lr, [sp, #20]
	mov	lr,#0
	strb	ip, [sp]
	cmp	r0, ip
	bne	.L5837
.L5795:
	ldr	r3, [r4, #124]
	ldr	r2, [r4, #128]
	cmp	r2, #0
	beq	.L5796
	cmp	r2, r3
	bls	.L5797
	ldrb	r2, [r4, #144]	@ zero_extendqisi2
	cmp	r7, r0
	str	r3, [r4, #128]
	str	r3, [r4, #136]
	str	r3, [r4, #140]
	orr	r2, r2, #4
	strb	r2, [r4, #144]
	beq	.L5798
	cmp	r3, #0
	beq	.L5798
.L5801:
	ldrb	r3, [r4, #144]	@ zero_extendqisi2
	mvn	r0, #21
	orr	r3, r3, #4
	strb	r3, [r4, #144]
	b	.L5794
.L5796:
	str	r3, [r4, #136]
	str	r3, [r4, #140]
.L5798:
	ldr	ip, [r4, #72]
	cmp	ip, r6
	beq	.L5813
	blt	.L5801
	ldr	lr, [r4, #104]
	cmp	lr, #0
	beq	.L5802
.L5840:
	ldrb	r3, [r4, #76]	@ zero_extendqisi2
	cmp	r3, #3
	beq	.L5803
	ldrb	r2, [lr, #24]	@ zero_extendqisi2
	mov	r3, #0
	ldr	r1, [lr, #36]
	str	r3, [lr, #28]
	str	r3, [lr, #32]
	bfi	r2, r3, #6, #1
	cmp	r1, r3
	strb	r2, [lr, #24]
	beq	.L5803
	ldrb	r2, [r4, #76]	@ zero_extendqisi2
	cmp	r2, #18
	cmpne	r2, #3
	mvnne	r0, #21
	strne	r1, [lr, #28]
	strne	r3, [lr, #36]
	bne	.L5794
.L5803:
	ldrb	r3, [r4, #77]	@ zero_extendqisi2
	cmp	ip, #1
	and	r3, r3, #31
	strb	r3, [r4, #77]
	ble	.L5809
.L5811:
	mov	r2, #1
	add	r0, r4, #76
	mov	r3, r2
.L5808:
	ldrb	r1, [r0, #1]!	@ zero_extendqisi2
	cmp	r1, #0
	beq	.L5806
	ands	r1, r5, r3, lsl r2
	beq	.L5838
.L5806:
	add	r2, r2, #1
	cmp	r2, ip
	blt	.L5808
	cmp	lr, #0
	beq	.L5810
.L5809:
	ldr	r3, [lr]
	ldr	r2, [sp, #48]
	cmp	r3, #0
	movne	r3, #0
	andeq	r3, r2, #1
	cmp	r3, #0
	movne	r3, #14848
	mvnne	r0, #21
	movtne	r3, 2
	strne	r3, [lr, #28]
	bne	.L5794
.L5810:
	mov	r0, #0
.L5794:
	movw	r3, #:lower16:.LC407
	movt	r3, #:upper16:.LC407
	ldr	r2, [r3]
	ldr	r3, [sp, #20]
	eors	r2, r3, r2
	bne	.L5839
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L5813:
	ldr	lr, [r4, #104]
	mov	ip, r6
	cmp	lr, #0
	bne	.L5840
.L5802:
	ldrb	r3, [r4, #144]	@ zero_extendqisi2
	ldrb	r2, [r4, #76]	@ zero_extendqisi2
	bfi	r3, lr, #4, #1
	cmp	r2, #18
	cmpne	r2, #3
	strb	r3, [r4, #144]
	bne	.L5807
	ldrb	r3, [r4, #77]	@ zero_extendqisi2
	cmp	ip, #1
	and	r3, r3, #31
	strb	r3, [r4, #77]
	bgt	.L5811
	b	.L5810
.L5837:
	movw	r2, #:lower16:.LANCHOR2
	movw	r1, #:lower16:.LC406
	ldr	r3, [r4, #124]
	movt	r2, #:upper16:.LANCHOR2
	movt	r1, #:upper16:.LC406
	add	r2, r2, r0
	mov	r0, sp
	ldrb	r2, [r2, #3000]	@ zero_extendqisi2
	bl	sprintf
	ldr	r0, [r4, #120]
	b	.L5795
.L5838:
	cmp	lr, #0
	beq	.L5807
	mov	r3, #9216
	mvn	r0, #21
	movt	r3, 5
	str	r3, [lr, #28]
	b	.L5794
.L5807:
	mvn	r0, #21
	b	.L5794
.L5839:
	bl	__stack_chk_fail
.L5797:
	cmp	r7, r0
	str	r3, [r4, #136]
	str	r3, [r4, #140]
	bne	.L5801
	b	.L5798
	.fnend
	.size	check_command.constprop.0, .-check_command.constprop.0
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_alloc_ctrl_pkt.constprop.0, %function
rmnet_alloc_ctrl_pkt.constprop.0:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r0
	movt	r3, #:upper16:kmalloc_caches
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L5846
	movw	r1, #32800
	bl	kmem_cache_alloc
	subs	r4, r0, #0
	beq	.L5850
.L5842:
	mov	r1, #32
	mov	r0, r5
	bl	__kmalloc
	cmp	r0, #0
	str	r0, [r4]
	strne	r5, [r4, #4]
	beq	.L5851
.L5841:
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L5846:
	mov	r4, #16
	b	.L5842
.L5850:
	mvn	r4, #11
	b	.L5841
.L5851:
	mov	r0, r4
	mvn	r4, #11
	bl	kfree
	b	.L5841
	.fnend
	.size	rmnet_alloc_ctrl_pkt.constprop.0, .-rmnet_alloc_ctrl_pkt.constprop.0
	.section	.rodata.str1.4
	.align	2
.LC408:
	.ascii	"<3>%s: Invalid grmnet/buf, grmnet:%pK buf:%pK\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	frmnet_send_cpkt_response, %function
frmnet_send_cpkt_response:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #0
	cmpne	r0, #0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	mov	r7, r1
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	beq	.L5871
	mov	r0, r2
	mov	r6, r2
	bl	rmnet_alloc_ctrl_pkt.constprop.0
	cmn	r0, #4096
	mov	r5, r0
	bhi	.L5872
	mov	r1, r7
	mov	r2, r6
	ldr	r0, [r0]
	bl	memcpy
	str	r6, [r5, #4]
	ldr	r3, [r4, #112]
	cmp	r3, #0
	beq	.L5856
	ldr	r3, [r4, #116]
	cmp	r3, #0
	bne	.L5857
.L5856:
	ldr	r0, [r5]
	bl	kfree
	mov	r0, r5
	bl	kfree
	mov	r0, #0
.L5852:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L5857:
	add	r7, r4, #124
	add	r6, r4, #136
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #140]
	add	r2, r5, #8
	mov	r1, r0
	mov	r0, r7
	str	r2, [r4, #140]
	str	r6, [r5, #8]
	str	r3, [r5, #12]
	str	r2, [r3]
	bl	_raw_spin_unlock_irqrestore
	ldr	r8, [r4, #132]
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r4, #112]
	mov	r1, r0
	clz	r0, r8
	lsr	r0, r0, #5
	cmp	r5, #0
	movne	r5, r0
	moveq	r5, #1
	cmp	r5, #0
	bne	.L5870
	ldr	r3, [r8]
	cmp	r3, #0
	beq	.L5870
	ldr	r3, [r4, #144]
	add	r3, r3, #1
	cmp	r3, #1
	str	r3, [r4, #144]
	beq	.L5860
.L5870:
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	mov	r0, #0
	b	.L5852
.L5860:
	ldr	r2, [r8]
	mvn	ip, #94
	mov	r0, r7
	strb	ip, [r2]
	strb	r3, [r2, #1]
	strb	r5, [r2, #2]
	strb	r5, [r2, #3]
	ldrh	r3, [r4, #104]
	strh	r3, [r2, #4]	@ unaligned
	strb	r5, [r2, #6]
	strb	r5, [r2, #7]
	bl	_raw_spin_unlock_irqrestore
	ldrd	r0, [r4, #128]
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	beq	.L5852
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #136]
	mov	r5, r0
	cmp	r6, r3
	beq	.L5861
	ldr	r2, [r4, #144]
	cmp	r2, #0
	beq	.L5861
	sub	r2, r2, #1
	mov	ip, #256
	mov	r0, #512
	str	r2, [r4, #144]
	ldm	r3, {r1, r2}
	mov	r4, r3
	str	r2, [r1, #4]
	str	r1, [r2]
	str	ip, [r3]
	str	r0, [r3, #4]
	ldr	r0, [r4, #-8]!
	bl	kfree
	mov	r0, r4
	bl	kfree
.L5861:
	mov	r1, r5
	b	.L5870
.L5872:
	movw	r0, #:lower16:.LC128
	ldr	r1, .L5873
	movt	r0, #:upper16:.LC128
	bl	printk
	mvn	r0, #11
	b	.L5852
.L5871:
	movw	r0, #:lower16:.LC408
	mov	r3, r1
	ldr	r1, .L5873
	mov	r2, r4
	movt	r0, #:upper16:.LC408
	bl	printk
	mvn	r0, #18
	b	.L5852
.L5874:
	.align	2
.L5873:
	.word	.LANCHOR2+3004
	.fnend
	.size	frmnet_send_cpkt_response, .-frmnet_send_cpkt_response
	.section	.rodata.str1.4
	.align	2
.LC409:
	.ascii	"<3>given pkt size too big:%d > max_pkt_size:%d\012\000"
	.align	2
.LC410:
	.ascii	"<3>rmnet file handler %pK is not open\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	grmnet_ctrl_qti_send_cpkt_tomodem, %function
grmnet_ctrl_qti_send_cpkt_tomodem:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR0
	cmp	r2, #2048
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:.LANCHOR0
	strd	r6, [sp, #8]
	mov	r6, r2
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r5, [r3, #4]
	bhi	.L5881
	mov	r0, r2
	mov	r7, r1
	bl	rmnet_alloc_ctrl_pkt.constprop.0
	cmn	r0, #4096
	mov	r4, r0
	bhi	.L5882
	mov	r1, r7
	mov	r2, r6
	ldr	r0, [r0]
	add	r8, r5, #52
	bl	memcpy
	mov	r0, r8
	str	r6, [r4, #4]
	bl	_raw_spin_lock_irqsave
	ldrb	r6, [r5, #4]	@ zero_extendqisi2
	mov	r7, r0
	cmp	r6, #0
	beq	.L5883
	ldr	r3, [r5, #48]
	add	r2, r4, #8
	add	ip, r5, #44
	mov	r1, r0
	mov	r0, r8
	str	r2, [r5, #48]
	str	ip, [r4, #8]
	str	r3, [r4, #12]
	str	r2, [r3]
	bl	_raw_spin_unlock_irqrestore
	add	r0, r5, #32
	mov	r3, #0
	mov	r2, #1
	mov	r1, #3
	bl	__wake_up
	mov	r0, #0
.L5875:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L5881:
	movw	r0, #:lower16:.LC409
	mov	r1, r2
	movt	r0, #:upper16:.LC409
	mov	r2, #2048
	bl	printk
	mvn	r0, #21
	b	.L5875
.L5883:
	movw	r0, #:lower16:.LC410
	mov	r1, r5
	movt	r0, #:upper16:.LC410
	bl	printk
	mov	r1, r7
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, [r4]
	bl	kfree
	mov	r0, r4
	bl	kfree
	mov	r0, r6
	b	.L5875
.L5882:
	movw	r0, #:lower16:.LC128
	ldr	r1, .L5884
	movt	r0, #:upper16:.LC128
	bl	printk
	mvn	r0, #11
	b	.L5875
.L5885:
	.align	2
.L5884:
	.word	.LANCHOR2+3032
	.fnend
	.size	grmnet_ctrl_qti_send_cpkt_tomodem, .-grmnet_ctrl_qti_send_cpkt_tomodem
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	grmnet_ctrl_smd_send_cpkt_tomodem, %function
grmnet_ctrl_smd_send_cpkt_tomodem:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r0, #5
	mov	r3, r0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	bhi	.L5887
	movw	r7, #:lower16:.LANCHOR0
	mov	r6, r2
	movt	r7, #:upper16:.LANCHOR0
	mov	r2, #84
	mla	r2, r2, r0, r7
	ldr	r5, [r2, #2288]
	cmp	r5, #0
	beq	.L5887
	mov	r0, r6
	mov	r8, r1
	bl	rmnet_alloc_ctrl_pkt.constprop.0
	cmn	r0, #4096
	mov	r4, r0
	bhi	.L5897
	mov	r1, r8
	mov	r2, r6
	ldr	r0, [r0]
	add	r9, r5, #108
	bl	memcpy
	mov	r0, r9
	str	r6, [r4, #4]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #8]
	mov	r8, r0
	ands	r6, r3, #1
	beq	.L5898
	ldr	r3, [r5, #44]
	add	r2, r4, #8
	add	ip, r5, #40
	add	r1, r5, #68
	ldr	r0, [r7, #2280]
	mov	r6, #0
	str	r2, [r5, #44]
	str	ip, [r4, #8]
	str	r3, [r4, #12]
	str	r2, [r3]
	bl	queue_work
	mov	r1, r8
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore
.L5886:
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L5898:
	ldr	r0, [r4]
	bl	kfree
	mov	r0, r4
	bl	kfree
	mov	r1, r8
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore
	b	.L5886
.L5897:
	movw	r0, #:lower16:.LC128
	ldr	r1, .L5899
	mvn	r6, #11
	movt	r0, #:upper16:.LC128
	bl	printk
	b	.L5886
.L5887:
	movw	r0, #:lower16:.LC19
	ldr	r1, .L5899
	mov	r2, r3
	movt	r0, #:upper16:.LC19
	mvn	r6, #18
	bl	printk
	b	.L5886
.L5900:
	.align	2
.L5899:
	.word	.LANCHOR2+3068
	.fnend
	.size	grmnet_ctrl_smd_send_cpkt_tomodem, .-grmnet_ctrl_smd_send_cpkt_tomodem
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gps_send_cpkt_response, %function
gps_send_cpkt_response:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #0
	cmpne	r0, #0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	mov	r7, r1
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	beq	.L5919
	mov	r0, r2
	mov	r6, r2
	bl	rmnet_alloc_ctrl_pkt.constprop.0
	cmn	r0, #4096
	mov	r5, r0
	bhi	.L5920
	mov	r1, r7
	mov	r2, r6
	ldr	r0, [r0]
	bl	memcpy
	str	r6, [r5, #4]
	ldr	r3, [r4, #112]
	cmp	r3, #0
	beq	.L5905
	ldr	r3, [r4, #116]
	cmp	r3, #0
	bne	.L5906
.L5905:
	ldr	r0, [r5]
	bl	kfree
	mov	r0, r5
	bl	kfree
	mov	r0, #0
.L5901:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L5906:
	add	r7, r4, #124
	add	r6, r4, #136
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #140]
	add	r2, r5, #8
	mov	r1, r0
	mov	r0, r7
	str	r2, [r4, #140]
	str	r6, [r5, #8]
	str	r3, [r5, #12]
	str	r2, [r3]
	bl	_raw_spin_unlock_irqrestore
	ldr	r8, [r4, #132]
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r4, #112]
	mov	r1, r0
	clz	r0, r8
	lsr	r0, r0, #5
	cmp	r5, #0
	movne	r5, r0
	moveq	r5, #1
	cmp	r5, #0
	bne	.L5918
	ldr	r3, [r8]
	cmp	r3, #0
	beq	.L5918
	add	r9, r4, #144
	.syntax divided
@ 60 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 111 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/processor.h" 1
	pld	[r9]
@ 0 "" 2
@ 63 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r2, [r9]
	add	r2, r2, #1
	strex	r3, r2, [r9]
	teq	r3, #0
	bne	1b
@ 0 "" 2
@ 73 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r2, #1
	beq	.L5909
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r5
	b	.L5901
.L5909:
	ldr	r3, [r8]
	mvn	ip, #94
	mov	r0, r7
	strb	ip, [r3]
	strb	r2, [r3, #1]
	strb	r5, [r3, #2]
	strb	r5, [r3, #3]
	ldrh	r2, [r4, #108]
	strh	r2, [r3, #4]	@ unaligned
	strb	r5, [r3, #6]
	strb	r5, [r3, #7]
	bl	_raw_spin_unlock_irqrestore
	ldrd	r0, [r4, #128]
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	beq	.L5901
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #136]
	mov	r5, r0
	cmp	r6, r3
	beq	.L5910
	.syntax divided
@ 83 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r2, [r9]
	sub	r2, r2, #1
	strex	r1, r2, [r9]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	ldm	r3, {r1, r2}
	mov	ip, #256
	mov	r0, #512
	mov	r4, r3
	str	r2, [r1, #4]
	str	r1, [r2]
	str	ip, [r3]
	str	r0, [r3, #4]
	ldr	r0, [r4, #-8]!
	bl	kfree
	mov	r0, r4
	bl	kfree
.L5910:
	mov	r1, r5
.L5918:
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	mov	r0, #0
	b	.L5901
.L5920:
	movw	r0, #:lower16:.LC128
	ldr	r1, .L5921
	movt	r0, #:upper16:.LC128
	bl	printk
	mvn	r0, #11
	b	.L5901
.L5919:
	movw	r0, #:lower16:.LC408
	mov	r3, r1
	ldr	r1, .L5921
	mov	r2, r4
	movt	r0, #:upper16:.LC408
	bl	printk
	mvn	r0, #18
	b	.L5901
.L5922:
	.align	2
.L5921:
	.word	.LANCHOR2+3104
	.fnend
	.size	gps_send_cpkt_response, .-gps_send_cpkt_response
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ptp_function_cleanup, %function
ptp_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	bx	lr
	.fnend
	.size	ptp_function_cleanup, .-ptp_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_complete_epout, %function
rmnet_sdio_complete_epout:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	mov	r6, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r5, [r0]
	.pad #8
	sub	sp, sp, #8
	ldr	r3, [r1, #44]
	ldr	r8, [r1, #32]
	ldr	r7, [r5, #76]
	cmn	r3, #104
	beq	.L5951
	cmp	r3, #0
	beq	.L5926
	cmn	r3, #108
	beq	.L5951
	ldr	r2, [r0, #4]
	movw	r1, #:lower16:.LC105
	ldr	r0, [r7]
	movt	r1, #:upper16:.LC105
	ldr	lr, [r4, #4]
	ldr	ip, [r4, #48]
	add	r0, r0, #32
	stm	sp, {ip, lr}
	bl	dev_err
	mov	r0, r8
	bl	dev_kfree_skb_any
	ldr	r3, [r5, #308]
	tst	r3, #2
	beq	.L5928
	add	r6, r5, #180
	mov	r0, r6
	bl	_raw_spin_lock
.L5929:
	movw	r3, #:lower16:.LANCHOR1
	ldr	r2, [r5, #316]
	movt	r3, #:upper16:.LANCHOR1
	ldr	r3, [r3, #1388]
	cmp	r2, r3
	bcs	.L5952
	mov	r0, r6
	bl	_raw_spin_unlock
	mvn	r3, #0
	mov	r2, #0
	mov	r1, #32
	movw	r0, #2056
	bl	__alloc_skb
	subs	r6, r0, #0
	beq	.L5933
	ldr	r0, [r6, #160]
	mov	ip, #2048
	mov	r2, #32
	ldr	r3, [r6, #172]
	mov	r1, r4
	add	r0, r0, #8
	add	r3, r3, #8
	str	r0, [r6, #160]
	str	r3, [r6, #172]
	stm	r4, {r3, ip}
	str	r6, [r4, #32]
	ldr	r0, [r5, #80]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r8, r0, #0
	bne	.L5953
.L5924:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L5926:
	mov	r0, r8
	ldr	r1, [r1, #48]
	bl	skb_put
	ldr	r3, [r5, #308]
	tst	r3, #2
	beq	.L5928
	add	r6, r5, #180
	mov	r0, r6
	bl	_raw_spin_lock
	ldr	r3, [r5, #168]
	add	r2, r5, #164
	add	r1, r5, #228
	strd	r2, [r8]
	str	r8, [r3]
	ldr	r3, [r5, #172]
	str	r8, [r5, #168]
	ldr	r0, [r5, #192]
	add	r3, r3, #1
	str	r3, [r5, #172]
	bl	queue_work
	b	.L5929
.L5928:
	movw	r0, #:lower16:.LC136
	ldr	r1, .L5954
	movt	r0, #:upper16:.LC136
	bl	printk
.L5951:
	mov	r0, r8
	bl	dev_kfree_skb_any
	mov	r0, #0
	str	r0, [r4]
	bl	kfree
	ldr	r3, [r6, #8]
	mov	r1, r4
	mov	r0, r6
	ldr	r3, [r3, #12]
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	bx	r3	@ indirect register sibling call
.L5952:
	ldr	r3, [r5, #156]
	add	r2, r4, #36
	add	r1, r5, #152
	mov	r0, r6
	str	r2, [r5, #156]
	str	r1, [r4, #36]
	str	r3, [r4, #40]
	str	r2, [r3]
	ldr	r3, [r5, #160]
	add	r3, r3, #1
	str	r3, [r5, #160]
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock
.L5953:
	mov	r0, r6
	bl	dev_kfree_skb_any
.L5931:
	ldr	r0, [r7]
	movw	r1, #:lower16:.LC0
	mov	r2, r8
	movt	r1, #:upper16:.LC0
	add	r0, r0, #32
	bl	dev_err
	ldr	r3, [r5, #156]
	add	r2, r4, #36
	add	r1, r5, #152
	str	r2, [r5, #156]
	str	r1, [r4, #36]
	str	r3, [r4, #40]
	str	r2, [r3]
	ldr	r3, [r5, #160]
	add	r3, r3, #1
	str	r3, [r5, #160]
	b	.L5924
.L5933:
	mvn	r8, #11
	b	.L5931
.L5955:
	.align	2
.L5954:
	.word	.LANCHOR2+3128
	.fnend
	.size	rmnet_sdio_complete_epout, .-rmnet_sdio_complete_epout
	.section	.rodata.str1.4
	.align	2
.LC411:
	.ascii	"unable to allocate memory for QMI req\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_command_complete, %function
rmnet_sdio_command_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r1, #32]
	ldr	r2, [r1, #44]
	ldr	r7, [r4, #76]
	cmp	r2, #0
	blt	.L5968
	ldr	r3, [r4, #312]
	tst	r3, #2
	bne	.L5969
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L5969:
	movw	r3, #:lower16:kmalloc_caches
	mov	r5, r1
	ldr	r8, [r1, #48]
	movt	r3, #:upper16:kmalloc_caches
	ldr	r6, [r3, #24]
	cmp	r6, #0
	beq	.L5959
	mov	r0, r6
	mov	r1, #32
	bl	kmem_cache_alloc
	subs	r6, r0, #0
	beq	.L5961
	mov	r1, #32
	mov	r0, r8
	bl	__kmalloc
	cmp	r0, #0
	str	r0, [r6]
	beq	.L5965
	cmn	r6, #4096
	bhi	.L5961
.L5964:
	mov	r2, r8
	ldr	r1, [r5]
	add	r5, r4, #180
	bl	memcpy
	mov	r0, r5
	str	r8, [r6, #4]
	bl	_raw_spin_lock
	ldr	r3, [r4, #104]
	add	r2, r6, #8
	add	r1, r4, #100
	mov	r0, r5
	str	r2, [r4, #104]
	str	r1, [r6, #8]
	str	r3, [r6, #12]
	str	r2, [r3]
	ldr	r3, [r4, #108]
	add	r3, r3, #1
	str	r3, [r4, #108]
	bl	_raw_spin_unlock
	add	r1, r4, #212
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	ldr	r0, [r4, #192]
	ldrd	r4, [sp]
	add	sp, sp, #24
	b	queue_work
.L5959:
	mov	r1, #32
	mov	r0, r8
	bl	__kmalloc
	cmp	r0, #0
	str	r0, [r6, #16]
	mov	r6, #16
	bne	.L5964
.L5965:
	mov	r0, r6
	bl	kfree
.L5961:
	ldr	r0, [r7]
	movw	r1, #:lower16:.LC411
	movt	r1, #:upper16:.LC411
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	r0, r0, #32
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	dev_err
.L5968:
	ldr	r0, [r7]
	movw	r1, #:lower16:.LC102
	movt	r1, #:upper16:.LC102
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	r0, r0, #32
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	dev_err
	.fnend
	.size	rmnet_sdio_command_complete, .-rmnet_sdio_command_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_endless_tx_complete, %function
gbam_endless_tx_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	bx	lr
	.fnend
	.size	gbam_endless_tx_complete, .-gbam_endless_tx_complete
	.section	.rodata.str1.4
	.align	2
.LC412:
	.ascii	"drivers/usb/gadget/android.c\000"
	.align	2
.LC413:
	.ascii	"<3>%s: %s: usb_add_config failed : err: %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	android_enable, %function
android_enable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r6, [r0, #8]
	ldr	r5, [r0, #20]
	cmp	r5, #0
	beq	.L5996
	sub	r5, r5, #1
	cmp	r5, #0
	str	r5, [r0, #20]
	movne	r5, #0
	bne	.L5971
	mov	r7, r0
	ldr	r4, [r7, #196]!
	cmp	r7, r4
	sub	r4, r4, #120
	beq	.L5974
	movw	r10, #:lower16:.LANCHOR0
	mov	r8, r5
	movt	r10, #:upper16:.LANCHOR0
	add	r9, r6, #36
.L5982:
	ldrb	r2, [r4, #20]	@ zero_extendqisi2
	cmp	r2, #0
	beq	.L5986
	ldr	r3, [r6, #36]
	cmp	r9, r3
	sub	r3, r3, #28
	bne	.L5977
	b	.L5976
.L5997:
	ldr	r3, [r3, #28]
	cmp	r9, r3
	sub	r3, r3, #28
	beq	.L5976
.L5977:
	ldrb	r1, [r3, #20]	@ zero_extendqisi2
	cmp	r1, r2
	bne	.L5997
	mvn	r5, #15
.L5975:
	ldr	r2, .L6000
	movw	r0, #:lower16:.LC413
	mov	r3, r5
	movt	r0, #:upper16:.LC413
	mov	r1, r2
	bl	printk
.L5971:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L5976:
	str	r6, [r4, #24]
	ldr	ip, [r6, #40]
	add	r2, r4, #28
	add	r3, r4, #36
	mov	r1, #64
	add	r0, r4, #48
	str	r2, [r6, #40]
	str	r9, [r4, #28]
	str	ip, [r4, #32]
	str	r2, [ip]
	str	r3, [r4, #36]
	str	r3, [r4, #40]
	strb	r8, [r4, #44]
	bl	__memzero
	mov	r0, r4
	bl	android_bind_config
	subs	r5, r0, #0
	blt	.L5998
	ldr	r1, [r6]
	ldr	r3, [r1, #8]!
	cmp	r1, r3
	sub	r3, r3, #12
	beq	.L5999
.L5980:
	ldr	r2, [r3, #12]
	str	r8, [r3]
	cmp	r1, r2
	sub	r3, r2, #12
	bne	.L5980
	cmp	r5, #0
	str	r8, [r10, #3272]
	blt	.L5975
.L5981:
	ldr	r4, [r4, #120]
	cmp	r7, r4
	sub	r4, r4, #120
	bne	.L5982
.L5974:
	ldr	r0, [r6]
	ldr	r3, [r0]
	ldr	r3, [r3, #20]
	cmp	r3, #0
	beq	.L5971
	mov	r1, #1
	blx	r3
	b	.L5971
.L5998:
	ldrd	r2, [r4, #28]
	mov	r1, #512
	mov	r0, #256
	str	r3, [r2, #4]
	str	r2, [r3]
	str	r8, [r4, #24]
	strd	r0, [r4, #28]
	ldr	r1, [r6]
	ldr	r3, [r1, #8]!
	cmp	r1, r3
	sub	r3, r3, #12
	bne	.L5980
	movw	r3, #:lower16:.LANCHOR0
	movt	r3, #:upper16:.LANCHOR0
	str	r8, [r3, #3272]
	b	.L5975
.L5999:
	str	r8, [r10, #3272]
	b	.L5981
.L5996:
	movw	r0, #:lower16:.LC412
	movw	r1, #411
	movt	r0, #:upper16:.LC412
	bl	warn_slowpath_null
	b	.L5971
.L5986:
	mvn	r5, #21
	b	.L5975
.L6001:
	.align	2
.L6000:
	.word	.LANCHOR2+3156
	.fnend
	.size	android_enable, .-android_enable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_android_function_disable, %function
adb_android_function_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #4]
	mov	r1, #0
	ldr	r0, [r0, #20]
	ldrb	r2, [r3]	@ zero_extendqisi2
	strb	r1, [r3, #1]
	cmp	r2, r1
	beq	.L6004
	bx	lr
.L6004:
	b	android_enable
	.fnend
	.size	adb_android_function_disable, .-adb_android_function_disable
	.section	.rodata.str1.4
	.align	2
.LC414:
	.ascii	"<6>adb_open\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_open, %function
adb_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r0, .L6023
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	mov	r6, r1
	ldr	r1, .L6023+4
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	___ratelimit
	cmp	r0, #0
	bne	.L6021
.L6006:
	movw	r4, #:lower16:.LANCHOR0
	movt	r4, #:upper16:.LANCHOR0
	ldr	r3, [r4, #2284]
	cmp	r3, #0
	beq	.L6013
	add	r2, r3, #108
	.syntax divided
@ 60 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 111 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/processor.h" 1
	pld	[r2]
@ 0 "" 2
@ 63 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r5, [r2]
	add	r5, r5, #1
	strex	r1, r5, [r2]
	teq	r1, #0
	bne	1b
@ 0 "" 2
@ 73 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r5, #1
	bne	.L6008
	ldr	r3, [r4, #2284]
	mov	r2, #0
	str	r3, [r6, #132]
	ldrb	r1, [r3, #153]	@ zero_extendqisi2
	str	r2, [r3, #96]
	cmp	r1, r2
	bne	.L6022
.L6010:
	mov	r2, #1
	mov	r0, #0
	strb	r2, [r3, #152]
.L6005:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L6022:
	movw	r1, #:lower16:.LANCHOR1
	strb	r2, [r3, #153]
	movt	r1, #:upper16:.LANCHOR1
	ldr	r7, [r1, #1420]
	ldr	r6, [r1, #1436]
	cmp	r6, #0
	strbeq	r5, [r7]
	streq	r6, [r7, #4]
	beq	.L6010
	add	r8, r6, #24
	mov	r0, r8
	bl	mutex_lock
	ldrb	r3, [r7, #1]	@ zero_extendqisi2
	strb	r5, [r7]
	str	r6, [r7, #4]
	cmp	r3, #0
	beq	.L6012
	mov	r0, r6
	bl	android_enable
.L6012:
	mov	r0, r8
	bl	mutex_unlock
	ldr	r3, [r4, #2284]
	b	.L6010
.L6008:
	.syntax divided
@ 83 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r1, [r2]
	sub	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mvn	r0, #15
	b	.L6005
.L6013:
	mvn	r0, #18
	b	.L6005
.L6021:
	movw	r0, #:lower16:.LC414
	movt	r0, #:upper16:.LC414
	bl	printk
	b	.L6006
.L6024:
	.align	2
.L6023:
	.word	.LANCHOR1+1392
	.word	.LANCHOR2+3172
	.fnend
	.size	adb_open, .-adb_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_function_disable, %function
ffs_function_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #4]
	mov	r1, #0
	ldr	r0, [r0, #20]
	ldrb	r2, [r3]	@ zero_extendqisi2
	strb	r1, [r3, #1]
	cmp	r2, r1
	beq	.L6027
	bx	lr
.L6027:
	b	android_enable
	.fnend
	.size	ffs_function_disable, .-ffs_function_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	uasp_function_init, %function
uasp_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	uasp_function_init, .-uasp_function_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_midi_in_close, %function
f_midi_in_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	f_midi_in_close, .-f_midi_in_close
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_midi_out_close, %function
f_midi_out_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	f_midi_out_close, .-f_midi_out_close
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_control_complete, %function
audio_control_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	bx	lr
	.fnend
	.size	audio_control_complete, .-audio_control_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_hid_start, %function
acc_hid_start:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	acc_hid_start, .-acc_hid_start
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_hid_open, %function
acc_hid_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	acc_hid_open, .-acc_hid_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam_data_endless_rx_complete, %function
bam_data_endless_rx_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	bx	lr
	.fnend
	.size	bam_data_endless_rx_complete, .-bam_data_endless_rx_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam_data_endless_tx_complete, %function
bam_data_endless_tx_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	bx	lr
	.fnend
	.size	bam_data_endless_tx_complete, .-bam_data_endless_tx_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_endless_rx_complete, %function
gbam_endless_rx_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	bx	lr
	.fnend
	.size	gbam_endless_rx_complete, .-gbam_endless_rx_complete
	.section	.init.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_data_init, %function
ghsic_data_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	ghsic_data_init, .-ghsic_data_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_ctrl_init, %function
ghsuart_ctrl_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	ghsuart_ctrl_init, .-ghsuart_ctrl_init
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_lun_release, %function
fsg_lun_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	bx	lr
	.fnend
	.size	fsg_lun_release, .-fsg_lun_release
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_hid_close, %function
acc_hid_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	bx	lr
	.fnend
	.size	acc_hid_close, .-acc_hid_close
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_hid_stop, %function
acc_hid_stop:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	bx	lr
	.fnend
	.size	acc_hid_stop, .-acc_hid_stop
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	uasp_function_cleanup, %function
uasp_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	bx	lr
	.fnend
	.size	uasp_function_cleanup, .-uasp_function_cleanup
	.section	.exit.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_data_exit, %function
ghsic_data_exit:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	bx	lr
	.fnend
	.size	ghsic_data_exit, .-ghsic_data_exit
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_ctrl_exit, %function
ghsuart_ctrl_exit:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	bx	lr
	.fnend
	.size	ghsuart_ctrl_exit, .-ghsuart_ctrl_exit
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_data_exit, %function
ghsuart_data_exit:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	bx	lr
	.fnend
	.size	ghsuart_data_exit, .-ghsuart_data_exit
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gctrl_exit, %function
gctrl_exit:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	bx	lr
	.fnend
	.size	gctrl_exit, .-gctrl_exit
	.section	.rodata.str1.4
	.align	2
.LC415:
	.ascii	"drivers/usb/gadget/u_serial.c\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gserial_cleanup.part.0, %function
gserial_cleanup.part.0:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	strd	r6, [sp, #8]
	movw	r6, #:lower16:.LANCHOR0
	movt	r6, #:upper16:.LANCHOR0
	strd	r8, [sp, #16]
	ldr	r3, [r6, #3780]
	str	lr, [sp, #24]
	.pad #28
	sub	sp, sp, #28
	cmp	r3, #0
	movne	r4, #0
	beq	.L6049
.L6048:
	mov	r1, r4
	ldr	r0, [r6, #3784]
	add	r4, r4, #1
	bl	tty_unregister_device
	ldr	r3, [r6, #3780]
	cmp	r4, r3
	bcc	.L6048
	cmp	r3, #0
	beq	.L6049
	mov	r3, sp
	ldr	r5, .L6067
	mov	r8, #0
	bic	r9, r3, #8128
	bic	r9, r9, #63
	b	.L6057
.L6066:
	ldrb	r3, [r4, #16]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L6050
	mov	r0, r4
	bl	_raw_spin_unlock_irq
	ldr	r3, [r4, #4]
	cmp	r3, #0
	bne	.L6065
.L6055:
	mov	r0, r4
	add	r8, r8, #1
	bl	kfree
	ldr	r3, [r6, #3780]
	add	r5, r5, #28
	cmp	r8, r3
	bcs	.L6049
.L6057:
	mov	r0, r5
	bl	mutex_lock
	ldr	r4, [r5, #24]
	mov	r3, #0
	mov	r0, r5
	str	r3, [r5, #24]
	bl	mutex_unlock
	add	r0, r4, #60
	bl	cancel_work_sync
	mov	r0, r4
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L6066
.L6050:
	mov	r0, r4
	add	r7, r4, #20
	bl	_raw_spin_unlock_irq
	ldr	r0, [r9, #12]
	movw	r2, #:lower16:autoremove_wake_function
	add	r1, sp, #16
	mov	r3, #0
	movt	r2, #:upper16:autoremove_wake_function
	str	r3, [sp, #4]
	str	r0, [sp, #8]
	str	r2, [sp, #12]
	str	r1, [sp, #16]
	str	r1, [sp, #20]
.L6054:
	mov	r2, #2
	add	r1, sp, #4
	mov	r0, r7
	bl	prepare_to_wait
	mov	r0, r4
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #12]
	mov	r0, r4
	cmp	r3, #0
	bne	.L6052
	ldrb	r3, [r4, #16]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L6052
	bl	_raw_spin_unlock_irq
	add	r1, sp, #4
	mov	r0, r7
	bl	finish_wait
	ldr	r3, [r4, #4]
	cmp	r3, #0
	beq	.L6055
.L6065:
	movw	r0, #:lower16:.LC415
	movw	r1, #1461
	movt	r0, #:upper16:.LC415
	add	r8, r8, #1
	bl	warn_slowpath_null
	mov	r0, r4
	add	r5, r5, #28
	bl	kfree
	ldr	r3, [r6, #3780]
	cmp	r3, r8
	bhi	.L6057
.L6049:
	mov	r4, #0
	ldr	r0, [r6, #2032]
	str	r4, [r6, #3780]
	bl	destroy_workqueue
	ldr	r0, [r6, #3784]
	bl	tty_unregister_driver
	ldr	r0, [r6, #3784]
	bl	put_tty_driver
	str	r4, [r6, #3784]
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L6052:
	bl	_raw_spin_unlock_irq
	bl	schedule
	b	.L6054
.L6068:
	.align	2
.L6067:
	.word	.LANCHOR0+3788
	.fnend
	.size	gserial_cleanup.part.0, .-gserial_cleanup.part.0
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acm_function_cleanup, %function
acm_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR0
	movt	r3, #:upper16:.LANCHOR0
	ldr	r3, [r3, #3784]
	cmp	r3, #0
	beq	.L6069
	b	gserial_cleanup.part.0
.L6069:
	bx	lr
	.fnend
	.size	acm_function_cleanup, .-acm_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	midi_function_cleanup, %function
midi_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r0, [r0, #4]
	b	kfree
	.fnend
	.size	midi_function_cleanup, .-midi_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_function_cleanup, %function
ecm_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r0, [r0, #4]
	bl	kfree
	mov	r3, #0
	str	r3, [r4, #4]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	ecm_function_cleanup, .-ecm_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mass_storage_function_cleanup, %function
mass_storage_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r0, [r0, #4]
	bl	kfree
	mov	r3, #0
	str	r3, [r4, #4]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	mass_storage_function_cleanup, .-mass_storage_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_function_cleanup, %function
rndis_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r0, [r0, #4]
	bl	kfree
	mov	r3, #0
	str	r3, [r4, #4]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	rndis_function_cleanup, .-rndis_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	serial_function_cleanup, %function
serial_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR0
	movt	r3, #:upper16:.LANCHOR0
	ldr	r3, [r3, #3784]
	cmp	r3, #0
	beq	.L6078
	b	gserial_cleanup.part.0
.L6078:
	bx	lr
	.fnend
	.size	serial_function_cleanup, .-serial_function_cleanup
	.section	.rodata.str1.4
	.align	2
.LC416:
	.ascii	"<3>%s: playback_buf is empty\000"
	.align	2
.LC417:
	.ascii	"<3>%s: Buffer is empty, no data to play\000"
	.align	2
.LC418:
	.ascii	"<3>%s: Failed to init audio streams\000"
	.align	2
.LC419:
	.ascii	"<3>%s: SND failure - runtime->frame_bits == 0\000"
	.align	2
.LC420:
	.ascii	"<3>%s: snd_pcm_lib_write failed with err %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_audio_playback_work, %function
f_audio_playback_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	sub	r7, r0, #8
	mov	r0, r7
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #20
	sub	sp, sp, #20
	bl	_raw_spin_lock_irqsave
	mov	r3, r5
	mov	r6, r0
	ldr	r4, [r3, #16]!
	cmp	r4, r3
	beq	.L6092
	ldrd	r2, [r4]
	mov	lr, #256
	mov	ip, #512
	mov	r1, r0
	mov	r0, r7
	sub	r9, r4, #8
	str	r3, [r2, #4]
	str	r2, [r3]
	str	lr, [r4]
	str	ip, [r4, #4]
	bl	_raw_spin_unlock_irqrestore
	ldr	r8, [r5, #-64]
	ldr	r7, [r4, #-4]
	ldr	fp, [r4, #-8]
	ldr	r10, [r8, #208]
	cmp	r7, #0
	beq	.L6093
	movw	r6, #:lower16:.LANCHOR0
	movt	r6, #:upper16:.LANCHOR0
	ldrb	r2, [r6, #184]	@ zero_extendqisi2
	cmp	r2, #0
	beq	.L6094
.L6084:
	lsl	r3, r7, #3
	mov	r6, #57344
	movt	r6, 65535
	str	r3, [sp, #8]
	mov	r3, sp
	and	r7, r3, r6
.L6089:
	ldr	r3, [r10, #168]
	mov	r2, #146
	movw	r1, #16704
	mov	r0, r8
	ldr	r3, [r3]
	cmp	r3, #7
	mvn	r2, r2, lsr r3
	bhi	.L6086
	ands	r2, r2, #1
	bne	.L6086
	bl	snd_pcm_kernel_ioctl
	cmp	r0, #0
	blt	.L6095
.L6086:
	ldr	r2, [r10, #88]
	mov	r3, #0
	mov	r1, fp
	cmp	r2, r3
	beq	.L6096
	ldr	r0, [sp, #8]
	udiv	r2, r0, r2
	ldr	r0, [r7, #8]
	str	r3, [r7, #8]
	str	r0, [sp, #4]
	ldr	r0, [r5, #-64]
	str	r2, [sp, #12]
	bl	snd_pcm_lib_write
	ldr	r2, [sp, #12]
	mov	r3, r0
	cmp	r2, r0
	bne	.L6097
	mov	r3, sp
	and	r6, r6, r3
	ldr	r3, [sp, #4]
	str	r3, [r6, #8]
.L6083:
	cmp	r9, #0
	beq	.L6080
	ldr	r0, [r4, #-8]
	bl	kfree
	mov	r3, #0
	mov	r0, r9
	str	r3, [r4, #-8]
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	kfree
.L6080:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L6094:
	bl	gaudio_open_streams
	cmp	r0, #0
	moveq	r2, #1
	strbeq	r2, [r6, #184]
	beq	.L6084
	movw	r0, #:lower16:.LC418
	ldr	r1, .L6098
	movt	r0, #:upper16:.LC418
	bl	printk
	b	.L6083
.L6095:
	mov	r2, r0
	movw	r0, #:lower16:.LC370
	ldr	r1, .L6098
	movt	r0, #:upper16:.LC370
	bl	printk
	movw	r0, #:lower16:.LC381
	ldr	r1, .L6098+4
	movt	r0, #:upper16:.LC381
	bl	printk
	b	.L6083
.L6097:
	movw	r0, #:lower16:.LC420
	mov	r2, r3
	ldr	r1, .L6098
	movt	r0, #:upper16:.LC420
	bl	printk
	ldr	r3, [sp, #4]
	str	r3, [r7, #8]
	b	.L6089
.L6096:
	movw	r0, #:lower16:.LC419
	ldr	r1, .L6098
	movt	r0, #:upper16:.LC419
	bl	printk
	b	.L6083
.L6093:
	movw	r0, #:lower16:.LC417
	ldr	r1, .L6098
	movt	r0, #:upper16:.LC417
	bl	printk
	b	.L6083
.L6092:
	movw	r0, #:lower16:.LC416
	ldr	r1, .L6098+4
	movt	r0, #:upper16:.LC416
	bl	printk
	mov	r1, r6
	mov	r0, r7
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L6099:
	.align	2
.L6098:
	.word	.LANCHOR2+3208
	.word	.LANCHOR2+3184
	.fnend
	.size	f_audio_playback_work, .-f_audio_playback_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gser_complete_set_line_coding, %function
gser_complete_set_line_coding:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r2, [r1, #44]
	cmp	r2, #0
	bne	.L6100
	ldr	r2, [r1, #48]
	cmp	r2, #7
	beq	.L6102
	ldr	r3, [r0, #8]
	mov	r1, #1
	ldr	r3, [r3, #24]
	bx	r3
.L6102:
	ldr	r2, [r1]
	ldr	r1, [r0]
	ldr	r0, [r2]	@ unaligned
	add	r3, r1, #160
	str	r0, [r1, #160]
	ldrh	r1, [r2, #4]	@ unaligned
	strh	r1, [r3, #4]	@ movhi
	ldrb	r2, [r2, #6]	@ zero_extendqisi2
	strb	r2, [r3, #6]
.L6100:
	bx	lr
	.fnend
	.size	gser_complete_set_line_coding, .-gser_complete_set_line_coding
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_complete_in, %function
acc_complete_in:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r3, #:lower16:.LANCHOR0
	mov	r4, r1
	str	r6, [sp, #8]
	movt	r3, #:upper16:.LANCHOR0
	str	lr, [sp, #12]
	ldr	r2, [r1, #44]
	ldr	r5, [r3, #824]
	cmn	r2, #108
	bne	.L6104
	ldrb	r3, [r5, #92]	@ zero_extendqisi2
	bic	r3, r3, #3
	orr	r3, r3, #2
	strb	r3, [r5, #92]
.L6104:
	add	r6, r5, #80
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #1652]
	add	r2, r4, #36
	add	ip, r5, #1648
	mov	r1, r0
	mov	r0, r6
	str	r2, [r5, #1652]
	str	ip, [r4, #36]
	str	r3, [r4, #40]
	str	r2, [r3]
	bl	_raw_spin_unlock_irqrestore
	add	r0, r5, #1664
	mov	r3, #0
	ldrd	r4, [sp]
	add	r0, r0, #4
	mov	r2, #1
	ldr	r6, [sp, #8]
	mov	r1, #3
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	__wake_up
	.fnend
	.size	acc_complete_in, .-acc_complete_in
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_indicate_status_msg, %function
rndis_indicate_status_msg:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	lsl	r9, r0, #4
	ldr	r8, .L6113
	str	r10, [sp, #24]
	sub	r5, r9, r0
	str	lr, [sp, #28]
	lsl	r5, r5, #2
	add	r7, r8, r5
	ldr	r3, [r7, #4]
	cmp	r3, #0
	beq	.L6109
	movw	r3, #:lower16:kmalloc_caches
	mov	r4, r0
	movt	r3, #:upper16:kmalloc_caches
	mov	r6, r1
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L6110
	mov	r1, #32
	bl	kmem_cache_alloc
	subs	r3, r0, #0
	beq	.L6111
	add	r1, r3, #20
.L6108:
	movw	r2, #:lower16:.LANCHOR0
	sub	r4, r9, r4
	str	r1, [r3, #8]
	movt	r2, #:upper16:.LANCHOR0
	mov	r1, #20
	add	r2, r2, r4, lsl #2
	mov	r4, #0
	str	r1, [r3, #12]
	add	r5, r5, #52
	str	r4, [r3, #16]
	ldr	r0, [r2, #3772]
	add	r5, r8, r5
	str	r3, [r2, #3772]
	mov	r2, #7
	str	r5, [r3]
	str	r0, [r3, #4]
	str	r3, [r0]
	ldr	r3, [r3, #8]
	str	r2, [r3]
	stmib	r3, {r1, r6}
	str	r4, [r3, #12]
	str	r4, [r3, #16]
	ldr	r3, [r7, #44]
	ldr	r0, [r7, #48]
	blx	r3
	mov	r0, r4
.L6106:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L6110:
	mov	r1, #36
	mov	r3, #16
	b	.L6108
.L6111:
	mvn	r0, #11
	b	.L6106
.L6109:
	movw	r0, #65012
	movt	r0, 65535
	b	.L6106
.L6114:
	.align	2
.L6113:
	.word	.LANCHOR0+3716
	.fnend
	.size	rndis_indicate_status_msg, .-rndis_indicate_status_msg
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_proc_write, %function
rndis_proc_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	subs	r7, r2, #0
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r3, [r0, #12]
	.pad #4
	sub	sp, sp, #4
	ldr	r3, [r3, #40]
	ldr	r3, [r3, #-20]
	ldr	r9, [r3, #44]
	beq	.L6116
	mov	r3, sp
	mov	r10, #0
	bic	r6, r3, #8128
	movw	r8, #:lower16:.LANCHOR0
	mov	r4, r1
	mov	r5, r10
	bic	r6, r6, #63
	movt	r8, #:upper16:.LANCHOR0
	add	fp, r1, r7
	b	.L6125
.L6148:
	cmp	r2, #57
	bhi	.L6120
	cmp	r2, #47
	bls	.L6122
	add	r5, r5, r5, lsl #2
	sub	r2, r2, #48
	mov	r10, #1
	add	r5, r2, r5, lsl r10
.L6124:
	add	r4, r4, #1
	cmp	r4, fp
	beq	.L6116
.L6125:
	ldr	r1, [r6, #8]
	mov	r0, r4
	sub	r1, r1, #1
	.syntax divided
@ 1191 "drivers/usb/gadget/rndis.c" 1
	.ifnc r0,r0 ; .err ; .endif
	.ifnc r2,r2 ; .err ; .endif
	.ifnc r1,r1 ; .err ; .endif
	bl	__get_user_1
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r0, #0
	uxtb	r2, r2
	bne	.L6126
	cmp	r2, #68
	beq	.L6118
	bls	.L6148
	cmp	r2, #99
	beq	.L6123
	cmp	r2, #100
	bne	.L6122
.L6118:
	ldrb	r0, [r9]	@ zero_extendqisi2
	mov	r2, #1
	mov	r1, #12
.L6147:
	rsb	r3, r0, r0, lsl #4
	movt	r1, 16385
	add	r4, r4, #1
	add	r3, r8, r3, lsl #2
	str	r2, [r3, #3732]
	bl	rndis_indicate_status_msg
	cmp	r4, fp
	bne	.L6125
.L6116:
	mov	r0, r7
.L6115:
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L6120:
	cmp	r2, #67
	bne	.L6122
.L6123:
	ldrb	r0, [r9]	@ zero_extendqisi2
	mov	r2, #0
	mov	r1, #11
	b	.L6147
.L6122:
	cmp	r10, #0
	strne	r5, [r9, #12]
	b	.L6124
.L6126:
	mvn	r0, #13
	b	.L6115
	.fnend
	.size	rndis_proc_write, .-rndis_proc_write
	.section	.rodata.str1.4
	.align	2
.LC421:
	.ascii	"<3>%s: Failed to queue %s req: err - %d\012\000"
	.align	2
.LC422:
	.ascii	"<3>%s: Failed completion: status %d\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_audio_complete, %function
f_audio_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r3, #0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	.pad #8
	sub	sp, sp, #8
	ldr	r6, [r1, #32]
	ldr	r7, [r1, #44]
	str	r3, [sp, #4]
	cmp	r7, r3
	bne	.L6150
	ldr	r3, [r6, #164]
	mov	r4, r1
	mov	r5, r0
	cmp	r3, r0
	beq	.L6179
	ldr	r3, [r6, #168]
	cmp	r3, r0
	beq	.L6180
	ldr	r5, [r6, #264]
	cmp	r5, #0
	beq	.L6149
	add	r0, sp, #4
	ldm	r1, {r1, r2}
	bl	memcpy
	ldrh	r2, [sp, #4]
	mov	r0, r5
	ldrb	r1, [r6, #260]	@ zero_extendqisi2
	ldr	r3, [r5, #36]
	blx	r3
	str	r7, [r6, #264]
.L6149:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L6179:
	ldr	r7, [r6, #176]
	cmp	r7, #0
	beq	.L6149
	movw	r8, #:lower16:.LANCHOR1
	ldr	r0, [r7, #4]
	movt	r8, #:upper16:.LANCHOR1
	ldr	r2, [r1, #48]
	ldr	r3, [r8, #1248]
	sub	r3, r3, r0
	cmp	r3, r2
	bcs	.L6154
	ldr	r2, [r6, #200]
	add	r1, r7, #8
	add	r3, r6, #196
	add	r0, r6, #180
	str	r1, [r6, #200]
	str	r3, [r7, #8]
	str	r2, [r7, #12]
	str	r1, [r2]
	bl	schedule_work
	ldr	r0, [r8, #1248]
	bl	f_audio_buffer_alloc
	cmn	r0, #4096
	mov	r7, r0
	bhi	.L6155
	ldr	r0, [r0, #4]
	ldr	r2, [r4, #48]
.L6154:
	ldr	r3, [r7]
	ldr	r1, [r4]
	add	r0, r3, r0
	bl	memcpy
	ldr	r3, [r7, #4]
	mov	r1, r4
	mov	r2, #32
	ldr	ip, [r4, #48]
	mov	r0, r5
	add	r3, r3, ip
	str	r3, [r7, #4]
	str	r7, [r6, #176]
	ldr	r3, [r5, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r3, r0, #0
	ldrne	r1, .L6183
	movwne	r0, #:lower16:.LC421
	beq	.L6149
.L6178:
	ldr	r2, [r5, #4]
	movt	r0, #:upper16:.LC421
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	printk
.L6180:
	ldr	r7, [r6, #208]
	cmp	r7, #0
	beq	.L6181
	ldr	r0, [r1]
	ldr	r2, [r1, #48]
	ldm	r7, {r1, r3}
	add	r1, r1, r3
	bl	memcpy
	movw	r2, #:lower16:.LANCHOR1
	ldr	r3, [r7, #4]
	ldr	r1, [r4, #48]
	movt	r2, #:upper16:.LANCHOR1
	ldr	r2, [r2, #1384]
	add	r3, r3, r1
	sub	r2, r2, r3
	str	r3, [r7, #4]
	ldr	r3, [r4, #48]
	cmp	r2, r3
	bcc	.L6163
.L6160:
	ldr	r3, [r5, #8]
	mov	r1, r4
	mov	r2, #32
	mov	r0, r5
	ldr	r3, [r3, #16]
	blx	r3
	subs	r3, r0, #0
	beq	.L6149
	ldr	r1, .L6183+4
	movw	r0, #:lower16:.LC421
	b	.L6178
.L6181:
	add	r7, r6, #204
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	mov	r3, r6
	mov	r1, r0
	ldr	r8, [r3, #228]!
	cmp	r8, r3
	beq	.L6182
	ldrd	r2, [r8]
	mov	r0, r7
	mov	lr, #256
	mov	ip, #512
	sub	r7, r8, #8
	str	r3, [r2, #4]
	str	r2, [r3]
	str	lr, [r8]
	str	ip, [r8, #4]
	str	r7, [r6, #208]
	bl	_raw_spin_unlock_irqrestore
	ldmdb	r8, {r1, r3}
	ldr	r0, [r4]
	ldr	r2, [r4, #48]
	add	r1, r1, r3
	bl	memcpy
	ldr	r3, [r8, #-4]
	movw	r2, #:lower16:.LANCHOR1
	ldr	r1, [r4, #48]
	movt	r2, #:upper16:.LANCHOR1
	add	r3, r3, r1
	str	r3, [r8, #-4]
	ldr	r2, [r2, #1384]
	ldr	r1, [r4, #48]
	sub	r3, r2, r3
	cmp	r3, r1
	bcs	.L6160
	cmp	r7, #0
	bne	.L6163
.L6162:
	mov	r3, #0
	add	r0, r6, #212
	str	r3, [r6, #208]
	bl	schedule_work
	b	.L6160
.L6163:
	ldr	r0, [r7]
	bl	kfree
	mov	r3, #0
	mov	r0, r7
	str	r3, [r7]
	bl	kfree
	b	.L6162
.L6182:
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	add	r0, r6, #212
	bl	schedule_work
	b	.L6160
.L6155:
	ldr	r1, .L6183
	movw	r0, #:lower16:.LC29
	movt	r0, #:upper16:.LC29
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	printk
.L6150:
	ldr	r1, .L6183+8
	movw	r0, #:lower16:.LC422
	mov	r2, r7
	movt	r0, #:upper16:.LC422
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	printk
.L6184:
	.align	2
.L6183:
	.word	.LANCHOR2+3228
	.word	.LANCHOR2+3260
	.word	.LANCHOR2+3288
	.fnend
	.size	f_audio_complete, .-f_audio_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_suspend, %function
rndis_qc_suspend:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR0
	movt	r3, #:upper16:.LANCHOR0
	ldr	r1, [r3, #2264]
	ldr	r0, [r3, #2268]
	add	r1, r1, #200
	b	queue_work
	.fnend
	.size	rndis_qc_suspend, .-rndis_qc_suspend
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_resume, %function
rndis_qc_resume:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR0
	movt	r3, #:upper16:.LANCHOR0
	ldr	r1, [r3, #2264]
	ldr	r0, [r3, #2268]
	add	r1, r1, #216
	b	queue_work
	.fnend
	.size	rndis_qc_resume, .-rndis_qc_resume
	.section	.rodata.str1.4
	.align	2
.LC423:
	.ascii	"can't allocate request for %s\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	do_set_interface, %function
do_set_interface:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	clz	r3, r1
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	lsr	r3, r3, #5
	strd	r6, [sp, #8]
	mov	r6, r1
	strd	r8, [sp, #16]
	movw	r9, #:lower16:bulk_in_complete
	movw	r8, #:lower16:bulk_out_complete
	movt	r9, #:upper16:bulk_in_complete
	strd	r10, [sp, #24]
	movt	r8, #:upper16:bulk_out_complete
	mov	r10, #0
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	str	r10, [sp]
	str	r3, [sp, #4]
.L6196:
	ldr	r10, [r4, #8]
	cmp	r10, #0
	bne	.L6217
.L6188:
	ldm	sp, {r1, r2}
	ldrb	r3, [r4, #144]	@ zero_extendqisi2
	cmp	r1, #0
	movne	r2, #1
	bfc	r3, #5, #1
	cmp	r2, #0
	strb	r3, [r4, #144]
	bne	.L6215
	mov	r10, r2
	str	r6, [r4, #8]
.L6198:
	ldr	r7, [r6, #92]
	mov	r1, #32
	ldr	r5, [r4, #68]
	ldr	r3, [r7, #8]
	mov	r0, r7
	add	r5, r5, r10
	add	r10, r10, r1
	ldr	r3, [r3, #8]
	blx	r3
	cmp	r0, #0
	mov	r1, #32
	str	r0, [r5, #16]
	beq	.L6214
	ldr	r7, [r6, #96]
	ldr	r3, [r7, #8]
	mov	r0, r7
	ldr	r3, [r3, #8]
	blx	r3
	cmp	r0, #0
	str	r0, [r5, #24]
	beq	.L6214
	ldr	r3, [r5]
	cmp	r10, #128
	str	r3, [r0]
	ldr	r2, [r5, #16]
	str	r3, [r2]
	ldr	r3, [r5, #24]
	str	r5, [r3, #32]
	ldr	r3, [r5, #16]
	str	r5, [r3, #32]
	ldr	r3, [r5, #16]
	str	r9, [r3, #28]
	ldr	r3, [r5, #24]
	str	r8, [r3, #28]
	bne	.L6198
	ldrb	r3, [r4, #144]	@ zero_extendqisi2
	ldr	r2, [r4, #92]
	orr	r3, r3, #32
	cmp	r2, #0
	movne	r2, #0
	movne	r0, #10496
	strb	r3, [r4, #144]
	movne	r1, r2
	movtne	r0, 6
	beq	.L6200
.L6199:
	ldr	r3, [r4, #100]
	add	r1, r1, #1
	add	r3, r3, r2
	add	r2, r2, #400
	str	r0, [r3, #36]
	ldr	r3, [r4, #92]
	cmp	r3, r1
	bhi	.L6199
.L6200:
	mov	r10, #0
.L6187:
	mov	r0, r10
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L6217:
	mov	r7, #0
	mov	fp, r7
.L6191:
	ldr	r5, [r4, #68]
	add	r5, r5, r7
	add	r7, r7, #32
	ldr	r1, [r5, #16]
	cmp	r1, #0
	beq	.L6189
	ldr	r0, [r10, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	str	fp, [r5, #16]
.L6189:
	ldr	r1, [r5, #24]
	cmp	r1, #0
	beq	.L6190
	ldr	r0, [r10, #96]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	str	fp, [r5, #24]
.L6190:
	cmp	r7, #128
	bne	.L6191
	mov	r3, #0
	mov	r2, #1
	mov	r1, #3
	add	r0, r4, #16
	str	r3, [r4, #8]
	bl	__wake_up
	b	.L6188
.L6215:
	mov	r10, r1
	b	.L6187
.L6214:
	ldr	r0, [r4]
	mvn	r3, #11
	movw	r1, #:lower16:.LC423
	movt	r1, #:upper16:.LC423
	str	r3, [sp]
	ldr	r2, [r7, #4]
	add	r0, r0, #32
	bl	dev_err
	b	.L6196
	.fnend
	.size	do_set_interface, .-do_set_interface
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	qdss_unbind, %function
qdss_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r0, #24]
	ldr	r0, [r1, #188]
	ldr	r5, [r3]
	bl	flush_workqueue
	movw	r0, #:lower16:.LC289
	movt	r0, #:upper16:.LC289
	ldr	r1, [r5, #28]
	bl	strcmp
	subs	r1, r0, #0
	beq	.L6239
.L6219:
	ldr	r3, [r4, #96]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #92]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #100]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r5, #20]
	cmp	r3, #4
	bls	.L6223
	ldr	r0, [r4, #16]
	cmp	r0, #0
	beq	.L6227
	bl	kfree
	ldr	r3, [r5, #20]
.L6223:
	cmp	r3, #2
	bhi	.L6227
.L6218:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L6227:
	ldr	r0, [r4, #12]
	cmp	r0, #0
	beq	.L6218
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	kfree
.L6239:
	ldr	r0, [r4, #100]
	bl	dwc3_tx_fifo_resize_request
	b	.L6219
	.fnend
	.size	qdss_unbind, .-qdss_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_unbind, %function
audio_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	add	r6, r1, #100
	add	r7, r1, #88
	strd	r8, [sp, #16]
	mov	r9, #256
	mov	r8, #512
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	b	.L6241
.L6242:
	ldrd	r2, [r4]
	str	r3, [r2, #4]
	str	r2, [r3]
	str	r9, [r4]
	str	r8, [r4, #4]
	bl	_raw_spin_unlock_irqrestore
	cmp	r10, #0
	beq	.L6243
	ldr	fp, [r5, #96]
	ldr	r0, [r4, #-36]
	bl	kfree
	mov	r1, r10
	ldr	r3, [fp, #8]
	mov	r0, fp
	ldr	r3, [r3, #12]
	blx	r3
.L6241:
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r5, #88]
	mov	r1, r0
	mov	r0, r6
	cmp	r4, r7
	sub	r10, r4, #36
	bne	.L6242
	bl	_raw_spin_unlock_irqrestore
.L6243:
	ldr	r0, [r5, #76]
	bl	snd_card_free_when_closed
	mov	r3, #0
	str	r3, [r5, #76]
	str	r3, [r5, #80]
	str	r3, [r5, #84]
	str	r3, [r5, #96]
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
	.fnend
	.size	audio_unbind, .-audio_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_function_init, %function
ecm_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	movt	r3, #:upper16:kmalloc_caches
	str	lr, [sp, #4]
	ldr	r0, [r3, #24]
	cmp	r0, #0
	moveq	r3, #16
	streq	r3, [r4, #4]
	beq	.L6246
	movw	r1, #32976
	bl	kmem_cache_alloc
	cmp	r0, #0
	mov	r3, r0
	movne	r0, #0
	mvneq	r0, #11
	str	r3, [r4, #4]
.L6246:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	ecm_function_init, .-ecm_function_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_data_complete, %function
audio_data_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r1, #32]
	add	r6, r4, #100
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #92]
	add	r2, r5, #36
	add	ip, r4, #88
	mov	r1, r0
	mov	r0, r6
	str	r2, [r4, #92]
	str	ip, [r5, #36]
	str	r3, [r5, #40]
	str	r2, [r3]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r4, #104]
	cmp	r3, #0
	beq	.L6251
	ldr	r6, [r5, #44]
	cmp	r6, #0
	bne	.L6251
	ldr	r1, [r5, #48]
	ldrd	r2, [r4, #116]
	add	r3, r3, r1
	cmp	r3, r2
	str	r3, [r4, #120]
	bcs	.L6258
.L6253:
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	audio_send
.L6251:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L6258:
	ldr	r0, [r4, #84]
	bl	snd_pcm_period_elapsed
	str	r6, [r4, #120]
	b	.L6253
	.fnend
	.size	audio_data_complete, .-audio_data_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_bulk_complete_in, %function
ccid_bulk_complete_in:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r1
	str	r6, [sp, #8]
	movt	r3, #:upper16:.LANCHOR0
	str	lr, [sp, #12]
	ldr	r2, [r1, #44]
	ldr	r5, [r3, #180]
	cmp	r2, #0
	movne	r3, #1
	add	r6, r5, #84
	mov	r0, r6
	strne	r3, [r5, #140]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #188]
	add	r2, r4, #36
	add	ip, r5, #184
	mov	r1, r0
	mov	r0, r6
	str	r2, [r5, #188]
	str	ip, [r4, #36]
	str	r3, [r4, #40]
	str	r2, [r3]
	bl	_raw_spin_unlock_irqrestore
	add	r0, r5, #164
	mov	r3, #0
	ldrd	r4, [sp]
	mov	r2, #1
	mov	r1, #3
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	__wake_up
	.fnend
	.size	ccid_bulk_complete_in, .-ccid_bulk_complete_in
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_unbind, %function
ecm_qc_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r5, #:lower16:.LANCHOR0
	mov	r4, r1
	movt	r5, #:upper16:.LANCHOR0
	str	r6, [sp, #8]
	mov	r6, r0
	ldr	r0, [r5, #2264]
	str	lr, [sp, #12]
	bl	kfree
	ldr	r0, [r5, #2268]
	mov	r3, #0
	str	r3, [r5, #2264]
	cmp	r0, r3
	beq	.L6266
	bl	destroy_workqueue
.L6266:
	ldr	r3, [r6, #24]
	mov	r2, #0
	str	r2, [r5, #2268]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #4
	bhi	.L6273
	cmp	r3, #2
	bhi	.L6274
.L6268:
	ldr	r0, [r4, #8]
	bl	kfree
	ldr	r3, [r4, #140]
	ldr	r0, [r3]
	bl	kfree
	ldrd	r0, [r4, #136]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	movw	r3, #:lower16:.LANCHOR1
	mov	r2, #0
	movt	r3, #:upper16:.LANCHOR1
	mov	r0, r4
	str	r2, [r3, #1480]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	kfree
.L6273:
	ldr	r0, [r4, #16]
	bl	kfree
	ldr	r3, [r6, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bls	.L6268
.L6274:
	ldr	r0, [r4, #12]
	bl	kfree
	b	.L6268
	.fnend
	.size	ecm_qc_unbind, .-ecm_qc_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_data_probe, %function
ghsic_data_probe:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movw	r5, #:lower16:.LANCHOR0
	movt	r5, #:upper16:.LANCHOR0
	strd	r6, [sp, #8]
	ldr	r6, [r5, #3276]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r7, [r0]
	cmp	r6, #0
	beq	.L6276
	ldr	r4, [r5, #3280]
	mov	r2, #20
	mov	r1, r7
	ldr	r0, [r4, #160]
	bl	strncmp
	cmp	r0, #0
	beq	.L6277
	cmp	r6, #1
	bls	.L6276
	ldr	r4, [r5, #3384]
	mov	r2, #20
	mov	r1, r7
	ldr	r0, [r4, #160]
	bl	strncmp
	cmp	r0, #0
	beq	.L6277
	cmp	r6, #2
	beq	.L6276
	ldr	r4, [r5, #3488]
	mov	r2, #20
	mov	r1, r7
	ldr	r0, [r4, #160]
	bl	strncmp
	cmp	r0, #0
	beq	.L6277
	cmp	r6, #3
	beq	.L6276
	ldr	r4, [r5, #3592]
	mov	r1, r7
	mov	r2, #20
	ldr	r0, [r4, #160]
	bl	strncmp
	cmp	r0, #0
	beq	.L6277
.L6276:
	movw	r0, #:lower16:.LC99
	ldr	r1, .L6306
	mvn	r2, #21
	movt	r0, #:upper16:.LC99
	bl	printk
	mvn	r0, #21
	b	.L6275
.L6277:
	mov	r0, #1
	add	r1, r4, #180
	bl	_set_bit
	ldr	r0, [r4, #4]
	cmp	r0, #0
	bne	.L6305
.L6275:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L6305:
	add	r1, r4, #88
	ldr	r0, [r4, #84]
	bl	queue_work
	mov	r0, #0
	b	.L6275
.L6307:
	.align	2
.L6306:
	.word	.LANCHOR2+3308
	.fnend
	.size	ghsic_data_probe, .-ghsic_data_probe
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_ctrl_probe, %function
ghsic_ctrl_probe:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movw	r5, #:lower16:.LANCHOR0
	movt	r5, #:upper16:.LANCHOR0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r6, [r5, #404]
	ldr	r7, [r0]
	cmp	r6, #0
	beq	.L6309
	ldr	r4, [r5, #408]
	mov	r2, #20
	mov	r1, r7
	ldr	r0, [r4, #64]
	bl	strncmp
	cmp	r0, #0
	beq	.L6310
	cmp	r6, #1
	bls	.L6309
	ldr	r4, [r5, #512]
	mov	r2, #20
	mov	r1, r7
	ldr	r0, [r4, #64]
	bl	strncmp
	cmp	r0, #0
	beq	.L6310
	cmp	r6, #2
	beq	.L6309
	ldr	r4, [r5, #616]
	mov	r2, #20
	mov	r1, r7
	ldr	r0, [r4, #64]
	bl	strncmp
	cmp	r0, #0
	beq	.L6310
	cmp	r6, #3
	beq	.L6309
	ldr	r4, [r5, #720]
	mov	r1, r7
	mov	r2, #20
	ldr	r0, [r4, #64]
	bl	strncmp
	cmp	r0, #0
	beq	.L6310
.L6309:
	movw	r0, #:lower16:.LC99
	ldr	r1, .L6339
	mvn	r2, #21
	movt	r0, #:upper16:.LC99
	bl	printk
	mvn	r0, #21
	b	.L6308
.L6310:
	add	r1, r4, #84
	mov	r0, #1
	add	r6, r4, #4
	bl	_set_bit
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #8]
	mov	r5, r0
	cmp	r3, #0
	beq	.L6313
	add	r1, r4, #16
	ldr	r0, [r4, #12]
	bl	queue_work
.L6313:
	mov	r0, r6
	mov	r1, r5
	bl	_raw_spin_unlock_irqrestore
	mov	r0, #0
.L6308:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L6340:
	.align	2
.L6339:
	.word	.LANCHOR2+3328
	.fnend
	.size	ghsic_ctrl_probe, .-ghsic_ctrl_probe
	.section	.rodata.cst4
	.align	2
.LC424:
	.word	__stack_chk_guard
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_ep0_read, %function
ffs_ep0_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 40
	@ frame_needed = 1, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	r3, #:lower16:.LC424
	mov	r5, r2
	strd	r6, [sp, #8]
	movt	r3, #:upper16:.LC424
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	.setfp fp, sp, #32
	add	fp, sp, #32
	mov	r10, r0
	str	lr, [sp, #32]
	.pad #44
	sub	sp, sp, #44
	ldr	r6, [r0, #132]
	ldr	r3, [r3]
	str	r3, [fp, #-40]
	mov	r3,#0
	str	r1, [fp, #-64]
	add	r4, r6, #100
	.syntax divided
@ 197 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
@ 111 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/processor.h" 1
	pld	[r4]
@ 0 "" 2
	.arm
	.syntax unified
	mov	r2, #0
.L6342:
	.syntax divided
@ 174 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/cmpxchg.h" 1
	@ __cmpxchg4
	ldrex	r0, [r4]
	mov	r1, #0
	teq	r0, #2
	strexeq r1, r2, [r4]

@ 0 "" 2
	.arm
	.syntax unified
	cmp	r1, #0
	bne	.L6342
	.syntax divided
@ 199 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r0, #2
	beq	.L6370
	ldr	r2, [r10, #36]
	add	r7, r6, #4
	mov	r0, r7
	tst	r2, #2048
	bne	.L6398
	bl	mutex_lock_interruptible
	subs	r9, r0, #0
	blt	.L6341
.L6347:
	ldr	r2, [r6, #96]
	cmp	r2, #2
	mvnne	r9, #76
	movne	r10, #0
	beq	.L6399
.L6345:
	mov	r0, r7
	bl	mutex_unlock
	mov	r0, r10
	bl	kfree
.L6341:
	movw	r3, #:lower16:.LC424
	movt	r3, #:upper16:.LC424
	ldr	r2, [r3]
	ldr	r3, [fp, #-40]
	eors	r2, r3, r2
	bne	.L6400
	mov	r0, r9
	sub	sp, fp, #32
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L6398:
	bl	mutex_trylock
	cmp	r0, #0
	bne	.L6347
	mvn	r9, #10
	b	.L6341
.L6399:
	add	r8, r6, #120
	mov	r0, r8
	bl	_raw_spin_lock_irq
	.syntax divided
@ 197 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
@ 111 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/processor.h" 1
	pld	[r4]
@ 0 "" 2
	.arm
	.syntax unified
	mov	r0, #0
.L6348:
	.syntax divided
@ 174 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/cmpxchg.h" 1
	@ __cmpxchg4
	ldrex	r9, [r4]
	mov	r2, #0
	teq	r9, #2
	strexeq r2, r0, [r4]

@ 0 "" 2
	.arm
	.syntax unified
	cmp	r2, #0
	bne	.L6348
	.syntax divided
@ 199 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r9, #1
	beq	.L6349
	cmp	r9, #2
	beq	.L6373
	cmp	r9, #0
	movne	r10, r2
	mvnne	r9, #76
	beq	.L6401
.L6350:
	mov	r0, r8
	bl	_raw_spin_unlock_irq
	b	.L6345
.L6373:
	mov	r10, r2
	mvn	r9, #42
	b	.L6350
.L6401:
	cmp	r5, #11
	bls	.L6375
	ldr	r2, [r10, #36]
	ldrh	r0, [r6, #108]
	tst	r2, #2048
	bne	.L6402
	cmp	r0, #0
	bne	.L6352
	mov	r10, #57344
	mov	r3, sp
	str	r0, [fp, #-60]
	movt	r10, 65535
	movw	ip, #:lower16:autoremove_wake_function
	and	r1, r3, r10
	movt	ip, #:upper16:autoremove_wake_function
	add	r3, r6, #124
	str	r10, [fp, #-72]
	sub	r10, fp, #48
	str	r0, [fp, #-56]
	mov	r9, r1
	str	r0, [fp, #-52]
	str	r0, [fp, #-48]
	str	r0, [fp, #-44]
	ldr	lr, [r1, #12]
	mov	r0, r10
	str	r3, [fp, #-68]
	str	ip, [fp, #-52]
	mov	ip, #1
	str	ip, [fp, #-60]
	str	lr, [fp, #-56]
	str	r10, [fp, #-48]
	str	r10, [fp, #-44]
	b	.L6356
.L6403:
	mov	r0, r8
	bl	_raw_spin_unlock_irq
	bl	schedule
	mov	r0, r8
	bl	_raw_spin_lock_irq
	ldrh	r0, [r6, #108]
	cmp	r0, #0
	bne	.L6355
	ldr	r0, [fp, #-48]
.L6356:
	cmp	r0, r10
	bne	.L6353
	ldr	r3, [fp, #-68]
	ldr	r0, [r6, #128]
	str	r10, [r6, #128]
	str	r3, [fp, #-48]
	str	r0, [fp, #-44]
	str	r10, [r0]
.L6353:
	ldr	r0, [r9, #12]
	mov	ip, #1
	str	ip, [r0]
	.syntax divided
@ 637 "drivers/usb/gadget/f_fs.c" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r0, [r9, #12]
	ldr	r0, [r0, #4]
	ldr	r4, [r0]
	ands	r4, r4, ip
	beq	.L6403
	ldr	r3, [fp, #-72]
	mov	r2, sp
	mov	lr, #256
	ldrd	r0, [fp, #-48]
	mov	ip, #512
	mvn	r9, #3
	and	r3, r3, r2
	mov	r2, #0
	str	r1, [r0, #4]
	mov	r10, r2
	str	r0, [r1]
	str	lr, [fp, #-48]
	str	ip, [fp, #-44]
	ldr	r3, [r3, #12]
	str	r2, [r3]
	b	.L6350
.L6349:
	ldrsb	r1, [r6, #112]
	cmp	r1, #0
	blt	.L6404
	ldrh	r2, [r6, #118]
	mov	r0, r8
	cmp	r2, r5
	movcc	r5, r2
	bl	_raw_spin_unlock_irq
	cmp	r5, #0
	beq	.L6379
	mov	r1, #208
	mov	r0, r5
	bl	__kmalloc
	subs	r10, r0, #0
	beq	.L6405
.L6367:
	mov	r0, r8
	bl	_raw_spin_lock_irq
	.syntax divided
@ 197 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
@ 111 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/processor.h" 1
	pld	[r4]
@ 0 "" 2
	.arm
	.syntax unified
	mov	r2, #0
.L6368:
	.syntax divided
@ 174 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/cmpxchg.h" 1
	@ __cmpxchg4
	ldrex	r0, [r4]
	mov	r1, #0
	teq	r0, #2
	strexeq r1, r2, [r4]

@ 0 "" 2
	.arm
	.syntax unified
	cmp	r1, #0
	bne	.L6368
	.syntax divided
@ 199 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r0, #2
	mvneq	r9, #42
	beq	.L6350
	mov	r0, r6
	mov	r2, r5
	mov	r1, r10
	bl	__ffs_ep0_queue_wait
	subs	r9, r0, #0
	ble	.L6345
	mov	r2, r5
	mov	r1, r10
	ldr	r0, [fp, #-64]
	bl	__copy_to_user
	cmp	r0, #0
	mvnne	r9, #13
	b	.L6345
.L6402:
	cmp	r0, #0
	bne	.L6352
	mov	r10, r0
	mvn	r9, #10
	b	.L6350
.L6379:
	mov	r10, r5
	b	.L6367
.L6355:
	ldr	r10, [fp, #-72]
	mov	r0, #512
	mov	r3, sp
	ldr	r1, [fp, #-48]
	mov	ip, #256
	ldr	r2, [fp, #-44]
	and	r10, r10, r3
	str	r2, [r1, #4]
	str	r1, [r2]
	str	ip, [fp, #-48]
	str	r0, [fp, #-44]
	ldr	r2, [r10, #12]
	str	r4, [r2]
	ldrh	r0, [r6, #108]
.L6352:
	movw	r2, #43691
	mov	r10, sp
	movt	r2, 43690
	umull	r3, r4, r2, r5
	lsr	r4, r4, #3
	cmp	r4, r0
	movcs	r4, r0
	add	r9, r4, r4, lsl #1
	lsl	r9, r9, #2
	add	r2, r9, #7
	cmp	r9, #0
	bic	r2, r2, #7
	sub	sp, sp, r2
	mov	r5, sp
	bne	.L6406
.L6357:
	ldrb	r2, [r6, #104]	@ zero_extendqisi2
	cmp	r2, #4
	strb	r2, [r5, #8]
	bne	.L6358
	ldrd	r0, [r6, #112]
	mov	r2, #1
	str	r0, [r5]	@ unaligned
	str	r1, [r5, #4]	@ unaligned
	str	r2, [r6, #100]
.L6358:
	cmp	r4, #1
	bls	.L6359
	ldrb	r2, [r6, #105]	@ zero_extendqisi2
	cmp	r2, #4
	strb	r2, [r5, #20]
	bne	.L6360
	ldrd	r0, [r6, #112]
	mov	r2, #1
	str	r0, [r5, #12]	@ unaligned
	str	r1, [r5, #16]	@ unaligned
	str	r2, [r6, #100]
.L6360:
	cmp	r4, #2
	beq	.L6359
	ldrb	r2, [r6, #106]	@ zero_extendqisi2
	cmp	r2, #4
	strb	r2, [r5, #32]
	bne	.L6361
	ldrd	r0, [r6, #112]
	mov	r2, #1
	str	r0, [r5, #24]	@ unaligned
	str	r1, [r5, #28]	@ unaligned
	str	r2, [r6, #100]
.L6361:
	cmp	r4, #3
	beq	.L6359
	ldrb	r2, [r6, #107]	@ zero_extendqisi2
	cmp	r2, #4
	strb	r2, [r5, #44]
	bne	.L6359
	ldrd	r0, [r6, #112]
	mov	r2, #1
	str	r0, [r5, #36]	@ unaligned
	str	r1, [r5, #40]	@ unaligned
	str	r2, [r6, #100]
.L6359:
	ldrh	r2, [r6, #108]
	cmp	r4, r2
	movcs	r2, #0
	strhcs	r2, [r6, #108]	@ movhi
	bcc	.L6407
.L6364:
	mov	r0, r8
	bl	_raw_spin_unlock_irq
	mov	r0, r7
	bl	mutex_unlock
	mov	r2, r9
	mov	r1, r5
	ldr	r0, [fp, #-64]
	bl	__copy_to_user
	cmp	r0, #0
	mov	sp, r10
	mvnne	r9, #13
	b	.L6341
.L6404:
	mov	r0, r8
	str	r2, [fp, #-64]
	bl	_raw_spin_unlock_irq
	ldrh	r10, [r6, #110]
	cmp	r10, #0
	mvneq	r9, #2
	beq	.L6345
	ldr	r0, [r6]
	mov	r1, r9
	mvn	r9, #50
	ldr	r2, [fp, #-64]
	ldr	r0, [r0, #4]
	mov	r10, r2
	ldr	ip, [r0, #8]
	ldr	r4, [ip, #24]
	blx	r4
	ldr	r2, [fp, #-64]
	str	r2, [r6, #100]
	b	.L6345
.L6406:
	mov	r1, r9
	mov	r0, sp
	bl	__memzero
	b	.L6357
.L6370:
	mvn	r9, #42
	b	.L6341
.L6407:
	sub	r2, r2, r4
	add	r0, r6, #104
	uxth	r2, r2
	add	r1, r0, r4
	strh	r2, [r6, #108]	@ movhi
	bl	memmove
	b	.L6364
.L6375:
	mov	r10, r9
	mvn	r9, #21
	b	.L6350
.L6405:
	mvn	r9, #11
	b	.L6345
.L6400:
	bl	__stack_chk_fail
	.fnend
	.size	ffs_ep0_read, .-ffs_ep0_read
	.section	.rodata.str1.4
	.align	2
.LC425:
	.ascii	"drivers/usb/gadget/composite.c\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	composite_unbind, %function
composite_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	add	r9, r0, #32
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	str	r0, [sp, #4]
	mov	r0, r9
	bl	dev_get_drvdata
	ldr	r3, [r0, #12]
	mov	r6, r0
	cmp	r3, #0
	bne	.L6432
.L6409:
	add	r7, r6, #36
	mov	r5, #256
.L6414:
	ldr	r4, [r6, #36]
	cmp	r4, r7
	beq	.L6433
.L6415:
	ldm	r4, {r1, r2}
	mov	r3, #512
	sub	r8, r4, #28
	mov	fp, r3
	add	r10, r4, #8
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r5, [r4]
	str	r3, [r4, #4]
	b	.L6412
.L6413:
	ldrd	r2, [r1]
	str	r3, [r2, #4]
	str	r2, [r3]
	ldr	r3, [r1, #-36]
	stm	r1, {r5, fp}
	cmp	r3, #0
	bne	.L6434
.L6412:
	ldr	r1, [r4, #8]
	cmp	r1, r10
	bne	.L6413
	ldr	r3, [r4, #-16]
	cmp	r3, #0
	beq	.L6414
	mov	r0, r8
	blx	r3
	ldr	r4, [r6, #36]
	cmp	r4, r7
	bne	.L6415
.L6433:
	movw	r4, #:lower16:.LANCHOR0
	movt	r4, #:upper16:.LANCHOR0
	ldr	r3, [r4, #396]
	ldr	r3, [r3, #28]
	cmp	r3, #0
	beq	.L6416
	mov	r0, r6
	blx	r3
.L6416:
	ldr	r3, [r6, #4]
	cmp	r3, #0
	beq	.L6417
	ldr	r0, [r3]
	bl	kfree
	ldr	r3, [sp, #4]
	ldr	r1, [r6, #4]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
.L6417:
	ldr	r1, .L6435
	mov	r0, r9
	bl	device_remove_file
	mov	r0, r6
	bl	kfree
	mov	r0, r9
	mov	r1, #0
	bl	dev_set_drvdata
	mov	r3, #0
	str	r3, [r4, #396]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L6434:
	sub	r1, r1, #64
	mov	r0, r8
	blx	r3
	b	.L6412
.L6432:
	movw	r0, #:lower16:.LC425
	mov	r1, #1456
	movt	r0, #:upper16:.LC425
	bl	warn_slowpath_null
	b	.L6409
.L6436:
	.align	2
.L6435:
	.word	.LANCHOR1+1500
	.fnend
	.size	composite_unbind, .-composite_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_complete_in, %function
adb_complete_in:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r1
	str	r6, [sp, #8]
	movt	r3, #:upper16:.LANCHOR0
	str	lr, [sp, #12]
	ldr	r2, [r1, #44]
	ldr	r5, [r3, #2284]
	cmp	r2, #0
	movne	r3, #1
	add	r6, r5, #80
	mov	r0, r6
	strne	r3, [r5, #96]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #116]
	add	r2, r4, #36
	add	ip, r5, #112
	mov	r1, r0
	mov	r0, r6
	str	r2, [r5, #116]
	str	ip, [r4, #36]
	str	r3, [r4, #40]
	str	r2, [r3]
	bl	_raw_spin_unlock_irqrestore
	add	r0, r5, #132
	mov	r3, #0
	ldrd	r4, [sp]
	mov	r2, #1
	mov	r1, #3
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	__wake_up
	.fnend
	.size	adb_complete_in, .-adb_complete_in
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_unbind, %function
mbim_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movw	r5, #:lower16:.LANCHOR0
	mov	r4, r1
	strd	r6, [sp, #8]
	movt	r5, #:upper16:.LANCHOR0
	mov	r7, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrb	r6, [r1, #128]	@ zero_extendqisi2
	add	r6, r5, r6, lsl #2
	ldr	r0, [r6, #2264]
	bl	kfree
	ldr	r0, [r5, #2268]
	mov	r3, #0
	str	r3, [r6, #2264]
	cmp	r0, r3
	beq	.L6444
	bl	destroy_workqueue
.L6444:
	ldr	r3, [r7, #24]
	mov	r2, #0
	str	r2, [r5, #2268]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #4
	bhi	.L6451
	cmp	r3, #2
	bhi	.L6452
.L6446:
	ldr	r0, [r4, #8]
	bl	kfree
	ldr	r3, [r4, #152]
	ldr	r0, [r3]
	bl	kfree
	ldrd	r0, [r4, #148]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	movw	r3, #:lower16:.LANCHOR1
	mov	r2, #0
	movt	r3, #:upper16:.LANCHOR1
	strb	r2, [r3, #190]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L6451:
	ldr	r0, [r4, #16]
	bl	kfree
	ldr	r3, [r7, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bls	.L6446
.L6452:
	ldr	r0, [r4, #12]
	bl	kfree
	b	.L6446
	.fnend
	.size	mbim_unbind, .-mbim_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	android_remove, %function
android_remove:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	movw	r6, #:lower16:.LANCHOR0
	movt	r6, #:upper16:.LANCHOR0
	str	r8, [sp, #16]
	mov	r5, r6
	str	lr, [sp, #20]
	ldr	r7, [r0, #92]
	ldr	r1, [r5, #196]!
	cmp	r7, #0
	ldrbne	r2, [r7, #8]	@ zero_extendqisi2
	moveq	r2, r7
	cmp	r1, r5
	sub	r4, r1, #208
	bne	.L6456
	b	.L6455
.L6479:
	ldrb	r3, [r3, #8]	@ zero_extendqisi2
	cmp	r3, r2
	beq	.L6455
	ldr	r4, [r4, #208]
	cmp	r4, r5
	sub	r4, r4, #208
	beq	.L6455
.L6456:
	ldr	r3, [r4, #48]
	cmp	r3, #0
	bne	.L6479
.L6455:
	cmp	r4, #0
	beq	.L6457
	movw	r8, #:lower16:.LANCHOR1
	movt	r8, #:upper16:.LANCHOR1
	ldr	r1, [r8, #1516]
	cmp	r1, #0
	addne	r8, r8, #1520
	beq	.L6461
.L6458:
	ldr	r0, [r4, #12]
	bl	device_remove_file
	ldr	r1, [r8], #4
	cmp	r1, #0
	bne	.L6458
.L6461:
	ldr	r3, [r4, #12]
	ldr	r0, [r6, #3260]
	ldr	r1, [r3, #296]
	bl	device_destroy
	cmp	r7, #0
	beq	.L6460
	ldr	r3, [r7, #4]
	cmp	r3, #0
	bne	.L6480
.L6460:
	ldr	r3, [r6, #2276]
	mov	lr, #256
	mov	ip, #512
	ldr	r1, [r4, #208]
	mov	r0, r4
	ldr	r2, [r4, #212]
	sub	r3, r3, #1
	str	r2, [r1, #4]
	str	r1, [r2]
	str	lr, [r4, #208]
	str	ip, [r4, #212]
	str	r3, [r6, #2276]
	bl	kfree
	ldr	r1, [r6, #196]
.L6457:
	cmp	r1, r5
	beq	.L6481
.L6463:
	ldrd	r4, [sp]
	mov	r0, #0
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L6480:
	add	r0, r4, #64
	bl	pm_qos_remove_request
	b	.L6460
.L6481:
	ldr	r0, [r6, #3260]
	bl	class_destroy
	ldr	r3, .L6482
	mov	r1, #0
	ldr	r2, [r6, #396]
	str	r1, [r6, #3260]
	cmp	r2, r3
	bne	.L6463
	ldr	r0, .L6482+4
	bl	usb_gadget_unregister_driver
	b	.L6463
.L6483:
	.align	2
.L6482:
	.word	.LANCHOR1+1576
	.word	.LANCHOR1+400
	.fnend
	.size	android_remove, .-android_remove
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mtp_complete_in, %function
mtp_complete_in:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r1
	str	r6, [sp, #8]
	movt	r3, #:upper16:.LANCHOR0
	str	lr, [sp, #12]
	ldr	r2, [r1, #44]
	ldr	r5, [r3, #836]
	cmp	r2, #0
	movne	r3, #4
	add	r6, r5, #80
	mov	r0, r6
	strne	r3, [r5, #96]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #112]
	add	r2, r4, #36
	add	ip, r5, #108
	mov	r1, r0
	mov	r0, r6
	str	r2, [r5, #112]
	str	ip, [r4, #36]
	str	r3, [r4, #40]
	str	r2, [r3]
	bl	_raw_spin_unlock_irqrestore
	add	r0, r5, #136
	mov	r3, #0
	ldrd	r4, [sp]
	mov	r2, #1
	mov	r1, #3
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	__wake_up
	.fnend
	.size	mtp_complete_in, .-mtp_complete_in
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mtp_complete_intr, %function
mtp_complete_intr:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r1
	str	r6, [sp, #8]
	movt	r3, #:upper16:.LANCHOR0
	str	lr, [sp, #12]
	ldr	r2, [r1, #44]
	ldr	r5, [r3, #836]
	cmp	r2, #0
	movne	r3, #4
	add	r6, r5, #80
	mov	r0, r6
	strne	r3, [r5, #96]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #120]
	add	r2, r4, #36
	add	ip, r5, #116
	mov	r1, r0
	mov	r0, r6
	str	r2, [r5, #120]
	str	ip, [r4, #36]
	str	r3, [r4, #40]
	str	r2, [r3]
	bl	_raw_spin_unlock_irqrestore
	add	r0, r5, #148
	mov	r3, #0
	ldrd	r4, [sp]
	mov	r2, #1
	mov	r1, #3
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	__wake_up
	.fnend
	.size	mtp_complete_intr, .-mtp_complete_intr
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_func_resume, %function
ffs_func_resume:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r0, #-44]
	add	r5, r4, #120
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #100]
	mov	r6, r0
	add	lr, r4, #104
	ldrh	r2, [r4, #108]
	cmp	r3, #1
	moveq	r3, #2
	streq	r3, [r4, #100]
	cmp	r2, #0
	beq	.L6501
	add	r1, r4, #103
	mov	r3, lr
	add	r2, r1, r2
.L6500:
	ldrb	ip, [r1, #1]!	@ zero_extendqisi2
	mov	r0, r3
	sub	r7, ip, #5
	cmp	r7, #1
	strbhi	ip, [r0], #1
	movhi	r3, r0
	cmp	r2, r1
	bne	.L6500
	sub	r3, r3, lr
	add	r2, r3, #1
	uxth	r3, r3
	uxth	r2, r2
.L6498:
	add	r3, r4, r3
	strh	r2, [r4, #108]	@ movhi
	mov	r0, #6
	mov	r1, #3
	mov	r2, #1
	strb	r0, [r3, #104]
	mov	r0, r5
	bl	__wake_up_locked
	mov	r1, r6
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore
.L6501:
	mov	r3, r2
	mov	r2, #1
	b	.L6498
	.fnend
	.size	ffs_func_resume, .-ffs_func_resume
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_func_suspend, %function
ffs_func_suspend:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r0, #-44]
	add	r5, r4, #120
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #100]
	mov	r6, r0
	add	lr, r4, #104
	ldrh	r2, [r4, #108]
	cmp	r3, #1
	moveq	r3, #2
	streq	r3, [r4, #100]
	cmp	r2, #0
	beq	.L6509
	add	r1, r4, #103
	mov	r3, lr
	add	r2, r1, r2
.L6508:
	ldrb	ip, [r1, #1]!	@ zero_extendqisi2
	mov	r0, r3
	cmp	ip, #5
	strbne	ip, [r0], #1
	movne	r3, r0
	cmp	r2, r1
	bne	.L6508
	sub	r3, r3, lr
	add	r2, r3, #1
	uxth	r3, r3
	uxth	r2, r2
.L6506:
	add	r3, r4, r3
	strh	r2, [r4, #108]	@ movhi
	mov	r0, #5
	mov	r1, #3
	mov	r2, #1
	strb	r0, [r3, #104]
	mov	r0, r5
	bl	__wake_up_locked
	mov	r1, r6
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock_irqrestore
.L6509:
	mov	r3, r2
	mov	r2, #1
	b	.L6506
	.fnend
	.size	ffs_func_suspend, .-ffs_func_suspend
	.section	.rodata.str1.4
	.align	2
.LC426:
	.ascii	"ep0\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_sb_fill, %function
ffs_sb_fill:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	ip, .L6537
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movw	r3, #29537
	strd	r6, [sp, #8]
	movt	r3, 2660
	mov	r2, #1
	str	r8, [sp, #16]
	mov	r7, #0
	mov	r8, r1
	str	lr, [sp, #20]
	ldr	r5, [r1, #20]
	mov	lr, #12
	mov	r1, #4096
	.pad #8
	sub	sp, sp, #8
	mov	r6, r0
	str	r0, [r5, #204]
	str	r7, [r8, #20]
	strb	lr, [r0, #13]
	str	r1, [r0, #16]
	str	ip, [r0, #36]
	str	r3, [r0, #56]
	str	r5, [r0, #624]
	str	r2, [r0, #636]
	ldrh	r3, [r8, #12]
	strh	r3, [r8]	@ movhi
	bl	new_inode
	subs	r4, r0, #0
	beq	.L6516
	mov	r0, sp
	bl	current_kernel_time
	bl	get_next_ino
	str	r0, [r4, #40]
	ldrh	r2, [r8]
	movw	r3, #:lower16:simple_dir_operations
	movt	r3, #:upper16:simple_dir_operations
	ldrd	r0, [sp]
	cmp	r3, r7
	strh	r2, [r4]	@ movhi
	ldr	r2, [r8, #4]
	str	r2, [r4, #4]
	ldr	r2, [r8, #8]
	strne	r3, [r4, #208]
	movw	r3, #:lower16:simple_dir_inode_operations
	movt	r3, #:upper16:simple_dir_inode_operations
	cmp	r3, #0
	str	r2, [r4, #8]
	strne	r3, [r4, #24]
	strd	r0, [r4, #52]
	strd	r0, [r4, #60]
	strd	r0, [r4, #68]
	str	r7, [r4, #348]
.L6516:
	mov	r0, r4
	bl	d_make_root
	cmp	r0, #0
	str	r0, [r6, #60]
	beq	.L6536
	movw	r1, #:lower16:.LC426
	ldr	r8, [r6, #624]
	movt	r1, #:upper16:.LC426
	bl	d_alloc_name
	subs	r7, r0, #0
	beq	.L6536
	mov	r0, r6
	bl	new_inode
	subs	r4, r0, #0
	beq	.L6522
	mov	r0, sp
	bl	current_kernel_time
	bl	get_next_ino
	str	r0, [r4, #40]
	ldrh	r3, [r8, #208]
	mov	r1, r4
	ldr	ip, .L6537+4
	mov	r0, r7
	strh	r3, [r4]	@ movhi
	ldr	lr, [r8, #212]
	ldrd	r2, [sp]
	str	lr, [r4, #4]
	ldr	lr, [r8, #216]
	str	lr, [r4, #8]
	strd	r2, [r4, #52]
	strd	r2, [r4, #60]
	strd	r2, [r4, #68]
	str	ip, [r4, #208]
	str	r5, [r4, #348]
	bl	d_instantiate
	mov	r0, r7
	bl	d_rehash
	mov	r0, #0
.L6515:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L6522:
	mov	r0, r7
	bl	dput
.L6536:
	mvn	r0, #11
	b	.L6515
.L6538:
	.align	2
.L6537:
	.word	.LANCHOR2+3348
	.word	.LANCHOR2+3456
	.fnend
	.size	ffs_sb_fill, .-ffs_sb_fill
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	start_in_transfer, %function
start_in_transfer:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r0, #8]
	cmp	r4, #0
	beq	.L6540
	ldr	r0, [r4, #80]
	mov	r5, r1
	ldr	r7, [r1, #16]
	ldr	r6, [r4, #92]
	add	r0, r0, #44
	bl	_raw_spin_lock_irq
	mov	r3, #1
	mov	r2, #2
	str	r2, [r5, #4]
	str	r3, [r5, #20]
	ldr	r0, [r4, #80]
	add	r0, r0, #44
	bl	_raw_spin_unlock_irq
	ldr	r3, [r6, #8]
	mov	r1, r7
	mov	r0, r6
	mov	r2, #208
	ldr	r3, [r3, #16]
	blx	r3
	subs	r3, r0, #0
	beq	.L6552
	mov	r2, #0
	cmn	r3, #108
	str	r2, [r5, #4]
	str	r2, [r5, #20]
	beq	.L6552
	cmn	r3, #95
	bne	.L6544
	ldr	r2, [r7, #4]
	cmp	r2, #0
	bne	.L6544
.L6552:
	mov	r0, #1
.L6542:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L6544:
	ldr	r0, [r4, #76]
	movw	r1, #:lower16:.LC77
	movt	r1, #:upper16:.LC77
	ldr	r2, [r6, #4]
	add	r0, r0, #32
	bl	dev_warn
	b	.L6552
.L6540:
	ldr	r0, [r0]
	movw	r1, #:lower16:.LC75
	movw	r3, #707
	ldr	r2, .L6553
	movt	r1, #:upper16:.LC75
	add	r0, r0, #32
	bl	dev_err
	movw	r0, #:lower16:.LC76
	movw	r1, #461
	movt	r0, #:upper16:.LC76
	bl	warn_slowpath_null
	mov	r0, r4
	b	.L6542
.L6554:
	.align	2
.L6553:
	.word	.LANCHOR2+3560
	.fnend
	.size	start_in_transfer, .-start_in_transfer
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	send_status, %function
send_status:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	add	r4, r0, #44
	mov	r5, r0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r7, [r0, #104]
	mov	r0, r4
	bl	_raw_spin_lock_irq
	ldr	r6, [r5, #60]
	ldr	r3, [r6, #4]
	cmp	r3, #0
	bne	.L6558
	b	.L6556
.L6576:
	bl	_raw_spin_lock_irq
	ldr	r3, [r6, #4]
	cmp	r3, #0
	beq	.L6556
.L6558:
	mov	r0, r4
	bl	_raw_spin_unlock_irq
	mov	r0, r5
	bl	sleep_thread
	mov	r3, r0
	mov	r0, r4
	cmp	r3, #0
	beq	.L6576
.L6555:
	ldrd	r4, [sp]
	mov	r0, r3
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L6556:
	mov	r0, r4
	bl	_raw_spin_unlock_irq
	cmp	r7, #0
	beq	.L6559
	ldrb	r3, [r5, #144]	@ zero_extendqisi2
	ldr	r1, [r7, #28]
	tst	r3, #4
	movne	r1, #2
	beq	.L6577
.L6560:
	ldr	r3, [r6]
	movw	r0, #21333
	movw	r2, #:lower16:.LANCHOR0
	movt	r0, 21314
	movt	r2, #:upper16:.LANCHOR0
	ldr	ip, [r2, #4012]
	str	r0, [r3]
	ldr	r0, [r5, #132]
	cmp	ip, #0
	str	r0, [r3, #4]
	ldr	r0, [r5, #136]
	str	r0, [r3, #8]
	movne	r0, #0
	streq	ip, [r3, #8]
	strb	r1, [r3, #12]
	ldr	r3, [r6, #16]
	mov	r1, r6
	strne	r0, [r2, #4012]
	mov	r2, #13
	mov	r0, r5
	str	r2, [r3, #4]
	ldr	r3, [r6, #16]
	ldrb	r2, [r3, #26]	@ zero_extendqisi2
	bfc	r2, #1, #1
	strb	r2, [r3, #26]
	bl	start_in_transfer
	cmp	r0, #0
	ldrne	r2, [r6, #8]
	movne	r3, #0
	mvneq	r3, #4
	strne	r2, [r5, #60]
	b	.L6555
.L6577:
	subs	r1, r1, #0
	movne	r1, #1
	b	.L6560
.L6559:
	ldrb	r1, [r5, #144]	@ zero_extendqisi2
	tst	r1, #16
	beq	.L6562
	ands	r1, r1, #4
	movne	r1, #2
	b	.L6560
.L6562:
	tst	r1, #4
	moveq	r1, #1
	movne	r1, #2
	b	.L6560
	.fnend
	.size	send_status, .-send_status
	.section	.rodata.str1.4
	.align	2
.LC427:
	.ascii	"write %u @ %llu beyond end %llu\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	do_write, %function
do_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 40
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r6, [r0, #104]
	.pad #60
	sub	sp, sp, #60
	ldrb	r3, [r6, #24]	@ zero_extendqisi2
	tst	r3, #2
	movne	r3, #9984
	mvnne	r0, #21
	movtne	r3, 7
	strne	r3, [r6, #28]
	bne	.L6578
	mov	r4, r0
	ldr	r0, [r6]
	add	r0, r0, #24
	bl	_raw_spin_lock
	ldr	r2, [r6]
	ldr	r3, [r2, #36]
	bic	r3, r3, #1048576
	bic	r3, r3, #4096
	str	r3, [r2, #36]
	ldr	r0, [r6]
	add	r0, r0, #24
	bl	_raw_spin_unlock
	ldrb	r3, [r4, #76]	@ zero_extendqisi2
	cmp	r3, #10
	beq	.L6641
	ldrb	r3, [r4, #77]	@ zero_extendqisi2
	ldr	r5, [r4, #78]	@ unaligned
	tst	r3, #231
	movne	r3, #9216
	rev	r5, r5
	movtne	r3, 5
	mvnne	r0, #21
	strne	r3, [r6, #28]
	bne	.L6578
	ldrsb	r2, [r6, #24]
	cmp	r2, #0
	blt	.L6582
	tst	r3, #8
	bne	.L6642
.L6582:
	ldrd	r2, [r6, #16]
	mov	r1, #0
	mov	r0, r5
	cmp	r5, r2
	sbcs	r3, r1, r3
	movge	r3, #8448
	mvnge	r0, #21
	movtge	r3, 5
	strge	r3, [r6, #28]
	bge	.L6578
	ldr	r3, [r6, #40]
	ldr	r1, [r4, #128]
	sub	r2, r3, #32
	lsl	r8, r5, r3
	lsl	r9, r5, r2
	str	r1, [sp, #40]
	cmp	r1, #0
	rsb	r2, r3, #32
	orr	r9, r9, r5, lsr r2
	beq	.L6592
	mov	r3, sp
	strd	r8, [sp, #16]
	bic	r3, r3, #8128
	mov	r7, #1
	str	r1, [sp, #36]
	bic	r3, r3, #63
	str	r3, [sp, #44]
.L6585:
	ldr	r5, [r4, #60]
	ldr	r3, [r5, #4]
	cmp	r3, #0
	bne	.L6586
.L6644:
	cmp	r7, #0
	beq	.L6587
	ldrd	r2, [r6, #8]
	ldrd	r0, [sp, #16]
	cmp	r0, r2
	sbcs	r3, r1, r3
	bge	.L6643
	ldr	ip, [sp, #36]
	ldr	r2, [r4, #140]
	cmp	ip, #16384
	movcc	r3, ip
	movcs	r3, #16384
	adds	r0, r0, r3
	sub	r2, r2, r3
	adc	r1, r1, #0
	str	r2, [r4, #140]
	strd	r0, [sp, #16]
	subs	r1, ip, r3
	mov	r0, r4
	str	r3, [r5, #12]
	movne	r7, #1
	moveq	r7, #0
	str	r1, [sp, #36]
	ldr	r1, [r4, #108]
	udiv	r2, r3, r1
	mls	r2, r1, r2, r3
	cmp	r2, #0
	addne	r3, r3, r1
	mov	r1, r5
	subne	r3, r3, r2
	ldr	r2, [r5, #24]
	str	r3, [r2, #4]
	bl	start_out_transfer
	cmp	r0, #0
	beq	.L6592
	ldr	r3, [r5, #8]
	str	r3, [r4, #60]
	ldr	r5, [r4, #60]
	ldr	r3, [r5, #4]
	cmp	r3, #0
	beq	.L6644
.L6586:
	ldr	r5, [r4, #64]
	ldr	r3, [r5, #4]
	cmp	r3, #0
	bne	.L6613
	cmp	r7, #0
	beq	.L6592
.L6595:
	mov	r0, r4
	bl	sleep_thread
	cmp	r0, #0
	beq	.L6585
.L6578:
	add	sp, sp, #60
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L6587:
	ldr	r5, [r4, #64]
	ldr	r3, [r5, #4]
	cmp	r3, #0
	beq	.L6592
.L6613:
	cmp	r3, #1
	bne	.L6595
	ldr	r3, [r4, #136]
	cmp	r3, #0
	beq	.L6595
	.syntax divided
@ 1028 "drivers/usb/gadget/f_mass_storage.c" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r2, [r5, #8]
	mov	r3, #0
	str	r2, [r4, #64]
	ldr	r2, [r5, #24]
	str	r3, [r5, #4]
	ldr	r3, [r2, #44]
	cmp	r3, #0
	bne	.L6645
	ldr	r3, [r6, #8]
	ldr	ip, [r6, #12]
	ldr	r2, [r2, #48]
	subs	r1, r3, r8
	str	r1, [sp, #24]
	sbc	r1, ip, r9
	str	r1, [sp, #28]
	mov	r1, #0
	ldrd	r10, [sp, #24]
	cmp	r10, r2
	sbcs	r1, fp, r1
	blt	.L6646
.L6598:
	ldr	fp, [r6, #44]
	ldr	r3, [r5, #12]
	rsb	fp, fp, #0
	cmp	r3, r2
	andls	fp, fp, r3
	andhi	fp, fp, r2
	cmp	fp, #0
	beq	.L6599
	add	r3, sp, #48
	mov	r2, fp
	strd	r8, [sp, #48]
	ldr	r1, [r5]
	ldr	r0, [r6]
	bl	vfs_write
	ldr	r3, [sp, #44]
	ldr	r3, [r3, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	ands	r3, r3, #1
	bne	.L6617
	cmp	r0, #0
	blt	.L6600
	cmp	r0, fp
	mov	r3, r0
	bcs	.L6601
	ldr	r2, [r6, #44]
	ldr	r1, [r4, #136]
	rsb	r2, r2, #0
	and	r2, r2, r0
	adds	r8, r8, r2
	mov	r3, r2
	adc	r9, r9, r2, asr #31
	sub	r2, r1, r2
	ldr	r1, [sp, #40]
	cmp	r3, fp
	str	r2, [r4, #136]
	sub	r1, r1, r3
	str	r1, [sp, #40]
	bcc	.L6600
.L6602:
	cmp	fp, r3
	beq	.L6604
.L6640:
.L6605:
	ldr	r3, [r5, #12]
	ldr	r2, [r5, #24]
	ldr	r2, [r2, #48]
	cmp	r2, r3
	bcc	.L6615
	ldr	r3, [sp, #40]
	cmp	r3, #0
	bne	.L6585
.L6592:
	mvn	r0, #4
	b	.L6578
.L6599:
	ldr	r2, [r5, #24]
	ldr	r2, [r2, #48]
	cmp	r3, r2
	bls	.L6585
.L6615:
	ldrb	r3, [r4, #144]	@ zero_extendqisi2
	mvn	r0, #4
	orr	r3, r3, #8
	strb	r3, [r4, #144]
	b	.L6578
.L6643:
	ldr	r3, [r6, #40]
	mov	r2, #8448
	mov	fp, r1
	movt	r2, 5
	mov	r7, #0
	str	r2, [r6, #28]
	subs	r1, r3, #32
	lsr	r2, r0, r3
	rsb	r3, r3, #32
	orr	r2, r2, fp, lsl r3
	movpl	r3, fp
	orrpl	r2, r2, r3, asr r1
	ldrb	r3, [r6, #24]	@ zero_extendqisi2
	str	r2, [r6, #32]
	orr	r3, r3, #64
	strb	r3, [r6, #24]
	b	.L6585
.L6646:
	movw	r1, #:lower16:.LC427
	add	r0, r6, #48
	strd	r8, [sp]
	movt	r1, #:upper16:.LC427
	str	r3, [sp, #8]
	str	ip, [sp, #12]
	bl	dev_err
	ldr	r2, [r6, #8]
	sub	r2, r2, r8
	b	.L6598
.L6601:
	ldr	r1, [sp, #40]
	adds	r8, r8, r0
	ldr	r2, [r4, #136]
	adc	r9, r9, r0, asr #31
	cmp	fp, r3
	sub	r1, r1, r0
	sub	r2, r2, r0
	str	r1, [sp, #40]
	str	r2, [r4, #136]
	bne	.L6640
.L6604:
	movw	r3, #:lower16:.LANCHOR0
	movt	r3, #:upper16:.LANCHOR0
	ldr	r2, [r3, #4016]
	cmp	r2, #0
	bne	.L6640
	ldr	r2, [r3, #4012]
	cmp	r2, #0
	bne	.L6592
	ldr	r2, [r4, #68]
	ldr	r1, [r2, #4]
	cmp	r1, #2
	beq	.L6640
	ldr	r1, [r2, #36]
	cmp	r1, #2
	beq	.L6640
	ldr	r1, [r2, #68]
	cmp	r1, #2
	beq	.L6640
	ldr	r2, [r2, #100]
	cmp	r2, #2
	beq	.L6640
	ldr	r2, [sp, #36]
	cmp	r2, #0
	bne	.L6640
	mov	r2, #1
	mov	r0, r4
	str	r2, [r3, #4016]
	bl	send_status
	b	.L6640
.L6600:
	ldr	r2, [r6, #40]
	movw	r1, #3074
	movt	r1, 3
	str	r1, [r6, #28]
	subs	r0, r2, #32
	lsr	r1, r8, r2
	rsb	r2, r2, #32
	orr	r1, r1, r9, lsl r2
	ldrb	r2, [r6, #24]	@ zero_extendqisi2
	orrpl	r1, r1, r9, asr r0
	movw	r0, #:lower16:.LANCHOR0
	movt	r0, #:upper16:.LANCHOR0
	orr	r2, r2, #64
	str	r1, [r6, #32]
	mov	r1, #1
	strb	r2, [r6, #24]
	str	r1, [r0, #4012]
	b	.L6602
.L6641:
	ldrb	r5, [r4, #78]	@ zero_extendqisi2
	ldrb	r2, [r4, #77]	@ zero_extendqisi2
	ldrb	r3, [r4, #79]	@ zero_extendqisi2
	lsl	r5, r5, #8
	orr	r5, r5, r2, lsl #16
	orr	r5, r5, r3
	b	.L6582
.L6642:
	ldr	r0, [r6]
	add	r0, r0, #24
	bl	_raw_spin_lock
	ldr	r2, [r6]
	ldr	r3, [r2, #36]
	orr	r3, r3, #1048576
	orr	r3, r3, #4096
	str	r3, [r2, #36]
	ldr	r0, [r6]
	add	r0, r0, #24
	bl	_raw_spin_unlock
	b	.L6582
.L6617:
	mvn	r0, #3
	b	.L6578
.L6645:
	ldr	r3, [r6, #40]
	mov	r2, #2048
	mvn	r0, #4
	movt	r2, 4
	str	r2, [r6, #28]
	subs	r1, r3, #32
	lsr	r2, r8, r3
	rsb	r3, r3, #32
	orr	r2, r2, r9, lsl r3
	ldrb	r3, [r6, #24]	@ zero_extendqisi2
	orrpl	r2, r2, r9, asr r1
	orr	r3, r3, #64
	strb	r3, [r6, #24]
	str	r2, [r6, #32]
	b	.L6578
	.fnend
	.size	do_write, .-do_write
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	do_read, %function
do_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrb	r3, [r0, #76]	@ zero_extendqisi2
	.pad #36
	sub	sp, sp, #36
	ldr	r7, [r0, #104]
	cmp	r3, #8
	beq	.L6684
	ldrb	r3, [r0, #77]	@ zero_extendqisi2
	ldr	ip, [r0, #78]	@ unaligned
	tst	r3, #231
	movne	r2, #9216
	rev	ip, ip
	movtne	r2, 5
	mvnne	r3, #21
	strne	r2, [r7, #28]
	bne	.L6647
.L6649:
	ldrd	r2, [r7, #16]
	mov	r1, #0
	cmp	ip, r2
	sbcs	r3, r1, r3
	movge	r2, #8448
	mvnge	r3, #21
	movtge	r2, 5
	strge	r2, [r7, #28]
	bge	.L6647
	ldr	r3, [r7, #40]
	mov	r1, #0
	mov	r0, #0
	ldr	r8, [r5, #128]
	strd	r0, [sp]
	sub	r2, r3, #32
	cmp	r8, #0
	lsl	r2, ip, r2
	str	r2, [sp, #4]
	rsb	r2, r3, #32
	lsl	r3, ip, r3
	ldr	r1, [sp, #4]
	str	r3, [sp]
	orr	r2, r1, ip, lsr r2
	str	r2, [sp, #4]
	beq	.L6652
	mov	r3, sp
	add	r4, r5, #44
	bic	r9, r3, #8128
	bic	r9, r9, #63
.L6663:
	mov	r0, r4
	ldrd	r10, [r7, #8]
	bl	_raw_spin_lock_irq
	ldr	r6, [r5, #60]
	ldr	r3, [r6, #4]
	cmp	r3, #0
	bne	.L6653
	b	.L6657
.L6685:
	bl	_raw_spin_lock_irq
	ldr	r3, [r6, #4]
	cmp	r3, #0
	beq	.L6657
.L6653:
	mov	r0, r4
	bl	_raw_spin_unlock_irq
	mov	r0, r5
	bl	sleep_thread
	mov	r3, r0
	mov	r0, r4
	cmp	r3, #0
	beq	.L6685
.L6647:
	mov	r0, r3
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L6657:
	ldrd	r0, [sp]
	subs	r3, r10, r0
	sbc	r1, fp, r1
	cmp	r8, #16384
	str	r3, [sp, #8]
	movcc	r2, r8
	movcs	r2, #16384
	str	r1, [sp, #12]
	mov	r3, #0
	ldrd	r0, [sp, #8]
	cmp	r0, r2
	sbcs	ip, r1, r3
	movlt	r2, r0
	movlt	r3, r1
	mov	r0, r4
	mov	r10, r2
	strd	r2, [sp, #16]
	bl	_raw_spin_unlock_irq
	ldrd	r2, [sp, #16]
	cmp	r2, #0
	beq	.L6686
	ldrd	r0, [sp]
	add	r3, sp, #24
	strd	r0, [sp, #24]
	ldr	r1, [r6]
	ldr	r0, [r7]
	bl	vfs_read
	ldr	r3, [r9, #12]
	mov	fp, r0
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	ands	r3, r3, #1
	bne	.L6665
	cmp	r0, #0
	blt	.L6659
	cmp	r0, r10
	bcc	.L6687
	ldrd	r2, [sp]
	mov	r0, r4
	sub	r8, r8, fp
	ldr	r1, [r5, #136]
	adds	r2, r2, fp
	adc	r3, r3, fp, asr #31
	strd	r2, [sp]
	sub	r3, r1, fp
	str	r3, [r5, #136]
	bl	_raw_spin_lock_irq
	ldr	r2, [r6, #16]
	mov	r3, #1
	mov	r0, r4
	str	fp, [r2, #4]
	str	r3, [r6, #4]
	bl	_raw_spin_unlock_irq
.L6661:
	cmp	r8, #0
	beq	.L6652
	ldr	r3, [r6, #16]
	mov	r1, r6
	mov	r0, r5
	ldrb	r2, [r3, #26]	@ zero_extendqisi2
	bfc	r2, #1, #1
	strb	r2, [r3, #26]
	bl	start_in_transfer
	cmp	r0, #0
	beq	.L6652
	ldr	r3, [r6, #8]
	str	r3, [r5, #60]
	b	.L6663
.L6687:
	ldr	r2, [r7, #44]
	mov	r0, r4
	ldr	r3, [r5, #136]
	rsb	r2, r2, #0
	and	fp, fp, r2
	sub	r1, r3, fp
	ldrd	r2, [sp]
	sub	r8, r8, fp
	str	r1, [r5, #136]
	adds	r2, r2, fp
	adc	r3, r3, fp, asr #31
	strd	r2, [sp]
	bl	_raw_spin_lock_irq
	ldr	r2, [r6, #16]
	mov	r3, #1
	mov	r0, r4
	str	fp, [r2, #4]
	str	r3, [r6, #4]
	bl	_raw_spin_unlock_irq
	cmp	fp, r10
	bcs	.L6661
	b	.L6664
.L6684:
	ldrb	ip, [r0, #78]	@ zero_extendqisi2
	ldrb	r2, [r0, #77]	@ zero_extendqisi2
	ldrb	r3, [r0, #79]	@ zero_extendqisi2
	lsl	ip, ip, #8
	orr	ip, ip, r2, lsl #16
	orr	ip, ip, r3
	b	.L6649
.L6652:
	mvn	r3, #4
	b	.L6647
.L6665:
	mvn	r3, #3
	b	.L6647
.L6659:
	mov	r0, r4
	str	r3, [sp, #8]
	bl	_raw_spin_lock_irq
	ldr	r3, [sp, #8]
	mov	r2, #1
	mov	r0, r4
	ldr	r1, [r6, #16]
	str	r3, [r1, #4]
	str	r2, [r6, #4]
	bl	_raw_spin_unlock_irq
.L6664:
	ldrd	r4, [sp]
	mov	r2, #4352
	ldr	r3, [r7, #40]
	movt	r2, 3
	str	r2, [r7, #28]
	subs	r1, r3, #32
	lsr	r2, r4, r3
	rsb	r3, r3, #32
	orr	r2, r2, r5, lsl r3
	movpl	r3, r5
	orrpl	r2, r2, r3, asr r1
	ldrb	r1, [r7, #24]	@ zero_extendqisi2
	mvn	r3, #4
	str	r2, [r7, #32]
	orr	r2, r1, #64
	strb	r2, [r7, #24]
	b	.L6647
.L6686:
	ldrd	r8, [sp]
	mov	r2, #8448
	mov	r0, r4
	ldr	r3, [r7, #40]
	movt	r2, 5
	str	r2, [r7, #28]
	subs	r1, r3, #32
	lsr	r2, r8, r3
	rsb	r3, r3, #32
	orr	r2, r2, r9, lsl r3
	movpl	r3, r9
	orrpl	r2, r2, r3, asr r1
	ldrb	r3, [r7, #24]	@ zero_extendqisi2
	str	r2, [r7, #32]
	orr	r3, r3, #64
	strb	r3, [r7, #24]
	bl	_raw_spin_lock_irq
	ldr	r2, [r6, #16]
	mov	r3, #1
	mov	r1, #0
	mov	r0, r4
	str	r1, [r2, #4]
	str	r3, [r6, #4]
	bl	_raw_spin_unlock_irq
	mvn	r3, #4
	b	.L6647
	.fnend
	.size	do_read, .-do_read
	.section	.rodata.str1.4
	.align	2
.LC428:
	.ascii	"<6>read descriptors\012\000"
	.align	2
.LC429:
	.ascii	"<6>read strings\012\000"
	.align	2
.LC430:
	.ascii	"&epfile->mutex\000"
	.align	2
.LC431:
	.ascii	"&epfile->wait\000"
	.align	2
.LC432:
	.ascii	"ep%u\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_ep0_write, %function
ffs_ep0_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 40
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	mov	r6, r2
	strd	r8, [sp, #16]
	mov	r9, r1
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r4, [r0, #132]
	.pad #52
	sub	sp, sp, #52
	add	r8, r4, #100
	.syntax divided
@ 197 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
@ 111 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/processor.h" 1
	pld	[r8]
@ 0 "" 2
	.arm
	.syntax unified
	mov	r3, #0
.L6689:
	.syntax divided
@ 174 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/cmpxchg.h" 1
	@ __cmpxchg4
	ldrex	r1, [r8]
	mov	r2, #0
	teq	r1, #2
	strexeq r2, r3, [r8]

@ 0 "" 2
	.arm
	.syntax unified
	cmp	r2, #0
	bne	.L6689
	.syntax divided
@ 199 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r1, #2
	beq	.L6750
	ldr	r3, [r0, #36]
	add	r7, r4, #4
	mov	r0, r7
	tst	r3, #2048
	bne	.L6808
	bl	mutex_lock_interruptible
	subs	r5, r0, #0
	blt	.L6688
.L6695:
	ldr	r3, [r4, #96]
	cmp	r3, #1
	bhi	.L6809
	cmp	r6, #15
	bls	.L6752
	mov	r0, r9
	mov	r1, r6
	bl	ffs_prepare_buffer
	cmn	r0, #4096
	mov	r8, r0
	bls	.L6696
	mov	r5, r0
.L6694:
	mov	r0, r7
	bl	mutex_unlock
.L6688:
	mov	r0, r5
	add	sp, sp, #52
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L6808:
	bl	mutex_trylock
	cmp	r0, #0
	bne	.L6695
	mvn	r5, #10
	b	.L6688
.L6809:
	cmp	r3, #2
	mvnne	r5, #76
	bne	.L6694
	add	fp, r4, #120
	mov	r0, fp
	bl	_raw_spin_lock_irq
	.syntax divided
@ 197 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
@ 111 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/processor.h" 1
	pld	[r8]
@ 0 "" 2
	.arm
	.syntax unified
	mov	r3, #0
.L6738:
	.syntax divided
@ 174 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/cmpxchg.h" 1
	@ __cmpxchg4
	ldrex	r1, [r8]
	mov	r10, #0
	teq	r1, #2
	strexeq r10, r3, [r8]

@ 0 "" 2
	.arm
	.syntax unified
	cmp	r10, #0
	bne	.L6738
	.syntax divided
@ 199 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r1, #0
	beq	.L6759
	cmp	r1, #2
	bne	.L6810
	mov	r6, r10
.L6807:
	mvn	r5, #42
.L6739:
	mov	r0, fp
	bl	_raw_spin_unlock_irq
.L6744:
	mov	r0, r6
	bl	kfree
	b	.L6694
.L6810:
	ldrsb	r3, [r4, #112]
	cmp	r3, #0
	blt	.L6740
	mov	r0, fp
	bl	_raw_spin_unlock_irq
	ldrh	r3, [r4, #110]
	cmp	r3, #0
	mvneq	r5, #2
	beq	.L6694
	ldr	r3, [r4]
	mov	r1, #1
	mvn	r5, #50
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #24]
	blx	r3
	str	r10, [r4, #100]
	b	.L6694
.L6759:
	mov	r6, r1
	mvn	r5, #2
	b	.L6739
.L6740:
	ldrh	r5, [r4, #118]
	mov	r0, fp
	cmp	r5, r6
	movcs	r5, r6
	bl	_raw_spin_unlock_irq
	mov	r1, r5
	mov	r0, r9
	bl	ffs_prepare_buffer
	cmn	r0, #4096
	mov	r6, r0
	movhi	r5, r0
	bhi	.L6694
	mov	r0, fp
	bl	_raw_spin_lock_irq
	.syntax divided
@ 197 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
@ 111 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/processor.h" 1
	pld	[r8]
@ 0 "" 2
	.arm
	.syntax unified
.L6742:
	.syntax divided
@ 174 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/cmpxchg.h" 1
	@ __cmpxchg4
	ldrex	r2, [r8]
	mov	r3, #0
	teq	r2, #2
	strexeq r3, r10, [r8]

@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	bne	.L6742
	.syntax divided
@ 199 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r2, #2
	beq	.L6807
	mov	r2, r5
	mov	r0, r4
	mov	r1, r6
	bl	__ffs_ep0_queue_wait
	mov	r5, r0
	b	.L6744
.L6752:
	mvn	r5, #21
	b	.L6694
.L6750:
	mvn	r5, #42
	b	.L6688
.L6696:
	ldr	r3, [r4, #96]
	cmp	r3, #0
	bne	.L6697
	movw	r0, #:lower16:.LC428
	movt	r0, #:upper16:.LC428
	bl	printk
	ldr	r3, [r8]	@ unaligned
	cmp	r3, #1
	beq	.L6811
.L6698:
	mvn	r5, #21
.L6700:
	mov	r0, r8
	bl	kfree
	b	.L6694
.L6697:
	movw	r0, #:lower16:.LC429
	movt	r0, #:upper16:.LC429
	bl	printk
	ldr	r3, [r8]	@ unaligned
	cmp	r3, #2
	beq	.L6812
.L6707:
	mov	r0, r8
	mvn	r5, #21
	bl	kfree
	b	.L6694
.L6811:
	ldr	r3, [r8, #4]	@ unaligned
	cmp	r3, r6
	bne	.L6698
	ldr	r9, [r8, #8]	@ unaligned
	add	r1, r8, #16
	sub	r2, r6, #16
	ldr	r10, [r8, #12]	@ unaligned
	cmp	r9, #0
	beq	.L6753
	movw	r3, #:lower16:__ffs_data_do_entity
	mov	r0, r9
	str	r4, [sp]
	movt	r3, #:upper16:__ffs_data_do_entity
	str	r1, [sp, #12]
	str	r2, [sp, #16]
	bl	ffs_do_descs
	ldr	r1, [sp, #12]
	subs	r5, r0, #0
	ldr	r2, [sp, #16]
	strge	r5, [sp, #12]
	addge	r1, r1, r5
	subge	r2, r2, r5
	blt	.L6700
.L6699:
	cmp	r10, #0
	beq	.L6701
	movw	r3, #:lower16:__ffs_data_do_entity
	mov	r0, r10
	str	r4, [sp]
	movt	r3, #:upper16:__ffs_data_do_entity
	str	r1, [sp, #16]
	str	r2, [sp, #20]
	bl	ffs_do_descs
	subs	r5, r0, #0
	ldr	r1, [sp, #16]
	ldr	r2, [sp, #20]
	blt	.L6700
	add	r3, r5, #8
	cmp	r3, r2
	bhi	.L6801
.L6748:
	ldr	r0, [r1, r5]	@ unaligned
	movw	r3, #56924
	movt	r3, 85
	cmp	r0, r3
	bne	.L6698
	add	r3, r1, r5
	orr	r0, r9, r10
	ldr	fp, [r3, #4]	@ unaligned
	add	r3, r5, #8
	sub	r2, r2, #8
	add	r1, r1, r3
	sub	r2, r2, r5
	orrs	r3, r0, fp
	beq	.L6698
	cmp	fp, #0
	beq	.L6705
	movw	r3, #:lower16:__ffs_data_do_entity
	mov	r0, fp
	str	r4, [sp]
	movt	r3, #:upper16:__ffs_data_do_entity
	str	r2, [sp, #16]
	bl	ffs_do_descs
	subs	r3, r0, #0
	ldr	r2, [sp, #16]
	bge	.L6797
	mov	r5, r3
	b	.L6700
.L6753:
	str	r9, [sp, #12]
	b	.L6699
.L6812:
	ldr	r3, [r8, #4]	@ unaligned
	cmp	r6, r3
	bne	.L6707
	ldr	r3, [r8, #8]	@ unaligned
	ldr	r5, [r8, #12]	@ unaligned
	clz	r2, r3
	str	r3, [sp, #16]
	clz	r3, r5
	lsr	r2, r2, #5
	lsr	r3, r3, #5
	cmp	r2, r3
	bne	.L6707
	ldrh	r3, [r4, #180]
	ldr	r2, [sp, #16]
	str	r3, [sp, #24]
	cmp	r3, r2
	bhi	.L6707
	cmp	r3, #0
	bne	.L6708
	mov	r0, r8
	bl	kfree
.L6709:
	ldrh	r3, [r4, #184]
	mov	r0, #60
	movw	r1, #32976
	mul	r0, r0, r3
	str	r3, [sp, #12]
	bl	__kmalloc
	subs	r8, r0, #0
	bne	.L6813
.L6715:
	mov	r3, #3
	mvn	r5, #11
	str	r3, [r4, #96]
	b	.L6694
.L6701:
	cmp	r2, #7
	bls	.L6703
	mov	r5, r10
	b	.L6748
.L6801:
	sub	r2, r2, r5
.L6705:
	cmp	r2, #0
	bne	.L6698
	ldr	r3, [sp, #12]
	str	r8, [r4, #148]
	str	r2, [r4, #164]
	str	r9, [r4, #168]
	str	r10, [r4, #172]
	add	r5, r5, r3
	str	r5, [r4, #152]
	str	r5, [r4, #156]
	str	r2, [r4, #176]
.L6745:
	mov	r3, #1
	mov	r5, r6
	str	r3, [r4, #96]
	b	.L6694
.L6703:
	cmp	r9, #0
	movne	r5, r10
	beq	.L6698
	b	.L6705
.L6708:
	add	fp, r5, #1
	mov	r1, #208
	lsl	fp, fp, #2
	mov	r0, fp
	bl	__kmalloc
	mov	r10, r0
	mov	r1, #208
	lsl	r0, r5, #3
	bl	__kmalloc
	ldr	r3, [sp, #24]
	mov	r9, r0
	mov	r1, #208
	mla	r3, r3, r5, r5
	lsl	r0, r3, #3
	bl	__kmalloc
	cmp	r10, #0
	clz	r3, r9
	str	r0, [sp, #12]
	lsr	r3, r3, #5
	moveq	r3, #1
	cmp	r0, #0
	moveq	r3, #1
	mov	r0, r10
	cmp	r3, #0
	moveq	r2, r5
	moveq	r3, r9
	bne	.L6814
.L6710:
	subs	r2, r2, #1
	str	r3, [r0], #4
	add	r3, r3, #8
	bne	.L6710
	add	fp, r10, fp
	add	r0, r9, #8
	add	r3, r8, #16
	sub	r1, r6, #16
	str	r2, [fp, #-4]
	ldr	fp, [sp, #12]
	mov	r2, r6
	str	r0, [sp, #20]
	mov	r0, r3
	mov	r6, r5
	mov	r3, r9
	mov	r9, r8
	mov	r8, r4
	mov	r4, r0
.L6714:
	cmp	r1, #2
	bhi	.L6815
	mov	r8, r9
	mov	r9, r3
.L6711:
	mov	r0, r10
	bl	kfree
	mov	r0, r9
	bl	kfree
	ldr	r0, [sp, #12]
	bl	kfree
	b	.L6707
.L6814:
	bl	kfree
	mov	r0, r9
	mvn	r5, #11
	bl	kfree
	ldr	r0, [sp, #12]
	bl	kfree
	mov	r0, r8
	bl	kfree
	b	.L6694
.L6797:
	cmp	r3, r2
	bne	.L6698
	ldr	r3, [sp, #12]
	str	r8, [r4, #148]
	str	r2, [r4, #164]
	str	r9, [r4, #168]
	strd	r10, [r4, #172]
	add	r5, r5, r3
	add	r1, r2, r5
	add	r3, r5, #24
	str	r1, [r4, #152]
	str	r5, [r4, #156]
	str	r3, [r4, #160]
	b	.L6745
.L6813:
	movw	r3, #:lower16:.LC430
	movw	r2, #:lower16:.LC431
	movt	r3, #:upper16:.LC430
	movt	r2, #:upper16:.LC431
	mov	r9, r8
	mov	r5, #1
	str	r3, [sp, #16]
	str	r2, [sp, #20]
.L6716:
	ldr	r3, [sp, #12]
	cmp	r3, r5
	bcc	.L6816
	ldr	r2, .L6825
	mov	r0, r9
	str	r4, [r9, #40]
	ldr	r1, [sp, #16]
	add	r10, r8, #52
	bl	__mutex_init
	ldr	r2, .L6825
	add	r0, r9, #24
	ldr	r1, [sp, #20]
	bl	__init_waitqueue_head
	movw	r1, #:lower16:.LC432
	mov	r0, r10
	movt	r1, #:upper16:.LC432
	mov	r2, r5
	bl	sprintf
	ldr	r3, [r4, #204]
	mov	r1, r10
	ldr	r0, [r3, #60]
	str	r3, [sp, #24]
	ldr	fp, [r3, #624]
	bl	d_alloc_name
	subs	r10, r0, #0
	ldr	r3, [sp, #24]
	bne	.L6817
.L6717:
	sub	r5, r5, #1
	mov	r6, r8
	mov	r9, #0
.L6720:
	cmp	r5, #0
	beq	.L6818
	ldr	r3, [r6]
	cmp	r3, #1
	beq	.L6819
.L6721:
	.syntax divided
@ 1543 "drivers/usb/gadget/f_fs.c" 1
	.word 0xe7f001f2
@ 0 "" 2
	.arm
	.syntax unified
.L6815:
	ldrb	ip, [r4, #1]	@ zero_extendqisi2
	sub	r1, r1, #2
	str	r6, [sp, #28]
	ldrb	r0, [r4], #2	@ zero_extendqisi2
	mov	r6, r3
	ldr	lr, [sp, #20]
	ldr	r5, [sp, #24]
	orr	r0, r0, ip, lsl #8
	strh	r0, [lr, #-8]	@ movhi
	str	fp, [lr, #-4]
.L6713:
	mov	r0, r4
	str	r1, [sp, #32]
	str	r2, [sp, #36]
	bl	strnlen
	ldr	r1, [sp, #32]
	ldr	r2, [sp, #36]
	cmp	r1, r0
	bne	.L6820
	mov	r8, r9
	mov	r9, r6
	b	.L6711
.L6820:
	cmp	r5, #0
	beq	.L6712
	sub	r5, r5, #1
	add	fp, fp, #8
	str	r4, [fp, #-4]
.L6712:
	ldr	r3, [sp, #16]
	add	ip, r0, #1
	mvn	r0, r0
	add	r4, r4, ip
	add	r1, r1, r0
	subs	r3, r3, #1
	str	r3, [sp, #16]
	bne	.L6713
	ldr	r0, [sp, #20]
	mov	r3, r6
	add	fp, fp, #8
	ldr	r6, [sp, #28]
	add	r0, r0, #8
	subs	r6, r6, #1
	str	r0, [sp, #20]
	ldr	r0, [sp, #16]
	strb	r0, [fp, #-8]
	str	r0, [fp, #-4]
	bne	.L6714
	cmp	r1, #0
	mov	r4, r8
	mov	r6, r2
	mov	r8, r9
	mov	r9, r3
	bne	.L6711
	ldr	r3, [sp, #12]
	str	r8, [r4, #188]
	str	r10, [r4, #192]
	str	r9, [r4, #196]
	str	r3, [r4, #200]
	b	.L6709
.L6816:
	mov	r3, #2
	mov	r0, r7
	str	r3, [r4, #96]
	str	r8, [r4, #220]
	bl	mutex_unlock
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r5, [r3, #1640]
	cmp	r5, #0
	mvneq	r5, #18
	bne	.L6821
.L6727:
	mov	r3, #3
	str	r3, [r4, #96]
	b	.L6688
.L6817:
	mov	r0, r3
	bl	new_inode
	subs	r1, r0, #0
	beq	.L6718
	add	r0, sp, #40
	str	r1, [sp, #24]
	add	r5, r5, #1
	bl	current_kernel_time
	bl	get_next_ino
	ldr	r1, [sp, #24]
	ldr	ip, .L6825+4
	str	r0, [r1, #40]
	ldrh	r3, [fp, #208]
	mov	r0, r10
	strh	r3, [r1]	@ movhi
	ldrd	r2, [sp, #40]
	ldr	lr, [fp, #212]
	str	lr, [r1, #4]
	ldr	lr, [fp, #216]
	str	lr, [r1, #8]
	strd	r2, [r1, #52]
	strd	r2, [r1, #60]
	strd	r2, [r1, #68]
	str	ip, [r1, #208]
	str	r9, [r1, #348]
	bl	d_instantiate
	mov	r0, r10
	bl	d_rehash
	cmn	r9, #48
	add	r9, r9, #60
	strne	r10, [r9, #-12]
	b	.L6716
.L6821:
	add	r7, r5, #24
	ldr	r9, [r3, #1624]
	mov	r0, r7
	bl	mutex_lock
	ldr	r3, [r4, #96]
	cmp	r3, #2
	beq	.L6822
.L6728:
	movw	r0, #:lower16:.LC12
	movw	r1, #1464
	movt	r0, #:upper16:.LC12
	mvn	r5, #76
	bl	warn_slowpath_null
.L6729:
	mov	r0, r7
	bl	mutex_unlock
	b	.L6727
.L6822:
	add	r8, r4, #132
	mov	r0, #1
	ldr	r10, [r5, #8]
	mov	r1, r8
	bl	_test_and_set_bit
	cmp	r0, #0
	bne	.L6728
	ldrh	r3, [r4, #180]
	cmp	r3, #254
	bls	.L6798
.L6757:
	mvn	r5, #18
	b	.L6729
.L6718:
	mov	r0, r10
	bl	dput
	b	.L6717
.L6798:
	ldrb	fp, [r10, #48]	@ zero_extendqisi2
	add	r3, fp, r3
	cmp	r3, #254
	bhi	.L6757
	ldr	r2, [r10]
	strb	r3, [r10, #48]
	mov	r1, #208
	ldr	r0, [r2, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	cmp	r0, #0
	str	r0, [r4, #32]
	bne	.L6823
	mvn	r5, #11
	b	.L6729
.L6818:
	mov	r0, r8
	bl	kfree
	b	.L6715
.L6823:
	movw	r2, #:lower16:ffs_ep0_complete
	movt	r2, #:upper16:ffs_ep0_complete
	str	r2, [r0, #28]
	ldr	r3, [r4, #32]
	str	r4, [r3, #32]
	ldr	r3, [r4, #192]
	cmp	r3, #0
	subne	r3, r3, #4
	bne	.L6732
.L6731:
	ldr	r2, [r10]
	mov	r3, r4
	str	r2, [r3], #88
	.syntax divided
@ 44 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	@ atomic_add
1:	ldrex	r2, [r3]
	add	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	ldrb	r3, [r9, #1]	@ zero_extendqisi2
	mov	r2, #1
	strb	r2, [r9]
	strd	r4, [r9, #4]
	cmp	r3, #0
	beq	.L6734
	mov	r0, r5
	bl	android_enable
.L6734:
	mov	r0, r7
	mov	r5, r6
	bl	mutex_unlock
	mov	r1, r8
	mov	r0, #0
	bl	_set_bit
	b	.L6688
.L6824:
	ldr	r1, [r1, #4]
	mov	r2, fp
.L6735:
	ldr	r0, [r1, #4]
	add	r2, r2, #1
	add	r1, r1, #8
	uxtb	r2, r2
	cmp	r0, #0
	bne	.L6736
.L6732:
	ldr	r1, [r3, #4]!
	cmp	r1, #0
	bne	.L6824
	b	.L6731
.L6819:
	ldr	r2, [r6, #28]
	add	r3, r6, #28
	cmp	r2, r3
	bne	.L6721
	ldr	r0, [r6, #48]
	cmp	r0, #0
	beq	.L6723
	bl	d_delete
	ldr	r0, [r6, #48]
	bl	dput
	str	r9, [r6, #48]
.L6723:
	sub	r5, r5, #1
	add	r6, r6, #60
	b	.L6720
.L6736:
	strb	r2, [r1, #-8]
	b	.L6735
.L6826:
	.align	2
.L6825:
	.word	.LANCHOR0+4020
	.word	.LANCHOR2+3580
	.fnend
	.size	ffs_ep0_write, .-ffs_ep0_write
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam_data_start, %function
bam_data_start:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #0
	mov	r3, r0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	ldr	r2, [r0, #4]
	bne	.L6828
	cmp	r2, #0
	beq	.L6827
	ldr	r0, [r2, #12]
	mov	r2, #32
	ldr	r1, [r3, #36]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	ldrne	r1, .L6843
	movwne	r0, #:lower16:.LC193
	bne	.L6842
.L6827:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L6828:
	cmp	r2, #0
	beq	.L6827
	ldr	r0, [r2, #8]
	mov	r2, #32
	ldr	r1, [r3, #40]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	beq	.L6827
	ldr	r1, .L6843+4
	movw	r0, #:lower16:.LC193
.L6842:
	movt	r0, #:upper16:.LC193
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	printk
.L6844:
	.align	2
.L6843:
	.word	.LANCHOR2+1248
	.word	.LANCHOR2+1276
	.fnend
	.size	bam_data_start, .-bam_data_start
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_write, %function
acc_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	mov	r6, r2
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r5, [r0, #132]
	.pad #36
	sub	sp, sp, #36
	str	r2, [sp]
	ldrb	r3, [r5, #92]	@ zero_extendqisi2
	and	r2, r3, #3
	cmp	r2, #1
	bne	.L6860
	cmp	r6, #0
	beq	.L6845
	mov	r2, sp
	tst	r3, #1
	bic	r9, r2, #8128
	mov	r8, r1
	bic	r9, r9, #63
	beq	.L6862
.L6880:
	add	r7, r5, #80
	add	fp, r5, #1648
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #1648]
	mov	r1, r0
	cmp	fp, r3
	beq	.L6877
	ldr	ip, [r3]
	mov	lr, #256
	mov	r10, #512
	ldr	r2, [r3, #4]
	sub	r4, r3, #36
	mov	r0, r7
	str	r2, [ip, #4]
	str	ip, [r2]
	str	lr, [r3]
	str	r10, [r3, #4]
	bl	_raw_spin_unlock_irqrestore
	cmp	r4, #0
	beq	.L6848
.L6849:
	cmp	r6, #16384
	movhi	r10, #16384
	movhi	r3, #0
	bhi	.L6855
	ldr	r3, [r5, #84]
	mov	r10, r6
	ldrh	r2, [r3, #20]
	udiv	r3, r6, r2
	mls	r3, r2, r3, r6
	clz	r3, r3
	lsr	r3, r3, #5
.L6855:
	ldrb	r2, [r4, #26]	@ zero_extendqisi2
	ldr	r0, [r4]
	bfi	r2, r3, #1, #1
	strb	r2, [r4, #26]
	ldr	r3, [r9, #8]
	.syntax divided
@ 439 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/uaccess.h" 1
	adds r2, r8, r10; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L6878
	mov	r1, r10
	bl	__memzero
	mvn	r3, #13
	str	r3, [sp]
.L6857:
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #1652]
	add	r2, r4, #36
	mov	r1, r0
	mov	r0, r7
	str	r2, [r5, #1652]
	str	fp, [r4, #36]
	str	r3, [r4, #40]
	str	r2, [r3]
	bl	_raw_spin_unlock_irqrestore
.L6845:
	ldr	r0, [sp]
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L6878:
	mov	r2, r10
	mov	r1, r8
	bl	__copy_from_user
	cmp	r0, #0
	bne	.L6879
	str	r10, [r4, #4]
	ldr	r0, [r5, #84]
	mov	r2, #208
	mov	r1, r4
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L6868
	subs	r6, r6, r10
	add	r8, r8, r10
	beq	.L6845
	ldrb	r3, [r5, #92]	@ zero_extendqisi2
	tst	r3, #1
	bne	.L6880
.L6862:
	mvn	r3, #4
	str	r3, [sp]
	b	.L6845
.L6877:
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
.L6848:
	ldrb	r3, [r5, #92]	@ zero_extendqisi2
	ands	r3, r3, #1
	beq	.L6863
	ldr	r0, [r9, #12]
	movw	r2, #:lower16:autoremove_wake_function
	add	r1, sp, #24
	movt	r2, #:upper16:autoremove_wake_function
	mov	r3, #0
	str	r8, [sp, #4]
	add	r10, r5, #1664
	add	r10, r10, #4
	str	r3, [sp, #12]
	str	r0, [sp, #16]
	str	r2, [sp, #20]
	str	r1, [sp, #24]
	str	r1, [sp, #28]
	b	.L6854
.L6850:
	ldr	ip, [r3]
	ldr	r2, [r3, #4]
	str	r2, [ip, #4]
	str	ip, [r2]
	stm	r3, {r8, lr}
	bl	_raw_spin_unlock_irqrestore
	cmp	r4, #0
	bne	.L6852
	ldrb	r3, [r5, #92]	@ zero_extendqisi2
	ands	r3, r3, #1
	beq	.L6876
.L6881:
	ldr	r3, [r9, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	bne	.L6865
	bl	schedule
.L6854:
	add	r1, sp, #12
	mov	r2, #1
	mov	r0, r10
	mov	r8, #256
	bl	prepare_to_wait
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #1648]
	mov	r1, r0
	mov	lr, #512
	mov	r0, r7
	cmp	fp, r3
	sub	r4, r3, #36
	bne	.L6850
	bl	_raw_spin_unlock_irqrestore
	ldrb	r3, [r5, #92]	@ zero_extendqisi2
	ands	r3, r3, #1
	bne	.L6881
.L6876:
	add	r1, sp, #12
	mov	r0, r10
	str	r3, [sp]
	bl	finish_wait
	b	.L6845
.L6865:
	mov	r3, #65024
	add	r1, sp, #12
	movt	r3, 65535
	mov	r0, r10
	str	r3, [sp]
	bl	finish_wait
	b	.L6845
.L6863:
	str	r3, [sp]
	b	.L6845
.L6852:
	add	r1, sp, #12
	mov	r0, r10
	ldr	r8, [sp, #4]
	bl	finish_wait
	b	.L6849
.L6868:
	mvn	r3, #4
	str	r3, [sp]
	b	.L6857
.L6860:
	mvn	r3, #18
	str	r3, [sp]
	b	.L6845
.L6879:
	mvn	r3, #13
	str	r3, [sp]
	b	.L6857
	.fnend
	.size	acc_write, .-acc_write
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_add_header, %function
rndis_qc_add_header:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	mov	r6, r1
	mov	r1, #44
	mov	r0, r6
	str	lr, [sp, #12]
	bl	skb_realloc_headroom
	subs	r5, r0, #0
	beq	.L6883
	mov	r1, #44
	bl	skb_push
	mov	r1, #44
	mov	r4, r0
	bl	__memzero
	mov	r3, #0
	mov	r2, #1
	mov	r1, #36
	strb	r2, [r4]
	strb	r3, [r4, #1]
	strb	r3, [r4, #2]
	strb	r3, [r4, #3]
	ldr	r2, [r5, #80]
	str	r2, [r4, #4]	@ unaligned
	strb	r1, [r4, #8]
	strb	r3, [r4, #9]
	strb	r3, [r4, #10]
	strb	r3, [r4, #11]
	ldr	r3, [r5, #80]
	sub	r3, r3, #44
	str	r3, [r4, #12]	@ unaligned
.L6883:
	mov	r0, r6
	bl	dev_kfree_skb_any
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	rndis_qc_add_header, .-rndis_qc_add_header
	.section	.rodata.str1.4
	.align	2
.LC433:
	.ascii	"<3>%s: Buffer size is too big %d, should be at most"
	.ascii	" %d\012\000"
	.align	2
.LC434:
	.ascii	"<3>%s: Previous reading is not finished yet\012\000"
	.align	2
.LC435:
	.ascii	"<3>%s: USB cable not connected. Wait.\012\000"
	.align	2
.LC436:
	.ascii	"<3>%s: cpkt size too big:%d > buf size:%d\012\000"
	.align	2
.LC437:
	.ascii	"<3>%s: copy_to_user failed: err %d\012\000"
	.align	2
.LC438:
	.ascii	"<3>%s: Waiting failed\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_read, %function
mbim_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r4, [r0, #132]
	.pad #36
	sub	sp, sp, #36
	str	r1, [sp, #4]
	cmp	r4, #0
	beq	.L6920
	cmp	r2, #4096
	mov	fp, r2
	bhi	.L6921
	add	r10, r4, #92
	.syntax divided
@ 60 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 111 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/processor.h" 1
	pld	[r10]
@ 0 "" 2
@ 63 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r3, [r10]
	add	r3, r3, #1
	strex	r2, r3, [r10]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 73 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #1
	bne	.L6892
	ldr	r3, [r4, #80]
	cmp	r3, #0
	bne	.L6900
	mov	r3, sp
	bic	r5, r3, #8128
	bic	r5, r5, #63
.L6893:
	ldr	r3, [r4, #224]
	cmp	r3, #0
	beq	.L6922
.L6900:
	ldr	r3, [r4, #224]
	cmp	r3, #0
	bne	.L6923
	add	r7, r4, #196
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	mov	r3, r4
	mov	r1, r0
	ldr	r5, [r3, #200]!
	cmp	r5, r3
	bne	.L6912
	mov	r3, sp
	bic	r8, r3, #8128
	bic	r8, r8, #63
	b	.L6907
.L6903:
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r6, [r4, #200]
	mov	r1, r0
	cmp	r5, r6
	bne	.L6902
.L6907:
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r4, #200]
	cmp	r3, r5
	bne	.L6903
	ldr	r0, [r8, #12]
	movw	r2, #:lower16:autoremove_wake_function
	add	r1, sp, #24
	movt	r2, #:upper16:autoremove_wake_function
	mov	r3, #0
	add	r6, sp, #12
	add	r9, r4, #100
	str	r3, [sp, #12]
	str	r0, [sp, #16]
	str	r2, [sp, #20]
	str	r1, [sp, #24]
	str	r1, [sp, #28]
	b	.L6906
.L6924:
	bl	schedule
.L6906:
	mov	r2, #1
	mov	r1, r6
	mov	r0, r9
	bl	prepare_to_wait
	ldr	r3, [r4, #200]
	cmp	r3, r5
	bne	.L6904
	ldr	r3, [r8, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L6924
	mov	r1, r6
	mov	r0, r9
	bl	finish_wait
	movw	r0, #:lower16:.LC438
	ldr	r1, .L6929
	movt	r0, #:upper16:.LC438
	bl	printk
	.syntax divided
@ 83 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r10]
	sub	r3, r3, #1
	strex	r2, r3, [r10]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mov	r4, #65024
	movt	r4, 65535
	b	.L6888
.L6912:
	mov	r6, r5
.L6902:
	ldr	r3, [r6, #-4]
	sub	r5, r6, #8
	cmp	r3, fp
	bhi	.L6925
	ldrd	r2, [r6]
	mov	lr, #256
	mov	ip, #512
	mov	r0, r7
	str	r3, [r2, #4]
	str	r2, [r3]
	str	lr, [r6]
	str	ip, [r6, #4]
	bl	_raw_spin_unlock_irqrestore
	.syntax divided
@ 83 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r10]
	sub	r3, r3, #1
	strex	r2, r3, [r10]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mov	r3, sp
	ldr	r2, [r6, #-4]
	bic	r3, r3, #8128
	ldr	r0, [sp, #4]
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 448 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/uaccess.h" 1
	adds r1, r0, r2; sbcccs r1, r1, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L6926
.L6909:
	cmp	r2, #0
	ldreq	r4, [r6, #-4]
	bne	.L6927
.L6911:
	cmp	r5, #0
	beq	.L6888
	ldr	r0, [r6, #-8]
	bl	kfree
	mov	r0, r5
	bl	kfree
.L6888:
	mov	r0, r4
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L6904:
	mov	r1, r6
	mov	r0, r9
	bl	finish_wait
	b	.L6903
.L6926:
	ldr	r1, [r6, #-8]
	bl	__copy_to_user
	mov	r2, r0
	b	.L6909
.L6892:
	.syntax divided
@ 83 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r10]
	sub	r3, r3, #1
	strex	r2, r3, [r10]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	r0, #:lower16:.LC434
	ldr	r1, .L6929
	mvn	r4, #15
	movt	r0, #:upper16:.LC434
	bl	printk
	b	.L6888
.L6923:
	.syntax divided
@ 83 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r10]
	sub	r3, r3, #1
	strex	r2, r3, [r10]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mvn	r4, #4
	b	.L6888
.L6925:
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	.syntax divided
@ 83 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r10]
	sub	r3, r3, #1
	strex	r2, r3, [r10]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	r0, #:lower16:.LC436
	ldr	r1, .L6929
	mov	r3, fp
	movt	r0, #:upper16:.LC436
	ldr	r2, [r6, #-4]
	mvn	r4, #11
	bl	printk
	b	.L6888
.L6920:
	movw	r0, #:lower16:.LC313
	ldr	r1, .L6929
	mvn	r4, #18
	movt	r0, #:upper16:.LC313
	bl	printk
	b	.L6888
.L6927:
	movw	r0, #:lower16:.LC437
	ldr	r1, .L6929
	mvn	r4, #11
	movt	r0, #:upper16:.LC437
	bl	printk
	b	.L6911
.L6921:
	movw	r0, #:lower16:.LC433
	ldr	r1, .L6929
	mov	r3, #4096
	movt	r0, #:upper16:.LC433
	mvn	r4, #21
	bl	printk
	b	.L6888
.L6922:
	movw	r0, #:lower16:.LC435
	ldr	r1, .L6929
	movt	r0, #:upper16:.LC435
	bl	printk
	ldr	r3, [r4, #80]
	cmp	r3, #0
	bne	.L6896
	ldr	r3, [r4, #224]
	cmp	r3, #0
	bne	.L6896
	ldr	r0, [r5, #12]
	movw	r2, #:lower16:autoremove_wake_function
	add	r1, sp, #24
	movt	r2, #:upper16:autoremove_wake_function
	add	r6, sp, #12
	str	r3, [sp, #12]
	add	r7, r4, #100
	str	r0, [sp, #16]
	str	r2, [sp, #20]
	str	r1, [sp, #24]
	str	r1, [sp, #28]
.L6899:
	mov	r2, #1
	mov	r1, r6
	mov	r0, r7
	bl	prepare_to_wait
	ldr	r3, [r4, #80]
	cmp	r3, #0
	beq	.L6928
.L6897:
	mov	r1, r6
	mov	r0, r7
	bl	finish_wait
.L6896:
	ldr	r3, [r4, #80]
	cmp	r3, #0
	beq	.L6893
	b	.L6900
.L6928:
	ldr	r3, [r4, #224]
	cmp	r3, #0
	bne	.L6897
	ldr	r3, [r5, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	bne	.L6898
	bl	schedule
	b	.L6899
.L6898:
	mov	r1, r6
	mov	r0, r7
	bl	finish_wait
	.syntax divided
@ 83 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r10]
	sub	r3, r3, #1
	strex	r2, r3, [r10]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mov	r4, #65024
	movt	r4, 65535
	b	.L6888
.L6930:
	.align	2
.L6929:
	.word	.LANCHOR2+3684
	.fnend
	.size	mbim_read, .-mbim_read
	.section	.rodata.str1.4
	.align	2
.LC439:
	.ascii	"%s %s with %s\000"
	.align	2
.LC440:
	.ascii	"failed to override string ID\012\000"
	.align	2
.LC441:
	.ascii	"userspace failed to provide iSerialNumber\012\000"
	.align	2
.LC442:
	.ascii	"%s ready\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	composite_bind, %function
composite_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	mov	r6, r0
	str	r8, [sp, #16]
	movw	r8, #:lower16:kmalloc_caches
	movt	r8, #:upper16:kmalloc_caches
	str	lr, [sp, #20]
	.pad #8
	sub	sp, sp, #8
	ldr	r0, [r8, #28]
	cmp	r0, #0
	beq	.L6958
	movw	r1, #32976
	bl	kmem_cache_alloc
	subs	r4, r0, #0
	beq	.L6992
.L6932:
	mov	r3, #0
	add	r7, r6, #32
	str	r6, [r4]
	mov	r1, r4
	mov	r0, r7
	str	r3, [r4, #60]
	bl	dev_set_drvdata
	add	r3, r4, #36
	mov	r1, #208
	str	r3, [r4, #36]
	str	r3, [r4, #40]
	ldr	r0, [r6, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	cmp	r0, #0
	mov	r5, r0
	str	r0, [r4, #4]
	beq	.L6934
	ldr	r0, [r8, #48]
	cmp	r0, #0
	moveq	r0, #16
	beq	.L6935
	mov	r1, #208
	bl	kmem_cache_alloc
.L6935:
	str	r0, [r5]
	ldr	r2, [r4, #4]
	ldr	r3, [r2]
	cmp	r3, #0
	beq	.L6934
	movw	r3, #:lower16:composite_setup_complete
	movw	r5, #:lower16:.LANCHOR0
	movt	r3, #:upper16:composite_setup_complete
	movt	r5, #:upper16:.LANCHOR0
	ldr	r0, [r5, #396]
	str	r3, [r2, #28]
	ldr	r2, [r6, #4]
	mov	r3, #4096
	str	r4, [r2]
	ldr	r1, [r4]
	str	r3, [r4, #8]
	str	r0, [r4, #44]
	ldr	r3, [r1, #8]!
	cmp	r1, r3
	sub	r3, r3, #12
	beq	.L6939
	mov	r0, #0
.L6936:
	ldr	r2, [r3, #12]
	str	r0, [r3]
	cmp	r1, r2
	sub	r3, r2, #12
	bne	.L6936
.L6939:
	mov	r2, #0
	mov	r0, r4
	ldr	r3, [r5, #4020]
	str	r2, [r5, #3272]
	blx	r3
	subs	r8, r0, #0
	blt	.L6937
	ldr	r1, [r5, #396]
	movw	r3, #4024
	ldrh	r2, [r5, r3]
	ldr	r3, [r1, #12]
	cmp	r2, #0
	ldr	r8, [r3]	@ unaligned
	ldr	lr, [r3, #4]	@ unaligned
	ldr	ip, [r3, #8]	@ unaligned
	ldr	r0, [r3, #12]	@ unaligned
	str	r8, [r4, #17]	@ unaligned
	str	lr, [r4, #21]	@ unaligned
	str	ip, [r4, #25]	@ unaligned
	str	r0, [r4, #29]	@ unaligned
	ldrh	r3, [r3, #16]	@ unaligned
	strhne	r2, [r4, #25]	@ unaligned
	strh	r3, [r4, #33]	@ unaligned
	movw	r3, #4026
	ldrh	r3, [r5, r3]
	cmp	r3, #0
	strhne	r3, [r4, #27]	@ unaligned
	movw	r3, #4028
	ldrh	r3, [r5, r3]
	cmp	r3, #0
	strhne	r3, [r4, #29]	@ unaligned
	ldr	r3, [r5, #4032]
	cmp	r3, #0
	ldrb	r3, [r4, #31]	@ zero_extendqisi2
	beq	.L6943
.L6944:
	cmp	r3, #0
	beq	.L6946
.L6947:
	strb	r3, [r4, #49]
.L6945:
	ldr	r3, [r5, #4088]
	cmp	r3, #0
	ldrb	r3, [r4, #32]	@ zero_extendqisi2
	beq	.L6949
	cmp	r3, #0
	beq	.L6950
.L6951:
	strb	r3, [r4, #50]
.L6952:
	ldr	r3, [r5, #4092]
	cmp	r3, #0
	beq	.L6954
	ldrb	r3, [r4, #33]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L6993
.L6955:
	strb	r3, [r4, #51]
.L6954:
	ldr	r3, [r5, #396]
	ldrb	r3, [r3, #24]	@ zero_extendqisi2
	tst	r3, #1
	beq	.L6957
	ldrb	r3, [r4, #33]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L6994
.L6957:
	ldr	r1, .L6996
	mov	r0, r7
	bl	device_create_file
	subs	r8, r0, #0
	bne	.L6937
	ldr	r0, [r4]
	movw	r1, #:lower16:.LC442
	ldr	r3, [r5, #396]
	movt	r1, #:upper16:.LC442
	add	r0, r0, #32
	ldr	r2, [r3]
	bl	_dev_info
	b	.L6931
.L6934:
	mvn	r8, #11
.L6937:
	mov	r0, r6
	bl	composite_unbind
.L6931:
	mov	r0, r8
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L6958:
	mov	r4, #16
	b	.L6932
.L6949:
	cmp	r3, #0
	bne	.L6952
	ldr	r3, [r5, #396]
	ldr	r3, [r3, #4]
	cmp	r3, #0
	beq	.L6952
.L6950:
	ldrb	r3, [r4, #48]	@ zero_extendqisi2
	cmp	r3, #253
	addls	r3, r3, #1
	uxtbls	r3, r3
	strbls	r3, [r4, #32]
	strbls	r3, [r4, #48]
	bls	.L6951
	ldr	r0, [r4]
	movw	r1, #:lower16:.LC440
	movt	r1, #:upper16:.LC440
	add	r0, r0, #32
	bl	dev_warn
	ldrb	r3, [r4, #32]	@ zero_extendqisi2
	b	.L6951
.L6943:
	cmp	r3, #0
	bne	.L6945
	ldr	r3, [r1, #8]
	cmp	r3, #0
	beq	.L6995
.L6946:
	ldrb	r3, [r4, #48]	@ zero_extendqisi2
	cmp	r3, #253
	addls	r3, r3, #1
	uxtbls	r3, r3
	strbls	r3, [r4, #31]
	strbls	r3, [r4, #48]
	bls	.L6947
	ldr	r0, [r4]
	movw	r1, #:lower16:.LC440
	movt	r1, #:upper16:.LC440
	add	r0, r0, #32
	bl	dev_warn
	ldrb	r3, [r4, #31]	@ zero_extendqisi2
	b	.L6947
.L6993:
	ldrb	r3, [r4, #48]	@ zero_extendqisi2
	cmp	r3, #253
	addls	r3, r3, #1
	uxtbls	r3, r3
	strbls	r3, [r4, #33]
	strbls	r3, [r4, #48]
	bls	.L6955
	ldr	r0, [r4]
	movw	r1, #:lower16:.LC440
	movt	r1, #:upper16:.LC440
	add	r0, r0, #32
	bl	dev_warn
	ldrb	r3, [r4, #33]	@ zero_extendqisi2
	b	.L6955
.L6994:
	ldr	r0, [r4]
	movw	r1, #:lower16:.LC441
	movt	r1, #:upper16:.LC441
	add	r0, r0, #32
	bl	dev_warn
	b	.L6957
.L6995:
	ldrb	r3, [r5, #4036]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L6946
	ldr	r3, .L6996+4
	movw	r2, #:lower16:.LC439
	mov	r1, #50
	ldr	ip, [r6, #28]
	movt	r2, #:upper16:.LC439
	ldr	r0, .L6996+8
	stm	sp, {r3, ip}
	sub	r3, r3, #130
	bl	snprintf
	ldrb	r3, [r4, #31]	@ zero_extendqisi2
	b	.L6944
.L6992:
	mvn	r8, #11
	b	.L6931
.L6997:
	.align	2
.L6996:
	.word	.LANCHOR1+1500
	.word	init_uts_ns+134
	.word	.LANCHOR0+4036
	.fnend
	.size	composite_bind, .-composite_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_write, %function
adb_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 40
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	r3, #:upper16:.LANCHOR0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r3, [r3, #2284]
	.pad #44
	sub	sp, sp, #44
	ldr	r4, [r0, #132]
	stmib	sp, {r1, r2}
	cmp	r3, #0
	beq	.L7019
	add	r3, r4, #104
	str	r3, [sp, #12]
	.syntax divided
@ 60 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 111 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/processor.h" 1
	pld	[r3]
@ 0 "" 2
	.arm
	.syntax unified
	mov	r1, r3
	.syntax divided
@ 63 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r3, [r1]
	add	r3, r3, #1
	strex	r2, r3, [r1]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 73 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #1
	bne	.L7031
	mov	r3, sp
	ldr	r8, [sp, #8]
	bic	r9, r3, #8128
	bic	r9, r9, #63
.L7018:
	cmp	r8, #0
	beq	.L7028
.L7037:
	add	r7, r4, #112
	add	r5, r4, #80
	mov	r10, #256
.L7004:
	ldr	r3, [r4, #96]
	mov	r0, r5
	cmp	r3, #0
	bne	.L7032
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #112]
	mov	r1, r0
	mov	ip, #512
	mov	r0, r5
	cmp	r7, r3
	sub	r6, r3, #36
	beq	.L7033
	ldr	lr, [r3]
	ldr	r2, [r3, #4]
	str	r2, [lr, #4]
	str	lr, [r2]
	stm	r3, {r10, ip}
	bl	_raw_spin_unlock_irqrestore
	cmp	r6, #0
	beq	.L7002
.L7003:
	cmp	r8, #4096
	ldr	r1, [sp, #4]
	movcc	r10, r8
	movcs	r10, #4096
	ldr	r3, [r9, #8]
	.syntax divided
@ 439 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/uaccess.h" 1
	adds r2, r1, r10; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	ldr	r0, [r6]
	beq	.L7034
	mov	r1, r10
	mvn	r8, #13
	bl	__memzero
.L7012:
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #116]
	add	r2, r6, #36
	mov	r1, r0
	mov	r0, r5
	str	r2, [r4, #116]
	str	r7, [r6, #36]
	str	r3, [r6, #40]
	str	r2, [r3]
	bl	_raw_spin_unlock_irqrestore
.L7015:
	ldr	r3, [r4, #96]
	cmp	r3, #0
	bne	.L7035
.L7017:
	ldr	r1, [sp, #12]
	.syntax divided
@ 83 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r1]
	sub	r3, r3, #1
	strex	r2, r3, [r1]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
.L6998:
	mov	r0, r8
	add	sp, sp, #44
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L7033:
	bl	_raw_spin_unlock_irqrestore
.L7002:
	ldr	r3, [r4, #96]
	cmp	r3, #0
	bne	.L7004
	ldr	r0, [r9, #12]
	movw	r2, #:lower16:autoremove_wake_function
	add	r1, sp, #32
	movt	r2, #:upper16:autoremove_wake_function
	add	r10, r4, #132
	str	r3, [sp, #20]
	str	r1, [sp, #32]
	str	r0, [sp, #24]
	str	r2, [sp, #28]
	str	r1, [sp, #36]
	b	.L7010
.L7005:
	ldm	r3, {fp, lr}
	str	lr, [fp, #4]
	str	fp, [lr]
	str	ip, [r3]
	str	r2, [r3, #4]
	bl	_raw_spin_unlock_irqrestore
	cmp	r6, #0
	bne	.L7007
	ldr	r3, [r4, #96]
	cmp	r3, #0
	bne	.L7008
.L7036:
	ldr	r3, [r9, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	bne	.L7009
	bl	schedule
.L7010:
	mov	r2, #1
	add	r1, sp, #20
	mov	r0, r10
	bl	prepare_to_wait
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #112]
	mov	r1, r0
	mov	ip, #256
	mov	r2, #512
	mov	r0, r5
	cmp	r7, r3
	sub	r6, r3, #36
	bne	.L7005
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r4, #96]
	cmp	r3, #0
	beq	.L7036
.L7008:
	add	r1, sp, #20
	mov	r0, r10
	bl	finish_wait
	cmp	r8, #0
	bne	.L7037
.L7028:
	ldr	r3, [r4, #96]
	ldr	r8, [sp, #8]
	cmp	r3, #0
	beq	.L7017
.L7035:
	mov	r3, #0
	mov	r2, #1
	mov	r1, #3
	add	r0, r4, #120
	bl	__wake_up
	b	.L7017
.L7034:
	mov	r2, r10
	bl	__copy_from_user
	cmp	r0, #0
	bne	.L7038
	str	r10, [r6, #4]
	ldr	r0, [r4, #84]
	mov	r2, #32
	mov	r1, r6
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L7039
	ldr	r3, [sp, #4]
	sub	r8, r8, r10
	add	r3, r3, r10
	str	r3, [sp, #4]
	b	.L7018
.L7032:
	mvn	r8, #4
	b	.L7015
.L7031:
	ldr	r1, [sp, #12]
	.syntax divided
@ 83 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r1]
	sub	r3, r3, #1
	strex	r2, r3, [r1]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mvn	r8, #15
	b	.L6998
.L7009:
	add	r1, sp, #20
	mov	r0, r10
	mov	r8, #65024
	movt	r8, 65535
	bl	finish_wait
	b	.L7015
.L7039:
	mov	r3, #1
	mvn	r8, #4
	str	r3, [r4, #96]
	b	.L7012
.L7019:
	mvn	r8, #18
	b	.L6998
.L7007:
	add	r1, sp, #20
	mov	r0, r10
	bl	finish_wait
	b	.L7003
.L7038:
	mvn	r8, #13
	b	.L7012
	.fnend
	.size	adb_write, .-adb_write
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_put_char, %function
gs_put_char:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	str	lr, [sp, #8]
	ldr	r4, [r0, #280]
	.pad #12
	sub	sp, sp, #12
	strb	r1, [sp, #7]
	mov	r0, r4
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r4, #92]
	mov	r1, r0
	ldr	r3, [r4, #100]
	ldr	r0, [r4, #104]
	add	r3, r3, r5
	sub	r3, r3, r0
	sub	r3, r3, #1
	udiv	r2, r3, r5
	mls	r3, r5, r2, r3
	cmp	r3, #0
	moveq	r5, r3
	beq	.L7041
	ldr	r2, [r4, #96]
	add	r5, r2, r5
	subs	r3, r5, r0
	bne	.L7042
	ldrb	r3, [sp, #7]	@ zero_extendqisi2
	mov	r5, #1
	strb	r3, [r2]
	ldr	r3, [r4, #96]
	add	r3, r3, r5
	str	r3, [r4, #104]
.L7041:
	mov	r0, r4
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r5
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	add	sp, sp, #8
	ldr	pc, [sp], #4
.L7042:
	ldrb	r2, [sp, #7]	@ zero_extendqisi2
	cmp	r3, #1
	strb	r2, [r0]
	beq	.L7043
	ldr	r3, [r4, #104]
	mov	r5, #1
	add	r3, r3, r5
	str	r3, [r4, #104]
	b	.L7041
.L7043:
	ldr	r2, [r4, #96]
	mov	r5, r3
	str	r2, [r4, #104]
	b	.L7041
	.fnend
	.size	gs_put_char, .-gs_put_char
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_audio_unbind, %function
f_audio_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r1
	ldr	r0, [r1, #8]
	str	lr, [sp, #4]
	bl	kfree
	ldr	r0, [r4, #12]
	bl	kfree
	ldr	r0, [r4, #16]
	bl	kfree
	mov	r0, r4
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	kfree
	.fnend
	.size	f_audio_unbind, .-f_audio_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gps_suspend, %function
gps_suspend:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	add	r7, r0, #124
	strd	r8, [sp, #16]
	add	r8, r0, #136
	mov	r0, r7
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #136]
	mov	r5, r0
	cmp	r8, r3
	beq	.L7049
	mov	r10, #256
	mov	r9, #512
.L7050:
	ldm	r3, {r1, r2}
	mov	r6, r3
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r10, [r3]
	str	r9, [r3, #4]
	ldr	r0, [r6, #-8]!
	bl	kfree
	mov	r0, r6
	bl	kfree
	ldr	r3, [r4, #136]
	cmp	r3, r8
	bne	.L7050
.L7049:
	mov	r3, #0
	mov	r1, r5
	mov	r0, r7
	str	r3, [r4, #144]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irqrestore
	.fnend
	.size	gps_suspend, .-gps_suspend
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_func_setup, %function
ffs_func_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r5, [r0, #-44]
	ldr	r3, [r5, #96]
	cmp	r3, #2
	bne	.L7064
	ldrb	r3, [r1]	@ zero_extendqisi2
	mov	r8, r1
	and	r3, r3, #31
	cmp	r3, #1
	beq	.L7055
	cmp	r3, #2
	mvnne	r4, #94
	bne	.L7053
	ldrh	r3, [r1, #4]	@ unaligned
	and	r3, r3, #15
	add	r0, r0, r3
	ldrb	r4, [r0, #-36]	@ zero_extendqisi2
	cmp	r4, #0
	beq	.L7066
.L7058:
	add	r6, r5, #120
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r1, [r5, #100]
	mov	r7, r0
	add	lr, r5, #104
	ldr	r3, [r8, #4]	@ unaligned
	ldr	r2, [r8]	@ unaligned
	ldrh	r0, [r5, #108]
	cmp	r1, #1
	strd	r2, [r5, #112]
	moveq	r3, #2
	strh	r4, [r5, #116]	@ movhi
	streq	r3, [r5, #100]
	cmp	r0, #0
	beq	.L7067
	add	r3, r5, #103
	mov	ip, lr
	add	r0, r3, r0
.L7063:
	ldrb	r1, [r3, #1]!	@ zero_extendqisi2
	mov	r2, ip
	cmp	r1, #4
	strbne	r1, [r2], #1
	movne	ip, r2
	cmp	r0, r3
	bne	.L7063
	sub	ip, ip, lr
	add	r3, ip, #1
	uxth	r0, ip
	uxth	r3, r3
.L7061:
	add	r0, r5, r0
	strh	r3, [r5, #108]	@ movhi
	mov	ip, #4
	mov	r1, #3
	mov	r2, #1
	mov	r4, #0
	strb	ip, [r0, #104]
	mov	r0, r6
	bl	__wake_up_locked
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
.L7053:
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L7055:
	ldrh	r2, [r5, #182]
	ldrh	r1, [r1, #4]	@ unaligned
	ldr	r4, [r0, #-8]
	cmp	r2, #0
	uxtb	r1, r1
	beq	.L7066
	mov	r3, r4
.L7059:
	mov	ip, r3
	ldrsh	r0, [r3], #2
	cmp	r0, #0
	blt	.L7057
	cmp	r0, r1
	beq	.L7074
.L7057:
	subs	r2, r2, #1
	bne	.L7059
.L7066:
	mvn	r4, #32
	b	.L7053
.L7074:
	sub	ip, ip, r4
	cmp	ip, #0
	asr	r4, ip, #1
	bge	.L7058
	b	.L7053
.L7067:
	mov	r3, #1
	b	.L7061
.L7064:
	mvn	r4, #18
	b	.L7053
	.fnend
	.size	ffs_func_setup, .-ffs_func_setup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gser_unbind, %function
gser_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r0, [r1, #8]
	bl	kfree
	ldr	r0, [r4, #12]
	bl	kfree
	ldr	r0, [r4, #16]
	bl	kfree
	ldr	r5, [r4, #152]
	ldr	r6, [r4, #156]
	ldr	r0, [r6]
	bl	kfree
	ldr	r3, [r5, #8]
	mov	r0, r5
	mov	r1, r6
	ldr	r3, [r3, #12]
	blx	r3
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	kfree
	.fnend
	.size	gser_unbind, .-gser_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rx_fill, %function
rx_fill:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	add	r4, r0, #28
	strd	r6, [sp, #8]
	mov	r6, r0
	strd	r8, [sp, #16]
	add	r9, r0, #16
	strd	r10, [sp, #24]
	mov	r0, r9
	mov	r10, r1
	str	lr, [sp, #32]
	.pad #20
	sub	sp, sp, #20
	str	r4, [sp, #8]
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r6, #28]
	mov	r1, r0
	cmp	r4, r5
	beq	.L7078
	movw	r3, #:lower16:.LANCHOR1
	mov	r8, #0
	movt	r3, #:upper16:.LANCHOR1
	str	r3, [sp, #12]
	b	.L7093
.L7080:
	ldr	r7, [r3, #84]
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	cmp	r7, #0
	beq	.L7088
	ldmib	r6, {r2, ip}
	ldrh	r3, [r7, #20]
	ldr	r1, [r6, #72]
	ldr	r0, [r2, #92]
	ldr	r4, [ip, #364]
	cmp	r1, #0
	add	r4, r4, r0
	add	r4, r4, #33
	add	r4, r4, r3
	udiv	r0, r4, r3
	mls	r3, r3, r0, r4
	sub	r4, r4, r3
	ldrb	r3, [r2, #96]	@ zero_extendqisi2
	mulne	r4, r1, r4
	cmp	r3, #0
	beq	.L7084
	ldr	r3, [r2, #100]
	cmp	r4, r3
	movcc	r4, r3
.L7084:
	mvn	r3, #0
	mov	r2, #0
	mov	r1, r10
	add	r0, r4, #2
	bl	__alloc_skb
	subs	r3, r0, #0
	beq	.L7085
	ldr	lr, [r3, #160]
	mov	r1, fp
	mov	r0, r7
	ldr	ip, [r3, #172]
	mov	r2, r10
	str	r3, [sp, #4]
	add	lr, lr, #2
	add	ip, ip, #2
	str	lr, [r3, #160]
	str	ip, [r3, #172]
	str	ip, [r5, #-36]
	str	r4, [r5, #-32]
	str	r3, [r5, #-4]
	ldr	ip, [r7, #8]
	ldr	r4, [ip, #16]
	blx	r4
	cmn	r0, #12
	mov	r4, r0
	ldr	r3, [sp, #4]
	beq	.L7113
	cmp	r0, #0
	bne	.L7114
.L7089:
	mov	r0, r9
	bl	_raw_spin_lock_irqsave
	ldr	r3, [sp, #8]
	mov	r1, r0
	ldr	r5, [r6, #28]
	cmp	r3, r5
	beq	.L7078
.L7093:
	ldr	r3, [r6, #12]
	add	r8, r8, #1
	ldr	r2, [r3, #20]
	cmp	r2, #2
	bls	.L7100
	ldr	r3, [r3, #16]
	sub	r3, r3, #3
	bics	r3, r3, #2
	bne	.L7100
	ldr	r3, [sp, #12]
	ldr	r3, [r3, #648]
	lsl	r3, r3, #1
	cmp	r3, r8
	blt	.L7078
.L7116:
	ldrd	r2, [r5]
	mov	r0, r9
	sub	fp, r5, #36
	str	r3, [r2, #4]
	str	r2, [r3]
	str	r5, [r5]
	str	r5, [r5, #4]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r6, #4]
	mov	r1, r0
	cmp	r3, #0
	bne	.L7080
	mov	r0, r6
	add	r4, r6, #120
	bl	_raw_spin_unlock_irqrestore
.L7081:
	mov	r0, r9
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r6, #28]
	mov	r1, r0
	mov	r0, r9
	str	r5, [r3, #4]
	str	r3, [r5]
	ldr	r3, [sp, #8]
	str	r3, [r5, #4]
	str	r5, [r6, #28]
	bl	_raw_spin_unlock_irqrestore
	mov	r1, r4
	mov	r0, #0
	bl	_test_and_set_bit
	cmp	r0, #0
	beq	.L7115
.L7077:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L7100:
	mov	r3, #2
	cmp	r3, r8
	bge	.L7116
.L7078:
	mov	r0, r9
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L7113:
	add	r4, r6, #120
	mov	r0, #0
	str	r3, [sp, #4]
	mov	r1, r4
	bl	_test_and_set_bit
	cmp	r0, #0
	ldr	r3, [sp, #4]
	bne	.L7097
	add	r0, r6, #88
	bl	schedule_work
	subs	r2, r0, #0
	ldr	r3, [sp, #4]
	beq	.L7117
.L7097:
	mov	r0, r3
	bl	dev_kfree_skb_any
	b	.L7081
.L7085:
	add	r4, r6, #120
	mov	r1, r4
	bl	_test_and_set_bit
	cmp	r0, #0
	bne	.L7081
	add	r0, r6, #88
	bl	schedule_work
	subs	r2, r0, #0
	bne	.L7081
	movw	r0, #:lower16:.LC392
	ldr	r1, [r6, #8]
	movt	r0, #:upper16:.LC392
	bl	printk
	b	.L7081
.L7114:
	mov	r0, r3
	bl	dev_kfree_skb_any
	cmp	r4, #0
	bge	.L7089
.L7088:
	add	r4, r6, #120
	b	.L7081
.L7115:
	add	r0, r6, #88
	bl	schedule_work
	subs	r2, r0, #0
	bne	.L7077
	ldr	r1, [r6, #8]
	movw	r0, #:lower16:.LC392
	movt	r0, #:upper16:.LC392
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	printk
.L7117:
	movw	r0, #:lower16:.LC392
	ldr	r1, [r6, #8]
	str	r3, [sp, #4]
	movt	r0, #:upper16:.LC392
	bl	printk
	ldr	r3, [sp, #4]
	b	.L7097
	.fnend
	.size	rx_fill, .-rx_fill
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	eth_work, %function
eth_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	mov	r0, #0
	add	r1, r4, #32
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	_test_and_clear_bit
	cmp	r0, #0
	beq	.L7118
	ldr	r3, [r4, #-80]
	ldr	r3, [r3, #160]
	tst	r3, #1
	bne	.L7127
.L7118:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L7127:
	sub	r5, r4, #88
	mov	r1, #208
	ldr	r6, [sp, #8]
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	rx_fill
	.fnend
	.size	eth_work, .-eth_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	process_rx_w, %function
process_rx_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r0, #-100]
	cmp	r3, #0
	bxeq	lr
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	sub	r7, r0, #52
	mov	r6, #0
	str	r8, [sp, #16]
	movw	r8, #1500
	str	lr, [sp, #20]
.L7131:
	mov	r0, r7
	bl	skb_dequeue
	subs	r4, r0, #0
	beq	.L7144
.L7135:
	cmp	r6, #0
	blt	.L7132
	ldr	r3, [r4, #80]
	sub	r3, r3, #14
	cmp	r3, r8
	bls	.L7133
.L7132:
	ldr	r2, [r5, #-96]
	mov	r0, r4
	ldr	r3, [r2, #248]
	add	r3, r3, #1
	str	r3, [r2, #248]
	ldr	r2, [r5, #-96]
	ldr	r3, [r2, #272]
	add	r3, r3, #1
	str	r3, [r2, #272]
	bl	dev_kfree_skb_any
	mov	r0, r7
	bl	skb_dequeue
	subs	r4, r0, #0
	bne	.L7135
.L7144:
	ldr	r3, [r5, #-96]
	ldr	r3, [r3, #160]
	tst	r3, #1
	bne	.L7145
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L7133:
	ldr	r1, [r5, #-96]
	bl	eth_type_trans
	mov	r3, r0
	mov	r0, r4
	strh	r3, [r4, #102]	@ movhi
	ldr	r2, [r5, #-96]
	ldr	r3, [r2, #232]
	add	r3, r3, #1
	str	r3, [r2, #232]
	ldr	r2, [r5, #-96]
	ldr	r1, [r4, #80]
	ldr	r3, [r2, #240]
	add	r3, r3, r1
	str	r3, [r2, #240]
	bl	netif_rx_ni
	mov	r6, r0
	b	.L7131
.L7145:
	sub	r0, r5, #104
	mov	r1, #208
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	rx_fill
	.fnend
	.size	process_rx_w, .-process_rx_w
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	eth_open, %function
eth_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	add	r5, r0, #1216
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r0, #1224]
	ldr	r3, [r3, #160]
	tst	r3, #4
	beq	.L7147
.L7148:
	mov	r0, r5
	bl	_raw_spin_lock_irq
	ldr	r0, [r4, #1220]
	cmp	r0, #0
	beq	.L7150
	ldr	r3, [r0, #128]
	cmp	r3, #0
	beq	.L7150
	blx	r3
.L7150:
	mov	r0, r5
	bl	_raw_spin_unlock_irq
	ldrd	r4, [sp]
	mov	r0, #0
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L7147:
	mov	r1, #208
	mov	r0, r5
	bl	rx_fill
	ldr	r3, [r4, #1224]
	mov	r0, #0
	str	r0, [r4, #1252]
	ldr	r6, [r3, #576]
	add	r1, r6, #80
	bl	_test_and_clear_bit
	cmp	r0, #0
	beq	.L7148
	ldr	r0, [r6, #4]
	bl	__netif_schedule
	b	.L7148
	.fnend
	.size	eth_open, .-eth_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_func_disable, %function
ffs_func_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r4, [r0, #-44]
	.pad #4
	sub	sp, sp, #4
	ldr	fp, [r4, #136]
	cmp	fp, #0
	beq	.L7162
	ldr	r3, [fp, #8]
	mov	r10, #1
	mov	r8, #0
	ldr	r5, [fp, #12]
	add	r0, r3, #28
	ldrh	r7, [r3, #184]
	ldr	r6, [r3, #220]
	add	r5, r5, #28
	bl	_raw_spin_lock_irqsave
	mov	r9, r0
	b	.L7166
.L7181:
	ldr	r3, [r3, #8]
	add	r5, r5, #28
	add	r6, r6, #60
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r5, #-56]
	subs	r7, r7, #1
	str	r8, [r3]
	str	r8, [r6, #-16]
	beq	.L7165
.L7166:
	str	r10, [r6, #36]
	ldr	r3, [r5, #-28]
	subs	r0, r3, #0
	bne	.L7181
	subs	r7, r7, #1
	add	r5, r5, #28
	str	r3, [r6, #44]
	add	r6, r6, #60
	bne	.L7166
.L7165:
	ldr	r0, [fp, #8]
	mov	r1, r9
	add	r0, r0, #28
	bl	_raw_spin_unlock_irqrestore
	mov	r3, #0
	str	r3, [r4, #136]
.L7162:
	ldr	r7, [r4, #96]
	cmp	r7, #2
	bne	.L7161
	mov	r3, #0
	add	r5, r4, #120
	mov	r0, r5
	str	r3, [r4, #136]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #100]
	mov	r6, r0
	add	lr, r4, #104
	ldrh	r2, [r4, #108]
	cmp	r3, #1
	streq	r7, [r4, #100]
	cmp	r2, #0
	beq	.L7172
	add	r1, r4, #103
	mov	r3, lr
	add	r2, r1, r2
.L7171:
	ldrb	ip, [r1, #1]!	@ zero_extendqisi2
	mov	r0, r3
	sub	r7, ip, #5
	cmp	r7, #1
	strbls	ip, [r0], #1
	movls	r3, r0
	cmp	r1, r2
	bne	.L7171
	sub	r3, r3, lr
	add	r2, r3, #1
	uxth	r3, r3
	uxth	r2, r2
.L7169:
	add	r3, r4, r3
	strh	r2, [r4, #108]	@ movhi
	mov	r1, #3
	mov	r0, r5
	mov	r2, #1
	strb	r1, [r3, #104]
	bl	__wake_up_locked
	mov	r1, r6
	mov	r0, r5
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L7172:
	mov	r3, r2
	mov	r2, #1
	b	.L7169
.L7161:
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
	.fnend
	.size	ffs_func_disable, .-ffs_func_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_unbind, %function
ncm_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r1
	str	lr, [sp, #4]
	ldr	r0, [r1, #8]
	bl	kfree
	ldr	r0, [r4, #12]
	bl	kfree
	ldr	r0, [r4, #16]
	bl	kfree
	ldr	r3, [r4, #160]
	ldr	r0, [r3]
	bl	kfree
	ldrd	r0, [r4, #156]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	movw	r3, #:lower16:.LANCHOR1
	mov	r2, #0
	movt	r3, #:upper16:.LANCHOR1
	mov	r0, r4
	str	r2, [r3, #1684]
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	kfree
	.fnend
	.size	ncm_unbind, .-ncm_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_unbind, %function
ecm_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r1
	str	lr, [sp, #4]
	ldr	r0, [r1, #8]
	bl	kfree
	ldr	r0, [r4, #12]
	bl	kfree
	ldr	r0, [r4, #16]
	bl	kfree
	ldr	r3, [r4, #160]
	ldr	r0, [r3]
	bl	kfree
	ldrd	r0, [r4, #156]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	movw	r3, #:lower16:.LANCHOR1
	mov	r2, #0
	movt	r3, #:upper16:.LANCHOR1
	mov	r0, r4
	str	r2, [r3, #1724]
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	kfree
	.fnend
	.size	ecm_unbind, .-ecm_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_function_unbind_config, %function
ncm_function_unbind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r4, #:lower16:.LANCHOR3
	movt	r4, #:upper16:.LANCHOR3
	str	lr, [sp, #4]
	ldr	r3, [r4, #-4088]
	cmp	r3, #0
	beq	.L7186
	ldr	r0, [r3, #8]
	bl	unregister_netdev
	ldr	r0, [r4, #-4088]
	add	r0, r0, #88
	bl	flush_work
	ldr	r3, [r4, #-4088]
	ldr	r0, [r3, #8]
	bl	free_netdev
	mov	r3, #0
	str	r3, [r4, #-4088]
.L7186:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	ncm_function_unbind_config, .-ncm_function_unbind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acm_unbind, %function
acm_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r0, [r1, #8]
	bl	kfree
	ldr	r0, [r4, #12]
	bl	kfree
	ldr	r0, [r4, #16]
	bl	kfree
	ldr	r5, [r4, #152]
	ldr	r6, [r4, #156]
	ldr	r0, [r6]
	bl	kfree
	ldr	r3, [r5, #8]
	mov	r1, r6
	mov	r0, r5
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r0, [r4]
	bl	kfree
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	kfree
	.fnend
	.size	acm_unbind, .-acm_unbind
	.section	.rodata.str1.4
	.align	2
.LC443:
	.ascii	"rndis0\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_function_unbind_config, %function
rndis_qc_function_unbind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r1, #:lower16:.LC443
	movw	r0, #:lower16:init_net
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movt	r1, #:upper16:.LC443
	movt	r0, #:upper16:init_net
	str	lr, [sp, #4]
	bl	dev_get_by_name
	subs	r4, r0, #0
	beq	.L7194
	.syntax divided
@ 17 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/irqflags.h" 1
		mrs	ip, cpsr	@ arch_local_irq_save
	cpsid	i
@ 0 "" 2
@ 40 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/percpu.h" 1
	mrc p15, 0, r1, c13, c0, 4
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r3, [r4, #640]
	ldr	r2, [r3, r1]
	sub	r2, r2, #1
	str	r2, [r3, r1]
	.syntax divided
@ 142 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/irqflags.h" 1
		msr	cpsr_c, ip	@ local_irq_restore
@ 0 "" 2
	.arm
	.syntax unified
	bl	unregister_netdev
	mov	r0, r4
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	free_netdev
.L7194:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	rndis_qc_function_unbind_config, .-rndis_qc_function_unbind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_function_unbind_config, %function
rndis_function_unbind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r4, #:lower16:.LANCHOR3
	movt	r4, #:upper16:.LANCHOR3
	str	lr, [sp, #4]
	ldr	r3, [r4, #-4088]
	cmp	r3, #0
	beq	.L7197
	ldr	r0, [r3, #8]
	bl	unregister_netdev
	ldr	r0, [r4, #-4088]
	add	r0, r0, #88
	bl	flush_work
	ldr	r3, [r4, #-4088]
	ldr	r0, [r3, #8]
	bl	free_netdev
	mov	r3, #0
	str	r3, [r4, #-4088]
.L7197:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	rndis_function_unbind_config, .-rndis_function_unbind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_function_unbind_config, %function
ecm_function_unbind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r4, #:lower16:.LANCHOR3
	movt	r4, #:upper16:.LANCHOR3
	str	lr, [sp, #4]
	ldr	r3, [r4, #-4088]
	cmp	r3, #0
	beq	.L7203
	ldr	r0, [r3, #8]
	bl	unregister_netdev
	ldr	r0, [r4, #-4088]
	add	r0, r0, #88
	bl	flush_work
	ldr	r3, [r4, #-4088]
	ldr	r0, [r3, #8]
	bl	free_netdev
	mov	r3, #0
	str	r3, [r4, #-4088]
.L7203:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	ecm_function_unbind_config, .-ecm_function_unbind_config
	.section	.rodata.str1.4
	.align	2
.LC444:
	.ascii	"gmidi_transmit: midi_alloc_ep_request failed\012\000"
	.align	2
.LC445:
	.ascii	"drivers/usb/gadget/f_midi.c\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_midi_transmit, %function
f_midi_transmit:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r3, [r0, #80]
	.pad #20
	sub	sp, sp, #20
	cmp	r3, #0
	str	r3, [sp, #4]
	beq	.L7209
	cmp	r1, #0
	mov	r10, r0
	mov	r5, r1
	beq	.L7256
.L7211:
	movw	r3, #:lower16:f_midi_complete
	mov	r1, #0
	movt	r3, #:upper16:f_midi_complete
	mov	r2, r1
	add	r7, r10, #92
	add	fp, r10, #156
	str	r1, [r5, #4]
	str	r3, [r5, #28]
	b	.L7242
.L7212:
	cmp	fp, r7
	beq	.L7257
.L7242:
	ldr	r4, [r7, #132]
	ldr	r6, [r7, #4]!
	cmp	r4, #0
	beq	.L7212
	ldr	r3, [r4, #4]
	cmp	r6, #0
	cmpne	r3, #0
	beq	.L7212
	ldr	r3, [r10, #328]
	add	r1, r2, #3
	cmp	r1, r3
	bcs	.L7212
	mov	r8, #1
	b	.L7241
.L7259:
	ldm	r5, {r0, r2}
	orr	r3, r3, #15
	mov	ip, #0
	strb	r3, [r0, r2]
	add	r3, r0, r2
	add	r2, r2, #4
	strb	r1, [r3, #1]
	strb	ip, [r3, #2]
	strb	ip, [r3, #3]
	str	r2, [r5, #4]
.L7215:
	ldr	r3, [r10, #328]
	add	r1, r2, #3
	cmp	r1, r3
	bcs	.L7212
.L7241:
	mov	r2, #1
	add	r1, sp, #15
	mov	r0, r6
	bl	snd_rawmidi_transmit
	cmp	r0, #1
	bne	.L7258
	ldrb	r3, [r4, #8]	@ zero_extendqisi2
	ldrb	r1, [sp, #15]	@ zero_extendqisi2
	lsl	r3, r3, #4
	cmp	r1, #247
	uxtb	r3, r3
	bhi	.L7259
	cmp	r1, #239
	bhi	.L7260
	tst	r1, #128
	bne	.L7261
	ldrb	r2, [r4, #9]	@ zero_extendqisi2
	sub	r2, r2, #1
	cmp	r2, #5
	ldrls	pc, [pc, r2, asl #2]
	b	.L7255
.L7231:
	.word	.L7236
	.word	.L7235
	.word	.L7234
	.word	.L7233
	.word	.L7232
	.word	.L7230
.L7230:
	ldr	r0, [r5]
	orr	r3, r3, #4
	ldr	r9, [r5]
	ldr	r2, [r5, #4]
	ldrb	lr, [r4, #10]	@ zero_extendqisi2
	ldrb	ip, [r4, #11]	@ zero_extendqisi2
	add	r0, r0, r2
	strb	r3, [r9, r2]
	add	r2, r2, #4
	mov	r3, #4
	strb	lr, [r0, #1]
	strb	ip, [r0, #2]
	strb	r1, [r0, #3]
	str	r2, [r5, #4]
	strb	r3, [r4, #9]
.L7255:
	ldr	r2, [r5, #4]
	b	.L7215
.L7232:
	mov	r3, #6
	strb	r3, [r4, #9]
	strb	r1, [r4, #11]
	ldr	r2, [r5, #4]
	b	.L7215
.L7233:
	mov	r3, #5
	strb	r3, [r4, #9]
	strb	r1, [r4, #10]
	ldr	r2, [r5, #4]
	b	.L7215
.L7234:
	ldrb	ip, [r4, #10]	@ zero_extendqisi2
	ldrb	lr, [r4, #11]	@ zero_extendqisi2
	cmp	ip, #239
	movls	r2, #2
	movhi	r2, #0
	orrls	r3, r3, ip, lsr #4
	orrhi	r3, r3, #3
	strb	r2, [r4, #9]
	ldr	r0, [r5]
	ldr	r9, [r5]
	ldr	r2, [r5, #4]
	add	r0, r0, r2
	strb	r3, [r9, r2]
	add	r2, r2, #4
	strb	ip, [r0, #1]
	strb	lr, [r0, #2]
	strb	r1, [r0, #3]
	str	r2, [r5, #4]
	b	.L7215
.L7235:
	mov	r3, #3
	strb	r3, [r4, #9]
	strb	r1, [r4, #11]
	ldr	r2, [r5, #4]
	b	.L7215
.L7236:
	ldrb	ip, [r4, #10]	@ zero_extendqisi2
	mov	lr, #0
	cmp	ip, #239
	movhi	r2, #0
	orrls	r3, r3, ip, lsr #4
	orrhi	r3, r3, #2
	strbhi	r2, [r4, #9]
	ldm	r5, {r0, r2}
	strb	r3, [r0, r2]
	add	r3, r0, r2
	add	r2, r2, #4
	strb	ip, [r3, #1]
	strb	r1, [r3, #2]
	strb	lr, [r3, #3]
	str	r2, [r5, #4]
	b	.L7215
.L7260:
	sub	r2, r1, #241
	cmp	r2, #6
	ldrls	pc, [pc, r2, asl #2]
	b	.L7217
.L7219:
	.word	.L7222
	.word	.L7223
	.word	.L7222
	.word	.L7226
	.word	.L7226
	.word	.L7220
	.word	.L7218
.L7225:
	ldrb	lr, [r4, #10]	@ zero_extendqisi2
	orr	r3, r3, #7
	mvn	r0, #8
	ldrb	ip, [r4, #11]	@ zero_extendqisi2
	ldr	r2, [r5]
	ldr	r1, [r5, #4]
.L7254:
	strb	r3, [r2, r1]
	add	r3, r2, r1
	add	r1, r1, #4
	strb	lr, [r3, #1]
	strb	ip, [r3, #2]
	strb	r0, [r3, #3]
	str	r1, [r5, #4]
.L7226:
	mov	r3, #0
	strb	r3, [r4, #9]
	ldr	r2, [r5, #4]
	b	.L7215
.L7223:
	mov	r2, #2
	mvn	r3, #13
	strb	r2, [r4, #9]
	strb	r3, [r4, #10]
	ldr	r2, [r5, #4]
	b	.L7215
.L7222:
	strb	r8, [r4, #9]
	strb	r1, [r4, #10]
	ldr	r2, [r5, #4]
	b	.L7215
.L7218:
	ldrb	r2, [r4, #9]	@ zero_extendqisi2
	cmp	r2, #5
	beq	.L7224
	cmp	r2, #6
	beq	.L7225
	cmp	r2, #4
	bne	.L7226
	ldr	r2, [r5]
	orr	r3, r3, #5
	mov	r0, #0
	ldr	r1, [r5, #4]
	mvn	ip, #8
	strb	r3, [r2, r1]
	add	r3, r2, r1
	add	r1, r1, #4
	strb	ip, [r3, #1]
	strb	r0, [r3, #2]
	strb	r0, [r3, #3]
	mov	r3, #0
	str	r1, [r5, #4]
	strb	r3, [r4, #9]
	ldr	r2, [r5, #4]
	b	.L7215
.L7220:
	ldr	r2, [r5]
	orr	r3, r3, #5
	mov	r0, #0
	ldr	r1, [r5, #4]
	mvn	ip, #9
	strb	r3, [r2, r1]
	add	r3, r2, r1
	add	r1, r1, #4
	strb	ip, [r3, #1]
	strb	r0, [r3, #2]
	strb	r0, [r3, #3]
	str	r1, [r5, #4]
	strb	r0, [r4, #9]
	ldr	r2, [r5, #4]
	b	.L7215
.L7261:
	add	r3, r1, #64
	strb	r1, [r4, #10]
	uxtb	r3, r3
	cmp	r3, #31
	movhi	r3, #2
	strbls	r0, [r4, #9]
	strbhi	r3, [r4, #9]
	ldr	r2, [r5, #4]
	b	.L7215
.L7258:
	mov	r3, #0
	cmp	fp, r7
	str	r3, [r4, #4]
	ldr	r2, [r5, #4]
	bne	.L7242
.L7257:
	cmp	r2, #0
	beq	.L7243
	ldr	r0, [sp, #4]
	mov	r1, r5
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
.L7209:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L7243:
	ldr	r0, [r5]
	cmp	r0, #0
	beq	.L7262
.L7244:
	bl	kfree
	ldr	r0, [sp, #4]
	mov	r3, #0
	mov	r1, r5
	str	r3, [r5]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	b	.L7209
.L7224:
	ldrb	lr, [r4, #10]	@ zero_extendqisi2
	orr	r3, r3, #6
	mvn	ip, #8
	mov	r0, #0
	ldr	r2, [r5]
	ldr	r1, [r5, #4]
	b	.L7254
.L7256:
	mov	r0, r3
	ldr	r1, [r10, #328]
	bl	midi_alloc_ep_req
	subs	r5, r0, #0
	bne	.L7211
	ldr	r0, [r10, #76]
	movw	r1, #:lower16:.LC444
	movt	r1, #:upper16:.LC444
	add	r0, r0, #32
	bl	dev_err
	b	.L7209
.L7262:
	movw	r0, #:lower16:.LC445
	mov	r1, #218
	movt	r0, #:upper16:.LC445
	bl	warn_slowpath_null
	ldr	r0, [r5]
	b	.L7244
.L7217:
	mov	r2, #5
	mvn	r3, #15
	strb	r2, [r4, #9]
	strb	r3, [r4, #10]
	ldr	r2, [r5, #4]
	b	.L7215
	.fnend
	.size	f_midi_transmit, .-f_midi_transmit
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_midi_in_tasklet, %function
f_midi_in_tasklet:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r1, #0
	b	f_midi_transmit
	.fnend
	.size	f_midi_in_tasklet, .-f_midi_in_tasklet
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	frmnet_suspend, %function
frmnet_suspend:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	movw	r6, #:lower16:.LANCHOR0
	strd	r8, [sp, #16]
	movt	r6, #:upper16:.LANCHOR0
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrb	r3, [r0, #108]	@ zero_extendqisi2
	.pad #4
	sub	sp, sp, #4
	add	r3, r3, r3, lsl #1
	add	r3, r6, r3, lsl #3
	ldr	r5, [r3, #220]
	sub	r2, r5, #1
	cmp	r2, #9
	movwhi	r8, #:lower16:.LC364
	movthi	r8, #:upper16:.LC364
	bhi	.L7265
	movw	r3, #:lower16:.LANCHOR2
	movt	r3, #:upper16:.LANCHOR2
	add	r3, r3, r2, lsl #2
	ldr	r8, [r3, #2460]
.L7265:
	ldr	r0, [r4, #128]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L7266
	blx	r3
.L7266:
	add	r9, r4, #124
	add	r7, r4, #136
	mov	r0, r9
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #136]
	mov	fp, r0
	cmp	r7, r3
	beq	.L7267
.L7268:
	ldr	ip, [r3]
	mov	r2, #256
	mov	r10, r3
	ldr	r0, [r3, #4]
	str	r0, [ip, #4]
	str	ip, [r0]
	str	r2, [r3]
	mov	r2, #512
	str	r2, [r3, #4]
	ldr	r0, [r10, #-8]!
	bl	kfree
	mov	r0, r10
	bl	kfree
	ldr	r3, [r4, #136]
	cmp	r7, r3
	bne	.L7268
.L7267:
	mov	r3, #0
	mov	r1, fp
	mov	r0, r9
	str	r3, [r4, #144]
	bl	_raw_spin_unlock_irqrestore
	cmp	r5, #7
	bhi	.L7269
	cmp	r5, #5
	bhi	.L7270
	bne	.L7272
.L7264:
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L7269:
	sub	r5, r5, #8
	cmp	r5, #2
	bls	.L7264
.L7272:
	ldr	r1, .L7279
	movw	r0, #:lower16:.LC365
	mov	r2, r8
	movt	r0, #:upper16:.LC365
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	printk
.L7270:
	ldrb	r3, [r4, #108]	@ zero_extendqisi2
	ldr	r0, [r6, #2796]
	add	r3, r3, r3, lsl #1
	add	r3, r6, r3, lsl #3
	ldrb	r3, [r3, #228]	@ zero_extendqisi2
	add	r6, r6, r3, lsl #2
	ldr	r1, [r6, #3696]
	add	r1, r1, #316
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	queue_work
.L7280:
	.align	2
.L7279:
	.word	.LANCHOR2+3696
	.fnend
	.size	frmnet_suspend, .-frmnet_suspend
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_midi_unbind, %function
f_midi_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r0, [r1, #80]
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r1
	str	lr, [sp, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #84]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #88]
	mov	r3, #0
	str	r3, [r4, #88]
	cmp	r0, r3
	beq	.L7282
	bl	snd_card_free
.L7282:
	ldr	r0, [r4, #324]
	bl	kfree
	mov	r3, #0
	ldr	r0, [r4, #8]
	str	r3, [r4, #324]
	bl	kfree
	ldr	r0, [r4, #12]
	bl	kfree
	ldr	r0, [r4, #16]
	bl	kfree
	mov	r0, r4
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	kfree
	.fnend
	.size	f_midi_unbind, .-f_midi_unbind
	.section	.rodata.str1.4
	.align	2
.LC446:
	.ascii	"driver/rndis-%03d\000"
	.section	.rodata.cst4
	.align	2
.LC447:
	.word	__stack_chk_guard
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_unbind, %function
rndis_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LC447
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	mov	r4, r1
	movt	r3, #:upper16:.LC447
	str	lr, [sp, #8]
	.pad #28
	sub	sp, sp, #28
	ldr	r3, [r3]
	str	r3, [sp, #20]
	mov	r3,#0
	ldr	r3, [r1, #156]
	cmp	r3, #0
	bgt	.L7288
	rsb	r3, r3, r3, lsl #4
	movw	r2, #:lower16:.LANCHOR0
	movt	r2, #:upper16:.LANCHOR0
	add	r3, r2, r3, lsl #2
	mov	r2, #0
	strb	r2, [r3, #3717]
.L7288:
	movw	r3, #:lower16:.LANCHOR3
	movt	r3, #:upper16:.LANCHOR3
	ldrb	r2, [r3, #-4084]	@ zero_extendqisi2
	cmp	r2, #0
	bne	.L7295
.L7289:
	ldr	r0, [r4, #8]
	bl	kfree
	ldr	r0, [r4, #12]
	bl	kfree
	ldr	r0, [r4, #16]
	bl	kfree
	ldr	r3, [r4, #164]
	ldr	r0, [r3]
	bl	kfree
	ldrd	r0, [r4, #160]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	mov	r0, r4
	bl	kfree
	movw	r3, #:lower16:.LC447
	movt	r3, #:upper16:.LC447
	ldr	r2, [r3]
	ldr	r3, [sp, #20]
	eors	r2, r3, r2
	bne	.L7296
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	add	sp, sp, #8
	ldr	pc, [sp], #4
.L7295:
	mov	r5, #0
	movw	r1, #:lower16:.LC446
	mov	r2, r5
	movt	r1, #:upper16:.LC446
	mov	r0, sp
	strb	r5, [r3, #-4084]
	bl	sprintf
	mov	r0, sp
	mov	r1, r5
	bl	remove_proc_entry
	b	.L7289
.L7296:
	bl	__stack_chk_fail
	.fnend
	.size	rndis_unbind, .-rndis_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_func_set_alt, %function
ffs_func_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	cmn	r2, #1
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	mov	r6, r2
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	ldr	r10, [r0, #-44]
	str	r0, [sp]
	beq	.L7298
	mov	r3, r0
	ldrh	r0, [r10, #182]
	ldr	ip, [r3, #-8]
	cmp	r0, #0
	beq	.L7322
	uxtb	r2, r1
	mov	r3, ip
.L7301:
	mov	r4, r3
	ldrsh	r1, [r3], #2
	cmp	r1, #0
	blt	.L7300
	cmp	r1, r2
	beq	.L7348
.L7300:
	subs	r0, r0, #1
	bne	.L7301
.L7322:
	mvn	r4, #32
	b	.L7297
.L7348:
	subs	r4, r4, ip
	asrmi	r4, r4, #1
	bmi	.L7297
.L7298:
	ldr	r8, [r10, #136]
	cmp	r8, #0
	beq	.L7302
	ldr	r3, [r8, #8]
	mov	r7, #1
	mov	r5, #0
	ldr	r4, [r8, #12]
	add	r0, r3, #28
	ldrh	r9, [r3, #184]
	ldr	fp, [r3, #220]
	add	r4, r4, #28
	bl	_raw_spin_lock_irqsave
	str	r0, [sp, #4]
	b	.L7306
.L7349:
	ldr	r3, [r3, #8]
	add	r4, r4, #28
	add	fp, fp, #60
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #-56]
	subs	r9, r9, #1
	str	r5, [r3]
	str	r5, [fp, #-16]
	beq	.L7305
.L7306:
	str	r7, [fp, #36]
	ldr	r3, [r4, #-28]
	subs	r0, r3, #0
	bne	.L7349
	subs	r9, r9, #1
	add	r4, r4, #28
	str	r3, [fp, #44]
	add	fp, fp, #60
	bne	.L7306
.L7305:
	ldr	r0, [r8, #8]
	ldr	r1, [sp, #4]
	add	r0, r0, #28
	bl	_raw_spin_unlock_irqrestore
	mov	r3, #0
	str	r3, [r10, #136]
.L7302:
	ldr	r4, [r10, #96]
	cmp	r4, #2
	bne	.L7323
	cmn	r6, #1
	beq	.L7350
	ldr	r2, [sp]
	sub	r3, r2, #52
	str	r3, [r10, #136]
	ldr	fp, [r2, #-44]
	ldr	r5, [r2, #-40]
	ldr	r6, [fp, #220]
	add	r0, fp, #28
	ldrh	r9, [fp, #184]
	add	r5, r5, #28
	bl	_raw_spin_lock_irqsave
	str	r0, [sp, #4]
	add	r6, r6, #24
	b	.L7315
.L7352:
	str	r8, [r6, #20]
	ldrb	ip, [r7, #2]	@ zero_extendqisi2
	add	r6, r6, #60
	lsr	ip, ip, #7
	strb	ip, [r6, #-27]
	ldrb	ip, [r7, #3]	@ zero_extendqisi2
	and	ip, ip, r1
	sub	ip, ip, r2
	clz	ip, ip
	lsr	ip, ip, #5
	strb	ip, [r6, #-26]
	bl	__wake_up
	subs	r9, r9, #1
	beq	.L7351
.L7315:
	ldr	r3, [fp]
	sub	r8, r5, #28
	ldr	r3, [r3, #16]
	cmp	r3, #5
	subne	r3, r3, #3
	moveq	r3, #2
	clzne	r3, r3
	lsrne	r3, r3, #5
	add	r3, r3, #2
	ldr	r7, [r8, r3, lsl #2]
	cmp	r7, #0
	beq	.L7313
	ldr	r3, [r5, #-28]
	add	r5, r5, #28
	str	r8, [r3]
	ldr	r3, [r5, #-56]
	str	r7, [r3, #28]
	ldr	r3, [r5, #-56]
	ldr	r1, [r3, #28]
	mov	r0, r3
	ldrh	r2, [r1, #4]	@ unaligned
	cmp	r2, #0
	beq	.L7313
	ldr	r3, [r3, #8]
	ldr	r3, [r3]
	blx	r3
	mov	r4, r0
	mov	r2, #1
	cmp	r4, #0
	mov	r0, r6
	mov	r1, #3
	mov	r3, r4
	beq	.L7352
	ldr	r3, [sp]
	ldr	r1, [sp, #4]
	ldr	r0, [r3, #-44]
	add	r0, r0, #28
	bl	_raw_spin_unlock_irqrestore
	cmp	r4, #0
	blt	.L7297
.L7321:
	add	r5, r10, #120
	add	r7, r10, #104
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r10, #100]
	mov	r6, r0
	ldrh	lr, [r10, #108]
	cmp	r3, #1
	moveq	r3, #2
	streq	r3, [r10, #100]
	cmp	lr, #0
	beq	.L7326
	add	r3, r10, #103
	mov	r0, r7
	add	lr, r3, lr
.L7320:
	ldrb	r2, [r3, #1]!	@ zero_extendqisi2
	mov	r1, r0
	sub	ip, r2, #5
	cmp	ip, #1
	strbls	r2, [r1], #1
	movls	r0, r1
	cmp	lr, r3
	bne	.L7320
	sub	lr, r0, r7
	add	r3, lr, #1
	uxth	lr, lr
	uxth	r3, r3
.L7318:
	add	lr, r10, lr
	strh	r3, [r10, #108]	@ movhi
	mov	r0, #2
	mov	r1, #3
	mov	r2, #1
	strb	r0, [lr, #104]
	mov	r0, r5
	bl	__wake_up_locked
	mov	r1, r6
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
.L7297:
	mov	r0, r4
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L7313:
	ldr	r3, [sp]
	mvn	r4, #21
	ldr	r1, [sp, #4]
	ldr	r0, [r3, #-44]
	add	r0, r0, #28
	bl	_raw_spin_unlock_irqrestore
	b	.L7297
.L7350:
	mov	r3, #0
	add	r5, r10, #120
	mov	r0, r5
	str	r3, [r10, #136]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r10, #100]
	mov	r6, r0
	ldrh	lr, [r10, #108]
	cmp	r3, #1
	streq	r4, [r10, #100]
	cmp	lr, #0
	add	r4, r10, #104
	beq	.L7324
	add	r3, r10, #103
	mov	r1, r4
	add	lr, r3, lr
.L7311:
	ldrb	r2, [r3, #1]!	@ zero_extendqisi2
	mov	r0, r1
	sub	ip, r2, #5
	cmp	ip, #1
	strbls	r2, [r0], #1
	movls	r1, r0
	cmp	r3, lr
	bne	.L7311
.L7309:
	sub	r3, r1, r4
	mov	r1, #3
	add	r2, r3, #1
	uxtah	r3, r10, r3
	mov	r0, r5
	strh	r2, [r10, #108]	@ movhi
	mov	r2, #1
	mov	r4, #0
	strb	r1, [r3, #104]
	bl	__wake_up_locked
	mov	r1, r6
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	b	.L7297
.L7351:
	ldr	r3, [sp]
	ldr	r1, [sp, #4]
	ldr	r0, [r3, #-44]
	add	r0, r0, #28
	bl	_raw_spin_unlock_irqrestore
	b	.L7321
.L7326:
	mov	r3, #1
	b	.L7318
.L7324:
	mov	r1, r4
	b	.L7309
.L7323:
	mvn	r4, #18
	b	.L7297
	.fnend
	.size	ffs_func_set_alt, .-ffs_func_set_alt
	.section	.rodata.str1.4
	.align	2
.LC448:
	.ascii	"<6>%s: usb cable is not connected\012\000"
	.align	2
.LC449:
	.ascii	"<3>%s: w_length > 0: %d\000"
	.align	2
.LC450:
	.ascii	"<3>%s: ctrl resp queue empty\012\000"
	.align	2
.LC451:
	.ascii	"<3>%s: wrong NTB length %d\000"
	.align	2
.LC452:
	.ascii	"<3>%s: invalid control req: %02x.%02x v%04x i%04x l"
	.ascii	"%d\012\000"
	.align	2
.LC453:
	.ascii	"<3>%s: queueing req failed: %02x.%02x, err %d\012\000"
	.align	2
.LC454:
	.ascii	"<3>%s: ctrl req err %d: %02x.%02x v%04x i%04x l%d\012"
	.ascii	"\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_setup, %function
mbim_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r9, [r0, #76]
	.pad #28
	sub	sp, sp, #28
	ldr	r3, [r0, #80]
	ldrh	r8, [r1, #4]	@ unaligned
	ldrh	r7, [r1, #2]	@ unaligned
	ldrh	r6, [r1, #6]	@ unaligned
	cmp	r3, #0
	ldr	r4, [r9, #4]
	beq	.L7376
	ldrh	r3, [r1]	@ unaligned
	movw	r2, #41217
	mov	r10, r0
	mov	r5, r1
	rev16	r3, r3
	uxth	r3, r3
	cmp	r3, r2
	beq	.L7356
	bgt	.L7357
	movw	r2, #8580
	cmp	r3, r2
	beq	.L7358
	bgt	.L7359
	cmp	r3, #8448
	bne	.L7377
	movw	r3, #:lower16:fmbim_cmd_complete
	mov	r8, r6
	str	r0, [r4, #32]
	movt	r3, #:upper16:fmbim_cmd_complete
	mov	r7, #0
	str	r3, [r4, #28]
.L7367:
	ldrb	r3, [r4, #26]	@ zero_extendqisi2
	str	r8, [r4, #4]
	mov	r1, r4
	mov	r2, #32
	bfi	r3, r7, #1, #1
	strb	r3, [r4, #26]
	ldr	r3, [r9]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	blt	.L7378
.L7353:
	mov	r0, r4
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L7377:
	movw	r2, #8453
	cmp	r3, r2
	bne	.L7362
	movw	r3, #:lower16:fmbim_reset_cmd_complete
	subs	r7, r6, #0
	str	r0, [r4, #32]
	movt	r3, #:upper16:fmbim_reset_cmd_complete
	movne	r7, #1
	mov	r8, #0
	str	r3, [r4, #28]
	b	.L7367
.L7359:
	movw	r2, #8582
	cmp	r3, r2
	bne	.L7362
	sub	r3, r6, #4
	bic	r3, r3, #4
	uxth	r3, r3
	cmp	r3, #0
	bne	.L7379
	cmp	r7, #0
	bne	.L7369
	ldrb	r3, [r0, #188]	@ zero_extendqisi2
	cmp	r3, r8
	bne	.L7369
	movw	r3, #:lower16:mbim_ep0out_complete
	mov	r8, r6
	str	r0, [r4, #32]
	movt	r3, #:upper16:mbim_ep0out_complete
	str	r3, [r4, #28]
	b	.L7367
.L7357:
	movw	r2, #41347
	cmp	r3, r2
	beq	.L7364
	movw	r2, #41349
	cmp	r3, r2
	bne	.L7380
	subs	r3, r7, #0
	movne	r3, #1
	cmp	r6, #3
	orrls	r3, r3, #1
	cmp	r3, #0
	bne	.L7369
	ldrb	r3, [r0, #188]	@ zero_extendqisi2
	cmp	r3, r8
	bne	.L7369
	ldr	r2, [r0, #216]
	cmp	r6, #4
	mov	r8, #4
	ldr	r3, [r4]
	movls	r7, #0
	movhi	r7, #1
	lsr	r1, r2, #16
	ubfx	r0, r2, #8, #8
	strb	r2, [r3]
	lsr	r2, r1, #8
	strb	r0, [r3, #1]
	strb	r1, [r3, #2]
	strb	r2, [r3, #3]
	b	.L7367
.L7380:
	movw	r2, #41344
	cmp	r3, r2
	bne	.L7362
	subs	r3, r7, #0
	movne	r3, #1
	cmp	r6, #0
	moveq	r3, #1
	cmp	r3, #0
	bne	.L7369
	ldrb	r3, [r0, #188]	@ zero_extendqisi2
	cmp	r3, r8
	bne	.L7369
	cmp	r6, #28
	ldr	r1, .L7383
	movcc	r8, r6
	movcs	r8, #28
	ldr	r0, [r4]
	mov	r2, r8
	bl	memcpy
	cmp	r8, r6
	movcs	r7, #0
	movcc	r7, #1
	b	.L7367
.L7358:
	cmp	r6, #0
	bne	.L7369
	ldrb	r3, [r0, #188]	@ zero_extendqisi2
	cmp	r3, r8
	bne	.L7369
	cmp	r7, #0
	beq	.L7373
	cmp	r7, #1
	movne	r8, r6
	movne	r7, r8
	bne	.L7367
	ldr	r3, .L7383+4
	mov	r8, r6
	mov	r7, r6
	str	r3, [r0, #192]
	b	.L7367
.L7364:
	subs	r3, r7, #0
	movne	r3, #1
	cmp	r6, #1
	orrls	r3, r3, #1
	cmp	r3, #0
	bne	.L7369
	ldrb	r2, [r0, #188]	@ zero_extendqisi2
	cmp	r2, r8
	bne	.L7369
	ldr	r0, .L7383+8
	cmp	r6, #2
	mov	r8, #2
	ldr	r2, [r10, #192]
	movls	r7, #0
	movhi	r7, #1
	ldr	r1, [r4]
	subs	r2, r2, r0
	movne	r2, #1
	strb	r2, [r1]
	strb	r3, [r1, #1]
	b	.L7367
.L7356:
	cmp	r7, #0
	bne	.L7381
	add	r3, r0, #196
	mov	r0, r3
	str	r3, [sp, #20]
	bl	_raw_spin_lock
	ldr	fp, [r10, #208]!
	ldr	r3, [sp, #20]
	cmp	fp, r10
	beq	.L7382
	mov	r0, r3
	ldrd	r2, [fp]
	mov	ip, #256
	mov	r1, #512
	sub	r7, fp, #8
	str	r3, [r2, #4]
	str	r2, [r3]
	str	ip, [fp]
	str	r1, [fp, #4]
	bl	_raw_spin_unlock
	ldmdb	fp, {r1, r8}
	ldr	r0, [r4]
	cmp	r6, r8
	movcc	r8, r6
	mov	r2, r8
	bl	memcpy
	cmp	r7, #0
	beq	.L7371
	ldr	r0, [fp, #-8]
	bl	kfree
	mov	r0, r7
	bl	kfree
	cmp	r8, r6
	movge	r7, #0
	movlt	r7, #1
	b	.L7367
.L7371:
	cmp	r8, r6
	movge	r7, #0
	movlt	r7, #1
	b	.L7367
.L7373:
	ldr	r3, .L7383+8
	mov	r8, r7
	str	r3, [r0, #192]
	b	.L7367
.L7379:
	movw	r0, #:lower16:.LC451
	ldr	r1, .L7383+12
	mov	r2, r6
	movt	r0, #:upper16:.LC451
	bl	printk
.L7369:
	ldrb	ip, [r5, #1]	@ zero_extendqisi2
	movw	r0, #:lower16:.LC454
	mvn	r2, #94
	ldr	r1, .L7383+12
	movt	r0, #:upper16:.LC454
	str	r7, [sp, #4]
	ldrb	r3, [r5]	@ zero_extendqisi2
	mov	r4, r2
	str	ip, [sp]
	str	r8, [sp, #8]
	str	r6, [sp, #12]
	bl	printk
	b	.L7353
.L7362:
	movw	r0, #:lower16:.LC452
	ldrb	r3, [r5, #1]	@ zero_extendqisi2
	str	r7, [sp]
	ldr	r1, .L7383+12
	movt	r0, #:upper16:.LC452
	ldrb	r2, [r5]	@ zero_extendqisi2
	str	r8, [sp, #4]
	str	r6, [sp, #8]
	bl	printk
	b	.L7369
.L7378:
	movw	r0, #:lower16:.LC453
	ldrb	r3, [r5, #1]	@ zero_extendqisi2
	str	r4, [sp]
	ldr	r1, .L7383+12
	movt	r0, #:upper16:.LC453
	ldrb	r2, [r5]	@ zero_extendqisi2
	bl	printk
	b	.L7353
.L7376:
	movw	r0, #:lower16:.LC448
	ldr	r1, .L7383+12
	mvn	r4, #106
	movt	r0, #:upper16:.LC448
	bl	printk
	b	.L7353
.L7382:
	movw	r0, #:lower16:.LC450
	ldr	r1, .L7383+12
	movt	r0, #:upper16:.LC450
	bl	printk
	ldr	r3, [sp, #20]
	mov	r0, r3
	bl	_raw_spin_unlock
	b	.L7369
.L7381:
	movw	r0, #:lower16:.LC449
	ldr	r1, .L7383+12
	mov	r2, r6
	movt	r0, #:upper16:.LC449
	bl	printk
	b	.L7369
.L7384:
	.align	2
.L7383:
	.word	.LANCHOR1+136
	.word	.LANCHOR1+1796
	.word	.LANCHOR1+1752
	.word	.LANCHOR2+3712
	.fnend
	.size	mbim_setup, .-mbim_setup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mtp_write, %function
mtp_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 40
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	mov	r6, r2
	strd	r8, [sp, #16]
	mov	r8, r1
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r4, [r0, #132]
	.pad #44
	sub	sp, sp, #44
	str	r2, [sp, #12]
	add	r7, r4, #80
	mov	r0, r7
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #96]
	cmp	r3, #3
	beq	.L7424
	cmp	r3, #0
	beq	.L7425
	mov	r3, #2
	mov	r0, r7
	str	r3, [r4, #96]
	bl	_raw_spin_unlock_irq
	ldr	r3, [r4, #84]
	ldrh	r3, [r3, #20]
	sub	r3, r3, #1
	tst	r3, r6
	movne	r3, r6
	orreq	r3, r6, #1
	moveq	r2, #1
	movne	r2, #0
	cmp	r3, #0
	str	r2, [sp, #4]
	beq	.L7389
	mov	r3, sp
	str	r8, [sp, #8]
	bic	r9, r3, #8128
	bic	r9, r9, #63
.L7404:
	ldr	r3, [r4, #96]
	cmp	r6, #0
	ldr	r2, [sp, #4]
	moveq	r2, #0
	cmp	r3, #2
	str	r2, [sp, #4]
	bne	.L7406
	mov	r0, r7
	add	fp, r4, #108
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #108]
	mov	r1, r0
	cmp	fp, r3
	beq	.L7426
	ldr	ip, [r3]
	mov	lr, #512
	mov	r8, #256
	ldr	r2, [r3, #4]
	sub	r5, r3, #36
	mov	r0, r7
	str	r2, [ip, #4]
	str	ip, [r2]
	stm	r3, {r8, lr}
	bl	_raw_spin_unlock_irqrestore
	cmp	r5, #0
	beq	.L7392
.L7393:
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r10, [r3, #1840]
	cmp	r10, r6
	movcc	r3, r10
	movcs	r3, r6
	movcs	r10, r6
	cmp	r3, #0
	beq	.L7401
	ldr	r3, [r9, #8]
	ldr	r1, [sp, #8]
	.syntax divided
@ 439 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/uaccess.h" 1
	adds r2, r1, r10; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	ldr	r0, [r5]
	beq	.L7427
	mov	r1, r10
	bl	__memzero
	mvn	r3, #13
	str	r3, [sp, #12]
.L7403:
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #112]
	add	r2, r5, #36
	mov	r1, r0
	mov	r0, r7
	str	r2, [r4, #112]
	str	fp, [r5, #36]
	str	r3, [r5, #40]
	str	r2, [r3]
	bl	_raw_spin_unlock_irqrestore
.L7389:
	mov	r0, r7
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #96]
	cmp	r3, #3
	beq	.L7412
	cmp	r3, #0
	movne	r3, #1
	strne	r3, [r4, #96]
.L7405:
	mov	r0, r7
	bl	_raw_spin_unlock_irq
.L7385:
	ldr	r0, [sp, #12]
	add	sp, sp, #44
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L7427:
	mov	r2, r10
	bl	__copy_from_user
	cmp	r0, #0
	bne	.L7428
.L7401:
	str	r10, [r5, #4]
	ldr	r0, [r4, #84]
	mov	r2, #208
	mov	r1, r5
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L7411
	ldr	r3, [sp, #8]
	sub	r6, r6, r10
	add	r3, r3, r10
	str	r3, [sp, #8]
	ldr	r3, [sp, #4]
	orrs	r3, r3, r6
	bne	.L7404
	b	.L7389
.L7426:
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
.L7392:
	ldr	r3, [r4, #96]
	cmp	r3, #2
	bne	.L7407
	ldr	r0, [r9, #12]
	movw	r2, #:lower16:autoremove_wake_function
	add	r1, sp, #32
	movt	r2, #:upper16:autoremove_wake_function
	mov	r3, #0
	add	r10, r4, #136
	str	r3, [sp, #20]
	str	r0, [sp, #24]
	str	r2, [sp, #28]
	str	r1, [sp, #32]
	str	r1, [sp, #36]
	b	.L7398
.L7394:
	ldm	r3, {r8, lr}
	str	lr, [r8, #4]
	str	r8, [lr]
	str	ip, [r3]
	str	r2, [r3, #4]
	bl	_raw_spin_unlock_irqrestore
	cmp	r5, #0
	bne	.L7396
	ldr	r3, [r4, #96]
	cmp	r3, #2
	bne	.L7408
.L7429:
	ldr	r3, [r9, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	bne	.L7409
	bl	schedule
.L7398:
	mov	r2, #1
	add	r1, sp, #20
	mov	r0, r10
	bl	prepare_to_wait
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #108]
	mov	r1, r0
	mov	ip, #256
	mov	r2, #512
	mov	r0, r7
	cmp	fp, r3
	sub	r5, r3, #36
	bne	.L7394
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r4, #96]
	cmp	r3, #2
	beq	.L7429
.L7408:
	mov	r3, #0
	str	r3, [sp, #12]
	b	.L7397
.L7409:
	mov	r3, #65024
	movt	r3, 65535
	str	r3, [sp, #12]
.L7397:
	add	r1, sp, #20
	mov	r0, r10
	bl	finish_wait
	b	.L7389
.L7407:
	mov	r3, #0
	str	r3, [sp, #12]
	b	.L7389
.L7396:
	add	r1, sp, #20
	mov	r0, r10
	bl	finish_wait
	b	.L7393
.L7412:
	mvn	r3, #124
	str	r3, [sp, #12]
	b	.L7405
.L7406:
	mvn	r3, #4
	str	r3, [sp, #12]
	b	.L7389
.L7411:
	mvn	r3, #4
	str	r3, [sp, #12]
	b	.L7403
.L7425:
	mvn	r3, #18
	mov	r0, r7
	str	r3, [sp, #12]
	bl	_raw_spin_unlock_irq
	b	.L7385
.L7424:
	mov	r3, #1
	mvn	r2, #124
	mov	r0, r7
	str	r3, [r4, #96]
	str	r2, [sp, #12]
	bl	_raw_spin_unlock_irq
	b	.L7385
.L7428:
	mvn	r3, #13
	str	r3, [sp, #12]
	b	.L7403
	.fnend
	.size	mtp_write, .-mtp_write
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	send_file_work, %function
send_file_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 64
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	mov	r6, r0
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #68
	sub	sp, sp, #68
	.syntax divided
@ 751 "drivers/usb/gadget/f_mtp.c" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r1, [r0, #32]
	ldr	r4, [r0, #56]
	ldrd	r2, [r0, #40]
	ldrd	r8, [r0, #48]
	str	r1, [sp, #8]
	cmp	r4, #0
	strd	r2, [sp, #32]
	beq	.L7431
	adds	r8, r8, #12
	mov	r4, #12
	adc	r9, r9, #0
.L7431:
	ldr	r3, [r6, #-92]
	ldrh	r3, [r3, #20]
	sub	r3, r3, #1
	asr	r1, r3, #31
	and	r3, r3, r8
	and	r2, r1, r9
	orrs	r3, r3, r2
	moveq	r3, #1
	movne	r3, #0
	cmp	r8, #1
	mov	r1, r3
	sbcs	r2, r9, #0
	orrge	r3, r3, #1
	cmp	r3, #0
	beq	.L7439
	mov	r3, sp
	sub	r2, r6, #68
	bic	r3, r3, #8128
	sub	r7, r6, #96
	bic	r3, r3, #63
	mov	r10, r1
	str	r2, [sp, #4]
	str	r3, [sp, #28]
	b	.L7450
.L7435:
	ldr	ip, [r3]
	mov	lr, #512
	mov	fp, #256
	ldr	r2, [r3, #4]
	sub	r5, r3, #36
	mov	r0, r7
	str	r2, [ip, #4]
	str	ip, [r2]
	stm	r3, {fp, lr}
	bl	_raw_spin_unlock_irqrestore
	cmp	r5, #0
	movne	r3, #0
	beq	.L7436
	ldr	r2, [r6, #-80]
	cmp	r2, #3
	beq	.L7444
.L7474:
	cmp	r5, #0
	beq	.L7468
	movw	r3, #:lower16:.LANCHOR1
	mov	r1, #0
	movt	r3, #:upper16:.LANCHOR1
	ldr	r2, [r3, #1840]
	cmp	r2, r8
	sbcs	r3, r1, r9
	movge	r2, r8
	cmp	r4, #0
	beq	.L7447
	ldr	r3, [r5]
	mov	r1, #2
	str	r8, [r3]
	strh	r1, [r3, #4]	@ movhi
	ldrh	r1, [r6, #60]
	strh	r1, [r3, #6]	@ movhi
	ldr	r1, [r6, #64]
	str	r1, [r3, #8]
.L7447:
	ldr	r1, [r5]
	add	r3, sp, #32
	sub	r2, r2, r4
	ldr	r0, [sp, #8]
	add	r1, r1, r4
	bl	vfs_read
	subs	r3, r0, #0
	blt	.L7469
	add	r4, r4, r3
	mov	r2, #208
	mov	r1, r5
	str	r4, [r5, #4]
	ldr	r0, [r6, #-92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L7471
	subs	r8, r8, r4
	and	r3, r10, #1
	sbc	r9, r9, r4, asr #31
	cmp	r8, #1
	mov	r4, #0
	sbcs	r2, r9, #0
	orrge	r3, r3, #1
	cmp	r3, r4
	beq	.L7439
.L7450:
	orrs	r3, r8, r9
	mov	r0, r7
	moveq	r10, #0
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r6, #-68]
	mov	r1, r0
	ldr	r2, [sp, #4]
	cmp	r3, r2
	bne	.L7435
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
.L7436:
	ldr	r3, [r6, #-80]
	cmp	r3, #2
	bne	.L7472
	ldr	ip, [sp, #28]
	movw	r2, #:lower16:autoremove_wake_function
	add	r1, sp, #56
	movt	r2, #:upper16:autoremove_wake_function
	mov	r3, #0
	str	r4, [sp, #12]
	sub	fp, r6, #40
	strd	r8, [sp, #16]
	ldr	r9, [sp, #4]
	str	r10, [sp, #24]
	ldr	r0, [ip, #12]
	mov	r4, ip
	str	r3, [sp, #44]
	str	r0, [sp, #48]
	str	r2, [sp, #52]
	str	r1, [sp, #56]
	str	r1, [sp, #60]
	b	.L7443
.L7440:
	ldr	ip, [r3]
	ldr	r2, [r3, #4]
	str	r2, [ip, #4]
	str	ip, [r2]
	stm	r3, {r10, lr}
	bl	_raw_spin_unlock_irqrestore
	cmp	r5, #0
	bne	.L7454
	ldr	r3, [r6, #-80]
	cmp	r3, #2
	bne	.L7455
.L7473:
	ldr	r3, [r4, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	bne	.L7456
	bl	schedule
.L7443:
	add	r1, sp, #44
	mov	r2, #1
	mov	r0, fp
	mov	r10, #256
	bl	prepare_to_wait
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r6, #-68]
	mov	r1, r0
	mov	lr, #512
	mov	r0, r7
	cmp	r3, r9
	sub	r5, r3, #36
	bne	.L7440
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r6, #-80]
	cmp	r3, #2
	beq	.L7473
.L7455:
	mov	r5, #0
	ldr	r4, [sp, #12]
	mov	r3, r5
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	b	.L7442
.L7472:
	cmp	r3, #3
	beq	.L7451
.L7439:
	mov	fp, #0
.L7433:
	str	fp, [r6, #68]
	.syntax divided
@ 836 "drivers/usb/gadget/f_mtp.c" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	add	sp, sp, #68
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L7456:
	ldr	r4, [sp, #12]
	mov	r3, #65024
	mov	r5, #0
	ldrd	r8, [sp, #16]
	movt	r3, 65535
	ldr	r10, [sp, #24]
.L7442:
	add	r1, sp, #44
	mov	r0, fp
	str	r3, [sp, #12]
	bl	finish_wait
	ldr	r2, [r6, #-80]
	ldr	r3, [sp, #12]
	cmp	r2, #3
	bne	.L7474
.L7444:
	cmp	r5, #0
	beq	.L7451
	mvn	fp, #124
	b	.L7448
.L7454:
	mov	r3, #0
	ldr	r4, [sp, #12]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	b	.L7442
.L7469:
	mov	fp, r3
.L7448:
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r6, #-64]
	add	r2, r5, #36
	mov	r1, r0
	ldr	ip, [sp, #4]
	mov	r0, r7
	str	r2, [r6, #-64]
	str	ip, [r5, #36]
	str	r3, [r5, #40]
	str	r2, [r3]
	bl	_raw_spin_unlock_irqrestore
	b	.L7433
.L7471:
	ldr	r3, [r6, #-80]
	cmp	r3, #0
	mvneq	fp, #4
	beq	.L7448
	mov	r3, #4
	mvn	fp, #4
	str	r3, [r6, #-80]
	b	.L7448
.L7451:
	mvn	fp, #124
	b	.L7433
.L7468:
	mov	fp, r3
	b	.L7433
	.fnend
	.size	send_file_work, .-send_file_work
	.section	.rodata.cst4
	.align	2
.LC455:
	.word	__stack_chk_guard
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_unbind, %function
rndis_qc_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	movw	r5, #:lower16:.LANCHOR0
	movw	r3, #:lower16:.LC455
	movt	r5, #:upper16:.LANCHOR0
	movt	r3, #:upper16:.LC455
	strd	r6, [sp, #8]
	mov	r6, r0
	str	lr, [sp, #16]
	.pad #28
	sub	sp, sp, #28
	ldr	r0, [r5, #2264]
	ldr	r3, [r3]
	str	r3, [sp, #20]
	mov	r3,#0
	mov	r4, r1
	bl	kfree
	ldr	r0, [r5, #2268]
	mov	r3, #0
	str	r3, [r5, #2264]
	cmp	r0, r3
	beq	.L7476
	bl	destroy_workqueue
.L7476:
	ldr	r3, [r4, #136]
	mov	r2, #0
	str	r2, [r5, #2268]
	cmp	r3, r2
	bgt	.L7477
	rsb	r3, r3, r3, lsl #4
	add	r3, r5, r3, lsl #2
	strb	r2, [r3, #3717]
.L7477:
	movw	r3, #:lower16:.LANCHOR3
	movt	r3, #:upper16:.LANCHOR3
	ldrb	r2, [r3, #-4084]	@ zero_extendqisi2
	cmp	r2, #0
	bne	.L7488
.L7478:
	ldr	r3, [r6, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bhi	.L7489
.L7479:
	ldr	r0, [r4, #8]
	bl	kfree
	ldr	r3, [r4, #152]
	ldr	r0, [r3]
	bl	kfree
	ldrd	r0, [r4, #148]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r0, .L7491
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	mov	r0, r4
	mov	r4, r1
	bl	kfree
	mov	r3, #0
	ldr	r0, .L7491
	mov	r1, r4
	str	r3, [r5, #832]
	bl	_raw_spin_unlock_irqrestore
	movw	r3, #:lower16:.LC455
	movt	r3, #:upper16:.LC455
	ldr	r2, [r3]
	ldr	r3, [sp, #20]
	eors	r2, r3, r2
	bne	.L7490
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L7488:
	mov	r7, #0
	movw	r1, #:lower16:.LC446
	mov	r2, r7
	movt	r1, #:upper16:.LC446
	mov	r0, sp
	strb	r7, [r3, #-4084]
	bl	sprintf
	mov	r0, sp
	mov	r1, r7
	bl	remove_proc_entry
	b	.L7478
.L7489:
	ldr	r0, [r4, #12]
	bl	kfree
	b	.L7479
.L7490:
	bl	__stack_chk_fail
.L7492:
	.align	2
.L7491:
	.word	.LANCHOR0+828
	.fnend
	.size	rndis_qc_unbind, .-rndis_qc_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_close, %function
gs_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r0, #280]
	.pad #24
	sub	sp, sp, #24
	mov	r0, r4
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #12]
	cmp	r3, #1
	beq	.L7494
	cmp	r3, #0
	subne	r3, r3, #1
	strne	r3, [r4, #12]
	beq	.L7522
.L7496:
	mov	r0, r4
	bl	_raw_spin_unlock_irq
	add	sp, sp, #24
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L7494:
	ldr	r0, [r4, #4]
	mov	r2, #0
	str	r2, [r4, #12]
	strb	r3, [r4, #16]
	cmp	r0, r2
	beq	.L7497
	ldr	r3, [r0, #112]
	cmp	r3, r2
	beq	.L7498
	blx	r3
.L7498:
	ldr	r1, [r4, #92]
	ldr	r2, [r4, #100]
	ldr	r0, [r4, #104]
	add	r3, r0, r1
	sub	r3, r3, r2
	udiv	r2, r3, r1
	mls	r3, r1, r2, r3
	cmp	r3, #0
	bne	.L7523
.L7511:
	str	r0, [r4, #100]
.L7509:
	mov	r3, #0
	mov	r2, #1
	mov	r1, r2
	add	r0, r4, #20
	str	r3, [r5, #280]
	str	r3, [r4, #8]
	strb	r3, [r4, #16]
	bl	__wake_up
	b	.L7496
.L7522:
	movw	r0, #:lower16:.LC415
	movw	r1, #894
	movt	r0, #:upper16:.LC415
	bl	warn_slowpath_null
	b	.L7496
.L7523:
	mov	r0, r4
	bl	_raw_spin_unlock_irq
	mov	r0, r4
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #4]
	cmp	r3, #0
	beq	.L7521
	ldr	r1, [r4, #92]
	ldrd	r2, [r4, #100]
	add	r3, r3, r1
	sub	r3, r3, r2
	udiv	r2, r3, r1
	mls	r3, r1, r2, r3
	cmp	r3, #0
	bne	.L7501
.L7521:
	mov	r0, r4
	bl	_raw_spin_unlock_irq
.L7500:
	mov	r0, r4
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #4]
	cmp	r3, #0
	ldrne	r0, [r4, #104]
	bne	.L7511
.L7497:
	ldr	r0, [r4, #96]
	bl	kfree
	mov	r3, #0
	str	r3, [r4, #96]
	b	.L7509
.L7501:
	mov	r0, r4
	add	r8, r4, #108
	bl	_raw_spin_unlock_irq
	mov	r3, sp
	movw	r2, #:lower16:autoremove_wake_function
	bic	r6, r3, #8128
	add	r1, sp, #16
	bic	r6, r6, #63
	mov	r3, #0
	ldr	r0, [r6, #12]
	movt	r2, #:upper16:autoremove_wake_function
	movw	r7, #4500
	str	r3, [sp, #4]
	str	r0, [sp, #8]
	str	r2, [sp, #12]
	str	r1, [sp, #16]
	str	r1, [sp, #20]
.L7507:
	mov	r2, #1
	add	r1, sp, #4
	mov	r0, r8
	bl	prepare_to_wait
	mov	r0, r4
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #4]
	cmp	r3, #0
	beq	.L7502
	ldr	r1, [r4, #92]
	mov	r0, r4
	ldrd	r2, [r4, #100]
	add	r3, r3, r1
	sub	r3, r3, r2
	udiv	r2, r3, r1
	mls	r3, r1, r2, r3
	cmp	r3, #0
	beq	.L7520
	bl	_raw_spin_unlock_irq
	ldr	r3, [r6, #12]
	mov	r0, r7
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	bne	.L7504
	bl	schedule_timeout
	subs	r7, r0, #0
	bne	.L7507
	mov	r0, r4
	bl	_raw_spin_lock_irq
	mov	r0, r4
	bl	_raw_spin_unlock_irq
.L7504:
	add	r1, sp, #4
	mov	r0, r8
	bl	finish_wait
	b	.L7500
.L7502:
	mov	r0, r4
.L7520:
	bl	_raw_spin_unlock_irq
	b	.L7504
	.fnend
	.size	gs_close, .-gs_close
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_function_unbind, %function
acc_function_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	add	r7, r1, #1648
	add	r6, r1, #80
	strd	r8, [sp, #16]
	mov	r9, #256
	mov	r8, #512
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	b	.L7525
.L7526:
	ldrd	r2, [r4]
	str	r3, [r2, #4]
	str	r2, [r3]
	str	r9, [r4]
	str	r8, [r4, #4]
	bl	_raw_spin_unlock_irqrestore
	cmp	r10, #0
	beq	.L7527
	ldr	fp, [r5, #84]
	ldr	r0, [r4, #-36]
	bl	kfree
	mov	r1, r10
	ldr	r3, [fp, #8]
	mov	r0, fp
	ldr	r3, [r3, #12]
	blx	r3
.L7525:
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r5, #1648]
	mov	r1, r0
	mov	r0, r6
	cmp	r7, r4
	sub	r10, r4, #36
	bne	.L7526
	bl	_raw_spin_unlock_irqrestore
.L7527:
	ldr	r4, [r5, #1680]
	cmp	r4, #0
	beq	.L7529
	ldr	r6, [r5, #88]
	ldr	r0, [r4]
	bl	kfree
	mov	r1, r4
	ldr	r3, [r6, #8]
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
.L7529:
	ldr	r4, [r5, #1684]
	cmp	r4, #0
	beq	.L7530
	ldr	r6, [r5, #88]
	ldr	r0, [r4]
	bl	kfree
	mov	r1, r4
	ldr	r3, [r6, #8]
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
.L7530:
	ldr	r0, .L7538
	bl	hid_unregister_driver
	mov	r0, r5
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	kill_all_hid_devices
.L7539:
	.align	2
.L7538:
	.word	.LANCHOR1+1844
	.fnend
	.size	acc_function_unbind, .-acc_function_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mtp_function_unbind, %function
mtp_function_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	add	r7, r1, #108
	add	r6, r1, #80
	strd	r8, [sp, #16]
	mov	r9, #256
	mov	r8, #512
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	b	.L7541
.L7542:
	ldrd	r2, [r4]
	str	r3, [r2, #4]
	str	r2, [r3]
	str	r9, [r4]
	str	r8, [r4, #4]
	bl	_raw_spin_unlock_irqrestore
	cmp	r10, #0
	beq	.L7543
	ldr	fp, [r5, #84]
	ldr	r0, [r4, #-36]
	bl	kfree
	mov	r1, r10
	ldr	r3, [fp, #8]
	mov	r0, fp
	ldr	r3, [r3, #12]
	blx	r3
.L7541:
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r5, #108]
	mov	r1, r0
	mov	r0, r6
	cmp	r7, r4
	sub	r10, r4, #36
	bne	.L7542
	bl	_raw_spin_unlock_irqrestore
.L7543:
	ldr	r4, [r5, #160]
	cmp	r4, #0
	beq	.L7545
	ldr	r7, [r5, #88]
	ldr	r0, [r4]
	bl	kfree
	mov	r1, r4
	ldr	r3, [r7, #8]
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
.L7545:
	ldr	r4, [r5, #164]
	cmp	r4, #0
	beq	.L7546
	ldr	r7, [r5, #88]
	ldr	r0, [r4]
	bl	kfree
	mov	r1, r4
	ldr	r3, [r7, #8]
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
.L7546:
	add	r7, r5, #116
	mov	r9, #256
	mov	r8, #512
	b	.L7547
.L7548:
	ldrd	r2, [r4]
	str	r3, [r2, #4]
	str	r2, [r3]
	str	r9, [r4]
	str	r8, [r4, #4]
	bl	_raw_spin_unlock_irqrestore
	cmp	r10, #0
	beq	.L7549
	ldr	fp, [r5, #92]
	ldr	r0, [r4, #-36]
	bl	kfree
	mov	r1, r10
	ldr	r3, [fp, #8]
	mov	r0, fp
	ldr	r3, [r3, #12]
	blx	r3
.L7547:
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r5, #116]
	mov	r1, r0
	mov	r0, r6
	cmp	r7, r4
	sub	r10, r4, #36
	bne	.L7548
	bl	_raw_spin_unlock_irqrestore
.L7549:
	mov	r3, #0
	str	r3, [r5, #96]
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
	.fnend
	.size	mtp_function_unbind, .-mtp_function_unbind
	.section	.rodata.str1.4
	.align	2
.LC456:
	.ascii	"kill %s:  resubmit %d bytes --> %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_midi_complete, %function
f_midi_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	mov	r4, r0
	mov	r5, r1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	lr, [sp, #24]
	ldr	r0, [r0]
	.pad #12
	sub	sp, sp, #12
	ldr	r3, [r1, #44]
	ldr	r2, [r0, #20]
	cmn	r3, #102
	ldr	r7, [r2, #24]
	blt	.L7597
	cmp	r3, #0
	bne	.L7561
	ldr	r3, [r0, #84]
	cmp	r3, r4
	beq	.L7598
	ldr	r3, [r0, #80]
	cmp	r3, r4
	beq	.L7599
.L7561:
	ldr	r3, [r4, #8]
	mov	r2, #32
	mov	r1, r5
	mov	r0, r4
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	bne	.L7600
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L7597:
	cmn	r3, #104
	bge	.L7560
	cmn	r3, #108
	bne	.L7561
.L7560:
	ldr	r3, [r0, #84]
	cmp	r3, r4
	beq	.L7601
.L7567:
	ldr	r0, [r5]
.L7568:
	cmp	r0, #0
	beq	.L7602
.L7571:
	bl	kfree
	mov	r3, #0
	mov	r1, r5
	mov	r0, r4
	str	r3, [r5]
	ldr	r3, [r4, #8]
	ldr	r3, [r3, #12]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	lr, [sp, #24]
	add	sp, sp, #28
	bx	r3	@ indirect register sibling call
.L7600:
	ldr	ip, [r7]
	movw	r1, #:lower16:.LC456
	str	r0, [sp]
	movt	r1, #:upper16:.LC456
	ldr	r3, [r5, #4]
	ldr	r2, [r4, #4]
	add	r0, ip, #32
	bl	dev_err
	ldr	r3, [r4, #8]
	mov	r0, r4
	mov	r1, #1
	ldr	r3, [r3, #24]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	lr, [sp, #24]
	add	sp, sp, #28
	bx	r3
.L7598:
	ldr	r8, [r1]
	ldr	r2, [r1, #48]
	cmp	r2, #3
	bls	.L7561
	movw	r9, #:lower16:.LANCHOR2
	add	r6, r8, #1
	movt	r9, #:upper16:.LANCHOR2
	rsb	r8, r8, #2
	b	.L7565
.L7564:
	add	r6, r6, #4
	add	r3, r8, r6
	cmp	r3, r2
	bcs	.L7561
.L7565:
	ldrb	r3, [r6, #-1]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L7564
	ldr	ip, [r4]
	lsr	lr, r3, #4
	and	r3, r3, #15
	add	r3, r9, r3
	add	r0, lr, #40
	mov	r1, r6
	ldr	r0, [ip, r0, lsl #2]
	cmp	r0, #0
	beq	.L7564
	ldr	ip, [ip, #288]
	lsr	ip, ip, lr
	tst	ip, #1
	beq	.L7564
	ldrb	r2, [r3, #3724]	@ zero_extendqisi2
	bl	snd_rawmidi_receive
	ldr	r2, [r5, #48]
	b	.L7564
.L7601:
	ldr	r0, [r5]
	ldr	r2, [r5, #48]
	cmp	r2, #3
	bls	.L7568
	movw	r8, #:lower16:.LANCHOR2
	add	r6, r0, #1
	movt	r8, #:upper16:.LANCHOR2
	rsb	r7, r0, #2
	b	.L7570
.L7569:
	add	r6, r6, #4
	add	r3, r7, r6
	cmp	r3, r2
	bcs	.L7567
.L7570:
	ldrb	r3, [r6, #-1]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L7569
	ldr	ip, [r4]
	lsr	lr, r3, #4
	and	r3, r3, #15
	add	r3, r8, r3
	add	r0, lr, #40
	mov	r1, r6
	ldr	r0, [ip, r0, lsl #2]
	cmp	r0, #0
	beq	.L7569
	ldr	ip, [ip, #288]
	lsr	ip, ip, lr
	tst	ip, #1
	beq	.L7569
	ldrb	r2, [r3, #3724]	@ zero_extendqisi2
	bl	snd_rawmidi_receive
	ldr	r2, [r5, #48]
	b	.L7569
.L7599:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	lr, [sp, #24]
	add	sp, sp, #28
	b	f_midi_transmit
.L7602:
	movw	r0, #:lower16:.LC445
	mov	r1, #218
	movt	r0, #:upper16:.LC445
	bl	warn_slowpath_null
	ldr	r0, [r5]
	b	.L7571
	.fnend
	.size	f_midi_complete, .-f_midi_complete
	.section	.rodata.str1.4
	.align	2
.LC457:
	.ascii	"ecm0\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_function_unbind_config, %function
ecm_qc_function_unbind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r0, .L7612
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	bl	strim
	mov	r1, r0
	movw	r0, #:lower16:.LC358
	movt	r0, #:upper16:.LC358
	bl	strcmp
	cmp	r0, #0
	bne	.L7611
.L7603:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L7611:
	movw	r1, #:lower16:.LC457
	movw	r0, #:lower16:init_net
	movt	r1, #:upper16:.LC457
	movt	r0, #:upper16:init_net
	bl	dev_get_by_name
	subs	r4, r0, #0
	beq	.L7603
	.syntax divided
@ 17 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/irqflags.h" 1
		mrs	ip, cpsr	@ arch_local_irq_save
	cpsid	i
@ 0 "" 2
@ 40 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/percpu.h" 1
	mrc p15, 0, r1, c13, c0, 4
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r3, [r4, #640]
	ldr	r2, [r3, r1]
	sub	r2, r2, #1
	str	r2, [r3, r1]
	.syntax divided
@ 142 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/irqflags.h" 1
		msr	cpsr_c, ip	@ local_irq_restore
@ 0 "" 2
	.arm
	.syntax unified
	bl	unregister_netdev
	mov	r0, r4
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	free_netdev
.L7613:
	.align	2
.L7612:
	.word	.LANCHOR0+1612
	.fnend
	.size	ecm_qc_function_unbind_config, .-ecm_qc_function_unbind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acm_send_modem_ctrl_bits, %function
acm_send_modem_ctrl_bits:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	add	r6, r0, #148
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	strh	r1, [r0, #170]	@ movhi
	mov	r0, r6
	bl	_raw_spin_lock
	ldr	r5, [r4, #156]
	cmp	r5, #0
	beq	.L7615
	mov	r1, #0
	mov	r0, #10
	ldr	r7, [r4, #152]
	mvn	r2, #94
	mov	r8, #32
	strb	r1, [r4, #144]
	mov	ip, #2
	str	r1, [r4, #156]
	ldr	r3, [r5]
	str	r0, [r5, #4]
	mov	r0, r6
	strb	r2, [r3]
	strb	r8, [r3, #1]
	strb	r1, [r3, #2]
	strb	r1, [r3, #3]
	ldrb	r2, [r4, #136]	@ zero_extendqisi2
	strh	r2, [r3, #4]	@ unaligned
	strb	ip, [r3, #6]
	strb	r1, [r3, #7]
	ldrh	r2, [r4, #170]	@ unaligned
	strh	r2, [r3, #8]	@ unaligned
	bl	_raw_spin_unlock
	ldr	r3, [r7, #8]
	mov	r2, r8
	mov	r0, r7
	mov	r1, r5
	ldr	r3, [r3, #16]
	blx	r3
	mov	r7, r0
	mov	r0, r6
	bl	_raw_spin_lock
	cmp	r7, #0
	blt	.L7618
.L7616:
	mov	r0, r6
	bl	_raw_spin_unlock
	mov	r0, r7
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L7615:
	mov	r3, #1
	mov	r7, r5
	strb	r3, [r4, #144]
	b	.L7616
.L7618:
	ldr	r0, [r4, #20]
	movw	r1, #:lower16:.LC399
	mov	r3, r7
	ldrb	r2, [r4, #138]	@ zero_extendqisi2
	movt	r1, #:upper16:.LC399
	ldr	r0, [r0, #24]
	ldr	r0, [r0]
	add	r0, r0, r8
	bl	dev_err
	str	r5, [r4, #156]
	b	.L7616
	.fnend
	.size	acm_send_modem_ctrl_bits, .-acm_send_modem_ctrl_bits
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acm_send_break, %function
acm_send_break:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	cmp	r1, #0
	mov	r4, r0
	strd	r6, [sp, #8]
	add	r6, r0, #148
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrh	r3, [r0, #170]
	mov	r0, r6
	bic	r3, r3, #4
	uxth	r3, r3
	orrne	r3, r3, #4
	strh	r3, [r4, #170]	@ movhi
	bl	_raw_spin_lock
	ldr	r5, [r4, #156]
	cmp	r5, #0
	beq	.L7621
	mov	r1, #0
	mov	r0, #10
	ldr	r7, [r4, #152]
	mvn	r2, #94
	mov	r8, #32
	strb	r1, [r4, #144]
	mov	ip, #2
	str	r1, [r4, #156]
	ldr	r3, [r5]
	str	r0, [r5, #4]
	mov	r0, r6
	strb	r2, [r3]
	strb	r8, [r3, #1]
	strb	r1, [r3, #2]
	strb	r1, [r3, #3]
	ldrb	r2, [r4, #136]	@ zero_extendqisi2
	strh	r2, [r3, #4]	@ unaligned
	strb	ip, [r3, #6]
	strb	r1, [r3, #7]
	ldrh	r2, [r4, #170]	@ unaligned
	strh	r2, [r3, #8]	@ unaligned
	bl	_raw_spin_unlock
	ldr	r3, [r7, #8]
	mov	r2, r8
	mov	r0, r7
	mov	r1, r5
	ldr	r3, [r3, #16]
	blx	r3
	mov	r7, r0
	mov	r0, r6
	bl	_raw_spin_lock
	cmp	r7, #0
	blt	.L7627
.L7622:
	mov	r0, r6
	bl	_raw_spin_unlock
	mov	r0, r7
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L7621:
	mov	r3, #1
	mov	r7, r5
	strb	r3, [r4, #144]
	b	.L7622
.L7627:
	ldr	r0, [r4, #20]
	movw	r1, #:lower16:.LC399
	mov	r3, r7
	ldrb	r2, [r4, #138]	@ zero_extendqisi2
	movt	r1, #:upper16:.LC399
	ldr	r0, [r0, #24]
	ldr	r0, [r0]
	add	r0, r0, r8
	bl	dev_err
	str	r5, [r4, #156]
	b	.L7622
	.fnend
	.size	acm_send_break, .-acm_send_break
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acm_connect, %function
acm_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	add	r5, r0, #148
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrh	r3, [r0, #170]
	mov	r0, r5
	orr	r3, r3, #3
	strh	r3, [r4, #170]	@ movhi
	bl	_raw_spin_lock
	ldr	r6, [r4, #156]
	cmp	r6, #0
	moveq	r3, #1
	strbeq	r3, [r4, #144]
	beq	.L7630
	mov	r1, #0
	mov	r0, #10
	ldr	r7, [r4, #152]
	mvn	r2, #94
	mov	r8, #32
	strb	r1, [r4, #144]
	mov	ip, #2
	str	r1, [r4, #156]
	ldr	r3, [r6]
	str	r0, [r6, #4]
	mov	r0, r5
	strb	r2, [r3]
	strb	r8, [r3, #1]
	strb	r1, [r3, #2]
	strb	r1, [r3, #3]
	ldrb	r2, [r4, #136]	@ zero_extendqisi2
	strh	r2, [r3, #4]	@ unaligned
	strb	ip, [r3, #6]
	strb	r1, [r3, #7]
	ldrh	r2, [r4, #170]	@ unaligned
	strh	r2, [r3, #8]	@ unaligned
	bl	_raw_spin_unlock
	ldr	r3, [r7, #8]
	mov	r2, r8
	mov	r0, r7
	mov	r1, r6
	ldr	r3, [r3, #16]
	blx	r3
	mov	r7, r0
	mov	r0, r5
	bl	_raw_spin_lock
	cmp	r7, #0
	blt	.L7632
.L7630:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock
.L7632:
	ldr	r0, [r4, #20]
	movw	r1, #:lower16:.LC399
	mov	r3, r7
	ldrb	r2, [r4, #138]	@ zero_extendqisi2
	movt	r1, #:upper16:.LC399
	ldr	r0, [r0, #24]
	ldr	r0, [r0]
	add	r0, r0, r8
	bl	dev_err
	str	r6, [r4, #156]
	b	.L7630
	.fnend
	.size	acm_connect, .-acm_connect
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acm_disconnect, %function
acm_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	add	r5, r0, #148
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrh	r3, [r0, #170]
	mov	r0, r5
	bic	r3, r3, #3
	strh	r3, [r4, #170]	@ movhi
	bl	_raw_spin_lock
	ldr	r6, [r4, #156]
	cmp	r6, #0
	moveq	r3, #1
	strbeq	r3, [r4, #144]
	beq	.L7635
	mov	r1, #0
	mov	r0, #10
	ldr	r7, [r4, #152]
	mvn	r2, #94
	mov	r8, #32
	strb	r1, [r4, #144]
	mov	ip, #2
	str	r1, [r4, #156]
	ldr	r3, [r6]
	str	r0, [r6, #4]
	mov	r0, r5
	strb	r2, [r3]
	strb	r8, [r3, #1]
	strb	r1, [r3, #2]
	strb	r1, [r3, #3]
	ldrb	r2, [r4, #136]	@ zero_extendqisi2
	strh	r2, [r3, #4]	@ unaligned
	strb	ip, [r3, #6]
	strb	r1, [r3, #7]
	ldrh	r2, [r4, #170]	@ unaligned
	strh	r2, [r3, #8]	@ unaligned
	bl	_raw_spin_unlock
	ldr	r3, [r7, #8]
	mov	r2, r8
	mov	r0, r7
	mov	r1, r6
	ldr	r3, [r3, #16]
	blx	r3
	mov	r7, r0
	mov	r0, r5
	bl	_raw_spin_lock
	cmp	r7, #0
	blt	.L7637
.L7635:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock
.L7637:
	ldr	r0, [r4, #20]
	movw	r1, #:lower16:.LC399
	mov	r3, r7
	ldrb	r2, [r4, #138]	@ zero_extendqisi2
	movt	r1, #:upper16:.LC399
	ldr	r0, [r0, #24]
	ldr	r0, [r0]
	add	r0, r0, r8
	bl	dev_err
	str	r6, [r4, #156]
	b	.L7635
	.fnend
	.size	acm_disconnect, .-acm_disconnect
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fmbim_reset_cmd_complete, %function
fmbim_reset_cmd_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r1, #32]
	add	r5, r4, #196
	mov	r0, r5
	bl	_raw_spin_lock
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L7639
	movw	r1, #32800
	bl	kmem_cache_alloc
	subs	r3, r0, #0
	beq	.L7645
	mov	r1, #16
	mov	r2, #0
	stm	r3, {r1, r2}
.L7640:
	ldr	r2, [r4, #204]
	add	r1, r3, #8
	add	ip, r4, #200
	mov	r0, r5
	str	r1, [r4, #204]
	str	ip, [r3, #8]
	str	r2, [r3, #12]
	str	r1, [r2]
	bl	_raw_spin_unlock
	add	r0, r4, #100
	mov	r3, #0
	ldrd	r4, [sp]
	mov	r2, #1
	mov	r1, #3
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	__wake_up
.L7639:
	mov	r2, #16
	mov	r3, r2
	str	r2, [r0, #16]
	str	r0, [r0, #20]
	b	.L7640
.L7645:
	mvn	r3, #11
	b	.L7640
	.fnend
	.size	fmbim_reset_cmd_complete, .-fmbim_reset_cmd_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_start, %function
gbam_start:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bne	.L7647
	add	r5, r0, #4
	mov	r0, r5
	bl	_raw_spin_lock
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L7660
	ldr	r0, [r3, #80]
	mov	r2, #32
	ldr	r1, [r4, #112]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	beq	.L7651
	movw	r0, #:lower16:.LC193
	ldr	r1, .L7663
	movt	r0, #:upper16:.LC193
	bl	printk
	b	.L7651
.L7647:
	add	r5, r0, #8
	mov	r0, r5
	bl	_raw_spin_lock
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L7661
	ldr	r0, [r3, #76]
	mov	r2, #32
	ldr	r1, [r4, #116]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	bne	.L7662
.L7651:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock
.L7661:
	mov	r0, r5
	bl	_raw_spin_unlock
	ldr	r1, .L7663+4
	movw	r0, #:lower16:.LC17
.L7659:
	movt	r0, #:upper16:.LC17
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	printk
.L7660:
	mov	r0, r5
	bl	_raw_spin_unlock
	ldr	r1, .L7663
	movw	r0, #:lower16:.LC17
	b	.L7659
.L7662:
	movw	r0, #:lower16:.LC193
	ldr	r1, .L7663+4
	movt	r0, #:upper16:.LC193
	bl	printk
	b	.L7651
.L7664:
	.align	2
.L7663:
	.word	.LANCHOR2+1324
	.word	.LANCHOR2+1348
	.fnend
	.size	gbam_start, .-gbam_start
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_function_unbind, %function
adb_function_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	mov	r3, #0
	mov	r2, #1
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	add	r0, r1, #120
	mov	r5, r1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	str	r3, [r1, #92]
	str	r2, [r1, #96]
	mov	r1, #3
	bl	__wake_up
	ldr	r4, [r5, #144]
	cmp	r4, #0
	beq	.L7666
	ldr	r6, [r5, #88]
	ldr	r0, [r4]
	bl	kfree
	mov	r1, r4
	ldr	r3, [r6, #8]
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
.L7666:
	add	r7, r5, #112
	add	r6, r5, #80
	mov	r9, #256
	mov	r8, #512
	b	.L7667
.L7668:
	ldrd	r2, [r4]
	str	r3, [r2, #4]
	str	r2, [r3]
	str	r9, [r4]
	str	r8, [r4, #4]
	bl	_raw_spin_unlock_irqrestore
	cmp	r10, #0
	beq	.L7674
	ldr	fp, [r5, #84]
	ldr	r0, [r4, #-36]
	bl	kfree
	mov	r1, r10
	ldr	r3, [fp, #8]
	mov	r0, fp
	ldr	r3, [r3, #12]
	blx	r3
.L7667:
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r5, #112]
	mov	r1, r0
	mov	r0, r6
	cmp	r4, r7
	sub	r10, r4, #36
	bne	.L7668
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L7674:
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
	.fnend
	.size	adb_function_unbind, .-adb_function_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_disable, %function
fsg_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldrb	r3, [r0, #86]	@ zero_extendqisi2
	tst	r3, #1
	beq	.L7676
	ldr	r0, [r0, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldrb	r3, [r4, #86]	@ zero_extendqisi2
	mov	r1, #0
	ldr	r2, [r4, #92]
	bfc	r3, #0, #1
	strb	r3, [r4, #86]
	str	r1, [r2]
	ldrb	r3, [r4, #86]	@ zero_extendqisi2
.L7676:
	tst	r3, #2
	beq	.L7677
	ldr	r0, [r4, #96]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldrb	r3, [r4, #86]	@ zero_extendqisi2
	mov	r1, #0
	ldr	r2, [r4, #96]
	bfc	r3, #1, #1
	strb	r3, [r4, #86]
	str	r1, [r2]
.L7677:
	ldr	r3, [r4, #80]
	mov	r2, #0
	str	r2, [r3, #12]
	ldr	r4, [r4, #80]
	add	r6, r4, #44
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #112]
	mov	r5, r0
	cmp	r3, #4
	bgt	.L7679
	ldr	r3, [r4, #56]
	mov	r1, #4
	ldr	r2, [r4, #168]
	str	r1, [r4, #112]
	str	r3, [r4, #116]
	cmp	r2, #0
	beq	.L7679
	mov	r1, #2
	mov	r0, #10
	bl	send_sig_info
.L7679:
	mov	r1, r5
	mov	r0, r6
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock_irqrestore
	.fnend
	.size	fsg_disable, .-fsg_disable
	.section	.rodata.str1.4
	.align	2
.LC458:
	.ascii	"<3>%s: usb cable is not connected\012\000"
	.align	2
.LC459:
	.ascii	"<3>%s: given_xport:%s cur_xport:%s doing nothing\012"
	.ascii	"\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	transport_store, %function
transport_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 40
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r1, #:lower16:.LANCHOR0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	r1, #:upper16:.LANCHOR0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r4, [r1, #400]
	.pad #44
	sub	sp, sp, #44
	str	r3, [sp, #4]
	ldr	r3, [r4, #360]
	cmp	r3, #0
	beq	.L7788
	movw	r1, #:lower16:.LC246
	mov	r0, r2
	movt	r1, #:upper16:.LC246
	add	r2, sp, #16
	bl	sscanf
	ldr	r3, [sp, #16]
	ldr	r6, [r4, #352]
	cmp	r3, #0
	movne	r5, #2
	moveq	r5, #3
	cmp	r6, r5
	beq	.L7789
	mov	r3, #0
	cmp	r6, #0
	str	r3, [r4, #352]
	beq	.L7696
	ldr	r0, [r4, #84]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L7697
	blx	r3
.L7697:
	ldr	r0, [r4, #80]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L7698
	blx	r3
.L7698:
	cmp	r6, #2
	bne	.L7790
	add	r3, r4, #356
	add	r7, r4, #184
	mov	r0, r3
	mov	r6, #0
	str	r3, [sp, #8]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #184]
	str	r0, [sp, #12]
	str	r6, [r4, #300]
	cmp	r7, r3
	beq	.L7704
	mov	fp, #256
	mov	r10, #512
.L7701:
	ldm	r3, {r1, r2}
	mov	r8, r3
	mov	r0, #0
	str	r2, [r1, #4]
	str	r1, [r2]
	str	fp, [r3]
	str	r10, [r3, #4]
	str	r6, [r8, #-36]!
	ldr	r9, [r4, #80]
	bl	kfree
	mov	r1, r8
	ldr	r3, [r9, #8]
	mov	r0, r9
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, [r4, #184]
	cmp	r3, r7
	bne	.L7701
.L7704:
	ldr	r3, [r4, #208]
	add	r6, r4, #208
	cmp	r6, r3
	beq	.L7703
	mov	fp, #256
	mov	r10, #512
	mov	r7, #0
.L7702:
	ldm	r3, {r1, r2}
	mov	r8, r3
	mov	r0, #0
	str	r2, [r1, #4]
	str	r1, [r2]
	str	fp, [r3]
	str	r10, [r3, #4]
	str	r7, [r8, #-36]!
	ldr	r9, [r4, #84]
	bl	kfree
	mov	r1, r8
	ldr	r3, [r9, #8]
	mov	r0, r9
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, [r4, #208]
	cmp	r3, r6
	bne	.L7702
.L7703:
	ldr	r3, [r4, #192]
	add	r10, r4, #192
	cmp	r10, r3
	beq	.L7705
	mov	r6, #0
	mov	r7, #0
	b	.L7706
.L7791:
	ldr	r2, [r4, #200]
	sub	r2, r2, #1
	str	r2, [r4, #200]
	ldm	r3, {r1, r2}
	strd	r6, [r3]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any
	ldr	r3, [r4, #192]
	cmp	r3, r10
	beq	.L7705
.L7706:
	subs	r0, r3, #0
	bne	.L7791
.L7705:
	ldr	r3, [r4, #216]
	add	r10, r4, #216
	cmp	r10, r3
	beq	.L7707
	mov	r6, #0
	mov	r7, #0
	b	.L7708
.L7792:
	ldr	r2, [r4, #224]
	sub	r2, r2, #1
	str	r2, [r4, #224]
	ldm	r3, {r1, r2}
	strd	r6, [r3]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any
	ldr	r3, [r4, #216]
	cmp	r10, r3
	beq	.L7707
.L7708:
	subs	r0, r3, #0
	bne	.L7792
.L7707:
	ldrd	r0, [sp, #8]
	bl	_raw_spin_unlock_irqrestore
.L7696:
	cmp	r5, #3
	str	r5, [r4, #352]
	beq	.L7715
.L7795:
	movw	r7, #:lower16:rmnet_mux_sdio_complete_epout
	mov	r6, #16
	movt	r7, #:upper16:rmnet_mux_sdio_complete_epout
	add	r5, r4, #208
	b	.L7719
.L7794:
	cmn	r0, #4096
	bhi	.L7717
	str	r7, [r0, #28]
	ldr	r3, [r4, #212]
	subs	r6, r6, #1
	str	r2, [r4, #212]
	str	r5, [r0, #36]
	str	r3, [r0, #40]
	str	r2, [r3]
	beq	.L7793
.L7719:
	ldr	r0, [r4, #80]
	mov	r1, #208
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	cmp	r0, #0
	add	r2, r0, #36
	bne	.L7794
.L7717:
	ldr	r0, [sp, #4]
.L7691:
	add	sp, sp, #44
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L7790:
	cmp	r6, #3
	bne	.L7696
	add	r0, r4, #144
	add	r10, r4, #356
	bl	tasklet_kill
	add	r0, r4, #124
	add	r6, r4, #96
	bl	tasklet_kill
	mov	r0, r10
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #96]
	str	r0, [sp, #8]
	cmp	r6, r3
	beq	.L7712
	mov	r8, #256
	mov	r7, #512
.L7709:
	ldm	r3, {r1, r2}
	mov	r9, r3
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r8, [r3]
	str	r7, [r3, #4]
	ldr	fp, [r4, #80]
	ldr	r0, [r9, #-36]!
	bl	kfree
	ldr	r3, [fp, #8]
	mov	r0, fp
	mov	r1, r9
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, [r4, #96]
	cmp	r6, r3
	bne	.L7709
.L7712:
	ldr	r3, [r4, #104]
	add	r6, r4, #104
	cmp	r6, r3
	beq	.L7711
	mov	r8, #256
	mov	r7, #512
.L7710:
	ldm	r3, {r1, r2}
	mov	r9, r3
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r8, [r3]
	str	r7, [r3, #4]
	ldr	fp, [r4, #84]
	ldr	r0, [r9, #-36]!
	bl	kfree
	ldr	r3, [fp, #8]
	mov	r0, fp
	mov	r1, r9
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, [r4, #104]
	cmp	r6, r3
	bne	.L7710
.L7711:
	ldr	r3, [r4, #112]
	add	r6, r4, #112
	cmp	r6, r3
	beq	.L7714
	mov	r8, #256
	mov	r7, #512
.L7713:
	ldm	r3, {r1, r2}
	mov	r9, r3
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r8, [r3]
	str	r7, [r3, #4]
	ldr	fp, [r4, #84]
	ldr	r0, [r9, #-36]!
	bl	kfree
	ldr	r3, [fp, #8]
	mov	r0, fp
	mov	r1, r9
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, [r4, #112]
	cmp	r6, r3
	bne	.L7713
.L7714:
	mov	r0, r10
	ldr	r1, [sp, #8]
	bl	_raw_spin_unlock_irqrestore
	cmp	r5, #3
	str	r5, [r4, #352]
	bne	.L7795
.L7715:
	ldr	r3, [r4, #164]
	tst	r3, #1
	beq	.L7796
.L7726:
	movw	r7, #:lower16:kmalloc_caches
	movw	r8, #:lower16:rmnet_mux_smd_complete_epout
	movt	r7, #:upper16:kmalloc_caches
	movt	r8, #:upper16:rmnet_mux_smd_complete_epout
	mov	r6, #8
.L7733:
	ldr	r9, [r4, #80]
	mov	r1, #208
	ldr	r3, [r9, #8]
	mov	r0, r9
	ldr	r3, [r3, #8]
	blx	r3
	subs	r5, r0, #0
	mov	r3, #2048
	beq	.L7717
	str	r3, [r5, #4]
	ldr	r0, [r7, #44]
	mov	r3, #16
	mov	r1, #208
	cmp	r0, #0
	streq	r3, [r5]
	beq	.L7732
	bl	kmem_cache_alloc
	cmp	r0, #0
	str	r0, [r5]
	bne	.L7732
	ldr	r3, [r9, #8]
	mov	r1, r5
	mov	r0, r9
	ldr	r3, [r3, #12]
	blx	r3
	b	.L7717
.L7732:
	cmn	r5, #4096
	mov	r1, #2048
	add	r3, r5, #36
	add	r0, r4, #104
	bhi	.L7717
	str	r1, [r5, #4]
	subs	r6, r6, #1
	str	r8, [r5, #28]
	str	r4, [r5, #32]
	ldr	r2, [r4, #108]
	str	r3, [r4, #108]
	str	r0, [r5, #36]
	str	r2, [r5, #40]
	str	r3, [r2]
	bne	.L7733
	movw	r8, #:lower16:rmnet_mux_smd_complete_epin
	mov	r6, r1
	movt	r8, #:upper16:rmnet_mux_smd_complete_epin
	mov	r9, #8
.L7736:
	ldr	r10, [r4, #84]
	mov	r1, #208
	ldr	r3, [r10, #8]
	mov	r0, r10
	ldr	r3, [r3, #8]
	blx	r3
	subs	r5, r0, #0
	beq	.L7717
	str	r6, [r5, #4]
	ldr	r0, [r7, #44]
	mov	r3, #16
	mov	r1, #208
	cmp	r0, #0
	streq	r3, [r5]
	beq	.L7735
	bl	kmem_cache_alloc
	cmp	r0, #0
	str	r0, [r5]
	bne	.L7735
	ldr	r3, [r10, #8]
	mov	r1, r5
	mov	r0, r10
	ldr	r3, [r3, #12]
	blx	r3
	b	.L7717
.L7793:
	movw	r7, #:lower16:rmnet_mux_sdio_complete_epin
	mov	r6, #100
	movt	r7, #:upper16:rmnet_mux_sdio_complete_epin
	add	r8, r4, #184
	b	.L7720
.L7798:
	cmn	r0, #4096
	bhi	.L7717
	str	r7, [r0, #28]
	ldr	r2, [r4, #188]
	subs	r6, r6, #1
	str	r3, [r4, #188]
	str	r8, [r0, #36]
	str	r2, [r0, #40]
	str	r3, [r2]
	beq	.L7797
.L7720:
	ldr	r0, [r4, #84]
	mov	r1, #208
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	cmp	r0, #0
	add	r3, r0, #36
	bne	.L7798
	b	.L7717
.L7796:
	movw	r0, #:lower16:.LANCHOR3
	movw	r3, #:lower16:rmnet_mux_smd_notify
	ldr	r5, [r4, #76]
	movt	r0, #:upper16:.LANCHOR3
	movt	r3, #:upper16:rmnet_mux_smd_notify
	mov	r2, r4
	add	r1, r4, #120
	ldr	r0, [r0, #-4080]
	bl	smd_open
	cmp	r0, #0
	bne	.L7799
	ldr	r3, [r4, #164]
	ands	r3, r3, #1
	bne	.L7726
	mov	r2, sp
	str	r3, [sp, #20]
	add	r5, r4, #172
	bic	r1, r2, #8128
	movw	r2, #:lower16:autoremove_wake_function
	bic	r1, r1, #63
	movt	r2, #:upper16:autoremove_wake_function
	ldr	r0, [r1, #12]
	add	r1, sp, #32
	str	r0, [sp, #24]
	str	r2, [sp, #28]
	str	r1, [sp, #32]
	str	r1, [sp, #36]
	b	.L7730
.L7800:
	bl	schedule
.L7730:
	mov	r2, #2
	add	r1, sp, #20
	mov	r0, r5
	bl	prepare_to_wait
	ldr	r3, [r4, #164]
	tst	r3, #1
	beq	.L7800
	add	r1, sp, #20
	mov	r0, r5
	bl	finish_wait
	b	.L7726
.L7735:
	cmn	r5, #4096
	add	r3, r5, #36
	add	r1, r4, #96
	bhi	.L7717
	str	r8, [r5, #28]
	subs	r9, r9, #1
	str	r4, [r5, #32]
	ldr	r2, [r4, #100]
	str	r3, [r4, #100]
	str	r1, [r5, #36]
	str	r2, [r5, #40]
	str	r3, [r2]
	bne	.L7736
	mov	r0, r4
	bl	rmnet_mux_smd_start_rx
	b	.L7717
.L7799:
	ldr	r0, [r5]
	movw	r1, #:lower16:.LC122
	movt	r1, #:upper16:.LC122
	add	r0, r0, #32
	bl	dev_err
	b	.L7717
.L7797:
	ldr	r3, [r4, #360]
	cmp	r3, #0
	beq	.L7717
	ldr	r3, [r4, #76]
	add	r8, r4, #356
	mov	r0, r8
	str	r3, [sp, #8]
	bl	_raw_spin_lock_irqsave
	ldr	r6, [r4, #208]
	mov	r7, r0
	cmp	r5, r6
	beq	.L7721
	mov	r10, #256
	mov	r9, #512
	mov	r1, r0
	b	.L7739
.L7724:
	bl	_raw_spin_lock_irqsave
	ldr	r6, [r4, #208]
	mov	r1, r0
	cmp	r5, r6
	beq	.L7801
.L7739:
	ldrd	r2, [r6]
	mov	r0, r8
	sub	fp, r6, #36
	str	r3, [r2, #4]
	str	r2, [r3]
	str	r10, [r6]
	str	r9, [r6, #4]
	bl	_raw_spin_unlock_irqrestore
	mov	r2, #0
	mov	r1, #208
	mvn	r3, #0
	movw	r0, #2056
	bl	__alloc_skb
	subs	r7, r0, #0
	mov	ip, #2048
	mov	r2, #208
	mov	r1, fp
	beq	.L7802
	ldr	r0, [r7, #160]
	ldr	r3, [r7, #172]
	add	r0, r0, #8
	add	r3, r3, #8
	str	r0, [r7, #160]
	str	r3, [r7, #172]
	str	r3, [r6, #-36]
	str	ip, [r6, #-32]
	str	r7, [r6, #-4]
	ldr	r0, [r4, #80]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	mov	fp, r0
	mov	r0, r8
	cmp	fp, #0
	beq	.L7724
	mov	r0, r7
	bl	dev_kfree_skb_any
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	mov	r7, r0
.L7723:
	ldr	r3, [sp, #8]
	movw	r1, #:lower16:.LC141
	mov	r2, fp
	movt	r1, #:upper16:.LC141
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	dev_err
	ldr	r3, [r4, #212]
	str	r6, [r4, #212]
	str	r5, [r6]
	str	r3, [r6, #4]
	str	r6, [r3]
.L7721:
	mov	r1, r7
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	b	.L7717
.L7801:
	mov	r7, r0
	b	.L7721
.L7802:
	mov	r0, r8
	mvn	fp, #11
	bl	_raw_spin_lock_irqsave
	mov	r7, r0
	b	.L7723
.L7789:
	movw	r3, #:lower16:.LANCHOR2
	movw	r0, #:lower16:.LC459
	ldr	r1, .L7803
	movt	r3, #:upper16:.LANCHOR2
	movt	r0, #:upper16:.LC459
	add	r3, r3, r6, lsl #2
	ldr	r3, [r3, #2456]
	mov	r2, r3
	bl	printk
	mov	r0, #0
	b	.L7691
.L7788:
	movw	r0, #:lower16:.LC458
	ldr	r1, .L7803
	movt	r0, #:upper16:.LC458
	bl	printk
	mvn	r0, #21
	b	.L7691
.L7804:
	.align	2
.L7803:
	.word	.LANCHOR2+3740
	.fnend
	.size	transport_store, .-transport_store
	.section	.rodata.str1.4
	.align	2
.LC460:
	.ascii	"<3>%s: USB not connected\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_start_io, %function
rmnet_sdio_start_io:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	add	r7, r0, #180
	mov	r0, r7
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r5, #184]
	mov	r6, r0
	cmp	r4, #0
	beq	.L7833
	ldr	r3, [r5, #308]
	tst	r3, #2
	beq	.L7817
	ldr	r3, [r5, #312]
	tst	r3, #2
	beq	.L7817
	movw	r9, #:lower16:rmnet_sdio_complete_epout
	mov	r4, #16
	movt	r9, #:upper16:rmnet_sdio_complete_epout
	add	r8, r5, #152
	b	.L7809
.L7835:
	cmn	r3, #4096
	bhi	.L7832
	str	r9, [r3, #28]
	ldr	r1, [r5, #156]
	subs	r4, r4, #1
	str	r2, [r5, #156]
	str	r8, [r3, #36]
	str	r1, [r3, #40]
	str	r2, [r1]
	ldr	r3, [r5, #160]
	add	r3, r3, #1
	str	r3, [r5, #160]
	beq	.L7834
.L7809:
	ldr	r0, [r5, #80]
	mov	r1, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r3, r0, #0
	add	r2, r3, #36
	bne	.L7835
.L7824:
	mvn	r4, #11
.L7813:
.L7812:
	mov	r1, r6
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r5
	bl	rmnet_sdio_free_buf
	mov	r3, #0
	str	r3, [r5, #80]
	str	r3, [r5, #84]
	str	r3, [r5, #88]
.L7805:
	mov	r0, r4
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L7838:
	mov	r1, r6
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r5, #76]
	ldr	r4, [r5, #184]
	str	r3, [sp, #4]
	cmp	r4, #0
	beq	.L7836
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r5, #152]
	mov	r6, r0
	cmp	r8, r4
	beq	.L7817
	mov	fp, #256
	mov	r9, #512
	b	.L7821
.L7820:
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r5, #152]
	mov	r6, r0
	cmp	r8, r4
	beq	.L7817
.L7821:
	ldrd	r2, [r4]
	mov	r1, r6
	mov	r0, r7
	sub	r6, r4, #36
	str	r3, [r2, #4]
	str	r2, [r3]
	str	fp, [r4]
	str	r9, [r4, #4]
	ldr	r3, [r5, #160]
	sub	r3, r3, #1
	str	r3, [r5, #160]
	bl	_raw_spin_unlock_irqrestore
	mov	r2, #0
	mov	r1, #32
	mvn	r3, #0
	movw	r0, #2056
	bl	__alloc_skb
	mov	r1, r6
	subs	r6, r0, #0
	mov	ip, #2048
	mov	r2, #32
	beq	.L7837
	ldr	r0, [r6, #160]
	ldr	r3, [r6, #172]
	add	r0, r0, #8
	add	r3, r3, #8
	str	r0, [r6, #160]
	str	r3, [r6, #172]
	str	r3, [r4, #-36]
	str	ip, [r4, #-32]
	str	r6, [r4, #-4]
	ldr	r0, [r5, #80]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	mov	r10, r0
	mov	r0, r7
	cmp	r10, #0
	beq	.L7820
	mov	r0, r6
	bl	dev_kfree_skb_any
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	mov	r6, r0
.L7819:
	ldr	r3, [sp, #4]
	movw	r1, #:lower16:.LC0
	mov	r2, r10
	movt	r1, #:upper16:.LC0
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	dev_err
	ldr	r3, [r5, #156]
	str	r4, [r5, #156]
	str	r8, [r4]
	str	r3, [r4, #4]
	str	r4, [r3]
	ldr	r3, [r5, #160]
	add	r3, r3, #1
	str	r3, [r5, #160]
.L7817:
	mov	r1, r6
	mov	r0, r7
	mov	r4, #0
	bl	_raw_spin_unlock_irqrestore
	b	.L7805
.L7833:
	mov	r1, r0
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	b	.L7805
.L7834:
	movw	r9, #:lower16:rmnet_sdio_complete_epin
	mov	r4, #200
	movt	r9, #:upper16:rmnet_sdio_complete_epin
	add	r10, r5, #124
	b	.L7815
.L7839:
	cmn	r3, #4096
	bhi	.L7832
	str	r9, [r3, #28]
	ldr	r1, [r5, #128]
	subs	r4, r4, #1
	str	r2, [r5, #128]
	str	r10, [r3, #36]
	str	r1, [r3, #40]
	str	r2, [r1]
	ldr	r3, [r5, #132]
	add	r3, r3, #1
	str	r3, [r5, #132]
	beq	.L7838
.L7815:
	ldr	r0, [r5, #84]
	mov	r1, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r3, r0, #0
	add	r2, r3, #36
	bne	.L7839
	b	.L7824
.L7837:
	mov	r0, r7
	mvn	r10, #11
	bl	_raw_spin_lock_irqsave
	mov	r6, r0
	b	.L7819
.L7832:
	mov	r4, r3
	b	.L7813
.L7836:
	movw	r0, #:lower16:.LC460
	ldr	r1, .L7840
	movt	r0, #:upper16:.LC460
	bl	printk
	b	.L7805
.L7841:
	.align	2
.L7840:
	.word	.LANCHOR2+3756
	.fnend
	.size	rmnet_sdio_start_io, .-rmnet_sdio_start_io
	.section	.rodata.str1.4
	.align	2
.LC461:
	.ascii	"<6>%s: usb rmnet sdio channels are open retry_cnt:%"
	.ascii	"d\012\000"
	.align	2
.LC462:
	.ascii	"Unable to open control SDIO channel\012\000"
	.align	2
.LC463:
	.ascii	"Unable to open DATA SDIO channel\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_open_sdio_work, %function
rmnet_open_sdio_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r5, [r0, #-168]
	ldr	r3, [r0, #68]
	ldr	r3, [r0, #64]
	ldr	r3, [r0, #64]
	tst	r3, #2
	beq	.L7843
	ldr	r3, [r0, #68]
	tst	r3, #2
	bne	.L7858
.L7843:
	movw	r3, #:lower16:.LANCHOR3
	movt	r3, #:upper16:.LANCHOR3
	ldr	r2, [r3, #-4076]
	add	r2, r2, #1
	cmp	r2, #90
	str	r2, [r3, #-4076]
	ble	.L7846
	ldr	r3, [r4, #68]
	tst	r3, #2
	beq	.L7859
	ldr	r3, [r4, #64]
	tst	r3, #2
	beq	.L7860
.L7842:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L7860:
	ldr	r0, [r5]
	movw	r1, #:lower16:.LC463
	movt	r1, #:upper16:.LC463
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	add	r0, r0, #32
	b	dev_err
.L7859:
	ldr	r0, [r5]
	movw	r1, #:lower16:.LC462
	movt	r1, #:upper16:.LC462
	add	r0, r0, #32
	bl	dev_err
	ldr	r3, [r4, #64]
	tst	r3, #2
	bne	.L7842
	b	.L7860
.L7846:
	mov	r1, r4
	mov	r2, #600
	ldr	r0, [r4, #-52]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	queue_delayed_work
.L7858:
	sub	r0, r0, #244
	bl	rmnet_sdio_start_io
	ldr	r3, [r4, #-60]
	cmp	r3, #0
	beq	.L7844
	add	r1, r4, #80
	ldr	r0, [r4, #-52]
	bl	queue_work
.L7844:
	movw	r4, #:lower16:.LANCHOR3
	movw	r0, #:lower16:.LC461
	ldr	r1, .L7861
	movt	r4, #:upper16:.LANCHOR3
	movt	r0, #:upper16:.LC461
	ldr	r2, [r4, #-4076]
	bl	printk
	mov	r3, #0
	str	r3, [r4, #-4076]
	b	.L7842
.L7862:
	.align	2
.L7861:
	.word	.LANCHOR2+3776
	.fnend
	.size	rmnet_open_sdio_work, .-rmnet_open_sdio_work
	.section	.rodata.str1.4
	.align	2
.LC464:
	.ascii	"<3>%s: rndis response on err %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_setup, %function
rndis_qc_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrh	r3, [r1]	@ unaligned
	.pad #12
	sub	sp, sp, #12
	ldr	r0, [r0, #20]
	ldrh	ip, [r1, #4]	@ unaligned
	ldrh	r2, [r1, #2]	@ unaligned
	rev16	r3, r3
	ldrh	r9, [r1, #6]	@ unaligned
	uxth	r3, r3
	ldr	r7, [r0, #24]
	cmp	r3, #8448
	ldr	r5, [r7, #4]
	beq	.L7864
	movw	r1, #41217
	cmp	r3, r1
	bne	.L7868
	cmp	r2, #0
	bne	.L7868
	ldrb	r3, [r4, #112]	@ zero_extendqisi2
	cmp	r3, ip
	bne	.L7868
	ldr	r1, [r4, #136]
	movw	r8, #:lower16:.LANCHOR0
	movt	r8, #:upper16:.LANCHOR0
	ldr	r10, .L7884
	rsb	r1, r1, r1, lsl #4
	lsl	r1, r1, #2
	add	r3, r8, r1
	add	r1, r1, #52
	ldr	r2, [r3, #3768]
	add	r1, r10, r1
	cmp	r2, r1
	ldr	r3, [r2]
	bne	.L7872
	b	.L7868
.L7870:
	cmp	r3, r1
	mov	r2, r3
	ldr	r3, [r3]
	beq	.L7868
.L7872:
	ldr	r0, [r2, #16]
	cmp	r0, #0
	bne	.L7870
	ldr	r6, [r2, #8]
	mov	r3, #1
	ldr	fp, [r2, #12]
	str	r3, [r2, #16]
	cmp	r6, #0
	beq	.L7868
	mov	r1, r6
	mov	r2, fp
	ldr	r0, [r5]
	bl	memcpy
	movw	r3, #:lower16:rndis_qc_response_complete
	movt	r3, #:upper16:rndis_qc_response_complete
	str	r3, [r5, #28]
	ldr	r1, [r4, #136]
	rsb	r1, r1, r1, lsl #4
	lsl	r1, r1, #2
	add	r8, r8, r1
	add	r1, r1, #52
	ldr	r0, [r8, #3768]
	add	r1, r10, r1
	cmp	r0, r1
	ldr	r10, [r0]
	bne	.L7879
	b	.L7876
.L7875:
	cmp	r8, r1
	mov	r0, r8
	ldr	r10, [r10]
	beq	.L7876
.L7879:
	cmp	r0, #0
	mov	r8, r10
	beq	.L7875
	ldr	ip, [r0, #8]
	cmp	r6, ip
	bne	.L7875
	ldr	ip, [r0, #4]
	mov	r3, #256
	str	r1, [sp, #4]
	str	ip, [r10, #4]
	str	r10, [ip]
	str	r3, [r0]
	mov	r3, #512
	str	r3, [r0, #4]
	bl	kfree
	ldr	r1, [sp, #4]
	mov	r0, r8
	ldr	r10, [r10]
	cmp	r8, r1
	bne	.L7879
.L7876:
	cmp	fp, #0
	mov	r6, fp
	blt	.L7863
	cmp	fp, r9
	movge	r9, #0
	movlt	r9, #1
	b	.L7869
.L7868:
	mvn	r6, #94
.L7863:
	mov	r0, r6
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L7864:
	cmp	r2, #0
	bne	.L7868
	ldrb	r3, [r4, #112]	@ zero_extendqisi2
	cmp	r3, ip
	bne	.L7868
	movw	r3, #:lower16:rndis_qc_command_complete
	mov	fp, r9
	movt	r3, #:upper16:rndis_qc_command_complete
	mov	r9, r2
	str	r3, [r5, #28]
.L7869:
	ldrb	r3, [r5, #26]	@ zero_extendqisi2
	str	fp, [r5, #4]
	mov	r1, r5
	str	r4, [r5, #32]
	mov	r2, #32
	bfi	r3, r9, #1, #1
	strb	r3, [r5, #26]
	ldr	r3, [r7]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r6, r0, #0
	bge	.L7863
	movw	r0, #:lower16:.LC464
	ldr	r1, .L7884+4
	mov	r2, r6
	movt	r0, #:upper16:.LC464
	bl	printk
	b	.L7863
.L7885:
	.align	2
.L7884:
	.word	.LANCHOR0+3716
	.word	.LANCHOR2+3800
	.fnend
	.size	rndis_qc_setup, .-rndis_qc_setup
	.section	.text.unlikely
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_reset_function_queue, %function
mbim_reset_function_queue:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, lr}
	.save {r4, r5, r6, lr}
	add	r5, r0, #196
	mov	r4, r0
	mov	r0, r5
	bl	_raw_spin_lock
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L7889
	movw	r1, #32800
	bl	kmem_cache_alloc
	subs	r3, r0, #0
	bne	.L7887
	b	.L7892
.L7889:
	mov	r3, #16
.L7887:
	mov	r1, #16
	mov	r2, #0
	stm	r3, {r1, r2}
	b	.L7888
.L7892:
	mvn	r3, #11
.L7888:
	ldr	r2, [r4, #204]
	add	r1, r3, #8
	add	ip, r4, #200
	mov	r0, r5
	str	r1, [r4, #204]
	str	ip, [r3, #8]
	str	r2, [r3, #12]
	str	r1, [r2]
	bl	_raw_spin_unlock
	add	r0, r4, #100
	mov	r3, #0
	pop	{r4, r5, r6, lr}
	mov	r2, #1
	mov	r1, #3
	b	__wake_up
	.fnend
	.size	mbim_reset_function_queue, .-mbim_reset_function_queue
	.section	.rodata.str1.4
	.align	2
.LC465:
	.ascii	"<6>%s: ESHUTDOWN/ECONNRESET, connection gone\000"
	.align	2
.LC466:
	.ascii	"<3>%s: Unknown event %02x --> %d\012\000"
	.align	2
.LC467:
	.ascii	"<3>%s: Pending notifications in MBIM_NOTIFY_NONE\012"
	.ascii	"\000"
	.align	2
.LC468:
	.ascii	"<3>%s: Queue notify request failed, err: %d\000"
	.align	2
.LC469:
	.ascii	"<3>%s: usb_ep_queue failed, err: %d\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_notify_complete, %function
mbim_notify_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r7, [r1]
	ldr	r4, [r1, #32]
	add	r6, r4, #196
	mov	r0, r6
	bl	_raw_spin_lock
	ldr	r3, [r5, #44]
	cmp	r3, #0
	bne	.L7912
	add	r3, r4, #160
	.syntax divided
@ 83 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r2, [r3]
	sub	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r3, [r4, #160]
.L7897:
	ldr	r5, [r4, #152]
	cmp	r5, #0
	beq	.L7899
	ldrb	r3, [r4, #156]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L7900
	cmp	r3, #3
	beq	.L7901
	ldr	r3, [r5]
	mvn	r2, #94
	add	r7, r4, #160
	strb	r2, [r3]
	ldrb	r2, [r4, #188]	@ zero_extendqisi2
	strh	r2, [r3, #4]	@ unaligned
	.syntax divided
@ 44 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	@ atomic_add
1:	ldrex	r3, [r7]
	add	r3, r3, #1
	strex	r2, r3, [r7]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mov	r0, r6
	ldr	r3, [r4, #160]
	bl	_raw_spin_unlock
	ldr	r0, [r4, #148]
	mov	r1, r5
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	mov	r5, r0
	mov	r0, r6
	bl	_raw_spin_lock
	cmp	r5, #0
	bne	.L7913
.L7899:
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock
.L7912:
	bgt	.L7895
	add	r2, r3, #108
	bics	r2, r2, #4
	beq	.L7914
.L7895:
	movw	r0, #:lower16:.LC466
	ldrb	r2, [r7, #1]	@ zero_extendqisi2
	ldr	r1, .L7915
	movt	r0, #:upper16:.LC466
	bl	printk
	b	.L7897
.L7901:
	ldr	r3, [r4, #160]
	cmp	r3, #0
	ble	.L7899
	mov	r0, r6
	bl	_raw_spin_unlock
	ldr	r0, [r4, #148]
	mov	r1, r5
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	mov	r5, r0
	mov	r0, r6
	bl	_raw_spin_lock
	cmp	r5, #0
	beq	.L7899
	add	r3, r4, #160
	.syntax divided
@ 83 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r2, [r3]
	sub	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	r0, #:lower16:.LC468
	ldr	r1, .L7915+4
	mov	r2, r5
	movt	r0, #:upper16:.LC468
	bl	printk
	b	.L7899
.L7900:
	ldr	r3, [r4, #160]
	cmp	r3, #0
	ble	.L7899
	movw	r0, #:lower16:.LC467
	ldr	r1, .L7915+4
	movt	r0, #:upper16:.LC467
	bl	printk
	b	.L7899
.L7913:
	.syntax divided
@ 83 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r7]
	sub	r3, r3, #1
	strex	r2, r3, [r7]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	r0, #:lower16:.LC469
	ldr	r1, .L7915+4
	mov	r2, r5
	movt	r0, #:upper16:.LC469
	bl	printk
	b	.L7899
.L7914:
	movw	r0, #:lower16:.LC465
	ldr	r1, .L7915
	strb	r2, [r4, #156]
	movt	r0, #:upper16:.LC465
	str	r2, [r4, #160]
	bl	printk
	mov	r0, r6
	bl	_raw_spin_unlock
	mov	r0, r4
	bl	mbim_clear_queues
	mov	r0, r4
	bl	mbim_reset_function_queue
	mov	r0, r6
	bl	_raw_spin_lock
	b	.L7897
.L7916:
	.align	2
.L7915:
	.word	.LANCHOR2+3816
	.word	.LANCHOR2+3840
	.fnend
	.size	mbim_notify_complete, .-mbim_notify_complete
	.section	.rodata.str1.4
	.align	2
.LC470:
	.ascii	"rndis response on err %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_setup, %function
rndis_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrh	r3, [r1]	@ unaligned
	.pad #4
	sub	sp, sp, #4
	ldr	r0, [r0, #20]
	ldrh	ip, [r1, #4]	@ unaligned
	ldrh	r2, [r1, #2]	@ unaligned
	rev16	r3, r3
	ldrh	r8, [r1, #6]	@ unaligned
	uxth	r3, r3
	ldr	r7, [r0, #24]
	cmp	r3, #8448
	ldr	r5, [r7, #4]
	beq	.L7918
	movw	r1, #41217
	cmp	r3, r1
	bne	.L7922
	cmp	r2, #0
	bne	.L7922
	ldrb	r3, [r4, #140]	@ zero_extendqisi2
	cmp	r3, ip
	bne	.L7922
	ldr	r1, [r4, #156]
	movw	r10, #:lower16:.LANCHOR0
	movt	r10, #:upper16:.LANCHOR0
	ldr	r9, .L7938
	rsb	r1, r1, r1, lsl #4
	lsl	r1, r1, #2
	add	r3, r10, r1
	add	r1, r1, #52
	ldr	r2, [r3, #3768]
	add	r1, r9, r1
	cmp	r2, r1
	ldr	r3, [r2]
	bne	.L7926
	b	.L7922
.L7924:
	cmp	r3, r1
	mov	r2, r3
	ldr	r3, [r3]
	beq	.L7922
.L7926:
	ldr	r0, [r2, #16]
	cmp	r0, #0
	bne	.L7924
	ldr	r6, [r2, #8]
	mov	r3, #1
	ldr	fp, [r2, #12]
	str	r3, [r2, #16]
	cmp	r6, #0
	beq	.L7922
	mov	r2, fp
	mov	r1, r6
	ldr	r0, [r5]
	bl	memcpy
	movw	r3, #:lower16:rndis_response_complete
	str	r4, [r5, #32]
	movt	r3, #:upper16:rndis_response_complete
	str	r3, [r5, #28]
	ldr	r2, [r4, #156]
	rsb	r2, r2, r2, lsl #4
	lsl	r2, r2, #2
	add	r10, r10, r2
	add	r2, r2, #52
	ldr	r0, [r10, #3768]
	add	r10, r9, r2
	cmp	r0, r10
	ldr	r9, [r0]
	bne	.L7933
	b	.L7930
.L7929:
	cmp	r4, r10
	mov	r0, r4
	ldr	r9, [r9]
	beq	.L7930
.L7933:
	cmp	r0, #0
	mov	r4, r9
	beq	.L7929
	ldr	r1, [r0, #8]
	cmp	r6, r1
	bne	.L7929
	ldr	r1, [r0, #4]
	mov	r3, #256
	str	r1, [r9, #4]
	str	r9, [r1]
	str	r3, [r0]
	mov	r3, #512
	str	r3, [r0, #4]
	bl	kfree
	cmp	r4, r10
	mov	r0, r4
	ldr	r9, [r9]
	bne	.L7933
.L7930:
	cmp	fp, #0
	mov	r4, fp
	blt	.L7917
	cmp	fp, r8
	movge	r8, #0
	movlt	r8, #1
	b	.L7923
.L7922:
	mvn	r4, #94
.L7917:
	mov	r0, r4
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L7918:
	cmp	r2, #0
	bne	.L7922
	ldrb	r3, [r4, #140]	@ zero_extendqisi2
	cmp	r3, ip
	bne	.L7922
	movw	r3, #:lower16:rndis_command_complete
	mov	fp, r8
	str	r4, [r5, #32]
	movt	r3, #:upper16:rndis_command_complete
	mov	r8, r2
	str	r3, [r5, #28]
.L7923:
	ldrb	r3, [r5, #26]	@ zero_extendqisi2
	str	fp, [r5, #4]
	mov	r1, r5
	mov	r2, #32
	bfi	r3, r8, #1, #1
	strb	r3, [r5, #26]
	ldr	r3, [r7]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	bge	.L7917
	ldr	r0, [r7]
	movw	r1, #:lower16:.LC470
	mov	r2, r4
	movt	r1, #:upper16:.LC470
	add	r0, r0, #32
	bl	dev_err
	b	.L7917
.L7939:
	.align	2
.L7938:
	.word	.LANCHOR0+3716
	.fnend
	.size	rndis_setup, .-rndis_setup
	.section	.rodata.str1.4
	.align	2
.LC471:
	.ascii	"<3>%s: rmnet ctrl file handler %pK is not open\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gqti_ctrl_notify_modem, %function
gqti_ctrl_notify_modem:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movt	r3, #:upper16:.LANCHOR0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r3, #4]
	add	r6, r4, #52
	str	r2, [r4, #12]
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldrb	r3, [r4, #4]	@ zero_extendqisi2
	mov	r5, r0
	cmp	r3, #0
	beq	.L7948
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L7942
	movw	r1, #32800
	bl	kmem_cache_alloc
	subs	r3, r0, #0
	beq	.L7949
	mov	r1, #16
	mov	r2, #0
	stm	r3, {r1, r2}
.L7943:
	ldr	r2, [r4, #48]
	add	ip, r3, #8
	add	lr, r4, #44
	mov	r1, r5
	mov	r0, r6
	str	ip, [r4, #48]
	str	lr, [r3, #8]
	str	r2, [r3, #12]
	str	ip, [r2]
	bl	_raw_spin_unlock_irqrestore
	add	r0, r4, #32
	mov	r3, #0
	ldrd	r4, [sp]
	mov	r2, #1
	mov	r1, #3
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	__wake_up
.L7942:
	mov	r2, #16
	mov	r3, r2
	str	r2, [r0, #16]
	str	r0, [r0, #20]
	b	.L7943
.L7949:
	mvn	r3, #11
	b	.L7943
.L7948:
	movw	r0, #:lower16:.LC471
	ldr	r1, .L7950
	mov	r2, r4
	movt	r0, #:upper16:.LC471
	bl	printk
	mov	r1, r5
	mov	r0, r6
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock_irqrestore
.L7951:
	.align	2
.L7950:
	.word	.LANCHOR2+3856
	.fnend
	.size	gqti_ctrl_notify_modem, .-gqti_ctrl_notify_modem
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gser_send_modem_ctrl_bits, %function
gser_send_modem_ctrl_bits:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	add	r8, r0, #148
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	strh	r1, [r0, #170]	@ movhi
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r4, #156]
	mov	r6, r0
	cmp	r5, #0
	beq	.L7953
	ldr	r3, [r4, #20]
	mov	r1, #0
	mov	r7, #10
	mvn	ip, #94
	mov	r2, #32
	ldr	r0, [r4, #152]
	mov	lr, #2
	ldr	r9, [r3, #24]
	strb	r1, [r4, #144]
	str	r1, [r4, #156]
	ldr	r3, [r5]
	str	r7, [r5, #4]
	strb	ip, [r3]
	strb	r2, [r3, #1]
	strb	r1, [r3, #2]
	strb	r1, [r3, #3]
	ldrb	ip, [r4, #136]	@ zero_extendqisi2
	strh	ip, [r3, #4]	@ unaligned
	strb	lr, [r3, #6]
	strb	r1, [r3, #7]
	ldrh	ip, [r4, #170]	@ unaligned
	mov	r1, r5
	strh	ip, [r3, #8]	@ unaligned
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r7, r0, #0
	blt	.L7956
.L7954:
	mov	r0, r8
	mov	r1, r6
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r7
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L7953:
	mov	r3, #1
	mov	r7, r5
	strb	r3, [r4, #144]
	b	.L7954
.L7956:
	ldr	r0, [r9]
	movw	r1, #:lower16:.LC400
	mov	r3, r7
	ldrb	r2, [r4, #137]	@ zero_extendqisi2
	movt	r1, #:upper16:.LC400
	add	r0, r0, #32
	bl	dev_err
	str	r5, [r4, #156]
	b	.L7954
	.fnend
	.size	gser_send_modem_ctrl_bits, .-gser_send_modem_ctrl_bits
	.section	.rodata.str1.4
	.align	2
.LC472:
	.ascii	"<3>%s:teth_bridge_init() failed\012\000"
	.align	2
.LC473:
	.ascii	"<3>%s: out of memory\012\000"
	.align	2
.LC474:
	.ascii	"<3>%s: usb_bam_client_ready failed: err:%d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam2bam_connect_work, %function
gbam2bam_connect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	sub	r7, r0, #284
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r3, [r0, #-152]
	.pad #4
	sub	sp, sp, #4
	cmp	r3, #6
	beq	.L7989
	cmp	r3, #7
	beq	.L7990
.L7960:
	sub	r6, r4, #280
	sub	r5, r4, #276
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r8, r0
	mov	r0, r5
	bl	_raw_spin_lock
	ldr	r3, [r4, #-272]
	cmp	r3, #0
	beq	.L7991
	ldr	r0, [r3, #80]
	mov	r1, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	cmp	r0, #0
	str	r0, [r4, #-172]
	beq	.L7992
	str	r7, [r0, #32]
	ldr	r2, [r4, #-172]
	movw	r3, #:lower16:gbam_endless_rx_complete
	movt	r3, #:upper16:gbam_endless_rx_complete
	mov	fp, #0
	movw	r10, #65439
	mov	r9, #32
	movt	r10, 65534
	movt	r9, 1
	str	r3, [r2, #28]
	ldr	r3, [r4, #-172]
	mov	r1, #32
	str	fp, [r3, #4]
	ldr	r2, [r4, #-172]
	ldrb	r3, [r2, #26]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r2, #26]
	ldr	r3, [r4, #-172]
	ldr	r2, [r4, #-164]
	and	r2, r2, r10
	orr	r2, r2, r9
	str	r2, [r3, #52]
	ldr	r3, [r4, #-272]
	ldr	r0, [r3, #76]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	mov	r3, r0
	mov	r0, r5
	str	r3, [r4, #-168]
	bl	_raw_spin_unlock
	mov	r1, r8
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r4, #-168]
	cmp	r3, fp
	beq	.L7988
	str	r7, [r3, #32]
	ldr	r2, [r4, #-168]
	movw	r3, #:lower16:gbam_endless_tx_complete
	movt	r3, #:upper16:gbam_endless_tx_complete
	mov	r0, r6
	str	r3, [r2, #28]
	ldr	r3, [r4, #-168]
	str	fp, [r3, #4]
	ldr	r2, [r4, #-168]
	ldrb	r3, [r2, #26]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r2, #26]
	ldr	r2, [r4, #-168]
	ldr	r3, [r4, #-160]
	and	r3, r3, r10
	orr	r3, r3, r9
	str	r3, [r2, #52]
	bl	_raw_spin_lock
	ldr	r3, [r4, #-272]
	cmp	r3, #0
	beq	.L7993
	ldr	r0, [r3, #80]
	mov	r2, #32
	ldr	r1, [r4, #-172]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	bne	.L7994
.L7966:
	mov	r0, r6
	bl	_raw_spin_unlock
.L7965:
	mov	r0, r5
	bl	_raw_spin_lock
	ldr	r3, [r4, #-272]
	cmp	r3, #0
	beq	.L7995
	ldr	r0, [r3, #76]
	mov	r2, #32
	ldr	r1, [r4, #-168]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	bne	.L7996
.L7969:
	mov	r0, r5
	bl	_raw_spin_unlock
.L7968:
	ldr	r3, [r4, #-152]
	cmp	r3, #6
	beq	.L7997
.L7957:
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L7997:
	ldr	r3, [r4, #-284]
	cmp	r3, #0
	bne	.L7957
	movw	r0, #:lower16:gbam_peer_reset_cb
	mov	r1, r7
	movt	r0, #:upper16:gbam_peer_reset_cb
	bl	usb_bam_register_peer_reset_cb
	mov	r0, #1
	bl	usb_bam_client_ready
	subs	r2, r0, #0
	beq	.L7957
	ldr	r1, .L7999
	movw	r0, #:lower16:.LC474
	movt	r0, #:upper16:.LC474
.L7986:
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	printk
.L7989:
	bl	usb_bam_reset_complete
	ldrb	r0, [r4, #-156]	@ zero_extendqisi2
	sub	r1, r4, #164
	bl	usb_bam_connect
	subs	r2, r0, #0
	bne	.L7998
	ldrb	r0, [r4, #-155]	@ zero_extendqisi2
	sub	r1, r4, #160
	bl	usb_bam_connect
	subs	r2, r0, #0
	beq	.L7960
	movw	r0, #:lower16:.LC190
	ldr	r1, .L7999
	movt	r0, #:upper16:.LC190
	b	.L7986
.L7991:
	mov	r0, r5
	bl	_raw_spin_unlock
	mov	r1, r8
	mov	r0, r6
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L7992:
	mov	r0, r5
	bl	_raw_spin_unlock
	mov	r1, r8
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
.L7988:
	ldr	r1, .L7999
	movw	r0, #:lower16:.LC473
	movt	r0, #:upper16:.LC473
.L7987:
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	printk
.L7995:
	mov	r0, r5
	bl	_raw_spin_unlock
	movw	r0, #:lower16:.LC17
	ldr	r1, .L7999+4
	movt	r0, #:upper16:.LC17
	bl	printk
	b	.L7968
.L7993:
	mov	r0, r6
	bl	_raw_spin_unlock
	movw	r0, #:lower16:.LC17
	ldr	r1, .L7999+8
	movt	r0, #:upper16:.LC17
	bl	printk
	b	.L7965
.L7994:
	movw	r0, #:lower16:.LC193
	ldr	r1, .L7999+8
	movt	r0, #:upper16:.LC193
	bl	printk
	b	.L7966
.L7998:
	movw	r0, #:lower16:.LC189
	ldr	r1, .L7999
	movt	r0, #:upper16:.LC189
	b	.L7986
.L7996:
	movw	r0, #:lower16:.LC193
	ldr	r1, .L7999+4
	movt	r0, #:upper16:.LC193
	bl	printk
	b	.L7969
.L7990:
	movw	r0, #:lower16:.LC472
	ldr	r1, .L7999
	movt	r0, #:upper16:.LC472
	b	.L7987
.L8000:
	.align	2
.L7999:
	.word	.LANCHOR2+3880
	.word	.LANCHOR2+1348
	.word	.LANCHOR2+1324
	.fnend
	.size	gbam2bam_connect_work, .-gbam2bam_connect_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gser_send_break, %function
gser_send_break:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	cmp	r1, #0
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	add	r8, r0, #148
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldrh	r3, [r0, #170]
	mov	r0, r8
	bic	r3, r3, #4
	uxth	r3, r3
	orrne	r3, r3, #4
	strh	r3, [r4, #170]	@ movhi
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r4, #156]
	mov	r6, r0
	cmp	r5, #0
	beq	.L8003
	ldr	r3, [r4, #20]
	mov	r1, #0
	mov	r7, #10
	mvn	ip, #94
	mov	r2, #32
	ldr	r0, [r4, #152]
	mov	lr, #2
	ldr	r9, [r3, #24]
	strb	r1, [r4, #144]
	str	r1, [r4, #156]
	ldr	r3, [r5]
	str	r7, [r5, #4]
	strb	ip, [r3]
	strb	r2, [r3, #1]
	strb	r1, [r3, #2]
	strb	r1, [r3, #3]
	ldrb	ip, [r4, #136]	@ zero_extendqisi2
	strh	ip, [r3, #4]	@ unaligned
	strb	lr, [r3, #6]
	strb	r1, [r3, #7]
	ldrh	ip, [r4, #170]	@ unaligned
	mov	r1, r5
	strh	ip, [r3, #8]	@ unaligned
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r7, r0, #0
	blt	.L8009
.L8004:
	mov	r0, r8
	mov	r1, r6
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r7
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L8003:
	mov	r3, #1
	mov	r7, r5
	strb	r3, [r4, #144]
	b	.L8004
.L8009:
	ldr	r0, [r9]
	movw	r1, #:lower16:.LC400
	mov	r3, r7
	ldrb	r2, [r4, #137]	@ zero_extendqisi2
	movt	r1, #:upper16:.LC400
	add	r0, r0, #32
	bl	dev_err
	str	r5, [r4, #156]
	b	.L8004
	.fnend
	.size	gser_send_break, .-gser_send_break
	.align	2
	.global	gser_send_carrier_detect
	.syntax unified
	.arm
	.fpu softvfp
	.type	gser_send_carrier_detect, %function
gser_send_carrier_detect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	cmp	r1, #0
	mov	r4, r0
	strd	r6, [sp, #8]
	add	r7, r0, #148
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldrh	r3, [r0, #170]
	mov	r0, r7
	bic	r3, r3, #1
	uxth	r3, r3
	orrne	r3, r3, #1
	strh	r3, [r4, #170]	@ movhi
	bl	_raw_spin_lock_irqsave
	ldr	r6, [r4, #156]
	mov	r8, r0
	cmp	r6, #0
	beq	.L8012
	ldr	r3, [r4, #20]
	mov	r1, #0
	mvn	ip, #94
	mov	r2, #32
	mov	r9, #10
	ldr	r0, [r4, #152]
	mov	lr, #2
	ldr	r5, [r3, #24]
	strb	r1, [r4, #144]
	str	r1, [r4, #156]
	ldr	r3, [r6]
	str	r9, [r6, #4]
	strb	ip, [r3]
	strb	r2, [r3, #1]
	strb	r1, [r3, #2]
	strb	r1, [r3, #3]
	ldrb	ip, [r4, #136]	@ zero_extendqisi2
	strh	ip, [r3, #4]	@ unaligned
	strb	lr, [r3, #6]
	strb	r1, [r3, #7]
	ldrh	ip, [r4, #170]	@ unaligned
	mov	r1, r6
	strh	ip, [r3, #8]	@ unaligned
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r3, r0, #0
	movge	r5, r3
	blt	.L8019
.L8014:
	mov	r0, r7
	mov	r1, r8
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L8012:
	mov	r3, #1
	mov	r5, r6
	strb	r3, [r4, #144]
	b	.L8014
.L8019:
	ldr	r0, [r5]
	movw	r1, #:lower16:.LC400
	mov	r5, r3
	ldrb	r2, [r4, #137]	@ zero_extendqisi2
	movt	r1, #:upper16:.LC400
	add	r0, r0, #32
	bl	dev_err
	str	r6, [r4, #156]
	b	.L8014
	.fnend
	.size	gser_send_carrier_detect, .-gser_send_carrier_detect
	.align	2
	.global	gser_send_ring_indicator
	.syntax unified
	.arm
	.fpu softvfp
	.type	gser_send_ring_indicator, %function
gser_send_ring_indicator:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	cmp	r1, #0
	mov	r4, r0
	strd	r6, [sp, #8]
	add	r7, r0, #148
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldrh	r3, [r0, #170]
	mov	r0, r7
	bic	r3, r3, #8
	uxth	r3, r3
	orrne	r3, r3, #8
	strh	r3, [r4, #170]	@ movhi
	bl	_raw_spin_lock_irqsave
	ldr	r6, [r4, #156]
	mov	r8, r0
	cmp	r6, #0
	beq	.L8022
	ldr	r3, [r4, #20]
	mov	r1, #0
	mvn	ip, #94
	mov	r2, #32
	mov	r9, #10
	ldr	r0, [r4, #152]
	mov	lr, #2
	ldr	r5, [r3, #24]
	strb	r1, [r4, #144]
	str	r1, [r4, #156]
	ldr	r3, [r6]
	str	r9, [r6, #4]
	strb	ip, [r3]
	strb	r2, [r3, #1]
	strb	r1, [r3, #2]
	strb	r1, [r3, #3]
	ldrb	ip, [r4, #136]	@ zero_extendqisi2
	strh	ip, [r3, #4]	@ unaligned
	strb	lr, [r3, #6]
	strb	r1, [r3, #7]
	ldrh	ip, [r4, #170]	@ unaligned
	mov	r1, r6
	strh	ip, [r3, #8]	@ unaligned
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r3, r0, #0
	movge	r5, r3
	blt	.L8029
.L8024:
	mov	r0, r7
	mov	r1, r8
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L8022:
	mov	r3, #1
	mov	r5, r6
	strb	r3, [r4, #144]
	b	.L8024
.L8029:
	ldr	r0, [r5]
	movw	r1, #:lower16:.LC400
	mov	r5, r3
	ldrb	r2, [r4, #137]	@ zero_extendqisi2
	movt	r1, #:upper16:.LC400
	add	r0, r0, #32
	bl	dev_err
	str	r6, [r4, #156]
	b	.L8024
	.fnend
	.size	gser_send_ring_indicator, .-gser_send_ring_indicator
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gser_connect, %function
gser_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	add	r7, r0, #148
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldrh	r3, [r0, #170]
	mov	r0, r7
	orr	r3, r3, #3
	strh	r3, [r4, #170]	@ movhi
	bl	_raw_spin_lock_irqsave
	ldr	r6, [r4, #156]
	mov	r5, r0
	cmp	r6, #0
	moveq	r3, #1
	strbeq	r3, [r4, #144]
	beq	.L8032
	ldr	r3, [r4, #20]
	mov	r1, #0
	mvn	ip, #94
	mov	r2, #32
	mov	r9, #10
	ldr	r0, [r4, #152]
	mov	lr, #2
	ldr	r8, [r3, #24]
	strb	r1, [r4, #144]
	str	r1, [r4, #156]
	ldr	r3, [r6]
	str	r9, [r6, #4]
	strb	ip, [r3]
	strb	r2, [r3, #1]
	strb	r1, [r3, #2]
	strb	r1, [r3, #3]
	ldrb	ip, [r4, #136]	@ zero_extendqisi2
	strh	ip, [r3, #4]	@ unaligned
	strb	lr, [r3, #6]
	strb	r1, [r3, #7]
	ldrh	ip, [r4, #170]	@ unaligned
	mov	r1, r6
	strh	ip, [r3, #8]	@ unaligned
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r3, r0, #0
	blt	.L8034
.L8032:
	mov	r1, r5
	mov	r0, r7
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irqrestore
.L8034:
	ldr	r0, [r8]
	movw	r1, #:lower16:.LC400
	ldrb	r2, [r4, #137]	@ zero_extendqisi2
	movt	r1, #:upper16:.LC400
	add	r0, r0, #32
	bl	dev_err
	str	r6, [r4, #156]
	b	.L8032
	.fnend
	.size	gser_connect, .-gser_connect
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gser_disconnect, %function
gser_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	add	r7, r0, #148
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldrh	r3, [r0, #170]
	mov	r0, r7
	bic	r3, r3, #3
	strh	r3, [r4, #170]	@ movhi
	bl	_raw_spin_lock_irqsave
	ldr	r6, [r4, #156]
	mov	r5, r0
	cmp	r6, #0
	moveq	r3, #1
	strbeq	r3, [r4, #144]
	beq	.L8037
	ldr	r3, [r4, #20]
	mov	r1, #0
	mvn	ip, #94
	mov	r2, #32
	mov	r9, #10
	ldr	r0, [r4, #152]
	mov	lr, #2
	ldr	r8, [r3, #24]
	strb	r1, [r4, #144]
	str	r1, [r4, #156]
	ldr	r3, [r6]
	str	r9, [r6, #4]
	strb	ip, [r3]
	strb	r2, [r3, #1]
	strb	r1, [r3, #2]
	strb	r1, [r3, #3]
	ldrb	ip, [r4, #136]	@ zero_extendqisi2
	strh	ip, [r3, #4]	@ unaligned
	strb	lr, [r3, #6]
	strb	r1, [r3, #7]
	ldrh	ip, [r4, #170]	@ unaligned
	mov	r1, r6
	strh	ip, [r3, #8]	@ unaligned
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r3, r0, #0
	blt	.L8039
.L8037:
	mov	r1, r5
	mov	r0, r7
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irqrestore
.L8039:
	ldr	r0, [r8]
	movw	r1, #:lower16:.LC400
	ldrb	r2, [r4, #137]	@ zero_extendqisi2
	movt	r1, #:upper16:.LC400
	add	r0, r0, #32
	bl	dev_err
	str	r6, [r4, #156]
	b	.L8037
	.fnend
	.size	gser_disconnect, .-gser_disconnect
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_common_release, %function
fsg_common_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	mov	r6, r0
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r3, [r0, #-100]
	cmp	r3, #7
	bne	.L8070
.L8041:
	ldr	r0, [r6, #-112]
	cmp	r0, #0
	beq	.L8045
	ldr	r5, [r6, #-120]
	cmp	r5, #0
	beq	.L8046
	ldr	r7, .L8072
	add	r4, r0, #48
	add	r9, r7, #16
	add	r8, r7, #32
.L8050:
	mov	r1, r7
	mov	r0, r4
	bl	device_remove_file
	mov	r1, r9
	mov	r0, r4
	bl	device_remove_file
	mov	r1, r8
	mov	r0, r4
	bl	device_remove_file
	mov	r0, r4
	ldr	r1, .L8072+4
	bl	device_remove_file
	ldr	r3, [r4, #-48]
	mov	r0, r4
	cmp	r3, #0
	beq	.L8047
	mov	r0, r3
	bl	fput
	mov	r3, #0
	mov	r0, r4
	add	r4, r4, #400
	str	r3, [r4, #-448]
	bl	device_unregister
	subs	r5, r5, #1
	bne	.L8050
.L8049:
	ldr	r0, [r6, #-112]
.L8046:
	bl	kfree
.L8045:
	ldr	r5, [r6, #-144]
	add	r4, r5, #32
	add	r5, r5, #160
.L8051:
	add	r4, r4, #32
	ldr	r0, [r4, #-64]
	bl	kfree
	cmp	r5, r4
	bne	.L8051
	ldr	r0, [r6, #-144]
	bl	kfree
	ldrb	r3, [r6, #-68]	@ zero_extendqisi2
	tst	r3, #2
	bne	.L8071
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L8047:
	bl	device_unregister
	subs	r5, r5, #1
	add	r4, r4, #400
	bne	.L8050
	b	.L8049
.L8070:
	sub	r5, r0, #168
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r6, #-100]
	mov	r4, r0
	cmp	r3, #6
	bgt	.L8043
	ldr	r3, [r6, #-156]
	mov	r1, #6
	ldr	r2, [r6, #-44]
	str	r1, [r6, #-100]
	str	r3, [r6, #-96]
	cmp	r2, #0
	beq	.L8043
	mov	r1, #2
	mov	r0, #10
	bl	send_sig_info
.L8043:
	mov	r0, r5
	mov	r1, r4
	bl	_raw_spin_unlock_irqrestore
	sub	r0, r6, #60
	bl	wait_for_completion
	b	.L8041
.L8071:
	sub	r0, r6, #212
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	kfree
.L8073:
	.align	2
.L8072:
	.word	.LANCHOR1+1976
	.word	.LANCHOR1+2024
	.fnend
	.size	fsg_common_release, .-fsg_common_release
	.section	.rodata.str1.4
	.align	2
.LC475:
	.ascii	"lun%d\000"
	.align	2
.LC476:
	.ascii	"Linux\000"
	.align	2
.LC477:
	.ascii	"File-Stor Gadget\000"
	.align	2
.LC478:
	.ascii	"File-CD Gadget\000"
	.align	2
.LC479:
	.ascii	"file-storage\000"
	.align	2
.LC480:
	.ascii	"(error)\000"
	.align	2
.LC481:
	.ascii	"(no medium)\000"
	.align	2
.LC482:
	.ascii	"removable \000"
	.align	2
.LC483:
	.ascii	"\000"
	.align	2
.LC484:
	.ascii	"read only \000"
	.align	2
.LC485:
	.ascii	"lun0\000"
	.align	2
.LC486:
	.ascii	"lun1\000"
	.align	2
.LC487:
	.ascii	"uicc%d\000"
	.align	2
.LC488:
	.ascii	"invalid number of LUNs: %u\012\000"
	.align	2
.LC489:
	.ascii	"&common->filesem\000"
	.align	2
.LC490:
	.ascii	"failed to register LUN%d: %d\012\000"
	.align	2
.LC491:
	.ascii	"no file given for LUN%d\012\000"
	.align	2
.LC492:
	.ascii	"controller '%s' not recognized\012\000"
	.align	2
.LC493:
	.ascii	"%-8s%-16s%04x\000"
	.align	2
.LC494:
	.ascii	"&x->wait\000"
	.align	2
.LC495:
	.ascii	"&common->fsg_wait\000"
	.align	2
.LC496:
	.ascii	"Mass Storage Function, version: 2009/09/11\012\000"
	.align	2
.LC497:
	.ascii	"Number of LUNs=%d\012\000"
	.align	2
.LC498:
	.ascii	"LUN: %s%s%sfile: %s\012\000"
	.align	2
.LC499:
	.ascii	"CD-ROM \000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mass_storage_function_init, %function
mass_storage_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 96
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r2, #:lower16:.LANCHOR0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	r2, #:upper16:.LANCHOR0
	strd	r6, [sp, #8]
	mov	r6, r1
	strd	r8, [sp, #16]
	mov	r9, r0
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r7, [r2, #196]!
	.pad #108
	sub	sp, sp, #108
	cmp	r7, r2
	sub	r7, r7, #208
	bne	.L8076
	b	.L8075
.L8204:
	ldr	r7, [r7, #208]
	cmp	r7, r2
	sub	r7, r7, #208
	beq	.L8075
.L8076:
	ldr	r3, [r7, #8]
	cmp	r6, r3
	bne	.L8204
.L8075:
	movw	r3, #:lower16:kmalloc_caches
	ldr	r10, [r7, #48]
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #28]
	str	r3, [sp, #32]
	cmp	r10, #0
	ldrbne	r10, [r10, #48]	@ zero_extendqisi2
	cmp	r0, #0
	beq	.L8138
	movw	r1, #32976
	bl	kmem_cache_alloc
	subs	r5, r0, #0
	beq	.L8205
.L8078:
	mov	r2, #1
	movw	r1, #30060
	movt	r1, 110
	add	r8, sp, #40
	str	r2, [r5]
	strb	r2, [r5, #9]
	ldr	r3, [r7, #48]
	str	r1, [sp, #40]
	cmp	r3, #0
	beq	.L8206
	ldrb	r1, [r3, #9]	@ zero_extendqisi2
	cmp	r1, #0
	bne	.L8207
	ldrb	r3, [r3, #10]	@ zero_extendqisi2
	ldr	r4, [r5]
	cmp	r3, #0
	bne	.L8208
.L8081:
	rsb	r3, r4, #8
	cmp	r10, r3
	uxtbhi	r10, r3
	cmp	r10, #0
	beq	.L8084
	movw	r7, #:lower16:.LC487
	mov	fp, #0
	movt	r7, #:upper16:.LC487
.L8085:
	lsl	r4, r4, #3
	mov	r3, fp
	mov	r2, r7
	add	r0, r8, r4
	mov	r1, #8
	bl	snprintf
	add	r4, r5, r4
	mov	r3, #1
	add	fp, fp, #1
	strb	r3, [r4, #9]
	ldr	r3, [r5]
	cmp	fp, r10
	add	r4, r3, #1
	str	r4, [r5]
	bne	.L8085
.L8086:
	cmp	r3, #7
	ldr	r3, [r6]
	str	r3, [sp, #28]
	bhi	.L8209
	ldr	r3, [sp, #32]
	ldr	r0, [r3, #32]
	cmp	r0, #0
	beq	.L8140
	movw	r1, #32976
	bl	kmem_cache_alloc
	subs	r3, r0, #0
	str	r3, [sp, #8]
	beq	.L8090
.L8089:
	ldr	r7, [sp, #8]
	movw	r1, #32976
	mov	r0, #128
	ldrb	r3, [r7, #144]	@ zero_extendqisi2
	orr	r3, r3, #2
	strb	r3, [r7, #144]
	bl	__kmalloc
	cmp	r0, #0
	str	r0, [r7, #68]
	beq	.L8210
	ldr	r2, [sp, #8]
	mov	r0, #400
	movw	r1, #32976
	ldr	r3, [r5, #76]
	ldr	ip, [sp, #28]
	mul	r0, r0, r4
	str	r3, [r2, #172]
	ldr	r3, [r5, #80]
	str	ip, [r2]
	str	r3, [r2, #176]
	ldr	r3, [ip, #4]
	str	r3, [r2, #48]
	ldr	r3, [r6, #4]
	str	r6, [r2, #4]
	str	r3, [r2, #52]
	bl	__kmalloc
	subs	fp, r0, #0
	beq	.L8108
	ldr	r2, [sp, #8]
	movw	r1, #:lower16:.LC489
	add	r7, r5, #4
	movt	r1, #:upper16:.LC489
	add	r3, r2, #28
	str	fp, [r2, #100]
	mov	r0, r3
	mov	r6, r3
	ldr	r3, .L8221
	sub	r2, r3, #8
	bl	__init_rwsem
	cmp	r4, #0
	ble	.L8107
	movw	r3, #:lower16:fsg_lun_release
	mov	r2, #255
	str	r9, [sp, #36]
	movt	r3, #:upper16:fsg_lun_release
	movt	r2, 255
	movw	r1, #:lower16:.LC475
	mov	r10, #0
	strd	r2, [sp, #16]
	ldr	r3, [sp, #28]
	movt	r1, #:upper16:.LC475
	mov	r9, r6
	str	r1, [sp, #24]
	add	r3, r3, #32
	str	r3, [sp, #12]
	b	.L8106
.L8215:
	bl	fsg_lun_open
	cmp	r0, #0
	bne	.L8211
.L8105:
	add	r10, r10, #1
	add	fp, fp, #400
	cmp	r4, r10
	beq	.L8212
.L8106:
	ldrb	r2, [r7, #6]	@ zero_extendqisi2
	mov	r6, fp
	mov	r1, r9
	ldrb	r0, [fp, #24]	@ zero_extendqisi2
	ldr	r3, [sp, #16]
	subs	r2, r2, #0
	movne	r2, #1
	bfi	r0, r2, #3, #1
	strb	r0, [fp, #24]
	ldr	r0, [r7, #4]
	ldrb	r2, [fp, #24]	@ zero_extendqisi2
	tst	r0, r3
	ldr	r3, [sp, #20]
	movne	r0, #1
	moveq	r0, #0
	bfi	r2, r0, #1, #1
	bfi	r2, r0, #0, #1
	mov	r0, r2
	strb	r2, [fp, #24]
	ldrb	r2, [r7, #5]	@ zero_extendqisi2
	bfi	r0, r2, #2, #1
	mov	r2, r0
	strb	r0, [fp, #24]
	ldrb	r0, [r7, #7]	@ zero_extendqisi2
	str	r3, [fp, #388]
	ldr	r3, [sp, #12]
	bfi	r2, r0, #7, #1
	strb	r2, [fp, #24]
	str	r3, [r6, #48]!
	mov	r0, r6
	bl	dev_set_drvdata
	ldr	r1, [r5, #68]
	mov	r2, r10
	mov	r0, r6
	ldr	r3, [sp, #24]
	cmp	r1, #0
	moveq	r1, r3
	bl	dev_set_name
	mov	r0, r6
	bl	device_register
	mov	r2, r0
	ldr	r1, .L8221+4
	mov	r0, r6
	cmp	r2, #0
	bne	.L8213
	bl	device_create_file
	mov	r2, r0
	ldr	r1, .L8221+8
	mov	r0, r6
	cmp	r2, #0
	bne	.L8099
	bl	device_create_file
	mov	r2, r0
	ldr	r1, .L8221+12
	mov	r0, r6
	cmp	r2, #0
	bne	.L8099
	bl	device_create_file
	mov	r2, r0
	ldr	r1, .L8221+16
	mov	r0, r6
	cmp	r2, #0
	bne	.L8099
	bl	device_create_file
	mov	r3, r0
	mov	r0, fp
	cmp	r3, #0
	bne	.L8214
	ldr	r1, [r7]
	add	r7, r7, #8
	cmp	r1, #0
	bne	.L8215
	ldrb	r3, [fp, #24]	@ zero_extendqisi2
	tst	r3, #12
	bne	.L8105
	ldr	r6, [sp, #8]
	movw	r1, #:lower16:.LC491
	mov	r2, r10
	movt	r1, #:upper16:.LC491
	add	r10, r10, #1
	mvn	r4, #21
	ldr	r0, [r6]
	add	r0, r0, #32
	bl	dev_err
	mov	r3, #7
	add	r0, r6, #212
	str	r10, [r6, #92]
	str	r3, [r6, #112]
	bl	fsg_common_release
	b	.L8093
.L8207:
	ldr	r0, [r5]
	movw	r3, #:lower16:.LC485
	mov	r4, #0
	movt	r3, #:upper16:.LC485
	ldrb	ip, [r3, #4]	@ zero_extendqisi2
	ldr	lr, [r3]
	lsl	r3, r0, #3
	add	r1, r5, r3
	add	r3, r8, r3
	strb	r2, [r1, #8]
	strb	r4, [r1, #9]
	strb	r2, [r1, #10]
	str	lr, [r8, r0, lsl #3]	@ unaligned
	strb	ip, [r3, #4]
	ldr	r4, [r5]
	add	r4, r4, #1
	str	r4, [r5]
	ldr	r3, [r7, #48]
	cmp	r3, #0
	beq	.L8081
	ldrb	r3, [r3, #10]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L8081
.L8208:
	movw	r2, #:lower16:.LC486
	lsl	r3, r4, #3
	movt	r2, #:upper16:.LC486
	ldrb	r0, [r2, #4]	@ zero_extendqisi2
	add	r1, r5, r3
	mov	lr, #1
	ldr	ip, [r2]
	add	r3, r8, r3
	mov	r2, #0
	strb	r2, [r1, #8]
	strb	lr, [r1, #9]
	strb	r2, [r1, #10]
	str	ip, [r8, r4, lsl #3]	@ unaligned
	strb	r0, [r3, #4]
	ldr	r4, [r5]
	add	r4, r4, lr
	str	r4, [r5]
	b	.L8081
.L8138:
	mov	r5, #16
	b	.L8078
.L8140:
	mov	r3, #16
	str	r3, [sp, #8]
	b	.L8089
.L8206:
	ldr	r4, [r5]
	b	.L8081
.L8210:
	ldr	r3, [sp, #8]
	ldrb	r3, [r3, #144]	@ zero_extendqisi2
	tst	r3, #2
	bne	.L8216
.L8090:
	mvn	r10, #11
.L8202:
	mov	r0, r5
	bl	kfree
.L8074:
	mov	r0, r10
	add	sp, sp, #108
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L8209:
	movw	r1, #:lower16:.LC488
	mov	r2, r4
	add	r0, r3, #32
	movt	r1, #:upper16:.LC488
	mvn	r10, #21
	bl	dev_err
	b	.L8202
.L8216:
	ldr	r0, [sp, #8]
	mvn	r10, #11
	bl	kfree
	b	.L8202
.L8099:
	ldr	r9, [sp, #36]
	mov	r4, r2
	mov	r7, r2
.L8101:
	ldr	r3, [sp, #8]
	add	r10, r10, #1
	str	r10, [r3, #92]
.L8098:
	ldr	r2, [sp, #8]
	mov	r3, #7
	add	r0, r2, #212
	str	r3, [r2, #112]
	bl	fsg_common_release
.L8119:
	cmn	r7, #4096
	bhi	.L8093
	ldr	r3, [r5]
	cmp	r3, #0
	movne	r6, #0
	movne	r7, #400
	bne	.L8130
	b	.L8133
.L8131:
	ldr	r3, [r5]
	add	r6, r6, #1
	cmp	r3, r6
	bls	.L8133
.L8130:
	ldr	r1, [r4, #100]
	add	r2, r8, r6, lsl #3
	ldr	r0, [r9, #8]
	mla	r1, r7, r6, r1
	add	r0, r0, #8
	add	r1, r1, #56
	bl	sysfs_create_link
	cmp	r0, #0
	beq	.L8131
	cmp	r6, #0
	mov	r10, r0
	subne	r6, r6, #1
	addne	r6, r8, r6, lsl #3
	beq	.L8135
.L8134:
	ldr	r0, [r9, #8]
	mov	r1, r6
	add	r0, r0, #8
	bl	sysfs_remove_link
	cmp	r8, r6
	sub	r6, r6, #8
	bne	.L8134
.L8135:
	add	r0, r4, #212
	bl	fsg_common_release
	b	.L8202
.L8133:
	mov	r10, #0
	str	r4, [r5, #96]
	str	r5, [r9, #4]
	b	.L8074
.L8084:
	sub	r3, r4, #1
	b	.L8086
.L8108:
	ldr	r2, [sp, #8]
	mov	r3, #7
	mvn	r4, #11
	add	r0, r2, #212
	str	r3, [r2, #112]
	bl	fsg_common_release
.L8093:
	mov	r10, r4
	b	.L8202
.L8212:
	ldr	r9, [sp, #36]
.L8107:
	ldr	r3, [sp, #8]
	ldr	r6, [r3, #68]
	str	r4, [r3, #92]
	mov	r7, r6
	add	r4, r6, #96
.L8095:
	mov	r1, #2
	movw	r0, #16592
	bl	__get_free_pages
	cmp	r0, #0
	str	r0, [r7]
	beq	.L8108
	cmp	r7, r4
	add	r7, r7, #32
	beq	.L8217
	str	r7, [r7, #-24]
	b	.L8095
.L8213:
	ldr	fp, [sp, #8]
	movw	r1, #:lower16:.LC490
	mov	r3, r2
	movt	r1, #:upper16:.LC490
	mov	r2, r10
	ldr	r9, [sp, #36]
	mov	r4, r3
	mov	r7, r3
	ldr	r0, [fp]
	add	r0, r0, #32
	bl	_dev_info
	mov	r0, r6
	str	r10, [fp, #92]
	bl	put_device
	b	.L8098
.L8214:
	mov	r4, r3
	mov	r7, r3
	ldr	r9, [sp, #36]
	b	.L8101
.L8217:
	ldr	r3, [sp, #8]
	ldr	r2, [r3, #68]
	movw	r3, #65535
	str	r2, [r6, #104]
	ldrh	r1, [r5, #92]
	cmp	r1, r3
	beq	.L8218
.L8111:
	ldr	r3, [r5, #84]
	movw	r2, #:lower16:.LC476
	ldr	ip, [r5, #88]
	movt	r2, #:upper16:.LC476
	ldr	r0, [sp, #8]
	cmp	r3, #0
	moveq	r3, r2
	cmp	ip, #0
	add	r0, r0, #180
	beq	.L8219
.L8114:
	movw	r2, #:lower16:.LC493
	str	ip, [sp]
	movt	r2, #:upper16:.LC493
	str	r1, [sp, #4]
	mov	r1, #29
	bl	snprintf
	ldrb	r3, [r5, #94]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L8115
	ldr	r3, [sp, #8]
	movw	r0, #:lower16:.LC272
	movt	r0, #:upper16:.LC272
	ldr	r3, [r3]
	ldr	r1, [r3, #28]
	bl	strcmp
	subs	r3, r0, #0
	movne	r3, #1
.L8115:
	ldr	r10, [sp, #8]
	mov	r6, #0
	mov	r2, #1
	movw	lr, #:lower16:.LC479
	movw	r0, #:lower16:fsg_main_thread
	movt	lr, #:upper16:.LC479
	movt	r0, #:upper16:fsg_main_thread
	ldrb	ip, [r10, #144]	@ zero_extendqisi2
	str	r6, [r10, #44]
	mov	r1, r10
	str	r2, [r10, #212]
	mvn	r2, #0
	bfi	ip, r3, #0, #1
	strb	ip, [r10, #144]
	ldr	r3, [r5, #72]
	cmp	r3, r6
	moveq	r3, lr
	bl	kthread_create_on_node
	cmn	r0, #4096
	mov	r4, r0
	str	r0, [r10, #168]
	mov	r7, r0
	bhi	.L8098
	ldr	r3, .L8221
	movw	r1, #:lower16:.LC494
	add	r0, r10, #156
	movt	r1, #:upper16:.LC494
	str	r6, [r10, #152]
	sub	r4, r3, #8
	mov	r2, r4
	bl	__init_waitqueue_head
	movw	r1, #:lower16:.LC495
	mov	r2, r4
	movt	r1, #:upper16:.LC495
	add	r0, r10, #16
	bl	__init_waitqueue_head
	ldr	r0, [r10]
	movw	r1, #:lower16:.LC496
	movt	r1, #:upper16:.LC496
	add	r0, r0, #32
	bl	_dev_info
	ldr	r0, [r10]
	movw	r1, #:lower16:.LC497
	movt	r1, #:upper16:.LC497
	ldr	r2, [r10, #92]
	add	r0, r0, #32
	bl	_dev_info
	ldr	r3, [sp, #32]
	ldr	r0, [r3, #48]
	cmp	r0, r6
	moveq	r3, #16
	streq	r3, [sp, #28]
	beq	.L8117
	mov	r1, #208
	bl	kmem_cache_alloc
	str	r0, [sp, #28]
.L8117:
	ldr	r3, [sp, #8]
	ldr	r2, [r3, #92]
	ldr	r4, [r3, #100]
	cmp	r2, #0
	str	r2, [sp, #12]
	ble	.L8127
	ldr	r7, [sp, #28]
	movw	r3, #:lower16:.LC481
	movw	r2, #:lower16:.LC480
	movw	r10, #:lower16:.LC483
	movt	r3, #:upper16:.LC481
	movt	r2, #:upper16:.LC480
	add	r4, r4, #48
	movt	r10, #:upper16:.LC483
	mov	r6, #0
	strd	r2, [sp, #20]
.L8128:
	ldr	r0, [r4, #-48]
	sub	r3, r4, #48
	cmp	r0, #0
	beq	.L8172
.L8220:
	cmp	r7, #0
	mov	r2, #4096
	mov	r1, r7
	add	r0, r0, #8
	beq	.L8122
	str	r3, [sp, #16]
	bl	d_path
	cmn	r0, #4096
	mov	fp, r0
	ldr	r3, [sp, #16]
	bhi	.L8122
.L8120:
	ldrb	ip, [r3, #24]	@ zero_extendqisi2
	movw	r2, #:lower16:.LC482
	movw	r3, #:lower16:.LC484
	movt	r2, #:upper16:.LC482
	movt	r3, #:upper16:.LC484
	movw	lr, #:lower16:.LC499
	movw	r1, #:lower16:.LC498
	movt	lr, #:upper16:.LC499
	mov	r0, r4
	tst	ip, #4
	movt	r1, #:upper16:.LC498
	moveq	r2, r10
	tst	ip, #2
	moveq	r3, r10
	tst	ip, #8
	beq	.L8125
	str	lr, [sp]
	add	r6, r6, #1
	add	r4, r4, #400
	str	fp, [sp, #4]
	bl	_dev_info
	ldr	r3, [sp, #12]
	cmp	r6, r3
	bne	.L8128
.L8127:
	ldr	r4, [sp, #8]
	ldr	r0, [sp, #28]
	bl	kfree
	ldr	r0, [r4, #168]
	mov	r7, r4
	bl	wake_up_process
	b	.L8119
.L8125:
	movw	r1, #:lower16:.LC498
	strd	r10, [sp]
	add	r6, r6, #1
	movt	r1, #:upper16:.LC498
	add	r4, r4, #400
	bl	_dev_info
	ldr	r3, [sp, #12]
	cmp	r3, r6
	beq	.L8127
	ldr	r0, [r4, #-48]
	sub	r3, r4, #48
	cmp	r0, #0
	bne	.L8220
.L8172:
	ldr	fp, [sp, #24]
	b	.L8120
.L8122:
	ldr	fp, [sp, #20]
	b	.L8120
.L8211:
	mov	r4, r0
	mov	r7, r0
	ldr	r9, [sp, #36]
	b	.L8101
.L8218:
	ldr	r3, [sp, #28]
	movw	r0, #:lower16:.LC265
	movt	r0, #:upper16:.LC265
	ldr	r4, [r3, #28]
	mov	r1, r4
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #769
	beq	.L8111
	movw	r0, #:lower16:.LC266
	mov	r1, r4
	movt	r0, #:upper16:.LC266
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #770
	beq	.L8111
	movw	r0, #:lower16:.LC267
	mov	r1, r4
	movt	r0, #:upper16:.LC267
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #771
	beq	.L8111
	movw	r0, #:lower16:.LC268
	mov	r1, r4
	movt	r0, #:upper16:.LC268
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #774
	beq	.L8111
	movw	r0, #:lower16:.LC269
	mov	r1, r4
	movt	r0, #:upper16:.LC269
	bl	strcmp
	cmp	r0, #0
	moveq	r1, #776
	beq	.L8111
	movw	r0, #:lower16:.LC270
	mov	r1, r4
	movt	r0, #:upper16:.LC270
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #785
	beq	.L8111
	movw	r0, #:lower16:.LC271
	mov	r1, r4
	movt	r0, #:upper16:.LC271
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #786
	beq	.L8111
	movw	r0, #:lower16:.LC272
	mov	r1, r4
	movt	r0, #:upper16:.LC272
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #787
	beq	.L8111
	movw	r0, #:lower16:.LC273
	mov	r1, r4
	movt	r0, #:upper16:.LC273
	bl	strcmp
	cmp	r0, #0
	moveq	r1, #788
	beq	.L8111
	movw	r0, #:lower16:.LC274
	mov	r1, r4
	movt	r0, #:upper16:.LC274
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #790
	beq	.L8111
	movw	r0, #:lower16:.LC275
	mov	r1, r4
	movt	r0, #:upper16:.LC275
	bl	strcmp
	cmp	r0, #0
	moveq	r1, #792
	beq	.L8111
	movw	r0, #:lower16:.LC276
	mov	r1, r4
	movt	r0, #:upper16:.LC276
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #793
	beq	.L8111
	movw	r0, #:lower16:.LC277
	mov	r1, r4
	movt	r0, #:upper16:.LC277
	bl	strcmp
	cmp	r0, #0
	moveq	r1, #800
	beq	.L8111
	movw	r0, #:lower16:.LC278
	mov	r1, r4
	movt	r0, #:upper16:.LC278
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #801
	beq	.L8111
	movw	r0, #:lower16:.LC279
	mov	r1, r4
	movt	r0, #:upper16:.LC279
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #802
	beq	.L8111
	movw	r0, #:lower16:.LC280
	mov	r1, r4
	movt	r0, #:upper16:.LC280
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #803
	beq	.L8111
	movw	r0, #:lower16:.LC281
	mov	r1, r4
	movt	r0, #:upper16:.LC281
	bl	strcmp
	cmp	r0, #0
	moveq	r1, #804
	beq	.L8111
	movw	r0, #:lower16:.LC282
	mov	r1, r4
	movt	r0, #:upper16:.LC282
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #805
	beq	.L8111
	movw	r0, #:lower16:.LC283
	mov	r1, r4
	movt	r0, #:upper16:.LC283
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #806
	beq	.L8111
	movw	r0, #:lower16:.LC284
	mov	r1, r4
	movt	r0, #:upper16:.LC284
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #807
	beq	.L8111
	movw	r0, #:lower16:.LC285
	mov	r1, r4
	movt	r0, #:upper16:.LC285
	bl	strcmp
	cmp	r0, #0
	moveq	r1, #808
	beq	.L8111
	movw	r0, #:lower16:.LC286
	mov	r1, r4
	movt	r0, #:upper16:.LC286
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #809
	beq	.L8111
	movw	r0, #:lower16:.LC287
	mov	r1, r4
	movt	r0, #:upper16:.LC287
	bl	strcmp
	cmp	r0, #0
	moveq	r1, #816
	beq	.L8111
	movw	r0, #:lower16:.LC288
	mov	r1, r4
	movt	r0, #:upper16:.LC288
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #817
	beq	.L8111
	movw	r0, #:lower16:.LC289
	mov	r1, r4
	movt	r0, #:upper16:.LC289
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #818
	beq	.L8111
	movw	r0, #:lower16:.LC290
	mov	r1, r4
	movt	r0, #:upper16:.LC290
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #819
	beq	.L8111
	movw	r0, #:lower16:.LC291
	mov	r1, r4
	movt	r0, #:upper16:.LC291
	bl	strcmp
	cmp	r0, #0
	moveq	r1, #820
	beq	.L8111
	ldr	r3, [sp, #8]
	movw	r1, #:lower16:.LC492
	mov	r2, r4
	movt	r1, #:upper16:.LC492
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	dev_warn
	movw	r1, #921
	b	.L8111
.L8219:
	ldr	r2, [sp, #8]
	movw	ip, #:lower16:.LC477
	movt	ip, #:upper16:.LC477
	ldr	lr, [r2, #100]
	movw	r2, #:lower16:.LC478
	movt	r2, #:upper16:.LC478
	ldrb	lr, [lr, #24]	@ zero_extendqisi2
	tst	lr, #8
	moveq	ip, r2
	b	.L8114
.L8205:
	mvn	r10, #11
	b	.L8074
.L8222:
	.align	2
.L8221:
	.word	.LANCHOR3-4064
	.word	.LANCHOR1+2008
	.word	.LANCHOR1+2024
	.word	.LANCHOR1+1992
	.word	.LANCHOR1+1976
	.fnend
	.size	mass_storage_function_init, .-mass_storage_function_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_function_disable, %function
ccid_function_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r0, [r0, #92]
	.pad #4
	sub	sp, sp, #4
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r5, #96]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r5, #100]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r4, [r5, #104]
	cmp	r4, #0
	beq	.L8224
	ldr	r6, [r5, #92]
	ldr	r0, [r4]
	bl	kfree
	mov	r1, r4
	ldr	r3, [r6, #8]
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
.L8224:
	ldr	r3, [r5, #148]
	cmp	r3, #0
	bne	.L8225
	ldr	r4, [r5, #176]
	cmp	r4, #0
	beq	.L8225
	ldr	r6, [r5, #100]
	ldr	r0, [r4]
	bl	kfree
	mov	r1, r4
	ldr	r3, [r6, #8]
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
.L8225:
	add	r7, r5, #184
	add	r6, r5, #84
	mov	r9, #256
	mov	r8, #512
	b	.L8226
.L8227:
	ldrd	r2, [r4]
	str	r3, [r2, #4]
	str	r2, [r3]
	str	r9, [r4]
	str	r8, [r4, #4]
	bl	_raw_spin_unlock_irqrestore
	cmp	r10, #0
	beq	.L8228
	ldr	fp, [r5, #96]
	ldr	r0, [r4, #-36]
	bl	kfree
	mov	r1, r10
	ldr	r3, [fp, #8]
	mov	r0, fp
	ldr	r3, [r3, #12]
	blx	r3
.L8226:
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r5, #184]
	mov	r1, r0
	mov	r0, r6
	cmp	r4, r7
	sub	r10, r4, #36
	bne	.L8227
	bl	_raw_spin_unlock_irqrestore
.L8228:
	mov	r4, #0
	add	r0, r5, #164
	mov	r3, r4
	mov	r2, #1
	mov	r1, #3
	str	r4, [r5, #88]
	str	r4, [r5, #192]
	bl	__wake_up
	mov	r3, r4
	add	r0, r5, #152
	mov	r2, #1
	mov	r1, #3
	bl	__wake_up
	mov	r3, r4
	add	r0, r5, #120
	mov	r2, #1
	mov	r1, #3
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	__wake_up
	.fnend
	.size	ccid_function_disable, .-ccid_function_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_setup, %function
fsg_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r3, [r0, #80]
	ldrh	lr, [r1, #4]	@ unaligned
	ldrh	r6, [r1, #2]	@ unaligned
	ldrh	r5, [r1, #6]	@ unaligned
	ldr	r2, [r3, #8]
	ldr	r0, [r3, #52]
	cmp	r2, #0
	beq	.L8238
	ldr	r2, [r3, #56]
	mov	ip, #0
	add	r2, r2, #1
	str	r2, [r3, #56]
	str	ip, [r0, #4]
	str	ip, [r0, #32]
	ldrb	r3, [r1, #1]	@ zero_extendqisi2
	cmp	r3, #254
	beq	.L8239
	cmp	r3, #255
	bne	.L8249
	ldrb	r3, [r1]	@ zero_extendqisi2
	cmp	r3, #33
	bne	.L8249
	ldrh	r3, [r4, #84]
	cmp	r3, lr
	bne	.L8251
	orrs	r3, r5, r6
	bne	.L8251
	ldr	r5, [r4, #80]
	add	r7, r5, #44
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #112]
	mov	r6, r0
	cmp	r3, #2
	bgt	.L8243
	ldr	r3, [r5, #56]
	mov	r1, #2
	ldr	r2, [r5, #168]
	str	r1, [r5, #112]
	str	r3, [r5, #116]
	cmp	r2, #0
	beq	.L8243
	mov	r0, #10
	bl	send_sig_info
.L8243:
	mov	r0, r7
	mov	r1, r6
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r4, #80]
	movw	r0, #1255
	movw	r4, #32767
	ldr	r3, [r3, #4]
	cmp	r3, #0
	moveq	r4, r0
	b	.L8237
.L8249:
	mvn	r4, #94
.L8237:
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L8239:
	ldrb	r3, [r1]	@ zero_extendqisi2
	cmp	r3, #161
	bne	.L8249
	ldrh	r3, [r4, #84]
	cmp	r3, lr
	bne	.L8251
	cmp	r5, #1
	cmpeq	r6, #0
	bne	.L8251
	ldr	r3, [r4, #80]
	mov	r1, #1
	mov	r2, #32
	ldr	ip, [r0]
	ldr	r3, [r3, #92]
	sub	r3, r3, #1
	strb	r3, [ip]
	str	r1, [r0, #4]
	ldr	r5, [r4, #80]
	ldrd	r0, [r5, #48]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	ldr	r3, [r5, #48]
	cmp	r0, #0
	cmnne	r0, #108
	mov	r4, r0
	str	r5, [r3]
	beq	.L8237
	mov	r3, r0
	ldr	r0, [r5]
	movw	r1, #:lower16:.LC77
	ldr	r2, [r5, #48]
	movt	r1, #:upper16:.LC77
	add	r0, r0, #32
	ldr	r2, [r2, #4]
	bl	dev_warn
	b	.L8237
.L8238:
	ldr	r0, [r3]
	movw	r1, #:lower16:.LC75
	movw	r3, #617
	ldr	r2, .L8259
	movt	r1, #:upper16:.LC75
	mvn	r4, #94
	add	r0, r0, #32
	bl	dev_err
	movw	r0, #:lower16:.LC76
	movw	r1, #461
	movt	r0, #:upper16:.LC76
	bl	warn_slowpath_null
	b	.L8237
.L8251:
	mvn	r4, #32
	b	.L8237
.L8260:
	.align	2
.L8259:
	.word	.LANCHOR2+3904
	.fnend
	.size	fsg_setup, .-fsg_setup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_unbind, %function
fsg_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r5, [r1, #80]
	.pad #24
	sub	sp, sp, #24
	ldr	r3, [r5, #8]
	cmp	r3, r1
	beq	.L8275
.L8263:
	add	r0, r5, #212
	.syntax divided
@ 99 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 111 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/processor.h" 1
	pld	[r0]
@ 0 "" 2
@ 102 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r3, [r0]
	sub	r3, r3, #1
	strex	r2, r3, [r0]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 112 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	bne	.L8270
	bl	fsg_common_release
.L8270:
	ldr	r0, [r4, #8]
	bl	kfree
	ldr	r0, [r4, #12]
	bl	kfree
	ldr	r0, [r4, #16]
	bl	kfree
	mov	r0, r4
	bl	kfree
	add	sp, sp, #24
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L8275:
	mov	r3, #0
	str	r3, [r5, #12]
	ldr	r6, [r1, #80]
	add	r8, r6, #44
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r6, #112]
	mov	r7, r0
	cmp	r3, #4
	bgt	.L8265
	ldr	r3, [r6, #56]
	mov	r1, #4
	ldr	r2, [r6, #168]
	str	r1, [r6, #112]
	str	r3, [r6, #116]
	cmp	r2, #0
	beq	.L8265
	mov	r1, #2
	mov	r0, #10
	bl	send_sig_info
.L8265:
	mov	r1, r7
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r5, #8]
	cmp	r3, r4
	bne	.L8263
	mov	r3, sp
	add	r1, sp, #16
	bic	r2, r3, #8128
	mov	r3, #0
	bic	r2, r2, #63
	add	r6, r5, #16
	ldr	r0, [r2, #12]
	movw	r2, #:lower16:autoremove_wake_function
	str	r3, [sp, #4]
	movt	r2, #:upper16:autoremove_wake_function
	str	r0, [sp, #8]
	str	r2, [sp, #12]
	str	r1, [sp, #16]
	str	r1, [sp, #20]
	b	.L8269
.L8276:
	bl	schedule
.L8269:
	mov	r2, #2
	add	r1, sp, #4
	mov	r0, r6
	bl	prepare_to_wait
	ldr	r3, [r5, #8]
	cmp	r3, r4
	beq	.L8276
	add	r1, sp, #4
	mov	r0, r6
	bl	finish_wait
	b	.L8263
	.fnend
	.size	fsg_unbind, .-fsg_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_close, %function
rndis_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	movw	r4, #:lower16:.LANCHOR0
	mov	r2, #1
	strd	r6, [sp, #8]
	ldr	r7, .L8291
	movt	r4, #:upper16:.LANCHOR0
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r6, [r0, #156]
	lsl	r9, r6, #4
	ands	r3, r6, #255
	sub	r5, r9, r6
	streq	r3, [r4, #3724]
	lsl	r5, r5, #2
	streq	r3, [r4, #3728]
	add	r3, r4, r5
	add	r8, r7, r5
	str	r2, [r3, #3732]
	ldr	r3, [r8, #4]
	cmp	r3, #0
	beq	.L8277
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L8281
	mov	r1, #32
	bl	kmem_cache_alloc
	cmp	r0, #0
	beq	.L8277
	add	r3, r0, #20
.L8280:
	sub	r6, r9, r6
	mov	r2, #0
	str	r3, [r0, #8]
	add	r4, r4, r6, lsl #2
	mov	ip, #20
	add	r5, r5, #52
	str	ip, [r0, #12]
	add	r5, r7, r5
	mov	r1, #12
	str	r2, [r0, #16]
	ldr	r3, [r4, #3772]
	mov	lr, #7
	str	r0, [r4, #3772]
	movt	r1, 16385
	str	r5, [r0]
	str	r3, [r0, #4]
	str	r0, [r3]
	ldr	r3, [r0, #8]
	str	lr, [r3]
	str	ip, [r3, #4]
	str	r1, [r3, #8]
	str	r2, [r3, #12]
	str	r2, [r3, #16]
	ldr	r3, [r8, #44]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	ldr	r0, [r8, #48]
	ldrd	r8, [sp, #16]
	add	sp, sp, #32
	bx	r3	@ indirect register sibling call
.L8281:
	mov	r3, #36
	mov	r0, #16
	b	.L8280
.L8277:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L8292:
	.align	2
.L8291:
	.word	.LANCHOR0+3716
	.fnend
	.size	rndis_close, .-rndis_close
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_close, %function
rndis_qc_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	movw	r4, #:lower16:.LANCHOR0
	mov	r2, #1
	strd	r6, [sp, #8]
	ldr	r7, .L8307
	movt	r4, #:upper16:.LANCHOR0
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r6, [r0, #136]
	lsl	r9, r6, #4
	ands	r3, r6, #255
	sub	r5, r9, r6
	streq	r3, [r4, #3724]
	lsl	r5, r5, #2
	streq	r3, [r4, #3728]
	add	r3, r4, r5
	add	r8, r7, r5
	str	r2, [r3, #3732]
	ldr	r3, [r8, #4]
	cmp	r3, #0
	beq	.L8293
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L8297
	mov	r1, #32
	bl	kmem_cache_alloc
	cmp	r0, #0
	beq	.L8293
	add	r3, r0, #20
.L8296:
	sub	r6, r9, r6
	mov	r2, #0
	str	r3, [r0, #8]
	add	r4, r4, r6, lsl #2
	mov	ip, #20
	add	r5, r5, #52
	str	ip, [r0, #12]
	add	r5, r7, r5
	mov	r1, #12
	str	r2, [r0, #16]
	ldr	r3, [r4, #3772]
	mov	lr, #7
	str	r0, [r4, #3772]
	movt	r1, 16385
	str	r5, [r0]
	str	r3, [r0, #4]
	str	r0, [r3]
	ldr	r3, [r0, #8]
	str	lr, [r3]
	str	ip, [r3, #4]
	str	r1, [r3, #8]
	str	r2, [r3, #12]
	str	r2, [r3, #16]
	ldr	r3, [r8, #44]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	ldr	r0, [r8, #48]
	ldrd	r8, [sp, #16]
	add	sp, sp, #32
	bx	r3	@ indirect register sibling call
.L8297:
	mov	r3, #36
	mov	r0, #16
	b	.L8296
.L8293:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L8308:
	.align	2
.L8307:
	.word	.LANCHOR0+3716
	.fnend
	.size	rndis_qc_close, .-rndis_qc_close
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_open, %function
ecm_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r3, #257
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r5, [r0, #160]
	strh	r3, [r0, #164]	@ movhi
	cmp	r5, #0
	beq	.L8309
	ldr	r3, [r5]
	mov	ip, #0
	mov	r4, r0
	mov	r2, #8
	mov	r1, #2
	mvn	r0, #94
	strb	ip, [r3, #1]
	ldrb	lr, [r4, #165]	@ zero_extendqisi2
	strh	lr, [r3, #2]	@ unaligned
	strb	ip, [r3, #6]
	strb	ip, [r3, #7]
	str	r2, [r5, #4]
	mov	r2, #32
	strb	r1, [r4, #164]
	mov	r1, r5
	strb	r0, [r3]
	ldrb	r0, [r4, #140]	@ zero_extendqisi2
	strh	r0, [r3, #4]	@ unaligned
	ldr	r0, [r4, #156]
	str	ip, [r4, #160]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	strlt	r5, [r4, #160]
.L8309:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	ecm_open, .-ecm_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_close, %function
ecm_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r3, #1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r5, [r0, #160]
	strh	r3, [r0, #164]	@ movhi
	cmp	r5, #0
	beq	.L8314
	ldr	r3, [r5]
	mov	ip, #0
	mov	r4, r0
	mov	r2, #8
	mov	r1, #2
	mvn	r0, #94
	strb	ip, [r3, #1]
	ldrb	lr, [r4, #165]	@ zero_extendqisi2
	strh	lr, [r3, #2]	@ unaligned
	strb	ip, [r3, #6]
	strb	ip, [r3, #7]
	str	r2, [r5, #4]
	mov	r2, #32
	strb	r1, [r4, #164]
	mov	r1, r5
	strb	r0, [r3]
	ldrb	r0, [r4, #140]	@ zero_extendqisi2
	strh	r0, [r3, #4]	@ unaligned
	ldr	r0, [r4, #156]
	str	ip, [r4, #160]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	strlt	r5, [r4, #160]
.L8314:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	ecm_close, .-ecm_close
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_open, %function
ecm_qc_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r3, #257
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r5, [r0, #140]
	strh	r3, [r0, #144]	@ movhi
	cmp	r5, #0
	beq	.L8319
	ldr	r3, [r5]
	mov	ip, #0
	mov	r4, r0
	mov	r2, #8
	mov	r1, #2
	mvn	r0, #94
	strb	ip, [r3, #1]
	ldrb	lr, [r4, #145]	@ zero_extendqisi2
	strh	lr, [r3, #2]	@ unaligned
	strb	ip, [r3, #6]
	strb	ip, [r3, #7]
	str	r2, [r5, #4]
	mov	r2, #32
	strb	r1, [r4, #144]
	mov	r1, r5
	strb	r0, [r3]
	ldrb	r0, [r4, #112]	@ zero_extendqisi2
	strh	r0, [r3, #4]	@ unaligned
	ldr	r0, [r4, #136]
	str	ip, [r4, #140]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	strlt	r5, [r4, #140]
.L8319:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	ecm_qc_open, .-ecm_qc_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_close, %function
ecm_qc_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r3, #1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r5, [r0, #140]
	strh	r3, [r0, #144]	@ movhi
	cmp	r5, #0
	beq	.L8324
	ldr	r3, [r5]
	mov	ip, #0
	mov	r4, r0
	mov	r2, #8
	mov	r1, #2
	mvn	r0, #94
	strb	ip, [r3, #1]
	ldrb	lr, [r4, #145]	@ zero_extendqisi2
	strh	lr, [r3, #2]	@ unaligned
	strb	ip, [r3, #6]
	strb	ip, [r3, #7]
	str	r2, [r5, #4]
	mov	r2, #32
	strb	r1, [r4, #144]
	mov	r1, r5
	strb	r0, [r3]
	ldrb	r0, [r4, #112]	@ zero_extendqisi2
	strh	r0, [r3, #4]	@ unaligned
	ldr	r0, [r4, #136]
	str	ip, [r4, #140]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	strlt	r5, [r4, #140]
.L8324:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	ecm_qc_close, .-ecm_qc_close
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_notify_complete, %function
ecm_notify_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r5, [r1, #32]
	ldr	r3, [r1, #44]
	str	r1, [r5, #160]
	add	r3, r3, #108
	bics	r3, r3, #4
	strbeq	r3, [r5, #164]
	cmp	r1, #0
	beq	.L8329
	ldrb	r2, [r5, #164]	@ zero_extendqisi2
	ldr	r3, [r1]
	cmp	r2, #1
	beq	.L8333
	cmp	r2, #2
	beq	.L8334
	cmp	r2, #0
	beq	.L8329
.L8335:
	mvn	r0, #94
	mov	ip, #0
	mov	r2, #32
	mov	r1, r4
	strb	r0, [r3]
	ldrb	r0, [r5, #140]	@ zero_extendqisi2
	strh	r0, [r3, #4]	@ unaligned
	ldr	r0, [r5, #156]
	str	ip, [r5, #160]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	strlt	r4, [r5, #160]
.L8329:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L8333:
	mov	r2, #0
	mov	r0, #8
	mov	r1, #2
	strb	r2, [r3, #1]
	ldrb	ip, [r5, #165]	@ zero_extendqisi2
	strh	ip, [r3, #2]	@ unaligned
	strb	r2, [r3, #6]
	strb	r2, [r3, #7]
	str	r0, [r4, #4]
	strb	r1, [r5, #164]
	b	.L8335
.L8334:
	ldr	r0, [r5, #20]
	mov	r2, #0
	mov	r1, #8
	mov	lr, #42
	mov	ip, #16
	ldr	r0, [r0, #24]
	strb	lr, [r3, #1]
	strb	r2, [r3, #2]
	strb	r2, [r3, #3]
	strb	r1, [r3, #6]
	strb	r2, [r3, #7]
	ldr	r1, [r4]
	str	ip, [r4, #4]
	ldr	r2, [r0]
	ldr	r0, [r2, #20]
	cmp	r0, #4
	bls	.L8336
	ldr	r0, [r2, #16]
	cmp	r0, #5
	beq	.L8347
.L8338:
	mov	ip, #0
	mov	r2, #28672
	movt	ip, 6500
	cmp	r0, #3
	movt	r2, 148
	moveq	r2, ip
	b	.L8337
.L8336:
	cmp	r0, #2
	movls	r2, #28672
	movtls	r2, 148
	bhi	.L8348
.L8337:
	mov	r0, #0
	str	r2, [r1, #8]
	str	r2, [r1, #12]
	strb	r0, [r5, #164]
	b	.L8335
.L8348:
	ldr	r0, [r2, #16]
	b	.L8338
.L8347:
	mov	r2, #0
	movt	r2, 13000
	b	.L8337
	.fnend
	.size	ecm_notify_complete, .-ecm_notify_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_open, %function
ncm_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	add	r6, r0, #176
	mov	r0, r6
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	_raw_spin_lock
	ldr	r5, [r4, #160]
	movw	r3, #258
	strh	r3, [r4, #164]	@ movhi
	cmp	r5, #0
	beq	.L8351
	ldr	r1, [r4, #20]
	mov	r2, #0
	mov	lr, #42
	ldr	r3, [r5]
	mov	ip, #8
	mov	r0, #16
	ldr	r1, [r1, #24]
	strb	lr, [r3, #1]
	strb	r2, [r3, #2]
	strb	r2, [r3, #3]
	strb	ip, [r3, #6]
	strb	r2, [r3, #7]
	str	r0, [r5, #4]
	ldr	r2, [r1]
	ldr	r1, [r2, #20]
	cmp	r1, #2
	bls	.L8354
	ldr	r0, [r2, #16]
	mov	r1, #0
	mov	r2, #28672
	movt	r1, 6500
	movt	r2, 148
	cmp	r0, #3
	moveq	r2, r1
.L8352:
	ldr	r1, [r5]
	mvn	lr, #94
	mov	r7, #1
	mov	ip, #0
	mov	r0, r6
	str	r2, [r1, #8]
	str	r2, [r1, #12]
	strb	r7, [r4, #164]
	strb	lr, [r3]
	ldrb	r2, [r4, #140]	@ zero_extendqisi2
	strh	r2, [r3, #4]	@ unaligned
	str	ip, [r4, #160]
	bl	_raw_spin_unlock
	ldr	r0, [r4, #156]
	mov	r2, #32
	mov	r1, r5
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	mov	r7, r0
	mov	r0, r6
	bl	_raw_spin_lock
	cmp	r7, #0
	strlt	r5, [r4, #160]
.L8351:
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock
.L8354:
	mov	r2, #28672
	movt	r2, 148
	b	.L8352
	.fnend
	.size	ncm_open, .-ncm_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_close, %function
ncm_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	add	r6, r0, #176
	mov	r0, r6
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	_raw_spin_lock
	ldr	r5, [r4, #160]
	mov	r3, #2
	strh	r3, [r4, #164]	@ movhi
	cmp	r5, #0
	beq	.L8359
	ldr	r1, [r4, #20]
	mov	r2, #0
	mov	lr, #42
	ldr	r3, [r5]
	mov	ip, #8
	mov	r0, #16
	ldr	r1, [r1, #24]
	strb	lr, [r3, #1]
	strb	r2, [r3, #2]
	strb	r2, [r3, #3]
	strb	ip, [r3, #6]
	strb	r2, [r3, #7]
	str	r0, [r5, #4]
	ldr	r2, [r1]
	ldr	r1, [r2, #20]
	cmp	r1, #2
	bls	.L8362
	ldr	r0, [r2, #16]
	mov	r1, #0
	mov	r2, #28672
	movt	r1, 6500
	movt	r2, 148
	cmp	r0, #3
	moveq	r2, r1
.L8360:
	ldr	r1, [r5]
	mvn	lr, #94
	mov	r7, #1
	mov	ip, #0
	mov	r0, r6
	str	r2, [r1, #8]
	str	r2, [r1, #12]
	strb	r7, [r4, #164]
	strb	lr, [r3]
	ldrb	r2, [r4, #140]	@ zero_extendqisi2
	strh	r2, [r3, #4]	@ unaligned
	str	ip, [r4, #160]
	bl	_raw_spin_unlock
	ldr	r0, [r4, #156]
	mov	r2, #32
	mov	r1, r5
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	mov	r7, r0
	mov	r0, r6
	bl	_raw_spin_lock
	cmp	r7, #0
	strlt	r5, [r4, #160]
.L8359:
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock
.L8362:
	mov	r2, #28672
	movt	r2, 148
	b	.L8360
	.fnend
	.size	ncm_close, .-ncm_close
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_notify_complete, %function
ecm_qc_notify_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r5, [r1, #32]
	ldr	r3, [r1, #44]
	str	r1, [r5, #140]
	add	r3, r3, #108
	bics	r3, r3, #4
	strbeq	r3, [r5, #144]
	cmp	r1, #0
	beq	.L8365
	ldrb	r2, [r5, #144]	@ zero_extendqisi2
	ldr	r3, [r1]
	cmp	r2, #1
	beq	.L8369
	cmp	r2, #2
	beq	.L8370
	cmp	r2, #0
	beq	.L8365
.L8371:
	mvn	r0, #94
	mov	ip, #0
	mov	r2, #32
	mov	r1, r4
	strb	r0, [r3]
	ldrb	r0, [r5, #112]	@ zero_extendqisi2
	strh	r0, [r3, #4]	@ unaligned
	ldr	r0, [r5, #136]
	str	ip, [r5, #140]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	strlt	r4, [r5, #140]
.L8365:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L8369:
	mov	r2, #0
	mov	r0, #8
	mov	r1, #2
	strb	r2, [r3, #1]
	ldrb	ip, [r5, #145]	@ zero_extendqisi2
	strh	ip, [r3, #2]	@ unaligned
	strb	r2, [r3, #6]
	strb	r2, [r3, #7]
	str	r0, [r4, #4]
	strb	r1, [r5, #144]
	b	.L8371
.L8370:
	ldr	r0, [r5, #20]
	mov	r2, #0
	mov	r1, #8
	mov	lr, #42
	mov	ip, #16
	ldr	r0, [r0, #24]
	strb	lr, [r3, #1]
	strb	r2, [r3, #2]
	strb	r2, [r3, #3]
	strb	r1, [r3, #6]
	strb	r2, [r3, #7]
	ldr	r1, [r4]
	str	ip, [r4, #4]
	ldr	r2, [r0]
	ldr	r0, [r2, #20]
	cmp	r0, #2
	bls	.L8374
	ldr	ip, [r2, #16]
	mov	r0, #0
	mov	r2, #28672
	movt	r0, 6500
	movt	r2, 148
	cmp	ip, #3
	moveq	r2, r0
.L8372:
	mov	r0, #0
	str	r2, [r1, #8]
	str	r2, [r1, #12]
	strb	r0, [r5, #144]
	b	.L8371
.L8374:
	mov	r2, #28672
	movt	r2, 148
	b	.L8372
	.fnend
	.size	ecm_qc_notify_complete, .-ecm_qc_notify_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_ch_remove, %function
gsdio_ch_remove:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	r3, #:upper16:.LANCHOR0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r6, [r3, #2040]
	.pad #20
	sub	sp, sp, #20
	stm	sp, {r0, r3}
	cmp	r6, #0
	beq	.L8410
	ldr	r7, .L8413
	mov	r9, #0
	mov	r5, #256
.L8393:
	ldr	r3, [sp]
	mov	r2, #9
	ldr	r4, [r7, #24]
	ldr	r1, [r3]
	ldr	r3, [r4, #120]
	ldr	r0, [r3]
	bl	strncmp
	subs	r1, r0, #0
	bne	.L8382
	ldr	r6, [r4, #96]
	mov	r3, #1
	str	r1, [r4, #108]
	str	r1, [r4, #112]
	str	r3, [r4, #116]
	cmp	r6, #0
	beq	.L8412
	str	r1, [r4, #172]
	ldr	r3, [r6, #128]
	cmp	r3, #0
	beq	.L8384
	mov	r0, r6
	blx	r3
.L8384:
	ldr	r0, [r6, #80]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L8385
	blx	r3
.L8385:
	ldr	r0, [r6, #84]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L8386
	blx	r3
.L8386:
	add	r3, r4, #4
	add	r0, r4, #28
	mov	r10, r3
	add	r8, r4, #12
	str	r3, [sp, #8]
	bl	cancel_work_sync
	add	r0, r4, #60
	bl	cancel_work_sync
	mov	r0, r10
	bl	_raw_spin_lock_irqsave
	ldr	r2, [r4, #12]
	str	r0, [sp, #12]
	ldr	r10, [r6, #84]
	cmp	r8, r2
	beq	.L8387
.L8388:
	ldm	r2, {r1, r3}
	mov	fp, r2
	str	r3, [r1, #4]
	str	r1, [r3]
	mov	r3, #512
	str	r5, [r2]
	str	r3, [r2, #4]
	ldr	r0, [fp, #-36]!
	bl	kfree
	ldr	r3, [r10, #8]
	mov	r0, r10
	mov	r1, fp
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r2, [r4, #12]
	cmp	r8, r2
	bne	.L8388
	ldr	r10, [r6, #84]
.L8387:
	ldr	r2, [r4, #20]
	add	r8, r4, #20
	cmp	r8, r2
	beq	.L8392
.L8389:
	ldm	r2, {r1, r3}
	mov	fp, r2
	str	r3, [r1, #4]
	str	r1, [r3]
	mov	r3, #512
	str	r5, [r2]
	str	r3, [r2, #4]
	ldr	r0, [fp, #-36]!
	bl	kfree
	ldr	r3, [r10, #8]
	mov	r0, r10
	mov	r1, fp
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r2, [r4, #20]
	cmp	r8, r2
	bne	.L8389
.L8392:
	ldr	r3, [r4, #52]
	add	r8, r4, #52
	ldr	fp, [r6, #80]
	cmp	r8, r3
	beq	.L8391
	mov	r6, #512
.L8390:
	ldm	r3, {r1, r2}
	mov	r10, r3
	str	r2, [r1, #4]
	str	r1, [r2]
	stm	r3, {r5, r6}
	ldr	r0, [r10, #-36]!
	bl	kfree
	ldr	r3, [fp, #8]
	mov	r0, fp
	mov	r1, r10
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, [r4, #52]
	cmp	r8, r3
	bne	.L8390
.L8391:
	mov	r3, #0
	ldrd	r0, [sp, #8]
	str	r3, [r4, #8]
	str	r3, [r4, #44]
	str	r3, [r4, #48]
	str	r3, [r4, #76]
	bl	_raw_spin_unlock_irqrestore
.L8412:
	ldr	r3, [sp, #4]
	ldr	r6, [r3, #2040]
.L8382:
	add	r9, r9, #1
	add	r7, r7, #108
	cmp	r6, r9
	bhi	.L8393
.L8410:
	mov	r0, #0
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L8414:
	.align	2
.L8413:
	.word	.LANCHOR0+2044
	.fnend
	.size	gsdio_ch_remove, .-gsdio_ch_remove
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_open, %function
rndis_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r3, [r0, #20]
	ldr	r6, [r0, #156]
	ldr	r2, [r3, #24]
	uxtb	r3, r6
	ldr	r2, [r2]
	ldr	r1, [r2, #20]
	cmp	r1, #4
	bls	.L8416
	ldr	r2, [r2, #16]
	cmp	r2, #5
	beq	.L8435
.L8418:
	cmp	r2, #3
	movne	r2, #97280
	moveq	r2, #4259840
.L8417:
	lsl	r9, r6, #4
	ldr	r7, .L8436
	movw	r4, #:lower16:.LANCHOR0
	cmp	r3, #0
	sub	r5, r9, r6
	movt	r4, #:upper16:.LANCHOR0
	lsl	r5, r5, #2
	streq	r3, [r4, #3724]
	streq	r2, [r4, #3728]
	add	r3, r4, r5
	mov	r2, #0
	add	r8, r7, r5
	str	r2, [r3, #3732]
	ldr	r3, [r8, #4]
	cmp	r3, r2
	beq	.L8415
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, r2
	beq	.L8425
	mov	r1, #32
	bl	kmem_cache_alloc
	cmp	r0, #0
	beq	.L8415
	add	r3, r0, #20
.L8421:
	sub	r6, r9, r6
	mov	r2, #0
	str	r3, [r0, #8]
	add	r4, r4, r6, lsl #2
	mov	ip, #20
	add	r5, r5, #52
	str	ip, [r0, #12]
	add	r5, r7, r5
	mov	r1, #11
	str	r2, [r0, #16]
	ldr	r3, [r4, #3772]
	mov	lr, #7
	str	r0, [r4, #3772]
	movt	r1, 16385
	str	r5, [r0]
	str	r3, [r0, #4]
	str	r0, [r3]
	ldr	r3, [r0, #8]
	str	lr, [r3]
	str	ip, [r3, #4]
	str	r1, [r3, #8]
	str	r2, [r3, #12]
	str	r2, [r3, #16]
	ldr	r3, [r8, #44]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	ldr	r0, [r8, #48]
	ldrd	r8, [sp, #16]
	add	sp, sp, #32
	bx	r3	@ indirect register sibling call
.L8416:
	cmp	r1, #2
	movls	r2, #97280
	bls	.L8417
	ldr	r2, [r2, #16]
	b	.L8418
.L8425:
	mov	r3, #36
	mov	r0, #16
	b	.L8421
.L8435:
	mov	r2, #8519680
	b	.L8417
.L8415:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L8437:
	.align	2
.L8436:
	.word	.LANCHOR0+3716
	.fnend
	.size	rndis_open, .-rndis_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_open, %function
rndis_qc_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r3, [r0, #20]
	ldr	r6, [r0, #136]
	ldr	r2, [r3, #24]
	uxtb	r3, r6
	ldr	r2, [r2]
	ldr	r1, [r2, #20]
	cmp	r1, #4
	bls	.L8439
	ldr	r2, [r2, #16]
	cmp	r2, #5
	beq	.L8458
.L8441:
	cmp	r2, #3
	movne	r2, #97280
	moveq	r2, #4259840
.L8440:
	lsl	r9, r6, #4
	ldr	r7, .L8459
	movw	r4, #:lower16:.LANCHOR0
	cmp	r3, #0
	sub	r5, r9, r6
	movt	r4, #:upper16:.LANCHOR0
	lsl	r5, r5, #2
	streq	r3, [r4, #3724]
	streq	r2, [r4, #3728]
	add	r3, r4, r5
	mov	r2, #0
	add	r8, r7, r5
	str	r2, [r3, #3732]
	ldr	r3, [r8, #4]
	cmp	r3, r2
	beq	.L8438
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, r2
	beq	.L8448
	mov	r1, #32
	bl	kmem_cache_alloc
	cmp	r0, #0
	beq	.L8438
	add	r3, r0, #20
.L8444:
	sub	r6, r9, r6
	mov	r2, #0
	str	r3, [r0, #8]
	add	r4, r4, r6, lsl #2
	mov	ip, #20
	add	r5, r5, #52
	str	ip, [r0, #12]
	add	r5, r7, r5
	mov	r1, #11
	str	r2, [r0, #16]
	ldr	r3, [r4, #3772]
	mov	lr, #7
	str	r0, [r4, #3772]
	movt	r1, 16385
	str	r5, [r0]
	str	r3, [r0, #4]
	str	r0, [r3]
	ldr	r3, [r0, #8]
	str	lr, [r3]
	str	ip, [r3, #4]
	str	r1, [r3, #8]
	str	r2, [r3, #12]
	str	r2, [r3, #16]
	ldr	r3, [r8, #44]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	ldr	r0, [r8, #48]
	ldrd	r8, [sp, #16]
	add	sp, sp, #32
	bx	r3	@ indirect register sibling call
.L8439:
	cmp	r1, #2
	movls	r2, #97280
	bls	.L8440
	ldr	r2, [r2, #16]
	b	.L8441
.L8448:
	mov	r3, #36
	mov	r0, #16
	b	.L8444
.L8458:
	mov	r2, #8519680
	b	.L8440
.L8438:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L8460:
	.align	2
.L8459:
	.word	.LANCHOR0+3716
	.fnend
	.size	rndis_qc_open, .-rndis_qc_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_notify_complete, %function
ncm_notify_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r5, [r1, #32]
	add	r6, r5, #176
	mov	r0, r6
	bl	_raw_spin_lock
	ldr	r3, [r4, #44]
	str	r4, [r5, #160]
	add	r3, r3, #108
	bics	r3, r3, #4
	strbeq	r3, [r5, #164]
	cmp	r4, #0
	beq	.L8464
	ldrb	r2, [r5, #164]	@ zero_extendqisi2
	ldr	r3, [r4]
	cmp	r2, #1
	beq	.L8465
	cmp	r2, #2
	beq	.L8466
	cmp	r2, #0
	beq	.L8464
.L8467:
	mvn	r1, #94
	mov	r2, #0
	mov	r0, r6
	strb	r1, [r3]
	ldrb	r1, [r5, #140]	@ zero_extendqisi2
	strh	r1, [r3, #4]	@ unaligned
	str	r2, [r5, #160]
	bl	_raw_spin_unlock
	ldr	r0, [r5, #156]
	mov	r2, #32
	mov	r1, r4
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	mov	r7, r0
	mov	r0, r6
	bl	_raw_spin_lock
	cmp	r7, #0
	strlt	r4, [r5, #160]
.L8464:
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock
.L8465:
	mov	r2, #0
	mov	r1, #8
	strb	r2, [r3, #1]
	ldrb	r0, [r5, #165]	@ zero_extendqisi2
	strh	r0, [r3, #2]	@ unaligned
	strb	r2, [r3, #6]
	strb	r2, [r3, #7]
	str	r1, [r4, #4]
	strb	r2, [r5, #164]
	b	.L8467
.L8466:
	ldr	r0, [r5, #20]
	mov	r2, #0
	mov	r1, #8
	mov	lr, #42
	mov	ip, #16
	ldr	r0, [r0, #24]
	strb	lr, [r3, #1]
	strb	r2, [r3, #2]
	strb	r2, [r3, #3]
	strb	r1, [r3, #6]
	strb	r2, [r3, #7]
	ldr	r1, [r4]
	str	ip, [r4, #4]
	ldr	r2, [r0]
	ldr	r0, [r2, #20]
	cmp	r0, #2
	bls	.L8470
	ldr	ip, [r2, #16]
	mov	r0, #0
	mov	r2, #28672
	movt	r0, 6500
	movt	r2, 148
	cmp	ip, #3
	moveq	r2, r0
.L8468:
	mov	r0, #1
	str	r2, [r1, #8]
	str	r2, [r1, #12]
	strb	r0, [r5, #164]
	b	.L8467
.L8470:
	mov	r2, #28672
	movt	r2, 148
	b	.L8468
	.fnend
	.size	ncm_notify_complete, .-ncm_notify_complete
	.section	.rodata.str1.4
	.align	2
.LC500:
	.ascii	"adb\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_function_bind_config, %function
adb_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L8495
	movw	r0, #:lower16:.LANCHOR0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movt	r0, #:upper16:.LANCHOR0
	mov	r5, r1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r1, [r1, #24]
	movw	r2, #:lower16:.LC500
	ldr	r4, [r0, #2284]
	movt	r2, #:upper16:.LC500
	add	r0, r3, #16
	str	r2, [r4]
	str	r3, [r4, #8]
	str	r0, [r4, #12]
	movw	r0, #:lower16:adb_function_set_alt
	str	r1, [r4, #76]
	ldr	r2, [r5, #24]
	movw	r1, #:lower16:adb_function_disable
	movt	r0, #:upper16:adb_function_set_alt
	movt	r1, #:upper16:adb_function_disable
	ldr	r2, [r2]
	ldr	r2, [r2, #20]
	str	r5, [r4, #20]
	str	r0, [r4, #32]
	str	r1, [r4, #40]
	cmp	r2, #4
	movw	r2, #:lower16:adb_function_unbind
	addhi	r3, r3, #32
	movt	r2, #:upper16:adb_function_unbind
	strhi	r3, [r4, #16]
	movw	r3, #:lower16:adb_function_bind
	movt	r3, #:upper16:adb_function_bind
	str	r3, [r4, #24]
	add	r3, r4, #64
	str	r2, [r4, #28]
	ldr	r1, [r5, #40]
	add	r2, r5, #36
	str	r3, [r5, #40]
	str	r2, [r4, #64]
	str	r1, [r4, #68]
	str	r3, [r1]
	ldr	r3, [r4, #24]
	cmp	r3, #0
	moveq	r0, r3
	beq	.L8478
	mov	r1, r4
	mov	r0, r5
	blx	r3
	cmp	r0, #0
	blt	.L8493
.L8478:
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L8479
.L8494:
	ldr	r2, [r4, #8]
	cmp	r2, #0
	beq	.L8479
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r5, #45]
.L8479:
	tst	r3, #2
	bne	.L8480
	ldr	r2, [r4, #12]
	cmp	r2, #0
	beq	.L8480
	ldrb	r2, [r5, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r5, #45]
.L8480:
	tst	r3, #1
	bne	.L8476
	ldr	r3, [r4, #16]
	cmp	r3, #0
	beq	.L8476
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r5, #45]
.L8481:
.L8476:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L8493:
	ldrd	r2, [r4, #64]
	mov	ip, #256
	mov	r1, #512
	mov	lr, #0
	str	r3, [r2, #4]
	str	r2, [r3]
	str	lr, [r4, #20]
	str	ip, [r4, #64]
	str	r1, [r4, #68]
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L8479
	b	.L8494
.L8496:
	.align	2
.L8495:
	.word	.LANCHOR1+2040
	.fnend
	.size	adb_function_bind_config, .-adb_function_bind_config
	.section	.rodata.str1.4
	.align	2
.LC501:
	.ascii	"ccid\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_function_bind_config, %function
ccid_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r2, #:lower16:.LANCHOR0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	ldr	r3, .L8515
	movt	r2, #:upper16:.LANCHOR0
	str	r6, [sp, #8]
	mov	r5, r1
	str	lr, [sp, #12]
	ldr	r4, [r2, #180]
	movw	ip, #:lower16:ccid_function_unbind
	ldr	r6, [r1, #24]
	movw	r1, #:lower16:.LC501
	movw	r0, #:lower16:ccid_function_set_alt
	movt	r1, #:upper16:.LC501
	movw	lr, #:lower16:ccid_function_bind
	movw	r2, #:lower16:ccid_function_setup
	movt	r0, #:upper16:ccid_function_set_alt
	str	r1, [r4]
	movw	r1, #:lower16:ccid_function_disable
	movt	ip, #:upper16:ccid_function_unbind
	movt	r1, #:upper16:ccid_function_disable
	movt	lr, #:upper16:ccid_function_bind
	str	r3, [r4, #8]
	movt	r2, #:upper16:ccid_function_setup
	add	r3, r3, #24
	str	ip, [r4, #28]
	str	r3, [r4, #12]
	str	r5, [r4, #20]
	str	lr, [r4, #24]
	str	r0, [r4, #32]
	add	r0, r5, #36
	str	r1, [r4, #40]
	add	r1, r4, #64
	str	r2, [r4, #44]
	str	r6, [r4, #76]
	ldr	r3, [r5, #40]
	str	r1, [r5, #40]
	str	r0, [r4, #64]
	str	r3, [r4, #68]
	str	r1, [r3]
	ldr	r3, [r4, #24]
	cmp	r3, #0
	moveq	r0, r3
	beq	.L8498
	mov	r1, r4
	mov	r0, r5
	blx	r3
	cmp	r0, #0
	blt	.L8513
.L8498:
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L8499
.L8514:
	ldr	r2, [r4, #8]
	cmp	r2, #0
	beq	.L8499
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r5, #45]
.L8499:
	tst	r3, #2
	bne	.L8500
	ldr	r2, [r4, #12]
	cmp	r2, #0
	beq	.L8500
	ldrb	r2, [r5, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r5, #45]
.L8500:
	tst	r3, #1
	bne	.L8497
	ldr	r3, [r4, #16]
	cmp	r3, #0
	beq	.L8497
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r5, #45]
.L8501:
.L8497:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L8513:
	ldrd	r2, [r4, #64]
	mov	ip, #256
	mov	r1, #512
	mov	lr, #0
	str	r3, [r2, #4]
	str	r2, [r3]
	str	lr, [r4, #20]
	str	ip, [r4, #64]
	str	r1, [r4, #68]
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L8499
	b	.L8514
.L8516:
	.align	2
.L8515:
	.word	.LANCHOR1+2096
	.fnend
	.size	ccid_function_bind_config, .-ccid_function_bind_config
	.section	.rodata.str1.4
	.align	2
.LC502:
	.ascii	"rmnet_smd_sdio\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_sdio_bind_config, %function
rmnet_smd_sdio_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movt	r3, #:upper16:.LANCHOR0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r3, #400]
	cmp	r4, #0
	beq	.L8522
	ldr	r3, .L8536
	mov	r5, r1
	movw	r1, #:lower16:.LC502
	movt	r1, #:upper16:.LC502
	movw	r2, #:lower16:rmnet_mux_bind
	movt	r2, #:upper16:rmnet_mux_bind
	movw	lr, #:lower16:rmnet_mux_unbind
	movw	r0, #:lower16:rmnet_mux_setup
	movw	ip, #:lower16:rmnet_mux_set_alt
	stm	r4, {r1, r3}
	add	r1, r3, #8
	movt	r0, #:upper16:rmnet_mux_setup
	add	r3, r3, #28
	movt	lr, #:upper16:rmnet_mux_unbind
	str	r1, [r4, #8]
	movw	r1, #:lower16:rmnet_mux_suspend
	movt	ip, #:upper16:rmnet_mux_set_alt
	str	r2, [r4, #24]
	movw	r2, #:lower16:rmnet_mux_disable
	movt	r1, #:upper16:rmnet_mux_suspend
	movt	r2, #:upper16:rmnet_mux_disable
	str	r3, [r4, #12]
	add	r3, r4, #64
	str	r5, [r4, #20]
	str	lr, [r4, #28]
	str	ip, [r4, #32]
	str	r2, [r4, #40]
	add	r2, r5, #36
	str	r0, [r4, #44]
	str	r1, [r4, #48]
	ldr	r1, [r5, #40]
	str	r3, [r5, #40]
	str	r2, [r4, #64]
	str	r1, [r4, #68]
	str	r3, [r1]
	ldr	r3, [r4, #24]
	cmp	r3, #0
	moveq	r0, r3
	beq	.L8519
	mov	r1, r4
	mov	r0, r5
	blx	r3
	cmp	r0, #0
	blt	.L8534
.L8519:
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L8520
.L8535:
	ldr	r2, [r4, #8]
	cmp	r2, #0
	beq	.L8520
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r5, #45]
.L8520:
	tst	r3, #2
	bne	.L8521
	ldr	r2, [r4, #12]
	cmp	r2, #0
	beq	.L8521
	ldrb	r2, [r5, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r5, #45]
.L8521:
	tst	r3, #1
	bne	.L8517
	ldr	r3, [r4, #16]
	cmp	r3, #0
	beq	.L8517
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r5, #45]
.L8517:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L8534:
	ldrd	r2, [r4, #64]
	mov	ip, #256
	mov	r1, #512
	mov	lr, #0
	str	r3, [r2, #4]
	str	r2, [r3]
	str	lr, [r4, #20]
	str	ip, [r4, #64]
	str	r1, [r4, #68]
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L8520
	b	.L8535
.L8522:
	mvn	r0, #18
	b	.L8517
.L8537:
	.align	2
.L8536:
	.word	.LANCHOR1+2144
	.fnend
	.size	rmnet_smd_sdio_bind_config, .-rmnet_smd_sdio_bind_config
	.section	.rodata.str1.4
	.align	2
.LC503:
	.ascii	"<3>%s: max_buffer_size:%d given_pkt_size:%d\012\000"
	.align	2
.LC504:
	.ascii	"<3> %s dev->error\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_bulk_write, %function
ccid_bulk_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r5, [r0, #132]
	.pad #36
	sub	sp, sp, #36
	ldr	r3, [r5, #88]
	cmp	r3, #0
	beq	.L8556
	cmp	r2, #0
	mov	r4, r2
	beq	.L8571
	cmp	r2, #524
	bcs	.L8572
	add	r7, r5, #84
	mov	r8, r1
	mov	r0, r7
	add	r9, r5, #184
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #184]
	mov	r1, r0
	cmp	r9, r3
	beq	.L8573
	ldr	ip, [r3]
	mov	lr, #512
	mov	r10, #256
	ldr	r2, [r3, #4]
	sub	r6, r3, #36
	mov	r0, r7
	str	r2, [ip, #4]
	str	ip, [r2]
	stm	r3, {r10, lr}
	bl	_raw_spin_unlock_irqrestore
	cmp	r6, #0
	beq	.L8544
.L8545:
	ldr	r3, [r5, #140]
	cmp	r3, #0
	bne	.L8574
	mov	r3, sp
	ldr	r0, [r6]
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 439 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/uaccess.h" 1
	adds r2, r8, r4; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L8575
	mov	r1, r4
	bl	__memzero
.L8553:
	ldr	r3, [r5, #88]
	cmp	r3, #0
	bne	.L8555
	cmp	r6, #0
	beq	.L8556
	ldr	r5, [r5, #96]
	mvn	r4, #18
	ldr	r0, [r6]
	bl	kfree
	mov	r1, r6
	ldr	r3, [r5, #8]
	mov	r0, r5
	ldr	r3, [r3, #12]
	blx	r3
	b	.L8538
.L8575:
	mov	r1, r8
	mov	r2, r4
	bl	__copy_from_user
	cmp	r0, #0
	bne	.L8553
	str	r4, [r6, #4]
	ldr	r0, [r5, #96]
	mov	r2, #208
	mov	r1, r6
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L8576
.L8538:
	mov	r0, r4
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L8573:
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
.L8544:
	ldr	r3, [r5, #140]
	cmp	r3, #0
	bne	.L8562
	mov	r2, sp
	movw	r1, #:lower16:autoremove_wake_function
	str	r8, [sp, #4]
	bic	r2, r2, #8128
	str	r3, [sp, #12]
	movt	r1, #:upper16:autoremove_wake_function
	bic	r2, r2, #63
	add	r10, r5, #164
	ldr	r0, [r2, #12]
	mov	fp, r2
	add	r2, sp, #24
	str	r0, [sp, #16]
	str	r1, [sp, #20]
	str	r2, [sp, #24]
	str	r2, [sp, #28]
	b	.L8550
.L8546:
	ldr	ip, [r3]
	ldr	r2, [r3, #4]
	str	r2, [ip, #4]
	str	ip, [r2]
	stm	r3, {r8, lr}
	bl	_raw_spin_unlock_irqrestore
	cmp	r6, #0
	bne	.L8569
.L8547:
	ldr	r3, [r5, #140]
	cmp	r3, #0
	bne	.L8563
	ldr	r3, [fp, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	bne	.L8549
	bl	schedule
.L8550:
	add	r1, sp, #12
	mov	r2, #1
	mov	r0, r10
	mov	r8, #256
	bl	prepare_to_wait
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #184]
	mov	r1, r0
	mov	lr, #512
	mov	r0, r7
	cmp	r9, r3
	sub	r6, r3, #36
	bne	.L8546
	bl	_raw_spin_unlock_irqrestore
	b	.L8547
.L8562:
	mov	r6, #0
	b	.L8545
.L8555:
	mov	r0, r7
	mvn	r4, #13
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #188]
	add	r2, r6, #36
	mov	r1, r0
	mov	r0, r7
	str	r2, [r5, #188]
	str	r9, [r6, #36]
	str	r3, [r6, #40]
	str	r2, [r3]
	bl	_raw_spin_unlock_irqrestore
	b	.L8538
.L8556:
	mvn	r4, #18
	b	.L8538
.L8576:
	mov	r3, #1
	mov	r0, r7
	str	r3, [r5, #140]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #188]
	add	r2, r6, #36
	mov	r1, r0
	mov	r0, r7
	str	r2, [r5, #188]
	str	r9, [r6, #36]
	str	r3, [r6, #40]
	str	r2, [r3]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #88]
	mov	r8, r0
	cmp	r3, #0
	mvnne	r4, #4
	beq	.L8577
.L8558:
	mov	r1, r8
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	b	.L8538
.L8549:
	add	r1, sp, #12
	mov	r0, r10
	mov	r4, #65024
	movt	r4, 65535
	bl	finish_wait
	b	.L8538
.L8569:
	ldr	r8, [sp, #4]
.L8548:
	add	r1, sp, #12
	mov	r0, r10
	bl	finish_wait
	b	.L8545
.L8563:
	mov	r6, #0
	ldr	r8, [sp, #4]
	b	.L8548
.L8577:
	mov	r1, r0
	mov	r0, r7
	mov	fp, #256
	bl	_raw_spin_unlock_irqrestore
	b	.L8559
.L8560:
	ldrd	r2, [r4]
	str	r3, [r2, #4]
	str	r2, [r3]
	mov	r3, #512
	str	fp, [r4]
	str	r3, [r4, #4]
	bl	_raw_spin_unlock_irqrestore
	cmp	r6, #0
	beq	.L8578
	ldr	r10, [r5, #96]
	ldr	r0, [r4, #-36]
	bl	kfree
	mov	r1, r6
	ldr	r3, [r10, #8]
	mov	r0, r10
	ldr	r3, [r3, #12]
	blx	r3
.L8559:
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r5, #184]
	mov	r1, r0
	mov	r0, r7
	cmp	r9, r4
	sub	r6, r4, #36
	bne	.L8560
	mvn	r4, #18
	bl	_raw_spin_unlock_irqrestore
	b	.L8558
.L8578:
	mvn	r4, #18
	b	.L8558
.L8571:
	movw	r0, #:lower16:.LC161
	ldr	r1, .L8579
	mvn	r4, #18
	movt	r0, #:upper16:.LC161
	bl	printk
	b	.L8538
.L8574:
	movw	r0, #:lower16:.LC504
	ldr	r1, .L8579
	mvn	r4, #4
	movt	r0, #:upper16:.LC504
	bl	printk
	b	.L8538
.L8572:
	movw	r0, #:lower16:.LC503
	mov	r3, r2
	ldr	r1, .L8579
	movt	r0, #:upper16:.LC503
	movw	r2, #523
	mvn	r4, #11
	bl	printk
	b	.L8538
.L8580:
	.align	2
.L8579:
	.word	.LANCHOR2+3916
	.fnend
	.size	ccid_bulk_write, .-ccid_bulk_write
	.section	.rodata.str1.4
	.align	2
.LC505:
	.ascii	"Mass Storage Function\000"
	.align	2
.LC506:
	.ascii	"include/linux/kref.h\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mass_storage_function_bind_config, %function
mass_storage_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r1
	movt	r3, #:upper16:.LANCHOR1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldrb	r2, [r3, #2192]	@ zero_extendqisi2
	ldr	r0, [r0, #4]
	cmp	r2, #0
	ldr	r6, [r0, #96]
	bne	.L8582
	ldr	r1, [r1, #24]
	ldrb	r2, [r1, #48]	@ zero_extendqisi2
	cmp	r2, #253
	bhi	.L8591
	add	r2, r2, #1
	uxtb	r2, r2
	strb	r2, [r1, #48]
	strb	r2, [r3, #2192]
	strb	r2, [r3, #2216]
.L8582:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #28]
	cmp	r0, #0
	beq	.L8592
	movw	r1, #32976
	bl	kmem_cache_alloc
	subs	r4, r0, #0
	mvneq	r6, #11
	bne	.L8584
.L8581:
	mov	r0, r6
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L8592:
	mov	r4, #16
.L8584:
	ldr	r0, .L8610
	movw	r2, #:lower16:.LC505
	movw	ip, #:lower16:fsg_bind
	movt	r2, #:upper16:.LC505
	movw	r3, #:lower16:fsg_unbind
	movw	r1, #:lower16:fsg_setup
	movt	r3, #:upper16:fsg_unbind
	str	r2, [r4]
	movw	r2, #:lower16:fsg_set_alt
	movt	r1, #:upper16:fsg_setup
	str	r0, [r4, #4]
	movw	r0, #:lower16:fsg_disable
	movt	r2, #:upper16:fsg_set_alt
	movt	ip, #:upper16:fsg_bind
	movt	r0, #:upper16:fsg_disable
	str	r5, [r4, #20]
	str	ip, [r4, #24]
	str	r3, [r4, #28]
	add	r3, r4, #64
	str	r2, [r4, #32]
	add	r2, r5, #36
	str	r0, [r4, #40]
	str	r1, [r4, #44]
	str	r6, [r4, #80]
	ldr	r1, [r5, #40]
	str	r3, [r5, #40]
	str	r2, [r4, #64]
	str	r1, [r4, #68]
	str	r3, [r1]
	ldr	r6, [r4, #24]
	cmp	r6, #0
	beq	.L8585
	mov	r1, r4
	mov	r0, r5
	blx	r6
	subs	r6, r0, #0
	blt	.L8605
.L8585:
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L8586
.L8609:
	ldr	r2, [r4, #8]
	cmp	r2, #0
	beq	.L8586
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r5, #45]
.L8586:
	tst	r3, #2
	bne	.L8587
	ldr	r2, [r4, #12]
	cmp	r2, #0
	beq	.L8587
	ldrb	r2, [r5, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r5, #45]
.L8587:
	tst	r3, #1
	beq	.L8606
.L8588:
	cmp	r6, #0
	bne	.L8607
	ldr	r4, [r4, #80]
	ldr	r3, [r4, #212]
	cmp	r3, #0
	beq	.L8608
.L8590:
	add	r3, r4, #212
	.syntax divided
@ 44 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	@ atomic_add
1:	ldrex	r2, [r3]
	add	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	b	.L8581
.L8606:
	ldr	r3, [r4, #16]
	cmp	r3, #0
	beq	.L8588
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r5, #45]
	b	.L8588
.L8605:
	ldrd	r2, [r4, #64]
	mov	r0, #256
	mov	r1, #512
	mov	ip, #0
	str	r3, [r2, #4]
	str	r2, [r3]
	str	ip, [r4, #20]
	strd	r0, [r4, #64]
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L8586
	b	.L8609
.L8607:
	mov	r0, r4
	bl	kfree
	b	.L8581
.L8608:
	movw	r0, #:lower16:.LC506
	mov	r1, #42
	movt	r0, #:upper16:.LC506
	bl	warn_slowpath_null
	b	.L8590
.L8591:
	mvn	r6, #18
	b	.L8581
.L8611:
	.align	2
.L8610:
	.word	.LANCHOR1+2220
	.fnend
	.size	mass_storage_function_bind_config, .-mass_storage_function_bind_config
	.section	.rodata.str1.4
	.align	2
.LC507:
	.ascii	"%s setup response queue error\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	accessory_function_ctrlrequest, %function
accessory_function_ctrlrequest:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	movw	r3, #:lower16:.LANCHOR0
	mov	r5, r1
	strd	r6, [sp, #8]
	movt	r3, #:upper16:.LANCHOR0
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldrb	ip, [r2]	@ zero_extendqisi2
	ldrb	r0, [r2, #1]	@ zero_extendqisi2
	ldr	r6, [r3, #824]
	cmp	ip, #64
	beq	.L8648
	cmp	r0, #51
	cmpeq	ip, #192
	bne	.L8638
	ldr	r3, [r5, #4]
	mov	r4, #2
	mov	r1, #256
	add	r0, r6, #93
	ldr	r3, [r3]
	strh	r4, [r3]	@ movhi
	bl	__memzero
	add	r0, r6, #348
	mov	r1, #256
	add	r0, r0, #1
	bl	__memzero
	add	r0, r6, #604
	mov	r1, #256
	add	r0, r0, #1
	bl	__memzero
	add	r0, r6, #860
	mov	r1, #256
	add	r0, r0, #1
	bl	__memzero
	add	r0, r6, #1104
	mov	r1, #256
	add	r0, r0, #13
	bl	__memzero
	add	r0, r6, #1360
	mov	r1, #256
	add	r0, r0, #13
	bl	__memzero
	mov	r3, #0
	str	r3, [r6, #1636]
	str	r3, [r6, #1640]
.L8615:
	ldr	r3, [r5, #4]
	mov	r2, #32
	ldrb	r1, [r3, #26]	@ zero_extendqisi2
	bfc	r1, #1, #1
	strb	r1, [r3, #26]
	ldr	r3, [r5, #4]
	str	r4, [r3, #4]
	ldr	r3, [r5]
	ldr	r1, [r5, #4]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	blt	.L8649
.L8612:
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L8648:
	cmp	r0, #53
	beq	.L8650
	cmp	r0, #52
	ldrh	r7, [r2, #4]	@ unaligned
	ldrh	r4, [r2, #6]	@ unaligned
	beq	.L8651
	ldrh	r8, [r2, #2]	@ unaligned
	orr	r3, r7, r4
	cmp	r0, #58
	cmpeq	r3, #0
	moveq	r4, #0
	streq	r8, [r6, #1640]
	beq	.L8615
	cmp	r0, #54
	beq	.L8652
	cmp	r0, #55
	beq	.L8653
	cmp	r0, #56
	beq	.L8654
	cmp	r0, #57
	bne	.L8638
	add	r9, r6, #80
	add	r6, r6, #1744
	mov	r0, r9
	bl	_raw_spin_lock_irqsave
	ldr	r7, [r6, #12]
	add	r6, r6, #12
	mov	r1, r0
	cmp	r6, r7
	bne	.L8636
	b	.L8634
.L8655:
	ldr	r7, [r7]
	cmp	r6, r7
	beq	.L8634
.L8636:
	ldr	r3, [r7, #16]
	cmp	r8, r3
	bne	.L8655
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore
	cmp	r7, #0
	beq	.L8647
	ldr	r2, [r5, #4]
	movw	r3, #:lower16:acc_complete_send_hid_event
	movt	r3, #:upper16:acc_complete_send_hid_event
	str	r7, [r2, #32]
	ldr	r2, [r5, #4]
	str	r3, [r2, #28]
	b	.L8615
.L8649:
	ldr	r0, [r5]
	movw	r1, #:lower16:.LC507
	ldr	r2, .L8659
	movt	r1, #:upper16:.LC507
	add	r0, r0, #32
	bl	dev_err
	b	.L8612
.L8651:
	str	r7, [r6, #1632]
	ldr	r2, [r1]
	movw	r3, #:lower16:acc_complete_set_string
	movt	r3, #:upper16:acc_complete_set_string
	ldr	r2, [r2, #4]
	str	r6, [r2]
	ldr	r2, [r1, #4]
	str	r3, [r2, #28]
	b	.L8615
.L8652:
	mov	r2, r7
	mov	r1, r8
	mov	r0, r6
	bl	acc_register_hid
	subs	r4, r0, #0
	blt	.L8612
	b	.L8615
.L8638:
.L8619:
	mvn	r4, #94
	b	.L8612
.L8650:
	mov	r3, #1
	add	r0, r6, #1680
	mov	r1, #3
	add	r0, r0, #12
	str	r3, [r6, #1636]
	mov	r4, #0
	bl	schedule_delayed_work
	b	.L8615
.L8653:
	add	r4, r6, #80
	mov	r0, r4
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r6, #1756]
	add	ip, r6, #1744
	mov	r1, r0
	add	ip, ip, #12
	cmp	ip, r3
	bne	.L8623
	b	.L8621
.L8656:
	ldr	r3, [r3]
	cmp	ip, r3
	beq	.L8621
.L8623:
	ldr	r2, [r3, #16]
	cmp	r8, r2
	bne	.L8656
	cmp	r3, #0
	beq	.L8621
.L8624:
	ldr	lr, [r3]
	add	r2, r6, #1760
	mov	r0, r4
	ldr	ip, [r3, #4]
	add	r2, r2, #12
	mov	r4, #0
	str	ip, [lr, #4]
	str	lr, [ip]
	ldr	ip, [r6, #1772]
	str	r3, [ip, #4]
	str	ip, [r3]
	str	r2, [r3, #4]
	str	r3, [r6, #1772]
	bl	_raw_spin_unlock_irqrestore
	add	r0, r6, #1728
	add	r0, r0, #12
	bl	schedule_work
	b	.L8615
.L8654:
	add	r10, r6, #80
	add	r6, r6, #1760
	mov	r0, r10
	bl	_raw_spin_lock_irqsave
	ldr	r9, [r6, #4]
	add	r6, r6, #4
	mov	r1, r0
	cmp	r6, r9
	bne	.L8631
	b	.L8629
.L8657:
	ldr	r9, [r9]
	cmp	r6, r9
	beq	.L8629
.L8631:
	ldr	r3, [r9, #16]
	cmp	r8, r3
	bne	.L8657
	mov	r0, r10
	bl	_raw_spin_unlock_irqrestore
	cmp	r9, #0
	beq	.L8647
	ldr	r3, [r9, #28]
	cmp	r7, r3
	bne	.L8647
	ldr	r3, [r9, #24]
	add	r7, r4, r7
	cmp	r7, r3
	bgt	.L8647
	ldr	r2, [r5, #4]
	movw	r3, #:lower16:acc_complete_set_hid_report_desc
	movt	r3, #:upper16:acc_complete_set_hid_report_desc
	str	r9, [r2, #32]
	ldr	r2, [r5, #4]
	str	r3, [r2, #28]
	b	.L8615
.L8621:
	ldr	r3, [r6, #1764]
	add	r0, r6, #1760
	add	r0, r0, #4
	cmp	r0, r3
	bne	.L8627
	b	.L8625
.L8658:
	ldr	r3, [r3]
	cmp	r0, r3
	beq	.L8625
.L8627:
	ldr	r2, [r3, #16]
	cmp	r8, r2
	bne	.L8658
	cmp	r3, #0
	bne	.L8624
.L8625:
	mov	r0, r4
	mvn	r4, #21
	bl	_raw_spin_unlock_irqrestore
	b	.L8612
.L8629:
	mov	r0, r10
	bl	_raw_spin_unlock_irqrestore
.L8647:
	mvn	r4, #21
	b	.L8612
.L8634:
	mov	r0, r9
	mvn	r4, #21
	bl	_raw_spin_unlock_irqrestore
	b	.L8612
.L8660:
	.align	2
.L8659:
	.word	.LANCHOR2+3932
	.fnend
	.size	accessory_function_ctrlrequest, .-accessory_function_ctrlrequest
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mtp_ioctl, %function
mtp_ioctl:
	.fnstart
	@ args = 0, pretend = 0, frame = 48
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	mov	r7, r2
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r4, [r0, #132]
	.pad #52
	sub	sp, sp, #52
	add	r5, r4, #104
	.syntax divided
@ 60 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 111 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/processor.h" 1
	pld	[r5]
@ 0 "" 2
@ 63 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r3, [r5]
	add	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 73 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #1
	bne	.L8662
	movw	r3, #19713
	mov	r6, r1
	movt	r3, 16416
	cmp	r1, r3
	bhi	.L8663
	movw	r3, #19711
	movt	r3, 16416
	cmp	r1, r3
	bhi	.L8664
	movw	r3, #19715
	movt	r3, 16392
	cmp	r1, r3
	bne	.L8666
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 439 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/uaccess.h" 1
	adds r2, r7, #8; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L8719
	mov	r1, #8
	mvn	r7, #13
	add	r0, sp, r1
	bl	__memzero
	b	.L8678
.L8663:
	movw	r3, #19716
	movt	r3, 16416
	cmp	r1, r3
	beq	.L8664
.L8666:
	add	r8, r4, #80
	mvn	r7, #21
.L8677:
	mov	r0, r8
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #96]
	cmp	r3, #3
	mvneq	r7, #124
	beq	.L8694
	cmp	r3, #0
	movne	r3, #1
	strne	r3, [r4, #96]
.L8694:
	mov	r0, r8
	bl	_raw_spin_unlock_irq
.L8678:
	.syntax divided
@ 83 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r5]
	sub	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
.L8661:
	mov	r0, r7
	add	sp, sp, #52
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L8664:
	add	r8, r4, #80
	mov	r0, r8
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #96]
	cmp	r3, #3
	beq	.L8720
	cmp	r3, #0
	beq	.L8721
	mov	r3, #2
	mov	r0, r8
	str	r3, [r4, #96]
	bl	_raw_spin_unlock_irq
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 439 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/uaccess.h" 1
	adds r2, r7, #32; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L8722
	mov	r1, #32
	add	r0, sp, #16
	mvn	r7, #13
	bl	__memzero
	b	.L8677
.L8719:
	mov	r2, #8
	mov	r1, r7
	add	r0, sp, r2
	bl	__copy_from_user
	cmp	r0, #0
	mvnne	r7, #13
	bne	.L8678
	ldr	r7, [sp, #8]
	cmp	r7, #28
	bhi	.L8700
	ldr	r3, [r4, #96]
	cmp	r3, #0
	beq	.L8701
	add	r8, r4, #80
	add	r9, r4, #116
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #116]
	mov	r1, r0
	cmp	r9, r3
	beq	.L8723
	ldr	ip, [r3]
	mov	lr, #512
	mov	r10, #256
	ldr	r2, [r3, #4]
	sub	r6, r3, #36
	mov	r0, r8
	str	r2, [ip, #4]
	str	ip, [r2]
	stm	r3, {r10, lr}
	bl	_raw_spin_unlock_irqrestore
	cmp	r6, #0
	beq	.L8683
.L8684:
	mov	r3, sp
	ldr	r1, [sp, #12]
	bic	r3, r3, #8128
	ldr	r0, [r6]
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 439 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/uaccess.h" 1
	adds r2, r1, r7; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L8724
	cmp	r7, #0
	bne	.L8725
.L8693:
	str	r7, [r6, #4]
	ldr	r0, [r4, #92]
	mov	r2, #208
	mov	r1, r6
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r7, r0, #0
	beq	.L8678
	mov	r0, r8
.L8718:
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #120]
	add	r2, r6, #36
	mov	r1, r0
	mov	r0, r8
	str	r2, [r4, #120]
	str	r9, [r6, #36]
	str	r3, [r6, #40]
	str	r2, [r3]
	bl	_raw_spin_unlock_irqrestore
	b	.L8678
.L8721:
	mov	r0, r8
	mvn	r7, #18
	bl	_raw_spin_unlock_irq
	b	.L8678
.L8722:
	mov	r1, r7
	mov	r2, #32
	add	r0, sp, #16
	bl	__copy_from_user
	subs	r7, r0, #0
	mvnne	r7, #13
	bne	.L8677
	ldr	r0, [sp, #16]
	bl	fget
	subs	r9, r0, #0
	mvneq	r7, #8
	beq	.L8677
	str	r9, [r4, #208]
	ldrd	r2, [sp, #24]
	strd	r2, [r4, #216]
	ldrd	r2, [sp, #32]
	strd	r2, [r4, #224]
	.syntax divided
@ 1023 "drivers/usb/gadget/f_mtp.c" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	movw	r3, #19716
	movt	r3, 16416
	cmp	r6, r3
	beq	.L8726
	mov	r3, #19712
	movt	r3, 16416
	cmp	r6, r3
	addeq	r1, r4, #176
	addne	r1, r4, #192
	streq	r7, [r4, #232]
.L8675:
	ldr	r0, [r4, #172]
	bl	queue_work
	ldr	r0, [r4, #172]
	bl	flush_workqueue
	mov	r0, r9
	bl	fput
	.syntax divided
@ 1047 "drivers/usb/gadget/f_mtp.c" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r7, [r4, #244]
	b	.L8677
.L8662:
	.syntax divided
@ 83 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r5]
	sub	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mvn	r7, #15
	b	.L8661
.L8720:
	mov	r3, #1
	mov	r0, r8
	mvn	r7, #124
	str	r3, [r4, #96]
	bl	_raw_spin_unlock_irq
	b	.L8678
.L8724:
	mov	r2, r7
	bl	__copy_from_user
	cmp	r0, #0
	beq	.L8693
.L8692:
	mov	r0, r8
	mvn	r7, #13
	b	.L8718
.L8723:
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
.L8683:
	mov	r3, sp
	movw	r1, #:lower16:autoremove_wake_function
	bic	r2, r3, #8128
	movt	r1, #:upper16:autoremove_wake_function
	bic	r2, r2, #63
	mov	r3, #0
	ldr	r0, [r2, #12]
	add	r10, r4, #148
	mov	fp, #300
	stm	sp, {r2, r7}
	add	r2, sp, #28
	str	r3, [sp, #16]
	strd	r0, [sp, #20]
	str	r2, [sp, #28]
	str	r2, [sp, #32]
.L8690:
	add	r1, sp, #16
	mov	r2, #1
	mov	r0, r10
	mov	r7, #512
	bl	prepare_to_wait
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #116]
	mov	r1, r0
	mov	lr, #256
	mov	r0, r8
	cmp	r9, r3
	sub	r6, r3, #36
	beq	.L8727
	ldr	ip, [r3]
	ldr	r2, [r3, #4]
	str	r2, [ip, #4]
	str	ip, [r2]
	str	lr, [r3]
	str	r7, [r3, #4]
	bl	_raw_spin_unlock_irqrestore
	cmp	r6, #0
	bne	.L8687
.L8686:
	ldr	r3, [sp]
	mov	r0, fp
	ldr	r3, [r3, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	bne	.L8688
	bl	schedule_timeout
	subs	fp, r0, #0
	bne	.L8690
	mov	r0, r8
	ldr	r7, [sp, #4]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #116]
	mov	r1, r0
	cmp	r9, r3
	beq	.L8728
	ldr	ip, [r3]
	mov	lr, #512
	mov	fp, #256
	ldr	r2, [r3, #4]
	mov	r0, r8
	sub	r6, r3, #36
	str	r2, [ip, #4]
	str	ip, [r2]
	stm	r3, {fp, lr}
	bl	_raw_spin_unlock_irqrestore
	add	r1, sp, #16
	mov	r0, r10
	bl	finish_wait
	cmp	r6, #0
	bne	.L8684
.L8717:
	mvn	r7, #61
	b	.L8678
.L8726:
	mov	r3, #1
	add	r1, r4, #176
	str	r3, [r4, #232]
	ldrh	r3, [sp, #40]
	strh	r3, [r4, #236]	@ movhi
	ldr	r3, [sp, #44]
	str	r3, [r4, #240]
	b	.L8675
.L8725:
	mov	r1, r7
	bl	__memzero
	b	.L8692
.L8727:
	bl	_raw_spin_unlock_irqrestore
	b	.L8686
.L8701:
	mvn	r7, #18
	b	.L8678
.L8687:
	add	r1, sp, #16
	mov	r0, r10
	ldr	r7, [sp, #4]
	bl	finish_wait
	b	.L8684
.L8728:
	mov	r0, r8
	mvn	r7, #61
	bl	_raw_spin_unlock_irqrestore
	add	r1, sp, #16
	mov	r0, r10
	bl	finish_wait
	b	.L8678
.L8700:
	mvn	r7, #21
	b	.L8678
.L8688:
	add	r1, sp, #16
	mov	r0, r10
	bl	finish_wait
	b	.L8717
	.fnend
	.size	mtp_ioctl, .-mtp_ioctl
	.section	.rodata.str1.4
	.align	2
.LC508:
	.ascii	"<3>%s bulk_dev_error\012\000"
	.align	2
.LC509:
	.ascii	"<3>%s usb ep queue failed\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_bulk_read, %function
ccid_bulk_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	ip, #522
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	cmp	r2, ip
	strd	r6, [sp, #8]
	mov	r7, r2
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	.pad #24
	sub	sp, sp, #24
	ldr	r4, [r0, #132]
	bhi	.L8760
	ldr	r3, [r4, #140]
	cmp	r3, #0
	bne	.L8732
	mov	r3, sp
	mov	r9, r1
	bic	r8, r3, #8128
	add	r5, r4, #84
	bic	r8, r8, #63
	b	.L8733
.L8735:
	ldr	r3, [r4, #140]
	cmp	r3, #0
	bne	.L8746
.L8763:
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #88]
	mov	r1, r0
	cmp	r3, #0
	beq	.L8758
	ldr	r2, [r6, #48]
	cmp	r2, #0
	bne	.L8740
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
.L8733:
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #88]
	mov	r1, r0
	cmp	r3, #0
	beq	.L8759
	ldr	r6, [r4, #176]
	mov	r3, #0
	mov	r0, r5
	str	r7, [r6, #4]
	str	r3, [r4, #180]
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, [r4, #100]
	mov	r1, r6
	mov	r2, #208
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L8761
	ldr	r3, [r4, #180]
	cmp	r3, #0
	bne	.L8735
	ldr	r3, [r4, #140]
	cmp	r3, #0
	bne	.L8735
	ldr	r2, [r4, #88]
	cmp	r2, #0
	beq	.L8735
	ldr	r0, [r8, #12]
	movw	r2, #:lower16:autoremove_wake_function
	add	r1, sp, #16
	movt	r2, #:upper16:autoremove_wake_function
	add	r10, r4, #152
	str	r3, [sp, #4]
	str	r1, [sp, #16]
	str	r0, [sp, #8]
	str	r2, [sp, #12]
	str	r1, [sp, #20]
	b	.L8738
.L8762:
	bl	schedule
.L8738:
	mov	r2, #1
	add	r1, sp, #4
	mov	r0, r10
	bl	prepare_to_wait
	ldr	r3, [r4, #180]
	cmp	r3, #0
	bne	.L8736
	ldr	r3, [r4, #140]
	cmp	r3, #0
	bne	.L8736
	ldr	r3, [r4, #88]
	cmp	r3, #0
	beq	.L8736
	ldr	r3, [r8, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L8762
	mov	r0, r10
	add	r1, sp, #4
	bl	finish_wait
	ldr	r0, [r4, #100]
	mov	r3, #1
	mov	r1, r6
	mov	r7, #65024
	str	r3, [r4, #140]
	movt	r7, 65535
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	b	.L8729
.L8765:
	ldr	r7, [r4, #176]
	cmp	r7, r2
	beq	.L8744
	ldr	r4, [r4, #100]
	ldr	r0, [r7]
	bl	kfree
	mov	r1, r7
	ldr	r3, [r4, #8]
	mov	r0, r4
	ldr	r3, [r3, #12]
	blx	r3
.L8744:
	mov	r1, r6
.L8758:
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
.L8759:
	mvn	r7, #18
.L8729:
	mov	r0, r7
	add	sp, sp, #24
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L8736:
	add	r1, sp, #4
	mov	r0, r10
	bl	finish_wait
	ldr	r3, [r4, #140]
	cmp	r3, #0
	beq	.L8763
.L8746:
	mvn	r7, #4
	b	.L8729
.L8740:
	mov	r3, #1
	cmp	r2, r7
	mov	r0, r5
	movcc	r8, r2
	str	r3, [r4, #148]
	movcs	r8, r7
	bl	_raw_spin_unlock_irqrestore
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 448 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/uaccess.h" 1
	adds r2, r9, r8; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L8764
.L8741:
	cmp	r8, #0
	mov	r0, r5
	mvnne	r7, #13
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #88]
	mov	r2, #0
	mov	r6, r0
	str	r2, [r4, #148]
	cmp	r3, r2
	beq	.L8765
	mov	r1, r0
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	b	.L8729
.L8764:
	mov	r2, r8
	mov	r0, r9
	ldr	r1, [r6]
	bl	__copy_to_user
	mov	r8, r0
	b	.L8741
.L8760:
	movw	r0, #:lower16:.LC503
	mov	r3, r2
	ldr	r1, .L8766
	mov	r2, ip
	movt	r0, #:upper16:.LC503
	mvn	r7, #11
	bl	printk
	b	.L8729
.L8761:
	movw	r0, #:lower16:.LC509
	ldr	r1, .L8766
	mvn	r7, #4
	movt	r0, #:upper16:.LC509
	bl	printk
	mov	r3, #1
	str	r3, [r4, #140]
	b	.L8729
.L8732:
	movw	r0, #:lower16:.LC508
	ldr	r1, .L8766
	mvn	r7, #4
	movt	r0, #:upper16:.LC508
	bl	printk
	b	.L8729
.L8767:
	.align	2
.L8766:
	.word	.LANCHOR2+3948
	.fnend
	.size	ccid_bulk_read, .-ccid_bulk_read
	.align	2
	.global	usb_gadget_get_string
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_gadget_get_string, %function
usb_gadget_get_string:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #0
	mov	r3, r0
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	mov	r5, r2
	str	lr, [sp, #8]
	.pad #12
	sub	sp, sp, #12
	beq	.L8781
	ldr	r3, [r0, #4]
	cmp	r3, #0
	bne	.L8771
	b	.L8772
.L8774:
	ldrb	r0, [r3]	@ zero_extendqisi2
	cmp	r0, r1
	beq	.L8773
	adds	r3, r3, #8
	beq	.L8772
.L8771:
	ldr	r4, [r3, #4]
	cmp	r4, #0
	bne	.L8774
.L8772:
	mvn	r0, #21
	b	.L8768
.L8773:
	mov	r0, r4
	bl	strlen
	mov	r2, #126
	mov	r1, r0
	cmp	r0, r2
	add	r3, r5, #2
	movcs	r1, r2
	mov	r0, r4
	str	r2, [sp]
	mov	r2, #1
	bl	utf8s_to_utf16s
	cmp	r0, #0
	blt	.L8772
	add	r0, r0, #1
	mov	r2, #3
	lsl	r3, r0, #1
	strb	r2, [r5, #1]
	uxtb	r3, r3
	mov	r0, r3
	strb	r3, [r5]
.L8768:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	add	sp, sp, #8
	ldr	pc, [sp], #4
.L8781:
	mov	r2, #4
	mov	r1, #3
	mov	r0, r2
	strb	r2, [r5]
	strb	r1, [r5, #1]
	ldrh	r2, [r3]
	strb	r2, [r5, #2]
	ldrh	r3, [r3]
	lsr	r3, r3, #8
	strb	r3, [r5, #3]
	b	.L8768
	.fnend
	.size	usb_gadget_get_string, .-usb_gadget_get_string
	.section	.rodata.str1.4
	.align	2
.LC510:
	.ascii	"%s config #%d: %s\012\000"
	.align	2
.LC511:
	.ascii	"<3>%s(): No SS desc for function:%s\012\000"
	.align	2
.LC512:
	.ascii	"func_suspend() returned error %d\012\000"
	.align	2
.LC513:
	.ascii	"%s: Delayed status not supported for w_length != 0\000"
	.align	2
.LC514:
	.ascii	"unconfigured\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	composite_setup, %function
composite_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	mov	r7, r0
	add	r0, r0, #32
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	mov	r10, r1
	str	lr, [sp, #32]
	.pad #44
	sub	sp, sp, #44
	bl	dev_get_drvdata
	ldrh	r8, [r10, #6]	@ unaligned
	ldrh	r9, [r10, #4]	@ unaligned
	ldrh	r3, [r10, #2]	@ unaligned
	ldr	r6, [r0, #4]
	cmp	r8, #4096
	bhi	.L9013
	ldrb	r1, [r6, #26]	@ zero_extendqisi2
	movw	r2, #:lower16:composite_setup_complete
	mov	r5, r0
	movt	r2, #:upper16:composite_setup_complete
	mov	r0, #0
	uxtb	ip, r9
	str	r0, [r6, #4]
	bfc	r1, #1, #1
	strb	r1, [r6, #26]
	str	r2, [r6, #28]
	ldr	r2, [r7, #4]
	str	r5, [r2]
	ldrb	r1, [r10, #1]	@ zero_extendqisi2
	cmp	r1, #11
	ldrls	pc, [pc, r1, asl #2]
	b	.L8785
.L8787:
	.word	.L8793
	.word	.L8792
	.word	.L8785
	.word	.L8792
	.word	.L8785
	.word	.L8785
	.word	.L8791
	.word	.L8785
	.word	.L8790
	.word	.L8789
	.word	.L8788
	.word	.L8786
.L8785:
	ldrb	r4, [r10]	@ zero_extendqisi2
.L8794:
	and	r4, r4, #31
	cmp	r4, #1
	beq	.L8959
	cmp	r4, #2
	beq	.L8960
	ldr	r0, [r5, #12]
.L8962:
	cmp	r0, #0
	beq	.L9013
.L8965:
	ldr	r3, [r0, #16]
	cmp	r3, #0
	beq	.L9013
	mov	r1, r10
	blx	r3
	mov	r4, r0
.L8968:
	movw	r3, #32767
	cmp	r4, r3
	bne	.L8782
	ldr	r3, [r5, #56]
	add	r3, r3, #1
	str	r3, [r5, #56]
.L8782:
	mov	r0, r4
	add	sp, sp, #44
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L8786:
	ldrb	r4, [r10]	@ zero_extendqisi2
	cmp	r4, #1
	bne	.L8794
	ldr	r1, [r5, #12]
	clz	r2, r1
	lsr	r2, r2, #5
	cmp	ip, #15
	orrhi	r2, r2, #1
	cmp	r2, #0
	beq	.L9183
.L9013:
	mvn	r4, #94
	b	.L8782
.L8960:
	ldr	r0, [r5, #12]
	cmp	r0, #0
	beq	.L9013
	mov	r1, r0
	asr	r2, r9, #3
	ldr	r3, [r1, #36]!
	and	r9, r9, #15
	and	r2, r2, #16
	orr	r2, r2, r9
	cmp	r1, r3
	sub	r3, r3, #64
	beq	.L8965
	mov	r9, #1
	lsl	r9, r9, r2
	b	.L8966
.L9184:
	ldr	r3, [r3, #64]
	cmp	r1, r3
	sub	r3, r3, #64
	beq	.L8965
.L8966:
	ldr	r2, [r3, #72]
	tst	r2, r9
	beq	.L9184
	b	.L8963
.L8959:
	ldr	r0, [r5, #12]
	cmp	ip, #15
	movls	r3, #0
	movhi	r3, #1
	cmp	r0, #0
	moveq	r3, #1
	cmp	r3, #0
	bne	.L8962
	add	ip, ip, #12
	ldr	r3, [r0, ip, lsl #2]
.L8963:
	cmp	r3, #0
	beq	.L8965
	ldr	r2, [r3, #44]
	cmp	r2, #0
	beq	.L8965
	mov	r1, r10
	mov	r0, r3
	blx	r2
	mov	r4, r0
	b	.L8968
.L8792:
	ldr	r2, [r7, #20]
	cmp	r2, #4
	bls	.L8785
	ldrb	r4, [r10]	@ zero_extendqisi2
	cmp	r4, #1
	bne	.L8794
	cmp	r3, #0
	bne	.L9013
	ldr	r1, [r5, #12]
	cmp	ip, #15
	movls	r2, #0
	movhi	r2, #1
	cmp	r1, #0
	moveq	r2, #1
	cmp	r2, #0
	bne	.L9013
	add	ip, ip, #12
	ldr	r0, [r1, ip, lsl #2]
	cmp	r0, #0
	beq	.L9013
	ldr	r2, [r0, #60]
	cmp	r2, #0
	beq	.L9180
	lsr	r1, r9, #8
	str	r3, [sp, #12]
	blx	r2
	subs	r4, r0, #0
	ldr	r3, [sp, #12]
	blt	.L8958
	movw	r3, #32767
	subs	r9, r4, r3
	movne	r9, #1
.L8942:
	cmp	r9, #0
	beq	.L8795
.L8909:
	mov	r5, r4
	b	.L8816
.L8789:
	ldrb	r4, [r10]	@ zero_extendqisi2
	str	r3, [sp, #16]
	cmp	r4, #0
	bne	.L8794
	add	r3, r5, #60
	mov	r0, r3
	str	r3, [sp, #20]
	bl	_raw_spin_lock
	ldr	r3, [r5]
	ldr	r0, [r5, #12]
	mov	fp, r3
	str	r3, [sp, #12]
	ldr	r3, [sp, #16]
	cmp	r0, #0
	beq	.L8907
	ldrb	r1, [r0, #20]	@ zero_extendqisi2
	cmp	r3, r1
	beq	.L9185
	cmp	r3, #0
	bne	.L8971
	ldr	r10, [r0, #36]!
	cmp	r0, r10
	sub	r10, r10, #64
	beq	.L9002
	mov	r9, r3
	mov	r4, r3
.L8922:
	ldr	r3, [r10, #40]
	mov	r0, r10
	cmp	r3, #0
	beq	.L8919
	blx	r3
	str	r9, [r10, #72]
	ldr	r3, [r5, #12]
	ldr	r10, [r10, #64]
	add	r3, r3, #36
	cmp	r3, r10
	sub	r10, r10, #64
	bne	.L8922
.L9178:
	ldr	r10, [r5]
	mov	r3, r4
.L8918:
	mov	r2, #0
	str	r3, [sp, #16]
	add	r10, r10, #32
	str	r2, [r5, #12]
	str	r2, [r5, #56]
	ldr	r0, [fp, #16]
	bl	usb_speed_string
	ldr	r3, [sp, #16]
	mov	r2, r0
.L8923:
	movw	ip, #:lower16:.LC514
	movw	r1, #:lower16:.LC510
	movt	ip, #:upper16:.LC514
	movt	r1, #:upper16:.LC510
	mov	r0, r10
	mov	r4, #0
	str	ip, [sp]
	bl	_dev_info
	mov	r1, #100
.L8940:
	ldr	r3, [sp, #12]
	ldr	r3, [r3]
	ldr	r3, [r3, #16]
	cmp	r3, #0
	beq	.L8969
	ldr	r0, [sp, #12]
	blx	r3
.L8969:
	ldr	r3, [r5, #56]
	cmp	r3, #0
	bne	.L9186
	movw	r3, #32767
	subs	r9, r4, r3
	movne	r9, #1
.L8976:
	ldr	r0, [sp, #20]
	bl	_raw_spin_unlock
	b	.L8942
.L8788:
	ldrb	r4, [r10]	@ zero_extendqisi2
	cmp	r4, #129
	bne	.L8794
	ldr	r2, [r5, #12]
	clz	r3, r2
	lsr	r3, r3, #5
	cmp	ip, #15
	orrhi	r3, r3, #1
	cmp	r3, #0
	bne	.L9013
	add	ip, ip, #12
	ldr	r0, [r2, ip, lsl #2]
	cmp	r0, #0
	beq	.L9013
	ldr	r3, [r0, #36]
	cmp	r3, #0
	beq	.L8950
	mov	r1, r9
	blx	r3
	subs	r4, r0, #0
	blt	.L8782
	uxtb	r3, r4
.L8950:
	ldr	r2, [r6]
	cmp	r8, #1
	movcc	r4, r8
	movcs	r4, #1
	mov	r5, r4
	strb	r3, [r2]
	b	.L8816
.L8791:
	ldrb	r4, [r10]	@ zero_extendqisi2
	cmp	r4, #128
	bne	.L8794
	lsr	r2, r3, #8
	mov	r1, r2
	sub	r2, r2, #1
	cmp	r2, #14
	ldrls	pc, [pc, r2, asl #2]
	b	.L8980
.L8797:
	.word	.L8802
	.word	.L8801
	.word	.L8800
	.word	.L8980
	.word	.L8980
	.word	.L8799
	.word	.L8798
	.word	.L8980
	.word	.L8980
	.word	.L8980
	.word	.L8980
	.word	.L8980
	.word	.L8980
	.word	.L8980
	.word	.L8796
.L8790:
	ldrb	r4, [r10]	@ zero_extendqisi2
	cmp	r4, #128
	bne	.L8794
	ldr	r3, [r5, #12]
	cmp	r3, #0
	beq	.L8943
	ldrb	r2, [r3, #20]	@ zero_extendqisi2
	ldr	r3, [r6]
	strb	r2, [r3]
.L8944:
	cmp	r8, #1
	movcc	r4, r8
	movcs	r4, #1
	mov	r5, r4
.L8816:
	ldrb	ip, [r6, #26]	@ zero_extendqisi2
	cmp	r8, r4
	str	r5, [r6, #4]
	movle	r0, #0
	movgt	r0, #1
	mov	r2, #32
	mov	r1, r6
	bfi	ip, r0, #1, #1
	strb	ip, [r6, #26]
	ldr	r0, [r7, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	movlt	r3, #0
	strlt	r3, [r6, #44]
	b	.L8782
.L8793:
	ldr	r3, [r7, #20]
	cmp	r3, #4
	bls	.L8785
	ldrb	r4, [r10]	@ zero_extendqisi2
	cmp	r4, #129
	bne	.L8794
	ldr	r3, [r6]
	mov	r2, #0
	strb	r2, [r3]
	strb	r2, [r3, #1]
	ldr	r2, [r5, #12]
	clz	r3, r2
	lsr	r3, r3, #5
	cmp	ip, #15
	orrhi	r3, r3, #1
	cmp	r3, #0
	beq	.L8952
.L9179:
	mov	r5, #2
	mov	r4, r5
	b	.L8816
.L8980:
	mvn	r4, #94
.L8795:
	movw	r3, #32767
	sub	r3, r4, r3
	clz	r3, r3
	lsr	r3, r3, #5
.L8949:
	cmp	r8, #0
	movne	r8, r3
	moveq	r8, #0
	cmp	r8, #0
	beq	.L8782
	cmp	r5, #0
	movweq	r4, #32767
	beq	.L8782
	movw	r2, #:lower16:.LC513
	movw	r0, #:lower16:.LC425
	ldr	r3, .L9209
	movt	r2, #:upper16:.LC513
	movt	r0, #:upper16:.LC425
	movw	r1, #1402
	movw	r4, #32767
	bl	warn_slowpath_fmt
	b	.L8782
.L9183:
	add	ip, ip, #12
	ldr	r0, [r1, ip, lsl #2]
	cmp	r0, #0
	beq	.L9013
	cmp	r3, #0
	bne	.L9187
	ldr	r2, [r0, #36]
	cmp	r2, #0
	beq	.L9180
	ldr	r4, [r0, #32]
.L8946:
	mov	r2, r3
	mov	r1, r9
	blx	r4
	movw	r3, #32767
	mov	r4, r0
	cmp	r0, r3
	beq	.L8948
	mvn	r9, r0
	lsr	r9, r9, #31
	b	.L8942
.L8943:
	ldr	r2, [r6]
	strb	r3, [r2]
	b	.L8944
.L8907:
	cmp	r3, #0
	beq	.L9188
.L8971:
	mov	r1, r5
	ldr	r9, [r1, #36]!
	cmp	r1, r9
	sub	r2, r9, #28
	bne	.L8917
	b	.L9000
.L8911:
	ldr	r2, [r2, #28]
	cmp	r1, r2
	sub	r2, r2, #28
	beq	.L9000
.L8917:
	ldrb	ip, [r2, #20]	@ zero_extendqisi2
	cmp	r3, ip
	bne	.L8911
	cmp	r0, #0
	str	r2, [sp, #28]
	beq	.L8912
	ldr	r10, [r0, #36]!
	cmp	r0, r10
	sub	r10, r10, #64
	beq	.L8916
	mov	r4, #0
	mov	r9, r3
.L8913:
	ldr	r3, [r10, #40]
	mov	r0, r10
	cmp	r3, #0
	streq	r3, [r10, #72]
	beq	.L9177
	blx	r3
	str	r4, [r10, #72]
.L9177:
	ldr	r3, [r5, #12]
	ldr	r10, [r10, #64]
	add	r3, r3, #36
	cmp	r10, r3
	sub	r10, r10, #64
	bne	.L8913
	ldr	fp, [r5]
	mov	r3, r9
.L8916:
	mov	r2, #0
	str	r2, [r5, #12]
	str	r2, [r5, #56]
.L8912:
	str	r3, [sp, #16]
	ldr	r3, [sp, #12]
	add	r10, fp, #32
	ldr	r0, [r3, #16]
	bl	usb_speed_string
	mov	r2, r0
	ldr	r3, [sp, #16]
	ldr	r9, [sp, #28]
	cmp	r9, #0
	beq	.L8923
	ldr	ip, [r9]
	movw	r1, #:lower16:.LC510
	mov	r0, r10
	movt	r1, #:upper16:.LC510
	mov	r4, #0
	mov	r10, r4
	str	ip, [sp]
	bl	_dev_info
	ldr	fp, [sp, #12]
	mov	r3, r9
	mov	r0, r4
	add	r9, r9, #44
	str	r6, [sp, #16]
	str	r3, [r5, #12]
	str	r7, [sp, #24]
.L8939:
	ldr	r4, [r9, #4]!
	cmp	r4, #0
	beq	.L8924
	ldr	r3, [fp, #16]
	cmp	r3, #3
	beq	.L8925
	cmp	r3, #5
	bne	.L8926
	ldr	r7, [r4, #16]
	cmp	r7, #0
	beq	.L9189
.L8927:
	ldr	r3, [r7]
	cmp	r3, #0
	beq	.L8930
	add	r6, r4, #72
.L8931:
	ldrb	r2, [r3, #1]	@ zero_extendqisi2
	cmp	r2, #5
	beq	.L9190
	ldr	r3, [r7, #4]!
	cmp	r3, #0
	bne	.L8931
.L8930:
	mov	r0, r4
	mov	r2, #0
	ldr	r3, [r4, #32]
	mov	r1, r10
	blx	r3
	cmp	r0, #0
	blt	.L9191
	movw	r3, #32767
	cmp	r0, r3
	bne	.L8938
	ldr	r3, [r5, #56]
	add	r3, r3, #1
	str	r3, [r5, #56]
.L8938:
	add	r10, r10, #1
	cmp	r10, #16
	bne	.L8939
.L8924:
	mov	r4, r0
	ldr	r6, [sp, #16]
	ldr	r3, [sp, #28]
	ldr	r7, [sp, #24]
	ldrb	r3, [r3, #23]	@ zero_extendqisi2
	cmp	r3, #0
	moveq	r1, #500
	beq	.L8940
	ldr	r1, [r5, #64]
	mul	r1, r1, r3
	b	.L8940
.L8798:
	ldr	r2, [r7, #20]
	cmp	r2, #2
	bls	.L9013
	ldr	r2, [r7, #16]
	cmp	r2, #4
	bhi	.L9013
.L8801:
	ldr	r2, [r5]
	ldr	r9, [r2, #16]
	cmp	r9, #5
	beq	.L8828
	ldr	r2, [r2, #20]
	cmp	r2, #2
	movls	r9, #0
	bls	.L8828
	cmp	r9, #3
	beq	.L8829
	cmp	r1, #7
	moveq	r9, #3
	movne	r9, #0
.L8828:
	mov	r2, r5
	uxtb	r3, r3
	ldr	r10, [r2, #36]!
	cmp	r2, r10
	sub	r10, r10, #28
	bne	.L8830
	b	.L9182
.L9193:
	tst	r0, #1
	beq	.L8833
.L8834:
	cmp	r3, #0
	sub	r3, r3, #1
	beq	.L9192
.L8833:
	ldr	r10, [r10, #28]
	cmp	r2, r10
	sub	r10, r10, #28
	beq	.L9182
.L8830:
	cmp	r9, #3
	ldrb	r0, [r10, #45]	@ zero_extendqisi2
	beq	.L8831
	cmp	r9, #5
	beq	.L9193
	tst	r0, #4
	bne	.L8834
	b	.L8833
.L8802:
	ldr	r1, [r5]
	ldr	r3, [r1, #20]
	cmp	r3, #2
	bhi	.L8803
	mov	r0, r5
	ldr	r3, [r0, #36]!
	cmp	r0, r3
	sub	r3, r3, #28
	beq	.L8982
.L8804:
	mov	r2, #0
.L8810:
	ldrb	ip, [r3, #45]	@ zero_extendqisi2
	ldr	r3, [r3, #28]
	tst	ip, #4
	addne	r2, r2, #1
	cmp	r0, r3
	sub	r3, r3, #28
	bne	.L8810
.L8805:
	strb	r2, [r5, #34]
	ldr	r2, [r1, #4]
	mov	r3, #2
	ldrh	r2, [r2, #20]
	strb	r2, [r5, #24]
	str	r3, [r5, #64]
	ldr	r2, [r7, #20]
	cmp	r2, #4
	bls	.L8813
	ldr	r2, [r7, #16]
	cmp	r2, #4
	bls	.L8814
	mov	r0, #0
	mov	r1, #3
	mov	r2, #9
	mov	r3, #8
	strb	r0, [r5, #19]
	strb	r1, [r5, #20]
	strb	r2, [r5, #24]
	str	r3, [r5, #64]
.L8815:
	cmp	r8, #18
	add	r1, r5, #17
	ldr	r0, [r6]
	movcc	r4, r8
	movcs	r4, #18
	mov	r2, r4
	mov	r5, r4
	bl	memcpy
	b	.L8816
.L8799:
	ldr	r3, [r7, #20]
	cmp	r3, #2
	bls	.L9013
	ldr	r3, [r7, #16]
	cmp	r3, #4
	bhi	.L9013
	ldr	r2, [r5, #4]
	mov	r1, #10
	mov	r3, #6
	ldr	r2, [r2]
	strb	r1, [r2]
	strb	r3, [r2, #1]
	ldrh	r3, [r5, #19]	@ unaligned
	strh	r3, [r2, #2]	@ unaligned
	ldrb	r3, [r5, #21]	@ zero_extendqisi2
	strb	r3, [r2, #4]
	ldrb	r3, [r5, #22]	@ zero_extendqisi2
	strb	r3, [r2, #5]
	ldrb	r3, [r5, #23]	@ zero_extendqisi2
	strb	r3, [r2, #6]
	ldr	r3, [r5]
	ldr	r3, [r3, #4]
	ldrh	r3, [r3, #20]
	strb	r3, [r2, #7]
	ldr	r3, [r5]
	ldr	r1, [r3, #20]
	cmp	r1, #2
	bhi	.L8818
	ldr	r3, [r5, #36]!
	cmp	r5, r3
	sub	r3, r3, #28
	beq	.L8986
.L8819:
	mov	r1, #0
.L8825:
	ldrb	r0, [r3, #45]	@ zero_extendqisi2
	ldr	r3, [r3, #28]
	tst	r0, #4
	addne	r1, r1, #1
	cmp	r5, r3
	sub	r3, r3, #28
	bne	.L8825
.L8820:
	cmp	r8, #10
	mov	r3, #0
	strb	r1, [r2, #8]
	movlt	r4, r8
	movge	r4, #10
	mov	r5, r4
	strb	r3, [r2, #9]
	b	.L8816
.L8796:
	ldr	r3, [r7, #20]
	cmp	r3, #4
	bhi	.L8903
	ldrb	r3, [r7, #385]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L9013
.L8903:
	ldr	r1, [r5, #4]
	mov	r2, #0
	mov	r3, #5
	mov	ip, #15
	mov	r10, #12
	mov	r0, #1
	mov	r9, #7
	mov	lr, #16
	ldr	r4, [r1]
	mov	r1, #2
	strb	r3, [r4]
	strb	ip, [r4, #1]
	strb	r3, [r4, #2]
	strb	r2, [r4, #3]
	strb	r2, [r4, #4]
	ldr	r3, [r5, #4]
	ldr	r3, [r3]
	strh	r10, [r4, #2]	@ movhi
	strb	r0, [r4, #4]
	strb	r9, [r3, #5]
	strb	lr, [r3, #6]
	strb	r1, [r3, #7]
	strb	r1, [r3, #8]
	strb	r2, [r3, #9]
	strb	r2, [r3, #10]
	strb	r2, [r3, #11]
	ldr	r3, [r5]
	ldr	r3, [r3, #20]
	cmp	r3, #4
	bls	.L8904
	ldr	lr, [r5, #4]
	movw	r10, #4106
	ldrh	r3, [r4, #2]	@ unaligned
	movt	r10, 3
	ldrb	r1, [r4, #4]	@ zero_extendqisi2
	ldr	lr, [lr]
	add	r9, r3, #10
	add	r1, r1, r0
	strh	r9, [r4, #2]	@ movhi
	add	r9, lr, r3
	strb	r1, [r4, #4]
	str	r10, [lr, r3]	@ unaligned
	strb	ip, [r9, #4]
	strb	r2, [r9, #5]
	strb	r0, [r9, #6]
	ldr	r3, [r5]
	ldr	r3, [r3]
	ldr	r3, [r3, #28]
	cmp	r3, r2
	beq	.L8905
	add	r0, sp, #36
	blx	r3
.L8906:
	ldrb	r2, [sp, #36]	@ zero_extendqisi2
	ldrh	r3, [sp, #38]
	strb	r2, [r9, #7]
	strh	r3, [r9, #8]	@ unaligned
.L8904:
	ldrh	r4, [r4, #2]	@ unaligned
	cmp	r8, r4
	movcc	r4, r8
	mov	r5, r4
	b	.L8816
.L8800:
	ands	fp, r3, #255
	ldr	r4, [r6]
	beq	.L9194
	ldrb	r3, [r5, #49]	@ zero_extendqisi2
	cmp	fp, r3
	beq	.L9195
	ldrb	r3, [r5, #50]	@ zero_extendqisi2
	cmp	fp, r3
	beq	.L9196
	ldrb	r3, [r5, #51]	@ zero_extendqisi2
	cmp	fp, r3
	movw	r3, #:lower16:.LANCHOR0
	movt	r3, #:upper16:.LANCHOR0
	beq	.L9156
.L8883:
	ldr	r3, [r3, #396]
	ldr	r10, [r3, #16]
	cmp	r10, #0
	beq	.L8887
	ldr	r0, [r10]
	cmp	r0, #0
	bne	.L8889
	b	.L8887
.L8890:
	ldr	r0, [r10, #4]!
	cmp	r0, #0
	beq	.L8887
.L8889:
	ldrh	r3, [r0]
	cmp	r3, r9
	bne	.L8890
	mov	r2, r4
	mov	r1, fp
	bl	usb_gadget_get_string
	cmp	r0, #0
	ble	.L8890
.L8878:
	uxth	r0, r0
	cmp	r0, r8
	movcc	r4, r0
	movcs	r4, r8
	mov	r5, r4
	b	.L8816
.L9190:
	ldrb	r0, [r3, #2]	@ zero_extendqisi2
	mov	r1, r6
	asr	r3, r0, #3
	and	r0, r0, #15
	and	r3, r3, #16
	orr	r0, r3, r0
	bl	_set_bit
	ldr	r3, [r7, #4]!
	cmp	r3, #0
	bne	.L8931
	b	.L8930
.L8926:
	ldr	r7, [r4, #8]
	b	.L8927
.L8925:
	ldr	r7, [r4, #12]
	b	.L8927
.L8919:
	str	r3, [r10, #72]
	ldr	r3, [r5, #12]
	ldr	r10, [r10, #64]
	add	r3, r3, #36
	cmp	r10, r3
	sub	r10, r10, #64
	bne	.L8922
	b	.L9178
.L8831:
	tst	r0, #2
	bne	.L8834
	b	.L8833
.L9192:
	ldr	r2, [r5, #4]
	mov	r3, #9
	ldr	r2, [r2]
	mov	r0, r2
	str	r2, [sp, #16]
	strb	r3, [r0], #9
	strb	r1, [r2, #1]
	ldrb	r3, [r10, #44]	@ zero_extendqisi2
	str	r0, [sp, #12]
	strb	r3, [r2, #4]
	ldrb	r3, [r10, #20]	@ zero_extendqisi2
	strb	r3, [r2, #5]
	ldrb	r3, [r10, #21]	@ zero_extendqisi2
	strb	r3, [r2, #6]
	ldrb	r3, [r10, #22]	@ zero_extendqisi2
	mvn	r3, r3, lsl #25
	mvn	r3, r3, lsr #25
	strb	r3, [r2, #7]
	ldrb	r3, [r10, #23]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L8836
	ldr	r2, [r10, #24]
	mov	r3, #500
	ldr	r2, [r2, #64]
	sdiv	r3, r3, r2
	uxtb	r3, r3
.L8836:
	ldr	r2, [sp, #16]
	strb	r3, [r2, #8]
	ldr	r5, [r10, #8]
	cmp	r5, #0
	beq	.L8837
	ldr	r1, [r5]
	cmp	r1, #0
	moveq	r4, r1
	beq	.L8839
	ldrb	r2, [r1]	@ zero_extendqisi2
	movw	r3, #4087
	str	r6, [sp, #20]
	ldr	r4, [sp, #12]
	mov	r6, r5
	mov	r5, r3
	mov	fp, r2
.L8975:
	mov	r0, r4
	mov	r2, fp
	bl	memcpy
	ldr	r1, [r6, #4]!
	sub	r5, r5, fp
	add	r4, r4, fp
	cmp	r1, #0
	beq	.L9197
	ldrb	fp, [r1]	@ zero_extendqisi2
	cmp	fp, r5
	bls	.L8975
.L9182:
	mvn	r4, #21
	b	.L8782
.L8952:
	add	ip, ip, #12
	ldr	r0, [r2, ip, lsl #2]
	cmp	r0, #0
	beq	.L9179
	ldr	r3, [r0, #56]
	cmp	r3, #0
	beq	.L9010
	blx	r3
	cmp	r0, #0
	uxtbge	r1, r0
	ubfxge	r0, r0, #8, #8
	blt	.L9179
.L8954:
	ldr	r3, [r6]
	mov	r5, #2
	mov	r4, r5
	strb	r1, [r3]
	strb	r0, [r3, #1]
	b	.L8816
.L9000:
	mvn	r4, #21
.L8910:
	ldr	r3, [sp, #12]
	ldr	r3, [r3]
	ldr	r3, [r3, #16]
	cmp	r3, #0
	beq	.L9198
	mov	r1, #100
	ldr	r0, [sp, #12]
	blx	r3
	ldr	r0, [sp, #20]
	bl	_raw_spin_unlock
	b	.L8795
.L9186:
	ldr	r0, [sp, #20]
	movw	r4, #32767
	bl	_raw_spin_unlock
	b	.L8795
.L9185:
	ldr	r0, [sp, #20]
	bl	_raw_spin_unlock
	b	.L8909
.L9191:
	ldr	r3, [r5, #12]
	mov	r4, r0
	ldr	r6, [sp, #16]
	ldr	r7, [sp, #24]
	ldr	r10, [r3, #36]!
	cmp	r10, r3
	sub	r10, r10, #64
	beq	.L8937
	mov	r9, #0
.L8934:
	ldr	r3, [r10, #40]
	mov	r0, r10
	cmp	r3, #0
	beq	.L8935
	blx	r3
	str	r9, [r10, #72]
	ldr	r3, [r5, #12]
	ldr	r10, [r10, #64]
	add	r3, r3, #36
	cmp	r3, r10
	sub	r10, r10, #64
	bne	.L8934
.L8937:
	mov	r3, #0
	str	r3, [r5, #12]
	str	r3, [r5, #56]
	b	.L8910
.L8935:
	str	r3, [r10, #72]
	ldr	r3, [r5, #12]
	ldr	r10, [r10, #64]
	add	r3, r3, #36
	cmp	r10, r3
	sub	r10, r10, #64
	bne	.L8934
	b	.L8937
.L9188:
	str	r3, [sp, #16]
	ldr	r3, [sp, #12]
	ldr	r0, [r3, #16]
	add	r10, r3, #32
	bl	usb_speed_string
	mov	r2, r0
	ldr	r3, [sp, #16]
	b	.L8923
.L9187:
	ldr	r4, [r0, #32]
	cmp	r4, #0
	bne	.L8946
	b	.L9013
.L8813:
	ldrb	r2, [r7, #385]	@ zero_extendqisi2
	cmp	r2, #0
	beq	.L8815
	mov	r2, #1
	strb	r2, [r5, #19]
	strb	r3, [r5, #20]
	b	.L8815
.L8803:
	ldr	r2, [r1, #16]
	cmp	r2, #3
	beq	.L9199
	mov	r0, r5
	ldr	r3, [r0, #36]!
	cmp	r0, r3
	sub	r3, r3, #28
	beq	.L8982
	cmp	r2, #5
	moveq	r2, #0
	bne	.L8804
.L8808:
	ldrb	ip, [r3, #45]	@ zero_extendqisi2
	ldr	r3, [r3, #28]
	tst	ip, #1
	addne	r2, r2, #1
	cmp	r0, r3
	sub	r3, r3, #28
	bne	.L8808
	b	.L8805
.L8887:
	mov	r2, r5
	ldr	r3, [r2, #36]!
	cmp	r2, r3
	sub	r3, r3, #28
	str	r2, [sp, #20]
	beq	.L9182
	strd	r6, [sp, #12]
	mov	r6, fp
	mov	r7, r3
.L8886:
	ldr	r5, [r7, #4]
	cmp	r5, #0
	beq	.L8894
	ldr	r0, [r5]
	cmp	r0, #0
	bne	.L8896
	b	.L8894
.L8897:
	ldr	r0, [r5, #4]!
	cmp	r0, #0
	beq	.L8894
.L8896:
	ldrh	r3, [r0]
	cmp	r3, r9
	bne	.L8897
	mov	r2, r4
	mov	r1, r6
	bl	usb_gadget_get_string
	cmp	r0, #0
	ble	.L8897
.L9181:
	ldrd	r6, [sp, #12]
	b	.L8878
.L8894:
	mov	fp, r7
	ldr	r10, [fp, #36]!
	cmp	fp, r10
	sub	r10, r10, #64
	beq	.L8893
.L8892:
	ldr	r5, [r10, #4]
	cmp	r5, #0
	beq	.L8899
	ldr	r0, [r5]
	cmp	r0, #0
	bne	.L8901
	b	.L8899
.L8902:
	ldr	r0, [r5, #4]!
	cmp	r0, #0
	beq	.L8899
.L8901:
	ldrh	r3, [r0]
	cmp	r3, r9
	bne	.L8902
	mov	r2, r4
	mov	r1, r6
	bl	usb_gadget_get_string
	cmp	r0, #0
	ble	.L8902
	b	.L9181
.L8899:
	ldr	r10, [r10, #64]
	cmp	fp, r10
	sub	r10, r10, #64
	bne	.L8892
.L8893:
	ldr	r2, [sp, #20]
	ldr	r3, [r7, #28]
	cmp	r2, r3
	sub	r7, r3, #28
	bne	.L8886
	b	.L9182
.L8948:
	ldr	r2, [r5, #56]
	mov	r3, #1
	add	r2, r2, r3
	str	r2, [r5, #56]
	b	.L8949
.L9180:
	mov	r5, r3
	mov	r4, r3
	b	.L8816
.L9010:
	mov	r0, r1
	b	.L8954
.L9194:
	mov	r1, #256
	mov	r0, r4
	bl	__memzero
	movw	r3, #:lower16:.LANCHOR0
	mov	r2, #3
	movt	r3, #:upper16:.LANCHOR0
	ldr	r3, [r3, #396]
	strb	r2, [r4, #1]
	ldr	lr, [r3, #16]
	cmp	lr, #0
	ldrheq	ip, [r4, #2]
	beq	.L8855
	ldr	r3, [lr]
	add	r9, r4, #2
	ldrh	ip, [r4, #2]
	cmp	r3, #0
	addne	r0, r4, #254
	beq	.L8855
.L8859:
	cmp	ip, #0
	ldrh	r1, [r3]
	mov	r2, r9
	beq	.L8856
	cmp	r9, r0
	bcs	.L8856
	mov	r3, ip
	b	.L8858
.L9200:
	ldrh	r3, [r2, #2]!
	cmp	r3, #0
	beq	.L8856
	cmp	r2, r0
	bcs	.L8856
.L8858:
	cmp	r3, r1
	bne	.L9200
.L8857:
	ldr	r3, [lr, #4]!
	cmp	r3, #0
	bne	.L8859
.L8855:
	mov	r3, r5
	ldr	fp, [r3, #36]!
	cmp	r3, fp
	sub	fp, fp, #28
	addne	r5, r4, #2
	addne	r1, r4, #254
	movne	r10, r3
	strne	r8, [sp, #12]
	beq	.L8875
.L8874:
	ldr	lr, [fp, #4]
	cmp	lr, #0
	bne	.L9201
.L8862:
	mov	r9, fp
	ldr	r8, [r9, #36]!
	cmp	r9, r8
	sub	r8, r8, #64
	bne	.L8873
	b	.L8867
.L8868:
	ldr	r8, [r8, #64]
	cmp	r9, r8
	sub	r8, r8, #64
	beq	.L8867
.L8873:
	ldr	lr, [r8, #4]
	cmp	lr, #0
	beq	.L8868
	ldr	r3, [lr]
	cmp	r3, #0
	beq	.L8868
.L8872:
	cmp	ip, #0
	ldrh	r0, [r3]
	mov	r3, r5
	beq	.L8869
	cmp	r5, r1
	bcs	.L8869
	mov	r2, ip
	b	.L8871
.L9202:
	ldrh	r2, [r3, #2]!
	cmp	r2, #0
	beq	.L8869
	cmp	r3, r1
	bcs	.L8869
.L8871:
	cmp	r2, r0
	bne	.L9202
.L8870:
	ldr	r3, [lr, #4]!
	cmp	r3, #0
	bne	.L8872
	b	.L8868
.L8869:
	strh	r0, [r3]	@ movhi
	ldr	r3, [lr, #4]!
	ldrh	ip, [r4, #2]	@ unaligned
	cmp	r3, #0
	bne	.L8872
	b	.L8868
.L8867:
	ldr	fp, [fp, #28]
	cmp	r10, fp
	sub	fp, fp, #28
	bne	.L8874
	ldr	r8, [sp, #12]
.L8875:
	mov	r3, #0
.L8861:
	add	r2, r4, r3, lsl #1
	ldrh	r2, [r2, #2]	@ unaligned
	cmp	r2, #0
	bne	.L8877
	cmp	r3, #0
	beq	.L9182
.L8876:
	add	r3, r3, #1
	lsl	r3, r3, #1
	uxtb	r3, r3
	mov	r0, r3
	strb	r3, [r4]
	b	.L8878
.L9201:
	ldr	r3, [lr]
	cmp	r3, #0
	beq	.L8862
.L8866:
	cmp	ip, #0
	ldrh	r0, [r3]
	mov	r2, r5
	beq	.L8863
	cmp	r5, r1
	bcs	.L8863
	mov	r3, ip
	b	.L8865
.L9203:
	ldrh	r3, [r2, #2]!
	cmp	r3, #0
	beq	.L8863
	cmp	r2, r1
	bcs	.L8863
.L8865:
	cmp	r0, r3
	bne	.L9203
.L8864:
	ldr	r3, [lr, #4]!
	cmp	r3, #0
	bne	.L8866
	b	.L8862
.L8863:
	strh	r0, [r2]	@ movhi
	ldrh	ip, [r4, #2]
	b	.L8864
.L8856:
	strh	r1, [r2]	@ movhi
	ldrh	ip, [r4, #2]
	b	.L8857
.L8814:
	mov	r2, #16
	strb	r2, [r5, #19]
	strb	r3, [r5, #20]
	b	.L8815
.L9195:
	movw	r3, #:lower16:.LANCHOR0
	movt	r3, #:upper16:.LANCHOR0
	ldr	r10, [r3, #4032]
	cmp	r10, #0
	beq	.L9204
.L8880:
	mov	r0, r10
	bl	strlen
	mov	r2, #126
	mov	r1, r0
	cmp	r0, r2
	add	r3, r4, #2
	movcs	r1, r2
	mov	r0, r10
	str	r2, [sp]
	mov	r2, #1
	bl	utf8s_to_utf16s
	subs	r3, r0, #0
	blt	.L9182
	add	r3, r3, #1
	mov	r2, #3
	lsl	r3, r3, #1
	strb	r2, [r4, #1]
	uxtb	r3, r3
	mov	r0, r3
	strb	r3, [r4]
	b	.L8878
.L8837:
	mov	r3, r10
	ldr	r10, [r3, #36]!
	cmp	r3, r10
	mov	r0, r3
	sub	r10, r10, #64
	beq	.L9205
	movw	r3, #4087
	mov	fp, r0
	str	r8, [sp, #20]
	strd	r6, [sp, #24]
	ldr	r6, [sp, #12]
	mov	r8, r3
.L8850:
	cmp	r9, #3
	beq	.L8844
	cmp	r9, #5
	bne	.L8845
	ldr	r7, [r10, #16]
.L8846:
	cmp	r7, #0
	beq	.L8847
	ldr	r1, [r7]
	mov	r4, r8
	cmp	r1, #0
	beq	.L8847
	mov	r5, r6
	b	.L8849
.L9207:
	bl	memcpy
	ldr	r1, [r7, #4]!
	cmp	r1, #0
	beq	.L9206
.L8849:
	ldrb	r2, [r1]	@ zero_extendqisi2
	mov	r0, r5
	cmp	r2, r4
	add	r5, r5, r2
	sub	r4, r4, r2
	bls	.L9207
	b	.L9182
.L9206:
	subs	r4, r5, r6
	bmi	.L8782
	sub	r8, r8, r4
	mov	r6, r5
.L8847:
	ldr	r10, [r10, #64]
	cmp	fp, r10
	sub	r10, r10, #64
	bne	.L8850
	str	r6, [sp, #12]
	ldr	r8, [sp, #20]
	ldr	r6, [sp, #24]
	ldr	r7, [sp, #28]
.L8843:
	ldr	r3, [sp, #12]
	ldr	r2, [sp, #16]
	sub	r4, r3, r2
	cmp	r4, #0
	uxth	r3, r4
	strh	r4, [r2, #2]	@ unaligned
	blt	.L8782
.L8851:
	cmp	r8, r3
	movcc	r4, r8
	movcs	r4, r3
	mov	r5, r4
	b	.L8816
.L8845:
	ldr	r7, [r10, #8]
	b	.L8846
.L8844:
	ldr	r7, [r10, #12]
	b	.L8846
.L9002:
	ldr	r10, [sp, #12]
	b	.L8918
.L9197:
	ldr	r3, [sp, #12]
	ldr	r6, [sp, #20]
	subs	r4, r4, r3
	bmi	.L8782
.L8839:
	mov	r3, r10
	ldr	r1, [sp, #12]
	rsb	r2, r4, #4080
	ldr	r10, [r3, #36]!
	add	r2, r2, #7
	add	r1, r1, r4
	cmp	r3, r10
	mov	r0, r3
	sub	r10, r10, #64
	str	r1, [sp, #12]
	beq	.L8843
	mov	fp, r3
	str	r8, [sp, #20]
	mov	r8, r2
	strd	r6, [sp, #24]
	ldr	r6, [sp, #12]
	b	.L8850
.L8877:
	add	r3, r3, #1
	cmp	r3, #127
	bne	.L8861
	b	.L8876
.L9199:
	mov	ip, r5
	mov	r2, #0
	ldr	r3, [ip, #36]!
	cmp	ip, r3
	sub	r3, r3, #28
	beq	.L8805
.L8807:
	ldrb	r0, [r3, #45]	@ zero_extendqisi2
	ldr	r3, [r3, #28]
	tst	r0, #2
	addne	r2, r2, #1
	cmp	ip, r3
	sub	r3, r3, #28
	bne	.L8807
	b	.L8805
.L9196:
	movw	r3, #:lower16:.LANCHOR0
	movt	r3, #:upper16:.LANCHOR0
	ldr	r10, [r3, #4088]
	cmp	r10, #0
	ldreq	r2, [r3, #396]
	ldreq	r10, [r2, #4]
	bne	.L8880
.L8882:
	cmp	r10, #0
	beq	.L8883
	b	.L8880
.L8829:
	cmp	r1, #7
	moveq	r9, #0
	b	.L8828
.L8958:
	ldr	r0, [r5]
	movw	r1, #:lower16:.LC512
	mov	r2, r4
	movt	r1, #:upper16:.LC512
	mov	r4, r3
	mov	r5, r3
	add	r0, r0, #32
	bl	dev_err
	b	.L8816
.L9156:
	ldr	r10, [r3, #4092]
	b	.L8882
.L8905:
	mov	r3, #500
	strb	r0, [sp, #36]
	strh	r3, [sp, #38]	@ movhi
	b	.L8906
.L8818:
	ldr	r1, [r3, #16]
	ldr	r3, [r5, #36]!
	cmp	r1, #3
	beq	.L9208
	cmp	r5, r3
	sub	r3, r3, #28
	beq	.L8986
	cmp	r1, #5
	mov	r1, #0
	bne	.L8823
.L8822:
	ldrb	r0, [r3, #45]	@ zero_extendqisi2
	ldr	r3, [r3, #28]
	tst	r0, #1
	addne	r1, r1, #1
	cmp	r5, r3
	sub	r3, r3, #28
	bne	.L8822
	b	.L8820
.L8823:
	ldrb	r0, [r3, #45]	@ zero_extendqisi2
	ldr	r3, [r3, #28]
	tst	r0, #2
	addne	r1, r1, #1
	cmp	r5, r3
	sub	r3, r3, #28
	bne	.L8823
	b	.L8820
.L8982:
	mov	r2, #0
	b	.L8805
.L9204:
	ldr	r2, [r3, #396]
	ldr	r3, .L9209+4
	ldr	r10, [r2, #8]
	cmp	r10, #0
	moveq	r10, r3
	b	.L8880
.L9198:
	mov	r9, r3
	b	.L8976
.L9208:
	cmp	r5, r3
	sub	r3, r3, #28
	bne	.L8819
.L8986:
	mov	r1, #0
	b	.L8820
.L9205:
	ldr	r1, [sp, #16]
	mov	r2, #9
	mov	r3, r2
	strb	r2, [r1, #2]
	strb	r5, [r1, #3]
	b	.L8851
.L9189:
	mov	fp, r4
	movw	r0, #:lower16:.LC511
	ldr	r1, .L9209+8
	movt	r0, #:upper16:.LC511
	ldr	r2, [fp]
	mvn	r4, #21
	bl	printk
	ldr	r0, [sp, #20]
	bl	_raw_spin_unlock
	b	.L8795
.L9210:
	.align	2
.L9209:
	.word	.LANCHOR2+3976
	.word	.LANCHOR0+4036
	.word	.LANCHOR2+3964
	.fnend
	.size	composite_setup, .-composite_setup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	android_setup, %function
android_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	r3, #:upper16:.LANCHOR0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	mov	r4, r3
	strd	r10, [sp, #24]
	mov	fp, r1
	str	lr, [sp, #32]
	.pad #20
	sub	sp, sp, #20
	stmib	sp, {r0, r3}
	add	r0, r0, #32
	bl	dev_get_drvdata
	mov	r2, r4
	mov	r7, r0
	ldr	r8, [r2, #196]!
	cmp	r8, r2
	sub	r8, r8, #208
	bne	.L9213
	b	.L9212
.L9279:
	ldr	r8, [r8, #208]
	cmp	r8, r2
	sub	r8, r8, #208
	beq	.L9212
.L9213:
	ldr	r3, [r8, #8]
	cmp	r7, r3
	bne	.L9279
.L9212:
	ldr	r3, [r7, #4]
	movw	r2, #:lower16:composite_setup_complete
	mov	r0, #0
	movt	r2, #:upper16:composite_setup_complete
	mov	r10, r8
	ldrb	r1, [r3, #26]	@ zero_extendqisi2
	str	r0, [r3, #4]
	str	r2, [r3, #28]
	bfc	r1, #1, #1
	strb	r1, [r3, #26]
	ldr	r3, [sp, #4]
	ldr	r3, [r3, #4]
	str	r7, [r3]
	ldr	r9, [r10, #196]!
	cmp	r10, r9
	sub	r9, r9, #120
	beq	.L9214
	mvn	r5, #94
.L9218:
	mov	r6, r9
	ldr	r4, [r6, #112]!
	cmp	r6, r4
	sub	r4, r4, #4
	beq	.L9215
.L9217:
	ldr	r0, [r4]
	mov	r2, fp
	mov	r1, r7
	ldr	r3, [r0, #48]
	cmp	r3, #0
	beq	.L9216
	blx	r3
	subs	r5, r0, #0
	bge	.L9215
.L9216:
	ldr	r4, [r4, #4]
	cmp	r6, r4
	sub	r4, r4, #4
	bne	.L9217
.L9215:
	ldr	r9, [r9, #120]
	cmp	r10, r9
	sub	r9, r9, #120
	bne	.L9218
	ldr	r6, [r7, #12]
	subs	r6, r6, #0
	movne	r6, #1
	cmp	r5, #0
	blt	.L9220
.L9221:
	add	r4, r7, #60
	mov	r0, r4
	bl	_raw_spin_lock_irqsave
	ldrb	r3, [r8, #52]	@ zero_extendqisi2
	mov	r1, r0
	cmp	r3, #0
	beq	.L9280
	ldrb	r3, [fp, #1]	@ zero_extendqisi2
	cmp	r3, #9
	beq	.L9248
.L9278:
	mov	r0, r4
	bl	_raw_spin_unlock_irqrestore
.L9211:
	mov	r0, r5
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L9280:
	mov	r3, #1
	mov	r0, r4
	strb	r3, [r8, #52]
	bl	_raw_spin_unlock_irqrestore
.L9247:
	add	r0, r8, #180
	bl	schedule_work
	b	.L9211
.L9214:
	ldr	r6, [r7, #12]
	subs	r6, r6, #0
	movne	r6, #1
.L9220:
	ldrb	r2, [fp]	@ zero_extendqisi2
	ldr	r1, [sp, #8]
	ldrb	r3, [fp, #1]	@ zero_extendqisi2
	cmp	r2, #64
	ldr	r4, [r1, #824]
	beq	.L9281
	cmp	r2, #192
	cmpeq	r3, #51
	bne	.L9229
	ldr	r3, [r7, #4]
	mov	r5, #2
	mov	r1, #256
	add	r0, r4, #93
	ldr	r3, [r3]
	strh	r5, [r3]	@ movhi
	bl	__memzero
	add	r0, r4, #348
	mov	r1, #256
	add	r0, r0, #1
	bl	__memzero
	add	r0, r4, #604
	mov	r1, #256
	add	r0, r0, #1
	bl	__memzero
	add	r0, r4, #860
	mov	r1, #256
	add	r0, r0, #1
	bl	__memzero
	add	r0, r4, #1104
	mov	r1, #256
	add	r0, r0, #13
	bl	__memzero
	add	r0, r4, #1360
	mov	r1, #256
	add	r0, r0, #13
	bl	__memzero
	mov	r2, #0
	mov	r3, r5
	str	r2, [r4, #1636]
	str	r2, [r4, #1640]
.L9224:
	ldr	r1, [r7, #4]
	mov	r2, #32
	ldrb	r0, [r1, #26]	@ zero_extendqisi2
	bfc	r0, #1, #1
	strb	r0, [r1, #26]
	ldr	r1, [r7, #4]
	str	r3, [r1, #4]
	ldr	r3, [r7]
	ldr	r1, [r7, #4]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r5, r0, #0
	bge	.L9221
	ldr	r0, [r7]
	movw	r1, #:lower16:.LC507
	ldr	r2, .L9291
	movt	r1, #:upper16:.LC507
	add	r0, r0, #32
	bl	dev_err
.L9229:
	mov	r1, fp
	ldr	r0, [sp, #4]
	bl	composite_setup
	mov	r5, r0
	b	.L9221
.L9281:
	cmp	r3, #53
	beq	.L9282
	ldrh	r2, [fp, #6]	@ unaligned
	cmp	r3, #52
	ldrh	r9, [fp, #4]	@ unaligned
	str	r2, [sp, #8]
	beq	.L9283
	ldrh	r10, [fp, #2]	@ unaligned
	orr	r2, r9, r2
	cmp	r3, #58
	cmpeq	r2, #0
	moveq	r3, #0
	streq	r10, [r4, #1640]
	beq	.L9224
	cmp	r3, #54
	beq	.L9284
	cmp	r3, #55
	beq	.L9285
	cmp	r3, #56
	beq	.L9286
	cmp	r3, #57
	bne	.L9229
	add	r9, r4, #80
	add	r4, r4, #1744
	mov	r0, r9
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r4, #12]
	add	r4, r4, #12
	mov	r1, r0
	cmp	r4, r5
	bne	.L9245
	b	.L9243
.L9287:
	ldr	r5, [r5]
	cmp	r4, r5
	beq	.L9243
.L9245:
	ldr	r3, [r5, #16]
	cmp	r10, r3
	bne	.L9287
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore
	cmp	r5, #0
	beq	.L9229
	ldr	r1, [r7, #4]
	movw	r2, #:lower16:acc_complete_send_hid_event
	ldr	r3, [sp, #8]
	movt	r2, #:upper16:acc_complete_send_hid_event
	str	r5, [r1, #32]
	ldr	r1, [r7, #4]
	str	r2, [r1, #28]
	b	.L9224
.L9248:
	ldr	r3, [r7, #12]
	cmp	r3, #0
	beq	.L9278
	cmp	r6, #0
	mov	r0, r4
	beq	.L9251
	bl	_raw_spin_unlock_irqrestore
	b	.L9211
.L9251:
	bl	_raw_spin_unlock_irqrestore
	b	.L9247
.L9283:
	str	r9, [r4, #1632]
	ldr	r1, [r7]
	mov	r3, r2
	movw	r2, #:lower16:acc_complete_set_string
	movt	r2, #:upper16:acc_complete_set_string
	ldr	r1, [r1, #4]
	str	r4, [r1]
	ldr	r1, [r7, #4]
	str	r2, [r1, #28]
	b	.L9224
.L9284:
	mov	r2, r9
	mov	r1, r10
	mov	r0, r4
	bl	acc_register_hid
	subs	r3, r0, #0
	blt	.L9229
	b	.L9224
.L9282:
	mov	r3, #1
	add	r0, r4, #1680
	add	r0, r0, #12
	mov	r1, #3
	str	r3, [r4, #1636]
	bl	schedule_delayed_work
	mov	r3, #0
	b	.L9224
.L9285:
	add	r5, r4, #80
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #1756]
	add	r2, r4, #1744
	mov	r1, r0
	add	r2, r2, #12
	cmp	r2, r3
	bne	.L9233
	b	.L9231
.L9288:
	ldr	r3, [r3]
	cmp	r2, r3
	beq	.L9231
.L9233:
	ldr	r0, [r3, #16]
	cmp	r10, r0
	bne	.L9288
	cmp	r3, #0
	beq	.L9231
.L9234:
	ldr	lr, [r3]
	add	r2, r4, #1760
	mov	r0, r5
	ldr	ip, [r3, #4]
	add	r2, r2, #12
	str	ip, [lr, #4]
	str	lr, [ip]
	ldr	ip, [r4, #1772]
	str	r3, [ip, #4]
	str	ip, [r3]
	str	r2, [r3, #4]
	str	r3, [r4, #1772]
	bl	_raw_spin_unlock_irqrestore
	add	r0, r4, #1728
	add	r0, r0, #12
	bl	schedule_work
	mov	r3, #0
	b	.L9224
.L9243:
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore
	b	.L9229
.L9286:
	add	r3, r4, #80
	add	r4, r4, #1760
	mov	r0, r3
	str	r3, [sp, #12]
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r4, #4]
	add	r4, r4, #4
	mov	r1, r0
	ldr	r3, [sp, #12]
	cmp	r4, r5
	bne	.L9241
	b	.L9239
.L9289:
	ldr	r5, [r5]
	cmp	r4, r5
	beq	.L9239
.L9241:
	ldr	r2, [r5, #16]
	cmp	r10, r2
	bne	.L9289
	mov	r0, r3
	bl	_raw_spin_unlock_irqrestore
	cmp	r5, #0
	beq	.L9229
	ldr	r3, [r5, #28]
	cmp	r9, r3
	bne	.L9229
	ldr	r0, [sp, #8]
	ldr	r3, [r5, #24]
	add	r9, r0, r9
	cmp	r9, r3
	bgt	.L9229
	ldr	r1, [r7, #4]
	movw	r2, #:lower16:acc_complete_set_hid_report_desc
	mov	r3, r0
	movt	r2, #:upper16:acc_complete_set_hid_report_desc
	str	r5, [r1, #32]
	ldr	r1, [r7, #4]
	str	r2, [r1, #28]
	b	.L9224
.L9231:
	ldr	r3, [r4, #1764]
	add	r2, r4, #1760
	add	r2, r2, #4
	cmp	r2, r3
	bne	.L9237
	b	.L9235
.L9290:
	ldr	r3, [r3]
	cmp	r2, r3
	beq	.L9235
.L9237:
	ldr	r0, [r3, #16]
	cmp	r10, r0
	bne	.L9290
	cmp	r3, #0
	bne	.L9234
.L9235:
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	b	.L9229
.L9239:
	mov	r0, r3
	bl	_raw_spin_unlock_irqrestore
	b	.L9229
.L9292:
	.align	2
.L9291:
	.word	.LANCHOR2+3932
	.fnend
	.size	android_setup, .-android_setup
	.align	2
	.global	usb_find_descriptor_fillbuf
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_find_descriptor_fillbuf, %function
usb_find_descriptor_fillbuf:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r2, #0
	beq	.L9306
	mov	ip, r1
	ldr	r1, [r2]
	cmp	r1, #0
	beq	.L9307
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
.L9297:
	ldrb	lr, [r1, #1]	@ zero_extendqisi2
	cmp	lr, r3
	beq	.L9296
	ldr	r1, [r2, #4]!
	cmp	r1, #0
	bne	.L9297
	mvn	r0, #1
	b	.L9293
.L9296:
	ldrb	r4, [r1]	@ zero_extendqisi2
	cmp	ip, r4
	bcc	.L9299
	mov	r2, r4
	bl	memcpy
	mov	r0, r4
.L9293:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L9307:
	mvn	r0, #1
	bx	lr
.L9299:
	mvn	r0, #21
	b	.L9293
.L9306:
	mvn	r0, #21
	bx	lr
	.fnend
	.size	usb_find_descriptor_fillbuf, .-usb_find_descriptor_fillbuf
	.align	2
	.global	usb_descriptor_fillbuf
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_descriptor_fillbuf, %function
usb_descriptor_fillbuf:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	subs	r6, r2, #0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	beq	.L9312
	mov	r5, r1
	ldr	r1, [r6]
	cmp	r1, #0
	beq	.L9314
	mov	r7, r0
	mov	r4, r0
	b	.L9313
.L9318:
	bl	memcpy
	ldr	r1, [r6, #4]!
	cmp	r1, #0
	beq	.L9317
.L9313:
	ldrb	r2, [r1]	@ zero_extendqisi2
	mov	r0, r4
	cmp	r5, r2
	add	r4, r4, r2
	sub	r5, r5, r2
	bcs	.L9318
.L9312:
	mvn	r0, #21
.L9308:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L9317:
	sub	r0, r4, r7
	b	.L9308
.L9314:
	mov	r0, r1
	b	.L9308
	.fnend
	.size	usb_descriptor_fillbuf, .-usb_descriptor_fillbuf
	.align	2
	.global	usb_gadget_config_buf
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_gadget_config_buf, %function
usb_gadget_config_buf:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r3, #0
	cmpne	r2, #8
	bls	.L9330
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	mov	r7, r3
	sub	r6, r2, #9
	str	r8, [sp, #16]
	add	r8, r4, #9
	str	lr, [sp, #20]
	ldr	r1, [r0]	@ unaligned
	ldr	r3, [r0, #4]	@ unaligned
	str	r1, [r4]	@ unaligned
	str	r3, [r4, #4]	@ unaligned
	ldrb	r3, [r0, #8]	@ zero_extendqisi2
	strb	r3, [r4, #8]
	ldr	r1, [r7]
	cmp	r1, #0
	beq	.L9325
	mov	r5, r8
	b	.L9324
.L9332:
	bl	memcpy
	ldr	r1, [r7, #4]!
	cmp	r1, #0
	beq	.L9331
.L9324:
	ldrb	r2, [r1]	@ zero_extendqisi2
	mov	r0, r5
	cmp	r2, r6
	add	r5, r5, r2
	sub	r6, r6, r2
	bls	.L9332
.L9323:
	mvn	r0, #21
	b	.L9319
.L9331:
	subs	r0, r5, r8
	bmi	.L9319
	add	r0, r0, #9
	cmp	r0, #65536
	bge	.L9323
.L9322:
	ldrb	r3, [r4, #7]	@ zero_extendqisi2
	mov	r1, #9
	mov	r2, #2
	strb	r1, [r4]
	strb	r2, [r4, #1]
	mvn	r3, r3, lsl #25
	strh	r0, [r4, #2]	@ unaligned
	mvn	r3, r3, lsr #25
	strb	r3, [r4, #7]
.L9319:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L9325:
	mov	r0, #9
	b	.L9322
.L9330:
	mvn	r0, #21
	bx	lr
	.fnend
	.size	usb_gadget_config_buf, .-usb_gadget_config_buf
	.align	2
	.global	usb_copy_descriptors
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_copy_descriptors, %function
usb_copy_descriptors:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r2, [r0]
	cmp	r2, #0
	beq	.L9339
	mov	r1, #0
	mov	ip, r0
	mov	r0, r1
.L9335:
	ldrb	lr, [r2]	@ zero_extendqisi2
	mov	r3, r1
	add	r1, r1, #1
	ldr	r2, [ip, #4]!
	add	r0, r0, lr
	cmp	r2, #0
	bne	.L9335
	add	r3, r3, #2
	lsl	r4, r3, #2
	add	r0, r0, r4
.L9334:
	mov	r1, #208
	bl	__kmalloc
	subs	r6, r0, #0
	beq	.L9333
	ldr	r1, [r5]
	add	r3, r6, r4
	mov	r4, r6
	cmp	r1, #0
	beq	.L9337
.L9338:
	ldrb	r2, [r1]	@ zero_extendqisi2
	mov	r0, r3
	bl	memcpy
	str	r0, [r4], #4
	ldr	r2, [r5]
	ldr	r1, [r5, #4]!
	ldrb	r2, [r2]	@ zero_extendqisi2
	cmp	r1, #0
	add	r3, r0, r2
	bne	.L9338
.L9337:
	mov	r3, #0
	str	r3, [r4]
.L9333:
	mov	r0, r6
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L9339:
	mov	r0, #4
	mov	r4, r0
	b	.L9334
	.fnend
	.size	usb_copy_descriptors, .-usb_copy_descriptors
	.align	2
	.global	usb_assign_descriptors
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_assign_descriptors, %function
usb_assign_descriptors:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	subs	r0, r1, #0
	strd	r6, [sp, #8]
	mov	r6, r3
	mov	r5, r2
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r1, [r4, #20]
	ldr	r3, [r1, #24]
	ldr	r7, [r3]
	beq	.L9352
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #8]
	beq	.L9351
.L9352:
	cmp	r5, #0
	beq	.L9350
	ldr	r3, [r7, #20]
	cmp	r3, #2
	bhi	.L9361
.L9350:
	cmp	r6, #0
	beq	.L9355
	ldr	r3, [r7, #20]
	cmp	r3, #4
	bhi	.L9362
.L9355:
	mov	r0, #0
.L9347:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L9361:
	mov	r0, r5
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #12]
	bne	.L9350
.L9360:
	ldr	r0, [r4, #8]
.L9351:
	bl	kfree
	ldr	r0, [r4, #12]
	bl	kfree
	ldr	r0, [r4, #16]
	bl	kfree
	mvn	r0, #11
	b	.L9347
.L9362:
	mov	r0, r6
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #16]
	bne	.L9355
	b	.L9360
	.fnend
	.size	usb_assign_descriptors, .-usb_assign_descriptors
	.align	2
	.global	usb_free_all_descriptors
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_free_all_descriptors, %function
usb_free_all_descriptors:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r0, [r0, #8]
	bl	kfree
	ldr	r0, [r4, #12]
	bl	kfree
	ldr	lr, [sp, #4]
	ldr	r0, [r4, #16]
	ldr	r4, [sp]
	add	sp, sp, #8
	b	kfree
	.fnend
	.size	usb_free_all_descriptors, .-usb_free_all_descriptors
	.section	.rodata.str1.4
	.align	2
.LC515:
	.ascii	"ep-e\000"
	.align	2
.LC516:
	.ascii	"ep-f\000"
	.align	2
.LC517:
	.ascii	"ep3-bulk\000"
	.align	2
.LC518:
	.ascii	"ep2-bulk\000"
	.text
	.align	2
	.global	usb_ep_autoconfig_ss
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_ep_autoconfig_ss, %function
usb_ep_autoconfig_ss:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	mov	r7, r1
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	mov	r10, r0
	str	lr, [sp, #32]
	ldr	r5, [r0, #28]
	.pad #20
	sub	sp, sp, #20
	movw	r0, #:lower16:.LC265
	ldrb	r4, [r1, #3]	@ zero_extendqisi2
	movt	r0, #:upper16:.LC265
	str	r2, [sp, #4]
	mov	r1, r5
	bl	strcmp
	cmp	r0, #0
	and	r4, r4, #3
	bne	.L9366
	cmp	r4, #3
	beq	.L9472
	movw	r0, #:lower16:.LC268
	mov	r1, r5
	movt	r0, #:upper16:.LC268
	bl	strcmp
	cmp	r0, #0
	beq	.L9380
.L9385:
	mov	r6, r10
	ldr	r3, [r6, #8]!
	sub	r4, r3, #12
.L9376:
	cmp	r6, r3
	beq	.L9386
.L9411:
	movw	r3, #:lower16:.LC267
	movw	r9, #:lower16:_ctype
	movt	r3, #:upper16:.LC267
	movw	fp, #:lower16:.LANCHOR0
	movt	r9, #:upper16:_ctype
	movt	fp, #:upper16:.LANCHOR0
	str	r3, [sp, #8]
	b	.L9406
.L9389:
	ldr	r4, [r4, #12]
	cmp	r6, r4
	sub	r4, r4, #12
	beq	.L9386
.L9406:
	ldr	r1, [r4]
	cmp	r1, #0
	bne	.L9389
	ldrb	r5, [r7, #3]	@ zero_extendqisi2
	ands	r5, r5, #3
	beq	.L9389
	ldr	r8, [r4, #4]
	ldrb	r1, [r8]	@ zero_extendqisi2
	cmp	r1, #101
	bne	.L9389
	ldrb	r1, [r8, #2]	@ zero_extendqisi2
	cmp	r1, #45
	beq	.L9390
	mov	r1, #45
	mov	r0, r8
	bl	strrchr
	subs	r3, r0, #0
	beq	.L9391
	cmp	r5, #2
	beq	.L9392
	cmp	r5, #3
	ldrb	r1, [r3, #2]	@ zero_extendqisi2
	bne	.L9393
	cmp	r1, #115
	str	r3, [sp, #12]
	beq	.L9389
	ldr	r0, [sp, #8]
	ldr	r1, [r10, #28]
	bl	strcmp
	cmp	r0, #0
	ldr	r3, [sp, #12]
	beq	.L9473
.L9394:
	ldrb	r1, [r3, #-1]	@ zero_extendqisi2
	ldrb	r0, [r9, r1]	@ zero_extendqisi2
	tst	r0, #4
	beq	.L9409
	ldrh	r1, [r7, #4]	@ unaligned
	cmp	r1, #0
	bne	.L9474
	mov	r8, r1
	b	.L9407
.L9366:
	movw	r0, #:lower16:.LC268
	mov	r1, r5
	movt	r0, #:upper16:.LC268
	bl	strcmp
	cmp	r0, #0
	bne	.L9385
	cmp	r4, #3
	beq	.L9475
.L9380:
	cmp	r4, #2
	bne	.L9385
	ldrsb	r3, [r7, #2]
	cmp	r3, #0
	bge	.L9385
	mov	r8, r10
	ldr	r4, [r8, #8]!
	cmp	r8, r4
	sub	r4, r4, #12
	beq	.L9386
	movw	r9, #:lower16:.LC518
	mov	r5, r4
	movt	r9, #:upper16:.LC518
	b	.L9388
.L9476:
	ldr	r5, [r5, #12]
	mov	r6, r5
	sub	r5, r5, #12
	cmp	r8, r6
	beq	.L9411
.L9388:
	mov	r1, r9
	ldr	r0, [r5, #4]
	bl	strcmp
	cmp	r0, #0
	bne	.L9476
	cmp	r5, #0
	beq	.L9418
	ldr	r3, [r5]
	cmp	r3, #0
	beq	.L9477
.L9418:
	mov	r6, r8
	b	.L9411
.L9391:
	mov	r0, r8
	bl	strlen
	add	r3, r8, r0
.L9395:
	ldrb	r1, [r3, #-1]	@ zero_extendqisi2
	ldrb	r0, [r9, r1]	@ zero_extendqisi2
	tst	r0, #4
	bne	.L9390
.L9409:
	ldrsb	r0, [r7, #2]
	cmp	r0, #0
	blt	.L9478
	cmp	r1, #116
	bne	.L9389
.L9390:
	ldr	r3, [sp, #4]
	sub	r8, r5, #2
	clz	r8, r8
	lsr	r8, r8, #5
	cmp	r3, #0
	movne	r1, r8
	moveq	r1, #0
	cmp	r1, #0
	bne	.L9479
.L9398:
	ldrh	r1, [r7, #4]	@ unaligned
	cmp	r1, #0
	bne	.L9400
.L9407:
	ldrh	r1, [r4, #20]
	strh	r1, [r7, #4]	@ unaligned
.L9400:
	cmp	r5, #1
	ubfx	r0, r1, #0, #11
	beq	.L9401
	cmp	r5, #3
	bne	.L9402
.L9412:
	ldr	ip, [r10, #20]
	cmp	ip, #2
	movls	ip, #1
	movhi	ip, #0
	cmp	r0, #64
	movls	ip, #0
	cmp	ip, #0
	bne	.L9389
.L9401:
	ldrh	ip, [r4, #20]
	cmp	ip, r0
	bcc	.L9389
	ldr	r0, [r10, #20]
	cmp	r0, #2
	bhi	.L9402
	tst	r1, #7168
	bne	.L9389
.L9402:
	ldrb	r1, [r7, #2]	@ zero_extendqisi2
	and	r1, r1, #128
	strb	r1, [r7, #2]
	ldr	r0, [r4, #4]
	ldrb	ip, [r0, #2]	@ zero_extendqisi2
	ldrb	ip, [r9, ip]	@ zero_extendqisi2
	tst	ip, #4
	bne	.L9480
	ldr	r0, [fp, #3272]
	add	r0, r0, #1
	cmp	r0, #15
	str	r0, [fp, #3272]
	bhi	.L9389
	orr	r1, r1, r0
	uxtb	r1, r1
	strb	r1, [r7, #2]
.L9404:
	ldr	r3, [sp, #4]
	cmp	r3, #0
	movne	r8, #0
	cmp	r8, #0
	beq	.L9405
	ldrh	r3, [r4, #20]
	cmp	r3, #64
	movge	r3, #64
	strh	r3, [r7, #4]	@ unaligned
.L9405:
	strb	r1, [r4, #25]
.L9373:
	mov	r3, #0
	str	r3, [r4, #28]
	str	r3, [r4, #32]
.L9365:
	mov	r0, r4
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L9472:
	mov	r6, r10
	ldr	r8, [r6, #8]!
	cmp	r6, r8
	sub	r5, r8, #12
	beq	.L9386
	movw	r9, #:lower16:.LC515
	mov	r4, r5
	movt	r9, #:upper16:.LC515
	b	.L9370
.L9481:
	ldr	r4, [r4, #12]
	cmp	r6, r4
	sub	r4, r4, #12
	beq	.L9371
.L9370:
	mov	r1, r9
	ldr	r0, [r4, #4]
	bl	strcmp
	cmp	r0, #0
	bne	.L9481
	cmp	r4, #0
	beq	.L9371
	ldr	r3, [r4]
	cmp	r3, #0
	bne	.L9371
	mov	r2, r7
	mov	r1, r4
	ldr	r3, [sp, #4]
	mov	r0, r10
	bl	ep_matches.part.0
	cmp	r0, #0
	bne	.L9373
	ldr	r8, [r10, #8]
	cmp	r6, r8
	sub	r5, r8, #12
	bne	.L9371
.L9386:
	mov	r4, #0
	b	.L9365
.L9479:
	ldr	r0, [r10, #20]
	cmp	r0, #4
	bls	.L9399
	ldrb	r0, [r3, #3]	@ zero_extendqisi2
	ldrh	ip, [r4, #22]
	and	r0, r0, #31
	cmp	ip, r0
	bcc	.L9389
.L9399:
	ldrh	r0, [r7, #4]	@ unaligned
	cmp	r0, #0
	movne	r8, r1
	bne	.L9402
	mov	r8, r1
	b	.L9407
.L9480:
	mov	r1, #0
	add	r0, r0, #2
	mov	r2, #10
	bl	simple_strtoul
	ldrb	r1, [r7, #2]	@ zero_extendqisi2
	orr	r1, r1, r0
	uxtb	r1, r1
	strb	r1, [r7, #2]
	b	.L9404
.L9393:
	cmp	r1, #115
	bne	.L9389
	ldrb	r1, [r3, #-1]	@ zero_extendqisi2
	ldrb	r0, [r9, r1]	@ zero_extendqisi2
	tst	r0, #4
	beq	.L9409
	sub	r8, r5, #2
	clz	r8, r8
	lsr	r8, r8, #5
	b	.L9398
.L9392:
	ldrb	r1, [r3, #1]	@ zero_extendqisi2
	cmp	r1, #98
	bne	.L9389
	b	.L9395
.L9473:
	ldrb	r1, [r3, #1]	@ zero_extendqisi2
	cmp	r1, #105
	bne	.L9394
	b	.L9389
.L9475:
	mov	r6, r10
	ldr	r4, [r6, #8]!
	cmp	r6, r4
	sub	r4, r4, #12
	movwne	r8, #:lower16:.LC517
	movne	r5, r4
	movtne	r8, #:upper16:.LC517
	bne	.L9381
	b	.L9386
.L9482:
	ldr	r5, [r5, #12]
	cmp	r6, r5
	sub	r5, r5, #12
	beq	.L9411
.L9381:
	mov	r1, r8
	ldr	r0, [r5, #4]
	bl	strcmp
	cmp	r0, #0
	bne	.L9482
	cmp	r5, #0
	beq	.L9411
	ldr	r3, [r5]
	cmp	r3, #0
	bne	.L9411
.L9471:
	mov	r2, r7
	mov	r1, r5
	ldr	r3, [sp, #4]
	mov	r0, r10
	bl	ep_matches.part.0
	cmp	r0, #0
	bne	.L9419
	ldr	r3, [r10, #8]
	sub	r4, r3, #12
	b	.L9376
.L9371:
	movw	r4, #:lower16:.LC516
	movt	r4, #:upper16:.LC516
	b	.L9375
.L9483:
	ldr	r5, [r5, #12]
	cmp	r6, r5
	sub	r5, r5, #12
	beq	.L9468
.L9375:
	mov	r1, r4
	ldr	r0, [r5, #4]
	bl	strcmp
	cmp	r0, #0
	bne	.L9483
	cmp	r5, #0
	beq	.L9468
	ldr	r3, [r5]
	cmp	r3, #0
	beq	.L9471
.L9468:
	sub	r4, r8, #12
	mov	r3, r8
	b	.L9376
.L9478:
	cmp	r1, #110
	bne	.L9389
	b	.L9390
.L9474:
	ubfx	r0, r1, #0, #11
	mov	r8, #0
	b	.L9412
.L9419:
	mov	r4, r5
	b	.L9373
.L9477:
	mov	r2, r7
	mov	r1, r5
	ldr	r3, [sp, #4]
	mov	r0, r10
	bl	ep_matches.part.0
	cmp	r0, #0
	bne	.L9419
	ldr	r3, [r10, #8]
	mov	r6, r8
	sub	r4, r3, #12
	b	.L9376
	.fnend
	.size	usb_ep_autoconfig_ss, .-usb_ep_autoconfig_ss
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	__ffs_func_bind_do_descs, %function
__ffs_func_bind_do_descs:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r0, #0
	bne	.L9501
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r2
	strd	r6, [sp, #8]
	mov	r6, r3
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r3, [r3, #68]
	.pad #4
	sub	sp, sp, #4
	cmp	r3, #0
	beq	.L9487
	mov	r0, #2
	str	r2, [r3, r1, lsl #2]
.L9488:
	cmp	r4, #0
	beq	.L9490
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	cmp	r3, #5
	bne	.L9490
	ldrb	r7, [r4, #2]	@ zero_extendqisi2
	ldr	r10, [r6, #12]
	and	r7, r7, #15
	sub	r9, r7, #1
	rsb	r9, r9, r9, lsl #3
	lsl	r9, r9, #2
	add	r8, r10, r9
	add	r0, r8, r0, lsl #2
	ldr	r3, [r0, #8]
	cmp	r3, #0
	bne	.L9492
	str	r4, [r0, #8]
	ldr	r5, [r10, r9]
	cmp	r5, #0
	beq	.L9491
	ldr	r3, [r8, #8]
	ldrh	r0, [r4, #4]	@ unaligned
	ldrb	r3, [r3, #2]	@ zero_extendqisi2
	cmp	r0, #0
	strb	r3, [r4, #2]
	beq	.L9502
.L9490:
	mov	r0, #0
.L9484:
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L9501:
	mov	r0, #0
	bx	lr
.L9487:
	ldr	r3, [r6, #64]
	cmp	r3, #0
	ldreq	r3, [r6, #60]
	movne	r0, #1
	str	r2, [r3, r1, lsl #2]
	b	.L9488
.L9502:
	ldr	r3, [r8, #8]
	ldrh	r3, [r3, #4]	@ unaligned
	strh	r3, [r4, #4]	@ unaligned
	b	.L9484
.L9491:
	mov	r2, r5
	mov	r1, r4
	ldr	r0, [r6, #4]
	bl	usb_ep_autoconfig_ss
	subs	fp, r0, #0
	beq	.L9493
	ldr	r3, [r6, #12]
	mov	r1, #208
	ldr	r2, [fp, #8]
	add	r3, r3, r9
	str	r3, [fp]
	ldr	r3, [r2, #8]
	blx	r3
	subs	r3, r0, #0
	beq	.L9494
	str	fp, [r10, r9]
	mov	r0, r5
	str	r3, [r8, #4]
	ldrb	r3, [r4, #2]	@ zero_extendqisi2
	and	r3, r3, #15
	add	r6, r6, r3
	strb	r7, [r6, #16]
	b	.L9484
.L9492:
	mvn	r0, #21
	b	.L9484
.L9493:
	movw	r0, #65012
	movt	r0, 65535
	b	.L9484
.L9494:
	mvn	r0, #11
	b	.L9484
	.fnend
	.size	__ffs_func_bind_do_descs, .-__ffs_func_bind_do_descs
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_func_bind, %function
ffs_func_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	mov	r6, r1
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r3, [r1, #-48]
	.pad #28
	sub	sp, sp, #28
	ldr	r5, [r1, #-44]
	ldr	r3, [r3, #20]
	ldr	r10, [r5, #168]
	cmp	r3, #2
	bls	.L9504
	ldr	r2, [r5, #172]
	cmp	r2, #0
	bne	.L9505
	cmp	r3, #4
	bls	.L9504
	ldr	r3, [r5, #176]
	cmp	r3, #0
	beq	.L9504
	ldrh	r7, [r5, #184]
	mov	r1, #208
	rsb	r7, r7, r7, lsl #3
	lsl	r7, r7, #2
	mov	r0, r7
	bl	__kmalloc
	cmp	r10, #0
	mov	fp, r0
	bne	.L9599
	mov	r3, #16
	mov	r4, r10
	str	r3, [sp, #4]
	str	r3, [sp, #12]
	mov	r3, #1
	str	r3, [sp, #16]
	str	r10, [sp, #20]
.L9592:
	ldr	r0, [r5, #176]
	mov	r1, #208
	add	r0, r0, #1
	lsl	r0, r0, #2
	bl	__kmalloc
	str	r0, [sp, #8]
	b	.L9509
.L9504:
	cmp	r10, #0
	beq	.L9638
	ldrh	r7, [r5, #184]
	mov	r3, #0
	mov	r1, #208
	str	r3, [sp, #16]
	rsb	r7, r7, r7, lsl #3
	lsl	r7, r7, #2
	mov	r0, r7
	bl	__kmalloc
	mov	fp, r0
.L9589:
	ldr	r0, [r5, #168]
	mov	r3, #0
	mov	r1, #208
	str	r3, [sp, #20]
	mov	r3, #16
	add	r0, r0, #1
	str	r3, [sp, #4]
	lsl	r0, r0, #2
	bl	__kmalloc
	clz	r4, r0
	str	r0, [sp, #12]
	lsr	r4, r4, #5
.L9593:
	ldr	r3, [sp, #16]
	cmp	r3, #0
	moveq	r3, #16
	streq	r3, [sp, #8]
	bne	.L9592
.L9509:
	ldrh	r9, [r5, #182]
	mov	r1, #208
	lsl	r9, r9, #1
	mov	r0, r9
	bl	__kmalloc
	ldr	r3, [r5, #152]
	mov	r1, #208
	mov	r8, r0
	mov	r0, r3
	str	r3, [sp]
	bl	__kmalloc
	cmp	fp, #0
	moveq	r4, #1
	cmp	r4, #0
	mov	r4, r0
	bne	.L9510
	ldr	r3, [sp, #4]
	ldr	r2, [sp, #8]
	cmp	r2, #0
	cmpne	r3, #0
	beq	.L9510
	cmp	r0, #0
	cmpne	r8, #0
	beq	.L9510
	cmp	r7, #0
	bne	.L9639
.L9512:
	ldr	r1, [r5, #148]
	mov	r0, r4
	ldr	r2, [r5, #156]
	add	r1, r1, #16
	bl	memcpy
	ldr	r2, [r6, #-44]
	ldr	r2, [r2, #176]
	cmp	r2, #0
	bne	.L9640
.L9513:
	cmp	r9, #0
	bne	.L9641
.L9514:
	ldrh	r2, [r5, #184]
	cmp	r2, #0
	beq	.L9519
	rsb	r2, r2, r2, lsl #3
	mvn	r1, #0
	add	r2, fp, r2, lsl #2
.L9518:
	sub	r2, r2, #28
	strb	r1, [r2, #48]
	cmp	fp, r2
	bne	.L9518
.L9519:
	ldr	r3, [sp, #12]
	cmp	r10, #0
	sub	r7, r6, #52
	str	fp, [r6, #-40]
	str	r3, [r6, #-20]
	ldr	r3, [sp, #4]
	str	r8, [r6, #-8]
	str	r4, [r6, #-4]
	str	r3, [r6, #-16]
	ldr	r3, [sp, #8]
	str	r3, [r6, #-12]
	beq	.L9517
	ldr	r3, [sp, #12]
	str	r3, [r6, #8]
	ldr	r9, [r5, #168]
	cmp	r9, #0
	beq	.L9520
	ldr	r8, [sp]
	mov	r10, r4
	mov	fp, #0
.L9584:
	mov	r3, r7
	mov	r2, r10
	mov	r1, fp
	mov	r0, #0
	bl	__ffs_func_bind_do_descs
	cmp	r0, #0
	blt	.L9503
	cmp	r10, #0
	beq	.L9585
	cmp	r8, #1
	bls	.L9526
	ldrb	r3, [r10]	@ zero_extendqisi2
	cmp	r3, r8
	bhi	.L9526
	ldrb	r0, [r10, #1]	@ zero_extendqisi2
	cmp	r0, #11
	bhi	.L9525
	cmp	r0, #3
	bls	.L9526
	sub	r0, r0, #4
	cmp	r0, #7
	ldrls	pc, [pc, r0, asl #2]
	b	.L9526
.L9528:
	.word	.L9531
	.word	.L9530
	.word	.L9526
	.word	.L9526
	.word	.L9526
	.word	.L9529
	.word	.L9526
	.word	.L9527
.L9530:
	sub	r2, r3, #7
	tst	r2, #253
	bne	.L9526
	ldrb	r2, [r10, #2]	@ zero_extendqisi2
	tst	r2, #15
	bne	.L9533
.L9526:
	mvn	r0, #21
.L9503:
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L9527:
	cmp	r3, #8
	bne	.L9526
.L9533:
	add	fp, fp, #1
	sub	r8, r8, r3
	cmp	r9, fp
	add	r10, r10, r3
	bne	.L9584
	mov	r2, #0
	mov	r1, r9
	mov	r0, r2
	mov	r3, r7
	bl	__ffs_func_bind_do_descs
	cmp	r0, #0
	blt	.L9503
.L9585:
	ldr	r3, [sp]
	sub	r8, r3, r8
	cmp	r8, #0
	mov	r0, r8
	blt	.L9503
.L9522:
	ldr	r3, [sp, #20]
	cmp	r3, #0
	beq	.L9534
	ldr	r3, [sp, #4]
	add	fp, r4, r8
	str	r3, [r6, #12]
	ldr	r3, [sp]
	ldr	r10, [r5, #172]
	sub	r3, r3, r8
	cmp	r10, #0
	str	r3, [sp, #4]
	beq	.L9535
	mov	r1, #0
	mov	r9, r3
	str	r5, [sp, #12]
	mov	r5, r7
	mov	r7, r6
	mov	r6, r4
	mov	r4, r1
.L9582:
	mov	r3, r5
	mov	r2, fp
	mov	r1, r4
	mov	r0, #0
	bl	__ffs_func_bind_do_descs
	cmp	r0, #0
	blt	.L9503
	cmp	fp, #0
	beq	.L9642
	cmp	r9, #1
	bls	.L9526
	ldrb	r1, [fp]	@ zero_extendqisi2
	cmp	r9, r1
	bcc	.L9526
	ldrb	r2, [fp, #1]	@ zero_extendqisi2
	cmp	r2, #11
	bhi	.L9538
	cmp	r2, #3
	bls	.L9526
	sub	r2, r2, #4
	cmp	r2, #7
	ldrls	pc, [pc, r2, asl #2]
	b	.L9526
.L9540:
	.word	.L9543
	.word	.L9542
	.word	.L9526
	.word	.L9526
	.word	.L9526
	.word	.L9541
	.word	.L9526
	.word	.L9539
.L9529:
	cmp	r3, #5
	beq	.L9533
	b	.L9526
.L9531:
	cmp	r3, #9
	beq	.L9533
	b	.L9526
.L9505:
	cmp	r3, #4
	movls	r3, #0
	strls	r3, [sp, #16]
	bhi	.L9643
.L9586:
	ldrh	r7, [r5, #184]
	mov	r1, #208
	rsb	r7, r7, r7, lsl #3
	lsl	r7, r7, #2
	mov	r0, r7
	bl	__kmalloc
	cmp	r10, #0
	mov	fp, r0
	bne	.L9590
	mov	r3, #16
	mov	r4, r10
	str	r3, [sp, #12]
.L9591:
	ldr	r0, [r5, #172]
	mov	r3, #1
	mov	r1, #208
	str	r3, [sp, #20]
	add	r0, r0, r3
	lsl	r0, r0, #2
	bl	__kmalloc
	str	r0, [sp, #4]
	b	.L9593
.L9539:
	cmp	r1, #8
	bne	.L9526
.L9545:
	add	r4, r4, #1
	sub	r9, r9, r1
	cmp	r10, r4
	add	fp, fp, r1
	bne	.L9582
	mov	r2, #0
	mov	r3, r5
	mov	r1, r10
	mov	r0, r2
	mov	r4, r6
	mov	r6, r7
	mov	r7, r5
	ldr	r5, [sp, #12]
	bl	__ffs_func_bind_do_descs
	cmp	r0, #0
	blt	.L9503
.L9583:
	ldr	r3, [sp, #4]
	sub	r10, r3, r9
	cmp	r10, #0
	mov	r0, r10
	blt	.L9503
.L9537:
	ldr	r3, [sp, #16]
	cmp	r3, #0
	beq	.L9546
	ldr	r3, [sp, #4]
	add	r8, r8, r10
	sub	r3, r3, r10
	str	r3, [sp, #4]
.L9588:
	ldr	r3, [sp, #8]
	add	r8, r4, r8
	str	r3, [r6, #16]
	ldr	r9, [r5, #176]
	cmp	r9, #0
	beq	.L9547
	ldr	fp, [sp, #4]
	mov	r10, #0
.L9580:
	mov	r3, r7
	mov	r2, r8
	mov	r1, r10
	mov	r0, #0
	bl	__ffs_func_bind_do_descs
	cmp	r0, #0
	blt	.L9503
	cmp	r8, #0
	beq	.L9581
	cmp	fp, #1
	bls	.L9526
	ldrb	r3, [r8]	@ zero_extendqisi2
	cmp	fp, r3
	bcc	.L9526
	ldrb	r0, [r8, #1]	@ zero_extendqisi2
	cmp	r0, #11
	bhi	.L9550
	cmp	r0, #3
	bls	.L9526
	sub	r0, r0, #4
	cmp	r0, #7
	ldrls	pc, [pc, r0, asl #2]
	b	.L9526
.L9552:
	.word	.L9555
	.word	.L9554
	.word	.L9526
	.word	.L9526
	.word	.L9526
	.word	.L9553
	.word	.L9526
	.word	.L9551
.L9541:
	cmp	r1, #5
	beq	.L9545
	b	.L9526
.L9542:
	sub	r2, r1, #7
	tst	r2, #253
	bne	.L9526
	ldrb	r2, [fp, #2]	@ zero_extendqisi2
	tst	r2, #15
	bne	.L9545
	b	.L9526
.L9543:
	cmp	r1, #9
	beq	.L9545
	b	.L9526
.L9551:
	cmp	r3, #8
	bne	.L9526
.L9557:
	add	r10, r10, #1
	sub	fp, fp, r3
	cmp	r9, r10
	add	r8, r8, r3
	bne	.L9580
	mov	r2, #0
	mov	r3, r7
	mov	r1, r9
	mov	r0, r2
	bl	__ffs_func_bind_do_descs
	cmp	r0, #0
	blt	.L9503
.L9581:
	ldr	r3, [sp, #4]
	subs	r0, r3, fp
	bmi	.L9503
.L9549:
	ldr	r3, [sp, #20]
	ldr	lr, [r5, #168]
	cmp	r3, #0
	beq	.L9578
	ldr	r3, [r5, #172]
	add	lr, lr, r3
.L9578:
	ldr	r3, [r5, #176]
	add	lr, lr, r3
.L9579:
	cmp	lr, #0
	beq	.L9558
	ldr	r3, [sp]
	cmp	r3, #1
	bls	.L9526
	mov	r1, r3
	mov	r0, #0
.L9559:
	ldrb	r3, [r4]	@ zero_extendqisi2
	cmp	r1, r3
	bcc	.L9526
	ldrb	r2, [r4, #1]	@ zero_extendqisi2
	cmp	r2, #11
	bhi	.L9560
	cmp	r2, #3
	bls	.L9526
	sub	r2, r2, #4
	cmp	r2, #7
	ldrls	pc, [pc, r2, asl #2]
	b	.L9526
.L9562:
	.word	.L9565
	.word	.L9564
	.word	.L9526
	.word	.L9526
	.word	.L9526
	.word	.L9563
	.word	.L9526
	.word	.L9561
.L9553:
	cmp	r3, #5
	beq	.L9557
	b	.L9526
.L9555:
	cmp	r3, #9
	beq	.L9557
	b	.L9526
.L9554:
	sub	r2, r3, #7
	tst	r2, #253
	bne	.L9526
	ldrb	r2, [r8, #2]	@ zero_extendqisi2
	tst	r2, #15
	bne	.L9557
	b	.L9526
.L9561:
	cmp	r3, #8
	bne	.L9526
	ldrb	r2, [r4, #7]	@ zero_extendqisi2
	cmp	r2, #0
	beq	.L9569
	ldr	ip, [r6, #-44]
	sub	r2, r2, #-536870911
	ldr	ip, [ip, #192]
	ldr	ip, [ip]
	ldr	ip, [ip, #4]
	ldrb	r2, [ip, r2, lsl #3]	@ zero_extendqisi2
	strb	r2, [r4, #7]
	b	.L9569
.L9563:
	cmp	r3, #5
	bne	.L9526
.L9569:
	adds	r4, r4, r3
	add	r0, r0, #1
	moveq	r2, #1
	movne	r2, #0
	cmp	lr, r0
	orreq	r2, r2, #1
	sub	ip, r1, r3
	cmp	r2, #0
	bne	.L9644
	cmp	ip, #1
	bls	.L9526
	mov	r1, ip
	b	.L9559
.L9564:
	sub	r2, r3, #7
	tst	r2, #253
	bne	.L9526
	ldrb	r2, [r4, #2]	@ zero_extendqisi2
	tst	r2, #15
	bne	.L9569
	b	.L9526
.L9565:
	cmp	r3, #9
	bne	.L9526
	ldrb	r2, [r4, #2]	@ zero_extendqisi2
	ldr	ip, [r6, #-8]
	lsl	r2, r2, #1
	ldrsh	ip, [ip, r2]
	cmp	ip, #0
	blt	.L9645
	ldrb	r2, [r4, #8]	@ zero_extendqisi2
	strb	ip, [r4, #2]
	cmp	r2, #0
	beq	.L9569
.L9646:
	ldr	ip, [r6, #-44]
	sub	r2, r2, #-536870911
	ldr	ip, [ip, #192]
	ldr	ip, [ip]
	ldr	ip, [ip, #4]
	ldrb	r2, [ip, r2, lsl #3]	@ zero_extendqisi2
	strb	r2, [r4, #8]
	b	.L9569
.L9525:
	cmp	r0, #48
	bne	.L9526
	cmp	r3, #6
	beq	.L9533
	b	.L9526
.L9538:
	cmp	r2, #48
	bne	.L9526
	cmp	r1, #6
	beq	.L9545
	b	.L9526
.L9560:
	cmp	r2, #48
	bne	.L9526
	cmp	r3, #6
	beq	.L9569
	b	.L9526
.L9550:
	cmp	r0, #48
	bne	.L9526
	cmp	r3, #6
	beq	.L9557
	b	.L9526
.L9644:
	ldr	r2, [sp]
	add	r0, r2, r3
	subs	r0, r0, r1
	bmi	.L9503
.L9558:
	add	r6, r5, #120
	add	r4, r5, #104
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #100]
	mov	r7, r0
	ldrh	lr, [r5, #108]
	cmp	r3, #1
	moveq	r3, #2
	streq	r3, [r5, #100]
	cmp	lr, #0
	beq	.L9597
	add	r3, r5, #103
	mov	r0, r4
	add	lr, r3, lr
.L9576:
	ldrb	r2, [r3, #1]!	@ zero_extendqisi2
	mov	r1, r0
	sub	ip, r2, #5
	cmp	ip, #1
	strbls	r2, [r1], #1
	movls	r0, r1
	cmp	r3, lr
	bne	.L9576
	sub	lr, r0, r4
	add	r3, lr, #1
	uxth	lr, lr
	uxth	r3, r3
.L9574:
	add	lr, r5, lr
	strh	r3, [r5, #108]	@ movhi
	mov	r4, #0
	mov	r2, #1
	mov	r1, #3
	mov	r0, r6
	strb	r4, [lr, #104]
	bl	__wake_up_locked
	mov	r0, r6
	mov	r1, r7
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r4
	b	.L9503
.L9510:
	mov	r0, fp
	bl	kfree
	ldr	r0, [sp, #12]
	bl	kfree
	ldr	r0, [sp, #4]
	bl	kfree
	ldr	r0, [sp, #8]
	bl	kfree
	mov	r0, r8
	bl	kfree
	mov	r0, r4
	bl	kfree
	mvn	r0, #11
	b	.L9503
.L9639:
	mov	r1, r7
	mov	r0, fp
	bl	__memzero
	b	.L9512
.L9641:
	mov	r2, r9
	mov	r1, #255
	mov	r0, r8
	bl	memset
	b	.L9514
.L9640:
	ldr	ip, [r5, #148]
	ldrd	r0, [r5, #156]
	ldr	r2, [r5, #164]
	add	r0, r4, r0
	add	r1, ip, r1
	bl	memcpy
	b	.L9513
.L9645:
	ldr	r7, [r6, #-52]
	ldrb	ip, [r7, #44]	@ zero_extendqisi2
	cmp	ip, #15
	bhi	.L9596
	add	r9, ip, #12
	add	r8, ip, #1
	str	r6, [r7, r9, lsl #2]
	strb	r8, [r7, #44]
	ldr	r7, [r6, #-8]
	strh	ip, [r7, r2]	@ movhi
	ldr	ip, [r6, #-8]
	ldrsh	ip, [ip, r2]
	ldrb	r2, [r4, #8]	@ zero_extendqisi2
	strb	ip, [r4, #2]
	cmp	r2, #0
	beq	.L9569
	b	.L9646
.L9643:
	ldr	r3, [r5, #176]
	subs	r3, r3, #0
	movne	r3, #1
	str	r3, [sp, #16]
	b	.L9586
.L9638:
	movw	r0, #65012
	movt	r0, 65535
	b	.L9503
.L9520:
	mov	r3, r7
	mov	r2, r9
	mov	r1, r9
	mov	r0, r9
	bl	__ffs_func_bind_do_descs
	cmp	r0, #0
	blt	.L9503
.L9517:
	mov	r8, #0
	b	.L9522
.L9535:
	mov	r3, r7
	mov	r2, r10
	mov	r1, r10
	mov	r0, r10
	bl	__ffs_func_bind_do_descs
	cmp	r0, #0
	blt	.L9503
	b	.L9537
.L9547:
	mov	r3, r7
	mov	r2, r9
	mov	r1, r9
	mov	r0, r9
	bl	__ffs_func_bind_do_descs
	cmp	r0, #0
	blt	.L9503
	b	.L9549
.L9534:
	ldr	r3, [sp, #16]
	cmp	r3, #0
	beq	.L9587
	ldr	r3, [sp]
	sub	r3, r3, r8
	str	r3, [sp, #4]
	b	.L9588
.L9597:
	mov	r3, #1
	b	.L9574
.L9546:
	ldr	r3, [r5, #168]
	ldr	lr, [r5, #172]
	add	lr, lr, r3
	b	.L9579
.L9587:
	ldr	lr, [r5, #168]
	b	.L9579
.L9596:
	mvn	r0, #18
	b	.L9503
.L9590:
	ldr	r0, [r5, #168]
	mov	r1, #208
	add	r0, r0, #1
	lsl	r0, r0, #2
	bl	__kmalloc
	clz	r4, r0
	str	r0, [sp, #12]
	lsr	r4, r4, #5
	b	.L9591
.L9599:
	mov	r3, #1
	str	r3, [sp, #16]
	b	.L9589
.L9642:
	mov	r4, r6
	mov	r6, r7
	mov	r7, r5
	ldr	r5, [sp, #12]
	b	.L9583
	.fnend
	.size	ffs_func_bind, .-ffs_func_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	diag_function_bind, %function
diag_function_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r0
	mov	r4, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrb	r3, [r0, #44]	@ zero_extendqisi2
	ldr	r7, [r0, #24]
	cmp	r3, #15
	bhi	.L9665
	add	r1, r3, #12
	add	r2, r3, #1
	str	r4, [r0, r1, lsl #2]
	strb	r2, [r0, #44]
.L9648:
	movw	r6, #:lower16:.LANCHOR1
	mov	r2, #0
	movt	r6, #:upper16:.LANCHOR1
	add	r1, r6, #2240
	strb	r3, [r6, #2230]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L9649
	ldr	r1, .L9699
	mov	r2, #0
	str	r0, [r4, #80]
	str	r4, [r0]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	subs	r3, r0, #0
	beq	.L9649
	ldr	r0, .L9699+4
	str	r3, [r4, #76]
	str	r4, [r3]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #8]
	beq	.L9666
	ldr	r3, [r5, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bhi	.L9697
.L9651:
	ldr	r7, [r4, #112]
	cmp	r7, #0
	beq	.L9669
	ldrb	r3, [r6, #2230]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L9669
	ldr	ip, [r4, #108]
	ldrb	r1, [ip, #33]	@ zero_extendqisi2
	cmp	r1, #0
	beq	.L9696
	ldr	r3, [ip, #44]
	ldr	r3, [r3, #16]
	ldr	r3, [r3]
	ldr	r0, [r3, #4]
	cmp	r0, #0
	bne	.L9658
	b	.L9669
.L9660:
	ldrb	r2, [r0]	@ zero_extendqisi2
	cmp	r2, r1
	beq	.L9698
	adds	r0, r0, #8
	beq	.L9669
.L9658:
	ldr	r5, [r0, #4]
	cmp	r5, #0
	bne	.L9660
.L9647:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L9649:
	mvn	r5, #18
.L9650:
	ldr	r0, [r4, #16]
	cmp	r0, #0
	beq	.L9656
.L9664:
	bl	kfree
.L9656:
	ldr	r0, [r4, #12]
	cmp	r0, #0
	beq	.L9661
	bl	kfree
.L9661:
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L9662
	bl	kfree
.L9662:
	ldr	r3, [r4, #76]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #80]
	cmp	r3, #0
	beq	.L9647
	mov	r2, #0
	str	r2, [r3]
	b	.L9647
.L9669:
	mov	r5, #0
	b	.L9647
.L9697:
	ldrb	r2, [r6, #2242]	@ zero_extendqisi2
	add	r0, r6, #2304
	ldrb	r3, [r6, #2254]	@ zero_extendqisi2
	strb	r2, [r6, #2282]
	strb	r3, [r6, #2294]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #12]
	beq	.L9652
	ldr	r3, [r5, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #4
	bls	.L9651
	ldrb	r2, [r6, #2242]	@ zero_extendqisi2
	ldrb	r3, [r6, #2254]	@ zero_extendqisi2
	ldr	r0, .L9699+8
	strb	r2, [r6, #2322]
	strb	r3, [r6, #2334]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #16]
	bne	.L9651
	mvn	r5, #11
	b	.L9656
.L9698:
	mov	r1, r5
.L9696:
	ldrh	r0, [ip, #27]	@ unaligned
	mov	r5, #0
	blx	r7
	b	.L9647
.L9666:
	mvn	r5, #11
	b	.L9650
.L9665:
	mov	r3, #237
	b	.L9648
.L9652:
	ldr	r0, [r4, #16]
	mvn	r5, #11
	cmp	r0, #0
	bne	.L9664
	b	.L9661
.L9700:
	.align	2
.L9699:
	.word	.LANCHOR1+2252
	.word	.LANCHOR1+2264
	.word	.LANCHOR1+2344
	.fnend
	.size	diag_function_bind, .-diag_function_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_bind, %function
rmnet_smd_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r6, [r0, #24]
	str	r6, [r1, #76]
	ldrb	r3, [r0, #44]	@ zero_extendqisi2
	cmp	r3, #15
	bhi	.L9704
	movw	r7, #:lower16:.LANCHOR1
	add	r2, r3, #12
	mov	r4, r0
	mov	r5, r1
	ldr	r1, .L9762
	add	r0, r3, #1
	movt	r7, #:upper16:.LANCHOR1
	str	r5, [r4, r2, lsl #2]
	mov	r2, #0
	strb	r0, [r4, #44]
	strb	r3, [r5, #96]
	strb	r3, [r7, #2370]
	ldr	r0, [r6]
	bl	usb_ep_autoconfig_ss
	subs	r3, r0, #0
	beq	.L9704
	ldr	r1, .L9762+4
	mov	r2, #0
	str	r6, [r3]
	str	r3, [r5, #84]
	ldr	r0, [r6]
	bl	usb_ep_autoconfig_ss
	subs	r3, r0, #0
	beq	.L9704
	ldr	r1, .L9762+8
	mov	r2, #0
	str	r6, [r3]
	str	r3, [r5, #80]
	ldr	r0, [r6]
	bl	usb_ep_autoconfig_ss
	subs	r8, r0, #0
	beq	.L9704
	str	r6, [r8]
	str	r8, [r5, #88]
	ldr	r3, [r4, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bhi	.L9760
.L9705:
	ldr	r3, [r8, #8]
	mov	r1, #208
	mov	r0, r8
	ldr	r3, [r3, #8]
	blx	r3
	subs	r4, r0, #0
	beq	.L9706
	mov	r3, #8
	movw	r6, #:lower16:kmalloc_caches
	movt	r6, #:upper16:kmalloc_caches
	str	r3, [r4, #4]
	ldr	r0, [r6, #24]
	cmp	r0, #0
	moveq	r3, #16
	streq	r3, [r4]
	beq	.L9708
	mov	r1, #208
	bl	kmem_cache_alloc
	cmp	r0, #0
	str	r0, [r4]
	bne	.L9708
	ldr	r3, [r8, #8]
	mov	r1, r4
	mov	r0, r8
	ldr	r3, [r3, #12]
	blx	r3
.L9706:
	mvn	r3, #11
	mov	r4, r3
	str	r3, [r5, #92]
	b	.L9701
.L9708:
	cmn	r4, #4096
	str	r4, [r5, #92]
	bhi	.L9701
	movw	r3, #:lower16:rmnet_smd_notify_complete
	mov	r2, #8
	movt	r3, #:upper16:rmnet_smd_notify_complete
	mov	r7, #4
	mov	r9, #16
	add	r8, r5, #100
	str	r3, [r4, #28]
	ldr	r3, [r5, #92]
	str	r5, [r3, #32]
	ldr	r3, [r5, #92]
	str	r2, [r3, #4]
.L9714:
	ldr	r0, [r6, #24]
	mov	r1, #208
	mov	r4, #16
	cmp	r0, #0
	beq	.L9709
	bl	kmem_cache_alloc
	subs	r4, r0, #0
	beq	.L9740
.L9709:
	ldr	r0, [r6, #44]
	mov	r1, #208
	cmp	r0, #0
	streq	r9, [r4]
	beq	.L9712
	bl	kmem_cache_alloc
	cmp	r0, #0
	str	r0, [r4]
	beq	.L9759
.L9712:
	cmn	r4, #4096
	add	r3, r4, #8
	bhi	.L9713
	ldr	r2, [r5, #104]
	subs	r7, r7, #1
	str	r3, [r5, #104]
	str	r8, [r4, #8]
	str	r2, [r4, #12]
	str	r3, [r2]
	bne	.L9714
	mov	r7, #8
	mov	r9, #16
	add	r8, r5, #108
.L9719:
	ldr	r0, [r6, #24]
	mov	r1, #208
	mov	r4, #16
	cmp	r0, #0
	beq	.L9715
	bl	kmem_cache_alloc
	subs	r4, r0, #0
	beq	.L9740
.L9715:
	ldr	r0, [r6, #44]
	mov	r1, #208
	cmp	r0, #0
	streq	r9, [r4]
	beq	.L9718
	bl	kmem_cache_alloc
	cmp	r0, #0
	str	r0, [r4]
	beq	.L9759
.L9718:
	cmn	r4, #4096
	add	r3, r4, #8
	bhi	.L9713
	ldr	r2, [r5, #112]
	subs	r7, r7, #1
	str	r3, [r5, #112]
	str	r8, [r4, #8]
	str	r2, [r4, #12]
	str	r3, [r2]
	bne	.L9719
	movw	r10, #:lower16:rmnet_smd_complete_epout
	mov	r8, #8
	movt	r10, #:upper16:rmnet_smd_complete_epout
	mov	r9, #2048
.L9723:
	ldr	r7, [r5, #80]
	mov	r1, #208
	ldr	r3, [r7, #8]
	mov	r0, r7
	ldr	r3, [r3, #8]
	blx	r3
	subs	r4, r0, #0
	beq	.L9740
	str	r9, [r4, #4]
	ldr	r0, [r6, #44]
	mov	r3, #16
	mov	r1, #208
	cmp	r0, #0
	streq	r3, [r4]
	beq	.L9722
	bl	kmem_cache_alloc
	cmp	r0, #0
	str	r0, [r4]
	bne	.L9722
	ldr	r3, [r7, #8]
	mov	r1, r4
	mov	r0, r7
	mvn	r4, #11
	ldr	r3, [r3, #12]
	blx	r3
	b	.L9713
.L9740:
	mvn	r4, #11
.L9713:
	mov	r0, r5
	bl	rmnet_smd_free_buf
	mov	r3, #0
	str	r3, [r5, #80]
	str	r3, [r5, #84]
	str	r3, [r5, #88]
.L9701:
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L9759:
	mov	r0, r4
	mvn	r4, #11
	bl	kfree
	b	.L9713
.L9760:
	ldrb	r1, [r7, #2382]	@ zero_extendqisi2
	ldrb	r2, [r7, #2394]	@ zero_extendqisi2
	ldrb	r3, [r7, #2406]	@ zero_extendqisi2
	strb	r1, [r7, #2418]
	strb	r2, [r7, #2430]
	strb	r3, [r7, #2442]
	b	.L9705
.L9722:
	cmn	r4, #4096
	add	r3, r4, #36
	add	r1, r5, #140
	bhi	.L9713
	str	r9, [r4, #4]
	subs	r8, r8, #1
	str	r10, [r4, #28]
	str	r5, [r4, #32]
	ldr	r2, [r5, #144]
	str	r3, [r5, #144]
	str	r1, [r4, #36]
	str	r2, [r4, #40]
	str	r3, [r2]
	bne	.L9723
	movw	r9, #:lower16:rmnet_smd_complete_epin
	mov	r4, #8
	movt	r9, #:upper16:rmnet_smd_complete_epin
	mov	r10, #2048
.L9727:
	ldr	r8, [r5, #84]
	mov	r1, #208
	ldr	r3, [r8, #8]
	mov	r0, r8
	ldr	r3, [r3, #8]
	blx	r3
	subs	r7, r0, #0
	beq	.L9740
	str	r10, [r7, #4]
	ldr	r0, [r6, #44]
	mov	r3, #16
	mov	r1, #208
	cmp	r0, #0
	streq	r3, [r7]
	beq	.L9726
	bl	kmem_cache_alloc
	cmp	r0, #0
	str	r0, [r7]
	bne	.L9726
	ldr	r3, [r8, #8]
	mov	r1, r7
	mov	r0, r8
	mvn	r4, #11
	ldr	r3, [r3, #12]
	blx	r3
	b	.L9713
.L9726:
	cmn	r7, #4096
	add	r3, r7, #36
	add	r1, r5, #132
	bhi	.L9761
	str	r9, [r7, #28]
	subs	r4, r4, #1
	str	r5, [r7, #32]
	ldr	r2, [r5, #136]
	str	r3, [r5, #136]
	str	r1, [r7, #36]
	str	r2, [r7, #40]
	str	r3, [r2]
	bne	.L9727
	b	.L9701
.L9704:
	mvn	r4, #18
	b	.L9701
.L9761:
	mov	r4, r7
	b	.L9713
.L9763:
	.align	2
.L9762:
	.word	.LANCHOR1+2380
	.word	.LANCHOR1+2392
	.word	.LANCHOR1+2404
	.fnend
	.size	rmnet_smd_bind, .-rmnet_smd_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_bind, %function
rmnet_sdio_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r7, [r0, #24]
	str	r7, [r1, #76]
	ldrb	r3, [r0, #44]	@ zero_extendqisi2
	cmp	r3, #15
	bhi	.L9771
	movw	r6, #:lower16:.LANCHOR1
	mov	r5, r0
	add	r2, r3, #12
	add	r0, r3, #1
	mov	r4, r1
	movt	r6, #:upper16:.LANCHOR1
	str	r1, [r5, r2, lsl #2]
	add	r1, r6, #2464
	mov	r2, #0
	strb	r0, [r5, #44]
	strb	r3, [r4, #96]
	strb	r3, [r6, #2454]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L9767
	ldr	r1, .L9791
	mov	r2, #0
	str	r7, [r0]
	str	r0, [r4, #84]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L9767
	ldr	r1, .L9791+4
	mov	r2, #0
	str	r7, [r0]
	str	r0, [r4, #80]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L9767
	str	r7, [r0]
	str	r0, [r4, #88]
	ldr	r3, [r5, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bls	.L9768
	ldrb	r1, [r6, #2466]	@ zero_extendqisi2
	ldrb	r2, [r6, #2478]	@ zero_extendqisi2
	ldrb	r3, [r6, #2490]	@ zero_extendqisi2
	strb	r1, [r6, #2502]
	strb	r2, [r6, #2514]
	strb	r3, [r6, #2526]
.L9768:
	mov	r2, #0
	add	r1, r4, #244
	ldr	r0, [r4, #192]
	bl	queue_delayed_work
	mov	r0, #0
	b	.L9764
.L9767:
	ldr	r3, [r4, #88]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #80]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #84]
	cmp	r3, #0
	beq	.L9771
	mov	r2, #0
	mvn	r0, #18
	str	r2, [r3]
.L9764:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L9771:
	mvn	r0, #18
	b	.L9764
.L9792:
	.align	2
.L9791:
	.word	.LANCHOR1+2476
	.word	.LANCHOR1+2488
	.fnend
	.size	rmnet_sdio_bind, .-rmnet_sdio_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_bind, %function
audio_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	movw	r4, #:lower16:.LANCHOR1
	movw	ip, #2556
	strd	r6, [sp, #8]
	movt	r4, #:upper16:.LANCHOR1
	mov	r3, #2
	strd	r8, [sp, #16]
	mov	r6, r0
	mov	r5, r1
	str	r10, [sp, #24]
	mov	r1, #0
	str	lr, [sp, #28]
	ldrb	r2, [r0, #44]	@ zero_extendqisi2
	.pad #8
	sub	sp, sp, #8
	ldr	lr, .L9815
	movw	r0, #44100
	strh	r0, [r4, ip]	@ movhi
	ldr	ip, [r6, #24]
	cmp	r2, #15
	str	r0, [sp, #4]
	strb	r1, [lr, #2]
	strb	r3, [r4, #2543]
	strb	r3, [r4, #2552]
	bhi	.L9794
	add	r3, r2, #1
	add	r1, r2, #12
	uxtb	r3, r3
	str	r5, [r6, r1, lsl #2]
	cmp	r3, #16
	strb	r2, [r4, #2562]
	strb	r3, [r6, #44]
	beq	.L9794
	add	r0, r2, #2
	add	r2, r3, #12
	add	r1, lr, #40
	str	r5, [r6, r2, lsl #2]
	mov	r2, #0
	strb	r0, [r6, #44]
	strb	r3, [r4, #2574]
	strb	r3, [r4, #2586]
	ldr	r0, [ip]
	bl	usb_ep_autoconfig_ss
	subs	r8, r0, #0
	beq	.L9794
	str	r8, [r5, #96]
	movw	r10, #:lower16:kmalloc_caches
	movw	r9, #:lower16:audio_data_complete
	str	r5, [r8]
	ldr	r3, [r6, #24]
	movt	r10, #:upper16:kmalloc_caches
	movt	r9, #:upper16:audio_data_complete
	mov	r7, #4
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	ldrbhi	r3, [r4, #2598]	@ zero_extendqisi2
	strbhi	r3, [r4, #2610]
	b	.L9800
.L9814:
	ldr	r0, [r10, #32]
	cmp	r0, #0
	streq	r3, [r4]
	beq	.L9798
	bl	kmem_cache_alloc
	cmp	r0, #0
	str	r0, [r4]
	beq	.L9812
.L9798:
	mov	r3, #256
	add	r6, r5, #100
	mov	r0, r6
	str	r3, [r4, #4]
	str	r9, [r4, #28]
	str	r5, [r4, #32]
	bl	_raw_spin_lock_irqsave
	ldr	r2, [r5, #92]
	add	ip, r4, #36
	add	r3, r5, #88
	mov	r1, r0
	mov	r0, r6
	str	ip, [r5, #92]
	str	r3, [r4, #36]
	str	r2, [r4, #40]
	str	ip, [r2]
	bl	_raw_spin_unlock_irqrestore
	subs	r7, r7, #1
	beq	.L9813
.L9800:
	ldr	r3, [r8, #8]
	mov	r1, #208
	mov	r0, r8
	ldr	r3, [r3, #8]
	blx	r3
	subs	r4, r0, #0
	mov	r1, #208
	mov	r3, #16
	bne	.L9814
.L9796:
	mvn	r0, #11
.L9793:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L9812:
	ldr	r3, [r8, #8]
	mov	r1, r4
	mov	r0, r8
	ldr	r3, [r3, #12]
	blx	r3
	b	.L9796
.L9794:
.L9799:
	mvn	r0, #18
	b	.L9793
.L9813:
	mov	r0, r7
	b	.L9793
.L9816:
	.align	2
.L9815:
	.word	.LANCHOR1+2556
	.fnend
	.size	audio_bind, .-audio_bind
	.section	.rodata.str1.4
	.align	2
.LC519:
	.ascii	"<3>%s: %s: can't bind, err %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_bind, %function
ecm_qc_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrb	r2, [r0, #44]	@ zero_extendqisi2
	ldr	r7, [r0, #24]
	cmp	r2, #15
	bhi	.L9818
	add	r3, r2, #1
	add	r1, r2, #12
	movw	r5, #:lower16:.LANCHOR1
	mov	r6, r0
	str	r4, [r0, r1, lsl #2]
	movt	r5, #:upper16:.LANCHOR1
	strb	r3, [r0, #44]
	strb	r2, [r4, #112]
	ldrb	r3, [r0, #44]	@ zero_extendqisi2
	strb	r2, [r5, #2622]
	strb	r2, [r5, #2635]
	cmp	r3, #15
	bhi	.L9818
	add	r2, r3, #12
	add	r0, r3, #1
	ldr	r1, .L9881
	str	r4, [r6, r2, lsl #2]
	mov	r2, #0
	strb	r0, [r6, #44]
	strb	r3, [r4, #113]
	strb	r3, [r5, #2636]
	strb	r3, [r5, #2642]
	strb	r3, [r5, #2654]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L9818
	ldr	r1, .L9881+4
	mov	r2, #0
	str	r0, [r4, #80]
	str	r7, [r0]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L9818
	mov	r2, #0
	add	r1, r5, #2688
	str	r0, [r4, #84]
	str	r7, [r0]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	subs	r3, r0, #0
	beq	.L9818
	str	r3, [r4, #136]
	ldr	r2, [r3, #8]
	mov	r1, #208
	str	r7, [r3]
	ldr	r3, [r2, #8]
	blx	r3
	cmp	r0, #0
	mov	r7, r0
	str	r0, [r4, #140]
	beq	.L9822
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	moveq	r0, #16
	beq	.L9821
	mov	r1, #208
	bl	kmem_cache_alloc
.L9821:
	str	r0, [r7]
	ldr	r3, [r4, #140]
	ldr	r2, [r3]
	cmp	r2, #0
	beq	.L9822
	str	r4, [r3, #32]
	ldr	r2, [r4, #140]
	movw	r3, #:lower16:ecm_qc_notify_complete
	movt	r3, #:upper16:ecm_qc_notify_complete
	ldr	r0, .L9881+8
	str	r3, [r2, #28]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #8]
	beq	.L9822
	ldr	r3, [r6, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bhi	.L9880
.L9823:
	movw	r1, #:lower16:ecm_qc_open
	movw	r2, #:lower16:ecm_qc_close
	movt	r1, #:upper16:ecm_qc_open
	movt	r2, #:upper16:ecm_qc_close
	mov	r5, #0
	str	r1, [r4, #104]
	str	r2, [r4, #108]
.L9817:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L9880:
	ldrb	r1, [r5, #2666]	@ zero_extendqisi2
	ldrb	r2, [r5, #2678]	@ zero_extendqisi2
	ldrb	r3, [r5, #2690]	@ zero_extendqisi2
	ldr	r0, .L9881+12
	strb	r1, [r5, #2742]
	strb	r2, [r5, #2754]
	strb	r3, [r5, #2766]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #12]
	beq	.L9824
	ldr	r3, [r6, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #4
	bls	.L9823
	ldrb	r3, [r5, #2690]	@ zero_extendqisi2
	ldrb	r1, [r5, #2666]	@ zero_extendqisi2
	ldrb	r2, [r5, #2678]	@ zero_extendqisi2
	ldr	r0, .L9881+16
	strb	r1, [r5, #2818]
	strb	r2, [r5, #2830]
	strb	r3, [r5, #2842]
	bl	usb_copy_descriptors
	ldr	r3, [r4, #12]
	str	r0, [r4, #16]
	cmp	r3, #0
	bne	.L9823
.L9824:
	ldr	r0, [r4, #16]
	mvn	r5, #11
	cmp	r0, #0
	beq	.L9828
.L9834:
	bl	kfree
.L9827:
	ldr	r0, [r4, #12]
	cmp	r0, #0
	beq	.L9828
	bl	kfree
.L9828:
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L9829
	bl	kfree
.L9829:
	ldr	r3, [r4, #140]
	cmp	r3, #0
	beq	.L9830
	ldr	r0, [r3]
	bl	kfree
	ldrd	r0, [r4, #136]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
.L9830:
	ldr	r3, [r4, #136]
	movw	r0, #:lower16:.LC519
	ldr	r1, .L9881+20
	movt	r0, #:upper16:.LC519
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #84]
	ldr	r2, [r3, #28]
	cmp	r2, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #80]
	ldr	r2, [r3, #28]
	cmp	r2, #0
	movne	r2, #0
	strne	r2, [r3]
	mov	r3, r5
	ldr	r2, [r4]
	bl	printk
	b	.L9817
.L9818:
	mvn	r5, #18
.L9820:
	ldr	r0, [r4, #16]
	cmp	r0, #0
	bne	.L9834
	b	.L9827
.L9822:
	mvn	r5, #11
	b	.L9820
.L9882:
	.align	2
.L9881:
	.word	.LANCHOR1+2664
	.word	.LANCHOR1+2676
	.word	.LANCHOR1+2700
	.word	.LANCHOR1+2776
	.word	.LANCHOR1+2852
	.word	.LANCHOR2+3992
	.fnend
	.size	ecm_qc_bind, .-ecm_qc_bind
	.section	.rodata.str1.4
	.align	2
.LC520:
	.ascii	"dual\000"
	.align	2
.LC521:
	.ascii	"full\000"
	.align	2
.LC522:
	.ascii	"<3>%s: usb epin autoconfig failed\012\000"
	.align	2
.LC523:
	.ascii	"<6>%s: usb epin autoconfig succeeded\012\000"
	.align	2
.LC524:
	.ascii	"<3>%s: usb epout autoconfig failed\012\000"
	.align	2
.LC525:
	.ascii	"<6>%s: usb epout autoconfig succeeded\012\000"
	.align	2
.LC526:
	.ascii	"<3>%s: usb notify ep autoconfig failed\012\000"
	.align	2
.LC527:
	.ascii	"<6>%s: usb notify ep autoconfig succeeded\012\000"
	.align	2
.LC528:
	.ascii	"<6>%s: allocated notify ep request & request buffer"
	.ascii	"\012\000"
	.align	2
.LC529:
	.ascii	"<6>%s: failed to allocate notify request\012\000"
	.align	2
.LC530:
	.ascii	"<6>%s: mbim(%d): %s speed IN/%s OUT/%s NOTIFY/%s\012"
	.ascii	"\000"
	.align	2
.LC531:
	.ascii	"<3>%s: %s failed to bind, err %d\012\000"
	.section	.text.unlikely
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_bind, %function
mbim_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, r7, r8, r9, lr}
	.save {r4, r5, r6, r7, r8, r9, lr}
	mov	r4, r1
	ldr	r7, [r0, #24]
	mov	r5, r0
	movw	r0, #:lower16:.LC216
	ldr	r1, .L9942
	.pad #20
	sub	sp, sp, #20
	movt	r0, #:upper16:.LC216
	bl	printk
	str	r7, [r4, #76]
	ldrb	r2, [r5, #44]	@ zero_extendqisi2
	cmp	r2, #15
	bhi	.L9884
	add	r0, r2, #12
	add	r1, r2, #1
	movw	r3, #:lower16:.LANCHOR1
	str	r4, [r5, r0, lsl #2]
	movt	r3, #:upper16:.LANCHOR1
	strb	r1, [r5, #44]
	mov	r6, r3
	strb	r2, [r4, #188]
	ldrb	r0, [r5, #44]	@ zero_extendqisi2
	strb	r2, [r3, #2906]
	strb	r2, [r3, #2914]
	strb	r2, [r3, #2927]
	cmp	r0, #15
	bhi	.L9884
	add	ip, r0, #12
	add	r2, r0, #1
	ldr	r1, .L9942+4
	mov	r9, #0
	str	r4, [r5, ip, lsl #2]
	strb	r2, [r5, #44]
	mov	r2, r9
	str	r7, [r4, #132]
	str	r4, [r4, #136]
	strb	r0, [r4, #189]
	strb	r9, [r4, #190]
	strb	r0, [r3, #2928]
	strb	r0, [r3, #2934]
	strb	r0, [r3, #2946]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	subs	r8, r0, #0
	bne	.L9885
	movw	r0, #:lower16:.LC522
	ldr	r1, .L9942
	mvn	r5, #18
	movt	r0, #:upper16:.LC522
	bl	printk
	b	.L9886
.L9885:
	movw	r0, #:lower16:.LC523
	ldr	r1, .L9942
	movt	r0, #:upper16:.LC523
	bl	printk
	ldr	r1, .L9942+8
	mov	r2, r9
	str	r7, [r8]
	str	r8, [r4, #140]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	subs	r8, r0, #0
	bne	.L9887
	movw	r0, #:lower16:.LC524
	ldr	r1, .L9942
	mvn	r5, #18
	movt	r0, #:upper16:.LC524
	bl	printk
	b	.L9886
.L9887:
	movw	r0, #:lower16:.LC525
	ldr	r1, .L9942
	movt	r0, #:upper16:.LC525
	bl	printk
	ldr	r1, .L9942+12
	mov	r2, r9
	str	r7, [r8]
	str	r8, [r4, #144]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	subs	r8, r0, #0
	bne	.L9888
	movw	r0, #:lower16:.LC526
	ldr	r1, .L9942
	mvn	r5, #18
	movt	r0, #:upper16:.LC526
	bl	printk
	b	.L9886
.L9888:
	movw	r0, #:lower16:.LC527
	ldr	r1, .L9942
	movt	r0, #:upper16:.LC527
	bl	printk
	str	r8, [r4, #148]
	ldr	r3, [r8, #8]
	mov	r1, #208
	mov	r0, r8
	str	r7, [r8]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r7, r0, #0
	streq	r7, [r4, #152]
	beq	.L9890
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	moveq	r3, #16
	streq	r3, [r7]
	beq	.L9892
	mov	r1, #208
	bl	kmem_cache_alloc
	cmp	r0, #0
	mov	r9, r0
	str	r0, [r7]
	bne	.L9892
	ldr	r3, [r8, #8]
	mov	r1, r7
	mov	r0, r8
	ldr	r3, [r3, #12]
	blx	r3
	str	r9, [r4, #152]
	b	.L9890
.L9892:
	mov	r3, #16
	movw	r0, #:lower16:.LC528
	ldr	r1, .L9942
	movt	r0, #:upper16:.LC528
	str	r3, [r7, #4]
	str	r7, [r4, #152]
	ldr	r7, .L9942+16
	bl	printk
	ldr	r2, [r4, #152]
	movw	r3, #:lower16:mbim_notify_complete
	movt	r3, #:upper16:mbim_notify_complete
	add	r0, r7, #12
	str	r4, [r2, #32]
	ldr	r2, [r4, #152]
	str	r3, [r2, #28]
	ldr	r3, [r4, #124]
	cmp	r3, #7
	moveq	r3, #2048
	movne	r3, #4064
	strh	r3, [r7, #9]	@ unaligned
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #8]
	bne	.L9941
	b	.L9899
.L9890:
	movw	r0, #:lower16:.LC529
	ldr	r1, .L9942
	mvn	r5, #11
	movt	r0, #:upper16:.LC529
	bl	printk
	b	.L9886
.L9941:
	ldr	r3, [r5, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bls	.L9900
	ldrb	r1, [r6, #2958]	@ zero_extendqisi2
	add	r0, r7, #96
	ldrb	r2, [r6, #2970]	@ zero_extendqisi2
	ldrb	r3, [r6, #2982]	@ zero_extendqisi2
	strb	r1, [r6, #3054]
	strb	r2, [r6, #3066]
	strb	r3, [r6, #3078]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #12]
	bne	.L9900
.L9899:
	mvn	r5, #11
	b	.L9886
.L9900:
	ldr	r3, [r5, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #4
	bls	.L9898
	ldrb	r1, [r6, #2958]	@ zero_extendqisi2
	ldrb	r2, [r6, #2970]	@ zero_extendqisi2
	ldrb	r3, [r6, #2982]	@ zero_extendqisi2
	ldr	r0, .L9942+20
	strb	r1, [r6, #3138]
	strb	r2, [r6, #3150]
	strb	r3, [r6, #3162]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #16]
	beq	.L9899
.L9898:
	ldrb	r3, [r5, #20]	@ zero_extendqisi2
	sub	r2, r3, #2
	cmp	r2, #2
	bhi	.L9902
	add	r3, r3, #48
	strb	r3, [r6, #190]
.L9902:
	ldr	ip, [r5, #24]
	movw	r1, #:lower16:.LC521
	movw	r3, #:lower16:.LC520
	ldr	lr, [r4, #144]
	movt	r1, #:upper16:.LC521
	movw	r0, #:lower16:.LC530
	ldr	r2, [r4, #148]
	movt	r3, #:upper16:.LC520
	movt	r0, #:upper16:.LC530
	ldr	r6, [ip]
	ldr	ip, [r4, #140]
	ldr	r5, [r2, #4]
	ldrb	r2, [r4, #128]	@ zero_extendqisi2
	ldr	r4, [r6, #20]
	str	r5, [sp, #8]
	ldr	lr, [lr, #4]
	mov	r5, #0
	cmp	r4, #2
	movls	r3, r1
	ldr	r1, .L9942
	str	lr, [sp, #4]
	ldr	ip, [ip, #4]
	str	ip, [sp]
	bl	printk
	b	.L9883
.L9884:
	mvn	r5, #18
.L9886:
	movw	r0, #:lower16:.LC531
	ldr	r1, .L9942
	mov	r3, r5
	movt	r0, #:upper16:.LC531
	ldr	r2, [r4]
	bl	printk
	ldr	r0, [r4, #16]
	cmp	r0, #0
	beq	.L9905
	bl	kfree
.L9905:
	ldr	r0, [r4, #12]
	cmp	r0, #0
	beq	.L9906
	bl	kfree
.L9906:
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L9907
	bl	kfree
.L9907:
	ldr	r3, [r4, #152]
	cmp	r3, #0
	beq	.L9908
	ldr	r0, [r3]
	bl	kfree
	ldrd	r0, [r4, #148]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
.L9908:
	ldr	r3, [r4, #148]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #144]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #140]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
.L9883:
	mov	r0, r5
	add	sp, sp, #20
	@ sp needed
	pop	{r4, r5, r6, r7, r8, r9, pc}
.L9943:
	.align	2
.L9942:
	.word	.LANCHOR2+4004
	.word	.LANCHOR1+2956
	.word	.LANCHOR1+2968
	.word	.LANCHOR1+2980
	.word	.LANCHOR1+2992
	.word	.LANCHOR1+3172
	.fnend
	.size	mbim_bind, .-mbim_bind
	.section	.rodata.str1.4
	.align	2
.LC532:
	.ascii	"%s: can't bind, err %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_bind, %function
ecm_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrb	r3, [r0, #44]	@ zero_extendqisi2
	ldr	r6, [r0, #24]
	cmp	r3, #15
	bhi	.L9945
	add	r1, r3, #12
	add	r2, r3, #1
	movw	r5, #:lower16:.LANCHOR1
	str	r4, [r0, r1, lsl #2]
	movt	r5, #:upper16:.LANCHOR1
	strb	r2, [r0, #44]
	strb	r3, [r4, #140]
	ldrb	ip, [r0, #44]	@ zero_extendqisi2
	strb	r3, [r5, #3234]
	strb	r3, [r5, #3242]
	strb	r3, [r5, #3255]
	cmp	ip, #15
	bhi	.L9945
	add	r2, ip, #12
	add	r3, ip, #1
	ldr	r1, .L9984
	str	r4, [r0, r2, lsl #2]
	mov	r2, #0
	strb	r3, [r0, #44]
	strb	ip, [r4, #141]
	strb	ip, [r5, #3256]
	strb	ip, [r5, #3262]
	strb	ip, [r5, #3274]
	ldr	r0, [r6]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L9945
	mov	r2, #0
	add	r1, r5, #3296
	str	r0, [r4, #80]
	str	r6, [r0]
	ldr	r0, [r6]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L9945
	ldr	r1, .L9984+4
	mov	r2, #0
	str	r0, [r4, #84]
	str	r6, [r0]
	ldr	r0, [r6]
	bl	usb_ep_autoconfig_ss
	subs	r3, r0, #0
	beq	.L9945
	str	r3, [r4, #156]
	ldr	r2, [r3, #8]
	mov	r1, #208
	str	r6, [r3]
	ldr	r3, [r2, #8]
	blx	r3
	cmp	r0, #0
	mov	r7, r0
	str	r0, [r4, #160]
	beq	.L9960
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	moveq	r0, #16
	beq	.L9952
	mov	r1, #208
	bl	kmem_cache_alloc
.L9952:
	str	r0, [r7]
	ldr	r3, [r4, #160]
	ldr	r2, [r3]
	cmp	r2, #0
	beq	.L9962
	str	r4, [r3, #32]
	ldr	r0, [r4, #160]
	movw	r3, #:lower16:ecm_notify_complete
	movt	r3, #:upper16:ecm_notify_complete
	ldrb	r1, [r5, #3286]	@ zero_extendqisi2
	ldrb	r2, [r5, #3298]	@ zero_extendqisi2
	str	r3, [r0, #28]
	ldr	r0, [r4, #20]
	ldrb	r3, [r5, #3310]	@ zero_extendqisi2
	strb	r1, [r5, #3322]
	strb	r2, [r5, #3334]
	strb	r1, [r5, #3358]
	ldr	r1, [r0, #24]
	ldr	r0, .L9984+8
	strb	r3, [r5, #3346]
	strb	r2, [r5, #3370]
	strb	r3, [r5, #3382]
	ldr	r5, [r1]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #8]
	beq	.L9955
	ldr	r3, [r5, #20]
	cmp	r3, #2
	bhi	.L9983
.L9954:
	movw	r2, #:lower16:ecm_open
	movw	r3, #:lower16:ecm_close
	movt	r2, #:upper16:ecm_open
	movt	r3, #:upper16:ecm_close
	mov	r5, #0
	strd	r2, [r4, #128]
	b	.L9944
.L9945:
	ldr	r3, [r4, #160]
	mvn	r5, #18
.L9947:
	cmp	r3, #0
	beq	.L9951
	ldr	r0, [r3]
	bl	kfree
	ldrd	r0, [r4, #156]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
.L9951:
	ldr	r3, [r4, #156]
	movw	r1, #:lower16:.LC532
	movt	r1, #:upper16:.LC532
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #84]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #80]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r0, [r6]
	mov	r3, r5
	ldr	r2, [r4]
	add	r0, r0, #32
	bl	dev_err
.L9944:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L9983:
	ldr	r0, .L9984+12
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #12]
	beq	.L9955
	ldr	r3, [r5, #20]
	cmp	r3, #4
	bls	.L9954
	ldr	r0, .L9984+16
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #16]
	bne	.L9954
.L9955:
	mov	r0, r4
	mvn	r5, #11
	bl	usb_free_all_descriptors
	ldr	r3, [r4, #160]
	b	.L9947
.L9962:
	mvn	r5, #11
	b	.L9947
.L9960:
	mvn	r5, #11
	b	.L9951
.L9985:
	.align	2
.L9984:
	.word	.LANCHOR1+3284
	.word	.LANCHOR1+3308
	.word	.LANCHOR1+3392
	.word	.LANCHOR1+3436
	.word	.LANCHOR1+3480
	.fnend
	.size	ecm_bind, .-ecm_bind
	.section	.rodata.str1.4
	.align	2
.LC533:
	.ascii	"<3>%s: %s: failed to allocate desc interface\000"
	.align	2
.LC534:
	.ascii	"<3>%s: %s: failed to allocate alt interface\000"
	.align	2
.LC535:
	.ascii	"<3>%s: %s: failed to autoconfig in endpoint\000"
	.align	2
.LC536:
	.ascii	"<3>%s: %s: failed to autoconfig out endpoint\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_audio_bind, %function
f_audio_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	mov	r5, r1
	movw	r4, #:lower16:.LANCHOR1
	strd	r6, [sp, #8]
	movt	r4, #:upper16:.LANCHOR1
	ldr	r6, .L10003
	strd	r8, [sp, #16]
	add	ip, r4, #3552
	movw	r7, #3576
	str	lr, [sp, #24]
	ldrb	lr, [r1, #128]	@ zero_extendqisi2
	.pad #12
	sub	sp, sp, #12
	ldr	r1, [r1, #132]
	ldrb	r2, [r0, #44]	@ zero_extendqisi2
	ldr	r3, [r5, #160]
	strh	r1, [ip]	@ movhi
	ldrb	ip, [r5, #156]	@ zero_extendqisi2
	ubfx	r1, r1, #16, #8
	cmp	r2, #15
	strh	r3, [r4, r7]	@ movhi
	str	r3, [sp, #4]
	ubfx	r3, r3, #16, #8
	strb	lr, [r4, #3539]
	strb	r3, [r6, #2]
	ldr	r6, [r0, #24]
	strb	lr, [r4, #3548]
	strb	r1, [r4, #3554]
	strb	ip, [r4, #3563]
	strb	ip, [r4, #3572]
	bhi	.L9999
	add	r3, r2, #1
	add	r1, r2, #12
	uxtb	r3, r3
	str	r5, [r0, r1, lsl #2]
	cmp	r3, #16
	strb	r2, [r4, #3582]
	strb	r3, [r0, #44]
	beq	.L9990
	add	r1, r2, #2
	mov	r7, #0
	add	r2, r3, #12
	str	r5, [r0, r2, lsl #2]
	strb	r1, [r0, #44]
	strb	r7, [r5, #240]
	ldrb	ip, [r0, #44]	@ zero_extendqisi2
	strb	r3, [r4, #8]
	strb	r3, [r4, #3594]
	strb	r3, [r4, #3606]
	cmp	ip, #15
	bhi	.L9990
	ldr	r9, .L10003+4
	add	r2, ip, #12
	add	r3, ip, #1
	str	r5, [r0, r2, lsl #2]
	mov	r2, r7
	strb	ip, [r4, #9]
	mov	r1, r9
	strb	r3, [r0, #44]
	strb	r7, [r5, #241]
	strb	ip, [r4, #3618]
	strb	ip, [r4, #3630]
	ldr	r0, [r6]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L10000
	ldr	r8, .L10003+8
	mov	r2, r7
	str	r0, [r5, #168]
	str	r6, [r0]
	str	r9, [r0, #28]
	ldr	r0, [r6]
	mov	r1, r8
	bl	usb_ep_autoconfig_ss
	subs	r7, r0, #0
	beq	.L10001
	str	r7, [r5, #164]
	add	r0, r4, #3728
	str	r6, [r7]
	ldrb	r2, [r4, #3642]	@ zero_extendqisi2
	str	r8, [r7, #28]
	ldr	r1, [r5, #20]
	ldrb	r3, [r4, #3654]	@ zero_extendqisi2
	and	r2, r2, #127
	ldr	r1, [r1, #24]
	and	r3, r3, #127
	strb	r2, [r4, #3680]
	strb	r3, [r4, #3712]
	ldr	r6, [r1]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r5, #8]
	beq	.L9993
	ldr	r3, [r6, #20]
	cmp	r3, #2
	bhi	.L10002
.L9994:
	mov	r0, #0
.L9986:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L10002:
	add	r0, r4, #3728
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r5, #12]
	ldreq	r0, [r5, #8]
	bne	.L9994
.L9993:
	bl	kfree
	ldr	r0, [r5, #12]
	bl	kfree
	ldr	r0, [r5, #16]
	bl	kfree
	mov	r3, #0
	mvn	r0, #11
	str	r3, [r7]
	b	.L9986
.L10001:
	ldr	r2, .L10003+12
	movw	r0, #:lower16:.LC536
	movt	r0, #:upper16:.LC536
	mov	r1, r2
	bl	printk
	mvn	r0, #11
	b	.L9986
.L10000:
	ldr	r2, .L10003+12
	movw	r0, #:lower16:.LC535
	movt	r0, #:upper16:.LC535
	mov	r1, r2
	bl	printk
	mvn	r0, #18
	b	.L9986
.L9990:
	ldr	r2, .L10003+12
	movw	r0, #:lower16:.LC534
	movt	r0, #:upper16:.LC534
	mov	r1, r2
	bl	printk
	mvn	r0, #18
	b	.L9986
.L9999:
	ldr	r2, .L10003+12
	movw	r0, #:lower16:.LC533
	movt	r0, #:upper16:.LC533
	mov	r1, r2
	bl	printk
	mvn	r0, #18
	b	.L9986
.L10004:
	.align	2
.L10003:
	.word	.LANCHOR1+3576
	.word	.LANCHOR1+3640
	.word	.LANCHOR1+3652
	.word	.LANCHOR2+4016
	.fnend
	.size	f_audio_bind, .-f_audio_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_bind, %function
ncm_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrb	r3, [r0, #44]	@ zero_extendqisi2
	ldr	r6, [r0, #24]
	cmp	r3, #15
	bhi	.L10006
	add	r1, r3, #12
	add	r2, r3, #1
	movw	r5, #:lower16:.LANCHOR1
	str	r4, [r0, r1, lsl #2]
	movt	r5, #:upper16:.LANCHOR1
	strb	r2, [r0, #44]
	strb	r3, [r4, #140]
	ldrb	ip, [r0, #44]	@ zero_extendqisi2
	strb	r3, [r5, #3806]
	strb	r3, [r5, #3814]
	strb	r3, [r5, #3827]
	cmp	ip, #15
	bhi	.L10006
	add	r2, ip, #12
	add	r3, ip, #1
	add	r1, r5, #3856
	str	r4, [r0, r2, lsl #2]
	mov	r2, #0
	strb	r3, [r0, #44]
	strb	ip, [r4, #141]
	strb	ip, [r5, #3828]
	strb	ip, [r5, #3834]
	strb	ip, [r5, #3846]
	ldr	r0, [r6]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L10006
	ldr	r1, .L10051
	mov	r2, #0
	str	r0, [r4, #80]
	str	r6, [r0]
	ldr	r0, [r6]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L10006
	ldr	r1, .L10051+4
	mov	r2, #0
	str	r0, [r4, #84]
	str	r6, [r0]
	ldr	r0, [r6]
	bl	usb_ep_autoconfig_ss
	subs	r3, r0, #0
	beq	.L10006
	str	r3, [r4, #156]
	ldr	r2, [r3, #8]
	mov	r1, #208
	str	r6, [r3]
	ldr	r3, [r2, #8]
	blx	r3
	cmp	r0, #0
	mov	r7, r0
	str	r0, [r4, #160]
	beq	.L10010
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	moveq	r0, #16
	beq	.L10009
	mov	r1, #208
	bl	kmem_cache_alloc
.L10009:
	str	r0, [r7]
	ldr	r3, [r4, #160]
	ldr	r2, [r3]
	cmp	r2, #0
	beq	.L10010
	str	r4, [r3, #32]
	ldr	r2, [r4, #160]
	movw	r3, #:lower16:ncm_notify_complete
	movt	r3, #:upper16:ncm_notify_complete
	ldrb	r0, [r5, #3858]	@ zero_extendqisi2
	ldrb	r1, [r5, #3870]	@ zero_extendqisi2
	str	r3, [r2, #28]
	ldr	r3, [r4, #20]
	ldrb	r2, [r5, #3882]	@ zero_extendqisi2
	strb	r0, [r5, #3894]
	ldr	r0, .L10051+8
	strb	r1, [r5, #3906]
	ldr	r3, [r3, #24]
	strb	r2, [r5, #3918]
	ldr	r5, [r3]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #8]
	beq	.L10014
	ldr	r3, [r5, #20]
	cmp	r3, #2
	bhi	.L10050
.L10012:
	movw	r2, #:lower16:ncm_open
	movw	r3, #:lower16:ncm_close
	movt	r2, #:upper16:ncm_open
	movt	r3, #:upper16:ncm_close
	mov	r5, #0
	strd	r2, [r4, #128]
	b	.L10005
.L10006:
	mvn	r5, #18
.L10008:
	ldr	r0, [r4, #8]
	bl	kfree
	ldr	r0, [r4, #12]
	bl	kfree
	ldr	r0, [r4, #16]
	bl	kfree
	ldr	r3, [r4, #160]
	cmp	r3, #0
	beq	.L10017
	ldr	r0, [r3]
	bl	kfree
	ldrd	r0, [r4, #156]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
.L10017:
	ldr	r3, [r4, #156]
	movw	r1, #:lower16:.LC532
	movt	r1, #:upper16:.LC532
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #84]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #80]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r0, [r6]
	mov	r3, r5
	ldr	r2, [r4]
	add	r0, r0, #32
	bl	dev_err
.L10005:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L10050:
	ldr	r0, .L10051+12
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #12]
	bne	.L10012
.L10014:
	mov	r0, r4
	bl	usb_free_all_descriptors
	b	.L10012
.L10010:
	mvn	r5, #11
	b	.L10008
.L10052:
	.align	2
.L10051:
	.word	.LANCHOR1+3868
	.word	.LANCHOR1+3880
	.word	.LANCHOR1+3928
	.word	.LANCHOR1+3976
	.fnend
	.size	ncm_bind, .-ncm_bind
	.section	.rodata.str1.4
	.align	2
.LC537:
	.ascii	"unable to autoconfigure all endpoints\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_bind, %function
fsg_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r0, #24]
	ldr	r6, [r3]
	str	r6, [r1, #76]
	ldrb	r3, [r0, #44]	@ zero_extendqisi2
	cmp	r3, #15
	bhi	.L10062
	add	r2, r3, #1
	mov	r4, r1
	ldr	r1, .L10072
	add	ip, r3, #12
	movw	r5, #:lower16:.LANCHOR1
	movt	r5, #:upper16:.LANCHOR1
	str	r4, [r0, ip, lsl #2]
	strb	r2, [r0, #44]
	mov	r2, #0
	mov	r0, r6
	strh	r3, [r4, #84]	@ movhi
	strb	r3, [r5, #2210]
	bl	usb_ep_autoconfig_ss
	subs	r3, r0, #0
	beq	.L10056
	ldr	ip, [r4, #80]
	mov	r0, r6
	mov	r2, #0
	ldr	r1, .L10072+4
	str	ip, [r3]
	str	r3, [r4, #92]
	bl	usb_ep_autoconfig_ss
	subs	r3, r0, #0
	beq	.L10056
	ldr	r1, [r4, #80]
	movw	r2, #:lower16:.LANCHOR4
	mov	ip, #15
	movt	r2, #:upper16:.LANCHOR4
	sub	r0, r2, #4064
	sub	r0, r0, #8
	str	r1, [r3]
	ldr	lr, [r4, #20]
	ldrb	r1, [r5, #4026]	@ zero_extendqisi2
	strb	ip, [r2, #-4078]
	str	r3, [r4, #96]
	ldrb	r3, [r5, #4038]	@ zero_extendqisi2
	ldr	r2, [lr, #24]
	strb	r1, [r5, #4050]
	strb	r3, [r5, #4062]
	strb	r1, [r5, #4074]
	strb	ip, [r5, #4086]
	strb	r3, [r5, #4094]
	ldr	r5, [r2]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #8]
	beq	.L10058
	ldr	r3, [r5, #20]
	cmp	r3, #2
	bhi	.L10071
.L10059:
	mov	r0, #0
.L10053:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L10071:
	ldr	r0, .L10072+8
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #12]
	beq	.L10070
	ldr	r3, [r5, #20]
	cmp	r3, #4
	bls	.L10059
	ldr	r0, .L10072+12
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #16]
	bne	.L10059
.L10070:
	ldr	r0, [r4, #8]
.L10058:
	bl	kfree
	ldr	r0, [r4, #12]
	bl	kfree
	ldr	r0, [r4, #16]
	bl	kfree
.L10056:
	ldr	r0, [r4, #76]
	movw	r1, #:lower16:.LC537
	movt	r1, #:upper16:.LC537
	add	r0, r0, #32
	bl	dev_err
	movw	r0, #65012
	movt	r0, 65535
	b	.L10053
.L10062:
	mvn	r0, #18
	b	.L10053
.L10073:
	.align	2
.L10072:
	.word	.LANCHOR1+4024
	.word	.LANCHOR1+4036
	.word	.LANCHOR4-4056
	.word	.LANCHOR4-4040
	.fnend
	.size	fsg_bind, .-fsg_bind
	.section	.rodata.str1.4
	.align	2
.LC538:
	.ascii	"<3>%s: unable to allocate ifc id, err:%d\000"
	.align	2
.LC539:
	.ascii	"<3>%s: usb epnotify autoconfig failed\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_function_bind, %function
ccid_function_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldrb	r3, [r0, #44]	@ zero_extendqisi2
	ldr	r5, [r0, #24]
	cmp	r3, #15
	bhi	.L10090
	add	r1, r3, #12
	movw	r6, #:lower16:.LANCHOR4
	add	r2, r3, #1
	movt	r6, #:upper16:.LANCHOR4
	str	r4, [r0, r1, lsl #2]
	sub	r1, r6, #4000
	sub	r1, r1, #4
	strb	r3, [r6, #-4014]
	strb	r2, [r0, #44]
	mov	r2, #0
	str	r3, [r4, #80]
	ldr	r0, [r5]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L10091
	ldr	r1, .L10094
	mov	r2, #0
	str	r0, [r4, #92]
	str	r5, [r0]
	ldr	r0, [r5]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L10092
	ldr	r1, .L10094+4
	mov	r2, #0
	str	r0, [r4, #96]
	str	r5, [r0]
	ldr	r0, [r5]
	bl	usb_ep_autoconfig_ss
	subs	r3, r0, #0
	beq	.L10093
	ldr	r0, .L10094+8
	str	r3, [r4, #100]
	str	r5, [r3]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #8]
	beq	.L10081
	ldr	r3, [r5]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bhi	.L10083
.L10085:
	mov	r0, #0
.L10074:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L10083:
	ldrb	r1, [r6, #-3990]	@ zero_extendqisi2
	ldrb	r2, [r6, #-3978]	@ zero_extendqisi2
	ldrb	r3, [r6, #-4002]	@ zero_extendqisi2
	ldr	r0, .L10094+12
	strb	r1, [r6, #-3966]
	strb	r2, [r6, #-3954]
	strb	r3, [r6, #-3942]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #12]
	bne	.L10085
.L10081:
	ldr	r2, [r4, #100]
	mov	r3, #0
	str	r3, [r2]
	str	r3, [r4, #100]
.L10079:
	ldr	r2, [r4, #96]
	mov	r3, #0
	mvn	r0, #18
	str	r3, [r2]
	str	r3, [r4, #96]
	b	.L10074
.L10093:
	movw	r0, #:lower16:.LC524
	ldr	r1, .L10094+16
	movt	r0, #:upper16:.LC524
	bl	printk
	b	.L10081
.L10092:
	movw	r0, #:lower16:.LC522
	ldr	r1, .L10094+16
	movt	r0, #:upper16:.LC522
	bl	printk
	b	.L10079
.L10091:
	movw	r0, #:lower16:.LC539
	ldr	r1, .L10094+16
	movt	r0, #:upper16:.LC539
	bl	printk
	mvn	r0, #18
	b	.L10074
.L10090:
	mvn	r2, #18
	movw	r0, #:lower16:.LC538
	ldr	r1, .L10094+16
	movt	r0, #:upper16:.LC538
	str	r2, [r4, #80]
	bl	printk
	ldr	r0, [r4, #80]
	b	.L10074
.L10095:
	.align	2
.L10094:
	.word	.LANCHOR4-3992
	.word	.LANCHOR4-3980
	.word	.LANCHOR1+2096
	.word	.LANCHOR1+2120
	.word	.LANCHOR2+4032
	.fnend
	.size	ccid_function_bind, .-ccid_function_bind
	.section	.rodata.str1.4
	.align	2
.LC540:
	.ascii	"<3>qdss_bind: full-speed is not supported\012\000"
	.align	2
.LC541:
	.ascii	"<3>interface allocation error\012\000"
	.align	2
.LC542:
	.ascii	"<3>ep_autoconfig error\012\000"
	.align	2
.LC543:
	.ascii	"<3>usb_copy_descriptors error\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	qdss_bind, %function
qdss_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r0, #24]
	ldr	r6, [r3]
	ldr	r3, [r6, #20]
	cmp	r3, #2
	bls	.L10135
	ldrb	r2, [r0, #44]	@ zero_extendqisi2
	cmp	r2, #15
	bhi	.L10100
	mov	r4, r1
	add	r3, r2, #1
	add	r1, r2, #12
	movw	r5, #:lower16:.LANCHOR4
	movt	r5, #:upper16:.LANCHOR4
	str	r4, [r0, r1, lsl #2]
	strb	r3, [r0, #44]
	strb	r2, [r4, #81]
	ldrb	r3, [r0, #44]	@ zero_extendqisi2
	strb	r2, [r5, #-3930]
	cmp	r3, #15
	bhi	.L10100
	add	r1, r3, #12
	add	ip, r3, #1
	ldr	r2, .L10138
	str	r4, [r0, r1, lsl #2]
	sub	r1, r5, #3888
	sub	r1, r1, #12
	strb	ip, [r0, #44]
	mov	r0, r6
	strb	r3, [r4, #80]
	strb	r3, [r5, #-3918]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L10103
	sub	r2, r5, #3888
	str	r0, [r4, #100]
	add	r1, r2, #8
	str	r4, [r0]
	mov	r0, r6
	bl	usb_ep_autoconfig_ss
	subs	r3, r0, #0
	beq	.L10103
	ldr	r2, .L10138+4
	mov	r0, r6
	str	r3, [r4, #96]
	str	r4, [r3]
	add	r1, r2, #8
	bl	usb_ep_autoconfig_ss
	subs	r3, r0, #0
	beq	.L10103
	str	r3, [r4, #92]
	ldr	r0, .L10138+8
	str	r4, [r3]
	ldrb	r1, [r5, #-3898]	@ zero_extendqisi2
	ldrb	r2, [r5, #-3878]	@ zero_extendqisi2
	ldrb	r3, [r5, #-3858]	@ zero_extendqisi2
	strb	r1, [r5, #-3846]
	strb	r2, [r5, #-3834]
	strb	r3, [r5, #-3822]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #12]
	beq	.L10106
	ldr	r3, [r6, #20]
	cmp	r3, #4
	bhi	.L10136
.L10105:
	movw	r0, #:lower16:.LC289
	ldr	r1, [r6, #28]
	movt	r0, #:upper16:.LC289
	bl	strcmp
	subs	r5, r0, #0
	movne	r5, #0
	beq	.L10137
.L10096:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L10136:
	ldr	r0, .L10138+12
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #16]
	bne	.L10105
.L10106:
	movw	r0, #:lower16:.LC543
	movt	r0, #:upper16:.LC543
	bl	printk
.L10102:
	ldr	r3, [r4, #96]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #92]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #100]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r6, #20]
	cmp	r3, #4
	bls	.L10110
	ldr	r0, [r4, #16]
	cmp	r0, #0
	beq	.L10114
	bl	kfree
	ldr	r3, [r6, #20]
.L10110:
	cmp	r3, #2
	bls	.L10113
.L10114:
	ldr	r0, [r4, #12]
	cmp	r0, #0
	beq	.L10113
	movw	r5, #65012
	movt	r5, 65535
	bl	kfree
	b	.L10096
.L10137:
	mov	r1, #1
	ldr	r0, [r4, #100]
	bl	dwc3_tx_fifo_resize_request
	b	.L10096
.L10135:
	movw	r0, #:lower16:.LC540
	movw	r5, #65012
	movt	r0, #:upper16:.LC540
	movt	r5, 65535
	bl	printk
	b	.L10096
.L10113:
	movw	r5, #65012
	movt	r5, 65535
	b	.L10096
.L10103:
	movw	r0, #:lower16:.LC542
	movt	r0, #:upper16:.LC542
	bl	printk
	b	.L10102
.L10100:
	movw	r0, #:lower16:.LC541
	mvn	r5, #18
	movt	r0, #:upper16:.LC541
	bl	printk
	b	.L10096
.L10139:
	.align	2
.L10138:
	.word	.LANCHOR4-3908
	.word	.LANCHOR4-3868
	.word	.LANCHOR4-3812
	.word	.LANCHOR4-3788
	.fnend
	.size	qdss_bind, .-qdss_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_bind, %function
rmnet_mux_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r7, [r0, #24]
	str	r7, [r1, #76]
	ldrb	r3, [r0, #44]	@ zero_extendqisi2
	cmp	r3, #15
	bhi	.L10147
	movw	r6, #:lower16:.LANCHOR4
	mov	r5, r0
	add	r2, r3, #12
	add	r0, r3, #1
	mov	r4, r1
	movt	r6, #:upper16:.LANCHOR4
	sub	r8, r6, #3728
	str	r1, [r5, r2, lsl #2]
	mov	r2, #0
	sub	r1, r8, #12
	strb	r3, [r6, #-3750]
	strb	r0, [r5, #44]
	strb	r3, [r4, #348]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L10143
	mov	r1, r8
	mov	r2, #0
	str	r7, [r0]
	str	r0, [r4, #84]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L10143
	mov	r2, #0
	add	r1, r8, #12
	str	r7, [r0]
	str	r0, [r4, #80]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L10143
	str	r7, [r0]
	str	r0, [r4, #88]
	ldr	r3, [r5, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bls	.L10144
	ldrb	r1, [r6, #-3738]	@ zero_extendqisi2
	ldrb	r2, [r6, #-3726]	@ zero_extendqisi2
	ldrb	r3, [r6, #-3714]	@ zero_extendqisi2
	strb	r1, [r6, #-3702]
	strb	r2, [r6, #-3690]
	strb	r3, [r6, #-3678]
.L10144:
	mov	r2, #0
	add	r1, r4, #248
	ldr	r0, [r4, #368]
	bl	queue_delayed_work
	mov	r0, #0
	b	.L10140
.L10143:
	ldr	r3, [r4, #88]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #80]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #84]
	cmp	r3, #0
	beq	.L10147
	mov	r2, #0
	mvn	r0, #18
	str	r2, [r3]
.L10140:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L10147:
	mvn	r0, #18
	b	.L10140
	.fnend
	.size	rmnet_mux_bind, .-rmnet_mux_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_midi_bind, %function
f_midi_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 504
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	r3, #:lower16:.LANCHOR4
	mov	r4, r1
	strd	r6, [sp, #8]
	movt	r3, #:upper16:.LANCHOR4
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r2, [r0, #24]
	.pad #508
	sub	sp, sp, #508
	strd	r2, [sp, #8]
	ldrb	r3, [r3, #-3668]	@ zero_extendqisi2
	str	r0, [sp, #16]
	cmp	r3, #0
	bne	.L10168
	ldrb	r3, [r2, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L10171
	add	r3, r3, #1
	ldr	r2, [sp, #12]
	uxtb	r3, r3
	strb	r3, [r2, #-3668]
	ldr	r2, [sp, #8]
	strb	r3, [r2, #48]
.L10168:
	ldr	r0, [sp, #16]
	ldrb	r2, [r0, #44]	@ zero_extendqisi2
	cmp	r2, #15
	bhi	.L10171
	add	r3, r2, #1
	ldr	lr, [sp, #12]
	add	r1, r2, #12
	uxtb	r3, r3
	mov	ip, r0
	str	r4, [r0, r1, lsl #2]
	cmp	r3, #16
	strb	r2, [lr, #-3650]
	strb	r3, [r0, #44]
	beq	.L10171
	ldr	r5, [sp, #8]
	add	r0, r2, #2
	add	r1, r3, #12
	mov	r2, #0
	str	r4, [ip, r1, lsl #2]
	ldr	r1, .L10204
	strb	r3, [lr, #-3638]
	strb	r3, [lr, #-3620]
	strb	r0, [ip, #44]
	ldr	r0, [r5]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	str	r0, [r4, #80]
	beq	.L10172
	ldr	r6, .L10204
	mov	r2, #0
	str	r5, [r0]
	ldr	r0, [r5]
	add	r1, r6, #12
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	str	r0, [r4, #84]
	beq	.L10184
	movw	r1, #32976
	str	r5, [r0]
	mov	r0, #292
	bl	__kmalloc
	subs	fp, r0, #0
	beq	.L10185
	sub	r2, r6, #36
	sub	r1, r6, #12
	sub	r3, r6, #24
	mov	r0, r6
	str	r2, [fp]
	add	r2, r6, #24
	stmib	fp, {r1, r3}
	ldr	r3, [r4, #312]
	ldr	r1, [r4, #316]
	str	r2, [fp, #12]
	ldr	r7, [r4, #312]
	add	r3, r3, r1
	rsb	r3, r3, r3, lsl #4
	cmp	r7, #0
	add	r3, r3, #7
	strh	r3, [r6, #29]	@ unaligned
	beq	.L10186
	add	lr, r0, #35
	add	r0, fp, #16
	mov	r2, #1
	mov	r1, #0
	movw	r10, #9222
	movw	r9, #9225
	str	r0, [sp, #4]
	add	r0, fp, #20
	mov	r6, r2
	str	fp, [sp, #20]
	mov	r5, r1
	movt	r10, 514
	movt	r9, 259
	add	ip, sp, #24
	add	r3, sp, #360
	mov	fp, r0
.L10175:
	ldr	r7, [sp, #4]
	str	r10, [ip]	@ unaligned
	add	r0, r2, #5
	strb	r2, [ip, #4]
	add	r2, r2, #2
	strb	r5, [ip, #5]
	sub	r8, r2, #1
	str	ip, [r7, r1, lsl #3]
	ldrb	r7, [ip, #4]	@ zero_extendqisi2
	add	ip, ip, #6
	str	r9, [r3]	@ unaligned
	strb	r8, [r3, #4]
	strb	r6, [r3, #5]
	strb	r7, [r3, #6]
	strb	r6, [r3, #7]
	strb	r5, [r3, #8]
	str	r3, [fp, r1, lsl #3]
	ldrb	r7, [r3, #4]	@ zero_extendqisi2
	add	r1, r1, #1
	add	r3, r3, #9
	strb	r7, [lr, #1]!
	ldr	r7, [r4, #312]
	cmp	r7, r1
	bhi	.L10175
	lsl	r3, r0, #2
	ldr	fp, [sp, #20]
	add	r8, r3, #4
	add	r6, r3, #8
.L10174:
	ldr	ip, [r4, #316]
	cmp	ip, #0
	beq	.L10187
	ldr	r3, .L10204+4
	mov	ip, #0
	movw	r10, #9222
	movw	r9, #9225
	mov	r6, ip
	movt	r10, 258
	movt	r9, 515
	add	r1, sp, #120
	mov	lr, r3
	add	r3, sp, #216
	sub	r5, lr, #9
	str	lr, [sp, #20]
	sub	lr, fp, #4
	str	lr, [sp, #4]
	mov	lr, #1
.L10177:
	str	r10, [r1]	@ unaligned
	add	ip, ip, #1
	strb	r2, [r1, #4]
	add	r2, r2, #2
	strb	r6, [r1, #5]
	sub	r8, r2, #1
	str	r1, [fp, r0, lsl #2]
	ldrb	r7, [r1, #4]	@ zero_extendqisi2
	add	r0, r0, #2
	str	r9, [r3]	@ unaligned
	add	r1, r1, #6
	strb	r8, [r3, #4]
	strb	lr, [r3, #5]
	strb	r7, [r3, #6]
	ldr	r7, [sp, #4]
	strb	lr, [r3, #7]
	strb	r6, [r3, #8]
	str	r3, [r7, r0, lsl #2]
	ldrb	r7, [r1, #-2]	@ zero_extendqisi2
	add	r3, r3, #9
	strb	r7, [r5, #1]!
	ldr	r7, [r4, #316]
	cmp	r7, ip
	bhi	.L10177
	uxtb	ip, r7
	lsl	r3, r0, #2
	ldr	r7, [r4, #312]
	add	r1, ip, #4
	add	r8, r3, #4
	uxtb	r1, r1
	add	r6, r3, #8
.L10176:
	ldr	r9, [sp, #12]
	uxtb	r7, r7
	add	r2, r0, #3
	add	r0, r7, #4
	strb	r1, [r9, #-3584]
	add	r1, fp, r2, lsl #2
	strb	ip, [r9, #-3581]
	ldr	ip, .L10204+8
	strb	r0, [r9, #-3564]
	mov	r0, fp
	strb	r7, [r9, #-3561]
	sub	r5, ip, #4
	ldr	ip, [sp, #20]
	str	r5, [fp, r3]
	sub	r3, r5, #12
	sub	lr, ip, #12
	mov	ip, #0
	str	lr, [fp, r8]
	str	r3, [fp, r6]
	add	r3, r5, #20
	str	r3, [fp, r2, lsl #2]
	str	ip, [r1, #4]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #8]
	beq	.L10178
	ldr	r3, [sp, #16]
	ldr	r3, [r3, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bhi	.L10179
.L10181:
	mov	r0, fp
	mov	r5, #0
	bl	kfree
.L10167:
	mov	r0, r5
	add	sp, sp, #508
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L10172:
	ldr	r3, [r4, #84]
	mvn	r5, #18
	cmp	r3, #0
	beq	.L10182
.L10183:
	mov	r2, #0
	str	r2, [r3]
.L10173:
	ldr	r3, [r4, #80]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
.L10182:
	ldr	r3, [sp, #8]
	movw	r1, #:lower16:.LC532
	movt	r1, #:upper16:.LC532
	ldr	r2, [r4]
	ldr	r0, [r3]
	mov	r3, r5
	add	r0, r0, #32
	bl	dev_err
	b	.L10167
.L10184:
	mvn	r5, #18
	b	.L10173
.L10179:
	ldr	r1, [sp, #16]
	mov	r2, #512
	mov	r0, fp
	ldr	ip, .L10204
	strh	r2, [r5, #4]	@ movhi
	ldrb	r3, [r1, #45]	@ zero_extendqisi2
	strh	r2, [ip, #4]	@ movhi
	orr	r3, r3, #2
	strb	r3, [r1, #45]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #12]
	bne	.L10181
.L10178:
	mov	r0, fp
	mvn	r5, #18
	bl	kfree
	ldr	r0, [r4, #12]
	bl	kfree
.L10170:
	ldr	r3, [r4, #84]
	cmp	r3, #0
	bne	.L10183
	b	.L10173
.L10171:
	mvn	r5, #18
	b	.L10170
.L10185:
	mvn	r5, #11
	b	.L10170
.L10187:
	ldr	r2, .L10204+4
	mov	r1, #4
	str	r2, [sp, #20]
	b	.L10176
.L10186:
	mov	r6, #24
	mov	r8, #20
	mov	r3, #16
	mov	r0, #4
	mov	r2, #1
	b	.L10174
.L10205:
	.align	2
.L10204:
	.word	.LANCHOR4-3616
	.word	.LANCHOR4-3552
	.word	.LANCHOR4-3600
	.fnend
	.size	f_midi_bind, .-f_midi_bind
	.section	.rodata.str1.4
	.align	2
.LC544:
	.ascii	"<3>%s: unable to allocate memory for notify req\012"
	.ascii	"\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	frmnet_bind, %function
frmnet_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrb	r3, [r0, #44]	@ zero_extendqisi2
	ldr	r7, [r0, #24]
	cmp	r3, #15
	bhi	.L10244
	movw	r6, #:lower16:.LANCHOR4
	add	r2, r3, #12
	add	r1, r3, #1
	movt	r6, #:upper16:.LANCHOR4
	sub	r5, r6, #3520
	str	r4, [r0, r2, lsl #2]
	mov	r2, #0
	strb	r3, [r6, #-3542]
	strb	r1, [r0, #44]
	sub	r1, r5, #12
	str	r3, [r4, #104]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L10245
	mov	r1, r5
	mov	r2, #0
	str	r0, [r4, #76]
	str	r7, [r0]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L10246
	ldr	r1, .L10250
	mov	r2, #0
	str	r0, [r4, #80]
	str	r7, [r0]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	subs	r8, r0, #0
	beq	.L10247
	str	r8, [r4, #128]
	ldr	r3, [r8, #8]
	mov	r1, #208
	str	r7, [r8]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r5, r0, #0
	beq	.L10214
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	moveq	r3, #16
	streq	r3, [r5]
	beq	.L10216
	mov	r1, #208
	bl	kmem_cache_alloc
	cmp	r0, #0
	str	r0, [r5]
	bne	.L10216
	ldr	r3, [r8, #8]
	mov	r1, r5
	mov	r0, r8
	ldr	r3, [r3, #12]
	blx	r3
.L10214:
	mvn	r3, #11
	str	r3, [r4, #132]
.L10228:
	movw	r0, #:lower16:.LC544
	ldr	r1, .L10250+4
	movt	r0, #:upper16:.LC544
	bl	printk
.L10218:
	ldr	r2, [r4, #128]
	mov	r3, #0
	mvn	r0, #11
	str	r3, [r2]
	str	r3, [r4, #128]
.L10213:
	ldr	r2, [r4, #80]
	mov	r3, #0
	str	r3, [r2]
	str	r3, [r4, #80]
.L10211:
	ldr	r2, [r4, #76]
	mov	r3, #0
	str	r3, [r2]
	str	r3, [r4, #76]
	b	.L10206
.L10216:
	mov	r3, #8
	cmn	r5, #4096
	str	r3, [r5, #4]
	str	r5, [r4, #132]
	bhi	.L10228
	movw	r3, #:lower16:frmnet_notify_complete
	ldr	r0, .L10250+8
	movt	r3, #:upper16:frmnet_notify_complete
	str	r3, [r5, #28]
	ldr	r3, [r4, #132]
	str	r4, [r3, #32]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #8]
	beq	.L10219
	ldr	r3, [r7]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bhi	.L10248
.L10220:
	mov	r0, #0
.L10206:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L10248:
	ldrb	r1, [r6, #-3530]	@ zero_extendqisi2
	ldrb	r2, [r6, #-3518]	@ zero_extendqisi2
	ldrb	r3, [r6, #-3506]	@ zero_extendqisi2
	ldr	r0, .L10250+12
	strb	r1, [r6, #-3474]
	strb	r2, [r6, #-3462]
	strb	r3, [r6, #-3450]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #12]
	beq	.L10221
	ldr	r3, [r7]
	ldr	r3, [r3, #20]
	cmp	r3, #4
	bls	.L10220
	ldrb	r1, [r6, #-3530]	@ zero_extendqisi2
	ldrb	r2, [r6, #-3518]	@ zero_extendqisi2
	ldrb	r3, [r6, #-3506]	@ zero_extendqisi2
	ldr	r0, .L10250+16
	strb	r1, [r6, #-3418]
	strb	r2, [r6, #-3406]
	strb	r3, [r6, #-3394]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #16]
	bne	.L10220
.L10223:
	ldr	r0, [r4, #12]
	cmp	r0, #0
	beq	.L10226
.L10249:
	bl	kfree
.L10226:
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L10227
	bl	kfree
.L10227:
	ldr	r5, [r4, #132]
	cmp	r5, #0
	beq	.L10218
	ldr	r6, [r4, #128]
	ldr	r0, [r5]
	bl	kfree
	mov	r1, r5
	ldr	r3, [r6, #8]
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
	b	.L10218
.L10219:
	ldr	r0, [r4, #16]
	cmp	r0, #0
	beq	.L10223
.L10229:
	bl	kfree
	ldr	r0, [r4, #12]
	cmp	r0, #0
	bne	.L10249
	b	.L10226
.L10221:
	ldr	r0, [r4, #16]
	cmp	r0, #0
	bne	.L10229
	b	.L10226
.L10246:
	movw	r0, #:lower16:.LC524
	ldr	r1, .L10250+4
	movt	r0, #:upper16:.LC524
	bl	printk
	mvn	r0, #18
	b	.L10211
.L10245:
	movw	r0, #:lower16:.LC522
	ldr	r1, .L10250+4
	movt	r0, #:upper16:.LC522
	bl	printk
	mvn	r0, #18
	b	.L10206
.L10247:
	movw	r0, #:lower16:.LC539
	ldr	r1, .L10250+4
	movt	r0, #:upper16:.LC539
	bl	printk
	mvn	r0, #18
	b	.L10213
.L10244:
	mvn	r2, #18
	movw	r0, #:lower16:.LC538
	ldr	r1, .L10250+4
	movt	r0, #:upper16:.LC538
	str	r2, [r4, #104]
	bl	printk
	ldr	r0, [r4, #104]
	b	.L10206
.L10251:
	.align	2
.L10250:
	.word	.LANCHOR4-3508
	.word	.LANCHOR2+4052
	.word	.LANCHOR4-3496
	.word	.LANCHOR4-3440
	.word	.LANCHOR4-3384
	.fnend
	.size	frmnet_bind, .-frmnet_bind
	.section	.rodata.str1.4
	.align	2
.LC545:
	.ascii	"<6>%s: GPS(%d) %s Speed\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gps_bind, %function
gps_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrb	r3, [r0, #44]	@ zero_extendqisi2
	ldr	r8, [r0, #24]
	cmp	r3, #15
	bhi	.L10291
	add	r2, r3, #12
	movw	r6, #:lower16:.LANCHOR4
	movt	r6, #:upper16:.LANCHOR4
	add	ip, r3, #1
	str	r1, [r0, r2, lsl #2]
	mov	r2, #0
	sub	r1, r6, #3328
	sub	r1, r1, #12
	strb	r3, [r6, #-3350]
	strb	ip, [r0, #44]
	str	r2, [r4, #76]
	str	r2, [r4, #80]
	str	r3, [r4, #108]
	ldr	r0, [r8]
	bl	usb_ep_autoconfig_ss
	subs	r7, r0, #0
	beq	.L10292
	str	r7, [r4, #128]
	ldr	r3, [r7, #8]
	mov	r1, #208
	str	r8, [r7]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r5, r0, #0
	beq	.L10256
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	moveq	r3, #16
	streq	r3, [r5]
	beq	.L10258
	mov	r1, #208
	bl	kmem_cache_alloc
	cmp	r0, #0
	str	r0, [r5]
	bne	.L10258
	ldr	r3, [r7, #8]
	mov	r1, r5
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
.L10256:
	mvn	r3, #11
	str	r3, [r4, #132]
.L10273:
	movw	r0, #:lower16:.LC544
	ldr	r1, .L10293
	movt	r0, #:upper16:.LC544
	bl	printk
	b	.L10260
.L10258:
	mov	r3, #8
	cmn	r5, #4096
	str	r3, [r5, #4]
	str	r5, [r4, #132]
	bhi	.L10273
	movw	r3, #:lower16:gps_notify_complete
	ldr	r0, .L10293+4
	movt	r3, #:upper16:gps_notify_complete
	str	r3, [r5, #28]
	ldr	r3, [r4, #132]
	str	r4, [r3, #32]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #8]
	beq	.L10261
	ldr	r3, [r8]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bls	.L10262
	ldrb	r3, [r6, #-3338]	@ zero_extendqisi2
	ldr	r0, .L10293+8
	strb	r3, [r6, #-3314]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #12]
	beq	.L10263
	ldr	r3, [r8]
	ldr	r2, [r3, #20]
	cmp	r2, #4
	bls	.L10267
	ldrb	r3, [r6, #-3338]	@ zero_extendqisi2
	ldr	r0, .L10293+12
	strb	r3, [r6, #-3290]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #16]
	ldrne	r3, [r8]
	bne	.L10267
.L10268:
	ldr	r0, [r4, #12]
	cmp	r0, #0
	beq	.L10271
	bl	kfree
.L10271:
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L10272
	bl	kfree
.L10272:
	ldr	r5, [r4, #132]
	cmp	r5, #0
	beq	.L10260
	ldr	r6, [r4, #128]
	ldr	r0, [r5]
	bl	kfree
	mov	r1, r5
	ldr	r3, [r6, #8]
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
.L10260:
	ldr	r2, [r4, #128]
	mov	r3, #0
	mvn	r0, #11
	str	r3, [r2]
	str	r3, [r4, #128]
.L10252:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L10263:
	ldr	r0, [r4, #16]
	cmp	r0, #0
	beq	.L10271
.L10274:
	bl	kfree
	b	.L10268
.L10261:
	ldr	r0, [r4, #16]
	cmp	r0, #0
	bne	.L10274
	b	.L10268
.L10291:
	mvn	r2, #18
	movw	r0, #:lower16:.LC538
	ldr	r1, .L10293
	movt	r0, #:upper16:.LC538
	str	r2, [r4, #108]
	bl	printk
	ldr	r0, [r4, #108]
	b	.L10252
.L10267:
	ldr	r0, [r3, #20]
	movw	r1, #:lower16:.LC521
	movw	r3, #:lower16:.LC520
	ldrb	r2, [r4, #104]	@ zero_extendqisi2
	movt	r1, #:upper16:.LC521
	movt	r3, #:upper16:.LC520
	cmp	r0, #2
	movls	r3, r1
.L10265:
	movw	r0, #:lower16:.LC545
	ldr	r1, .L10293
	movt	r0, #:upper16:.LC545
	bl	printk
	mov	r0, #0
	b	.L10252
.L10292:
	movw	r0, #:lower16:.LC539
	ldr	r1, .L10293
	movt	r0, #:upper16:.LC539
	bl	printk
	mvn	r0, #18
	b	.L10252
.L10262:
	movw	r3, #:lower16:.LC521
	ldrb	r2, [r4, #104]	@ zero_extendqisi2
	movt	r3, #:upper16:.LC521
	b	.L10265
.L10294:
	.align	2
.L10293:
	.word	.LANCHOR2+4064
	.word	.LANCHOR4-3328
	.word	.LANCHOR4-3304
	.word	.LANCHOR4-3280
	.fnend
	.size	gps_bind, .-gps_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gser_bind, %function
gser_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldrb	r3, [r0, #44]	@ zero_extendqisi2
	ldr	r7, [r0, #24]
	cmp	r3, #15
	bhi	.L10298
	movw	r6, #:lower16:.LANCHOR4
	mov	r5, r0
	add	r2, r3, #12
	add	r0, r3, #1
	movt	r6, #:upper16:.LANCHOR4
	sub	r1, r6, #3248
	str	r4, [r5, r2, lsl #2]
	mov	r2, #0
	sub	r1, r1, #4
	strb	r3, [r6, #-3262]
	strb	r0, [r5, #44]
	strb	r3, [r4, #136]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L10298
	ldr	r1, .L10341
	mov	r2, #0
	str	r0, [r4, #80]
	str	r7, [r0]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L10298
	ldr	r1, .L10341+4
	mov	r2, #0
	str	r0, [r4, #84]
	str	r7, [r0]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	subs	r8, r0, #0
	beq	.L10298
	str	r8, [r4, #152]
	ldr	r3, [r8, #8]
	mov	r1, #208
	str	r7, [r8]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r9, r0, #0
	beq	.L10299
	mov	r2, #10
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	str	r2, [r9, #4]
	ldr	r0, [r3, #24]
	cmp	r0, #0
	moveq	r3, #16
	streq	r3, [r9]
	beq	.L10301
	mov	r1, #208
	bl	kmem_cache_alloc
	cmp	r0, #0
	mov	r10, r0
	str	r0, [r9]
	bne	.L10301
	ldr	r3, [r8, #8]
	mov	r1, r9
	mov	r0, r8
	ldr	r3, [r3, #12]
	blx	r3
	str	r10, [r4, #156]
.L10302:
	mvn	r5, #18
.L10309:
	ldr	r3, [r4, #152]
	movw	r1, #:lower16:.LC532
	movt	r1, #:upper16:.LC532
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #84]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #80]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r0, [r7]
	mov	r3, r5
	ldr	r2, [r4]
	add	r0, r0, #32
	bl	dev_err
.L10295:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L10298:
	mvn	r5, #18
.L10297:
	ldr	r6, [r4, #156]
	cmp	r6, #0
	beq	.L10309
	ldr	r8, [r4, #152]
	ldr	r0, [r6]
	bl	kfree
	mov	r1, r6
	ldr	r3, [r8, #8]
	mov	r0, r8
	ldr	r3, [r3, #12]
	blx	r3
	b	.L10309
.L10301:
	movw	r3, #:lower16:gser_notify_complete
	str	r9, [r4, #156]
	ldrb	r2, [r6, #-3238]	@ zero_extendqisi2
	movt	r3, #:upper16:gser_notify_complete
	ldrb	r1, [r6, #-3250]	@ zero_extendqisi2
	str	r3, [r9, #28]
	ldr	r3, [r4, #156]
	strb	r1, [r6, #-3070]
	strb	r2, [r6, #-3058]
	str	r4, [r3, #32]
	ldr	r3, [r5, #24]
	strb	r1, [r6, #-3046]
	strb	r2, [r6, #-3034]
	ldr	r2, [r3]
	ldr	r2, [r2, #20]
	cmp	r2, #2
	bhi	.L10313
.L10303:
	ldr	r3, [r4, #20]
	ldr	r0, .L10341+8
	ldr	r3, [r3, #24]
	ldr	r5, [r3]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #8]
	beq	.L10304
	ldr	r3, [r5, #20]
	cmp	r3, #2
	bhi	.L10340
.L10305:
	mov	r5, #0
	b	.L10295
.L10313:
	ldrb	r2, [r6, #-3226]	@ zero_extendqisi2
	strb	r2, [r6, #-3214]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #4
	strbhi	r2, [r6, #-3202]
	b	.L10303
.L10340:
	ldr	r0, .L10341+12
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #12]
	beq	.L10339
	ldr	r3, [r5, #20]
	cmp	r3, #4
	bls	.L10305
	ldr	r0, .L10341+16
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #16]
	bne	.L10305
.L10339:
	ldr	r0, [r4, #8]
.L10304:
	bl	kfree
	ldr	r0, [r4, #12]
	mvn	r5, #11
	bl	kfree
	ldr	r0, [r4, #16]
	bl	kfree
	b	.L10297
.L10299:
	str	r9, [r4, #156]
	b	.L10302
.L10342:
	.align	2
.L10341:
	.word	.LANCHOR4-3240
	.word	.LANCHOR4-3228
	.word	.LANCHOR4-3192
	.word	.LANCHOR4-3156
	.word	.LANCHOR4-3120
	.fnend
	.size	gser_bind, .-gser_bind
	.section	.rodata.str1.4
	.align	2
.LC546:
	.ascii	"%s/%pK: can't bind, err %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acm_bind, %function
acm_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	lr, [sp, #24]
	ldrb	r3, [r0, #44]	@ zero_extendqisi2
	.pad #12
	sub	sp, sp, #12
	ldr	r6, [r0, #24]
	cmp	r3, #15
	bhi	.L10346
	add	r1, r3, #12
	add	r2, r3, #1
	movw	r5, #:lower16:.LANCHOR4
	str	r4, [r0, r1, lsl #2]
	movt	r5, #:upper16:.LANCHOR4
	strb	r2, [r0, #44]
	strb	r3, [r4, #136]
	ldrb	ip, [r0, #44]	@ zero_extendqisi2
	strb	r3, [r5, #-3022]
	strb	r3, [r5, #-3014]
	strb	r3, [r5, #-3001]
	cmp	ip, #15
	bhi	.L10346
	add	r2, ip, #12
	add	r3, ip, #1
	sub	r1, r5, #2976
	str	r4, [r0, r2, lsl #2]
	mov	r2, #0
	strb	ip, [r5, #-3000]
	strb	ip, [r5, #-2994]
	strb	ip, [r5, #-2980]
	strb	r3, [r0, #44]
	strb	ip, [r4, #137]
	ldr	r0, [r6]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L10346
	ldr	r1, .L10398
	mov	r2, #0
	str	r0, [r4, #80]
	str	r6, [r0]
	ldr	r0, [r6]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L10346
	ldr	r1, .L10398+4
	mov	r2, #0
	str	r0, [r4, #84]
	str	r6, [r0]
	ldr	r0, [r6]
	bl	usb_ep_autoconfig_ss
	subs	r7, r0, #0
	beq	.L10346
	str	r7, [r4, #152]
	ldr	r3, [r7, #8]
	mov	r1, #208
	str	r6, [r7]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r8, r0, #0
	beq	.L10347
	mov	r2, #10
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	str	r2, [r8, #4]
	ldr	r0, [r3, #24]
	cmp	r0, #0
	moveq	r3, #16
	streq	r3, [r8]
	beq	.L10349
	mov	r1, #208
	bl	kmem_cache_alloc
	cmp	r0, #0
	mov	r9, r0
	str	r0, [r8]
	bne	.L10349
	ldr	r3, [r7, #8]
	mov	r1, r8
	mov	r0, r7
	mvn	r5, #18
	ldr	r3, [r3, #12]
	blx	r3
	str	r9, [r4, #156]
	b	.L10345
.L10346:
	mvn	r5, #18
.L10345:
	ldr	r0, [r4, #12]
	cmp	r0, #0
	beq	.L10355
	bl	kfree
.L10355:
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L10356
	bl	kfree
.L10356:
	ldr	r7, [r4, #156]
	cmp	r7, #0
	beq	.L10357
	ldr	r8, [r4, #152]
	ldr	r0, [r7]
	bl	kfree
	mov	r1, r7
	ldr	r3, [r8, #8]
	mov	r0, r8
	ldr	r3, [r3, #12]
	blx	r3
.L10357:
	ldr	r3, [r4, #152]
	movw	r1, #:lower16:.LC546
	movt	r1, #:upper16:.LC546
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #84]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #80]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r0, [r6]
	mov	r3, r4
	str	r5, [sp]
	ldr	r2, [r4]
	add	r0, r0, #32
	bl	dev_err
.L10343:
	mov	r0, r5
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L10349:
	movw	r3, #:lower16:acm_cdc_notify_complete
	str	r8, [r4, #156]
	ldrb	r1, [r5, #-2974]	@ zero_extendqisi2
	movt	r3, #:upper16:acm_cdc_notify_complete
	ldrb	r2, [r5, #-2962]	@ zero_extendqisi2
	ldr	r0, .L10398+8
	str	r3, [r8, #28]
	ldr	r3, [r4, #156]
	strb	r1, [r5, #-2838]
	strb	r2, [r5, #-2826]
	strb	r1, [r5, #-2802]
	ldrb	r1, [r5, #-2950]	@ zero_extendqisi2
	str	r4, [r3, #32]
	ldr	r3, [r4, #20]
	strb	r1, [r5, #-2814]
	ldr	r3, [r3, #24]
	strb	r2, [r5, #-2790]
	ldr	r5, [r3]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #8]
	beq	.L10354
	ldr	r3, [r5, #20]
	cmp	r3, #2
	bhi	.L10397
.L10350:
	mov	r5, #0
	b	.L10343
.L10397:
	ldr	r0, .L10398+12
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #12]
	beq	.L10354
	ldr	r3, [r5, #20]
	cmp	r3, #4
	bls	.L10350
	ldr	r0, .L10398+16
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #16]
	bne	.L10350
.L10354:
	mov	r0, r4
	mvn	r5, #11
	bl	usb_free_all_descriptors
	b	.L10345
.L10347:
	mvn	r5, #18
	str	r8, [r4, #156]
	b	.L10345
.L10399:
	.align	2
.L10398:
	.word	.LANCHOR4-2964
	.word	.LANCHOR4-2952
	.word	.LANCHOR4-2780
	.word	.LANCHOR4-2940
	.word	.LANCHOR4-2896
	.fnend
	.size	acm_bind, .-acm_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_bind, %function
rndis_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrb	r3, [r0, #44]	@ zero_extendqisi2
	ldr	r6, [r0, #24]
	cmp	r3, #15
	bhi	.L10401
	add	r1, r3, #12
	add	r2, r3, #1
	movw	r5, #:lower16:.LANCHOR4
	str	r4, [r0, r1, lsl #2]
	movt	r5, #:upper16:.LANCHOR4
	strb	r2, [r0, #44]
	strb	r3, [r4, #140]
	ldrb	ip, [r0, #44]	@ zero_extendqisi2
	strb	r3, [r5, #-2734]
	strb	r3, [r5, #-2726]
	strb	r3, [r5, #-2713]
	cmp	ip, #15
	bhi	.L10401
	add	r2, ip, #12
	add	r3, ip, #1
	ldr	r1, .L10449
	str	r4, [r0, r2, lsl #2]
	mov	r2, #0
	strb	ip, [r5, #-2712]
	strb	ip, [r5, #-2706]
	strb	r3, [r0, #44]
	strb	ip, [r4, #141]
	ldr	r0, [r6]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L10401
	ldr	r1, .L10449+4
	mov	r2, #0
	str	r0, [r4, #80]
	str	r6, [r0]
	ldr	r0, [r6]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L10401
	mov	r2, #0
	sub	r1, r5, #2672
	str	r0, [r4, #84]
	str	r6, [r0]
	ldr	r0, [r6]
	bl	usb_ep_autoconfig_ss
	subs	r3, r0, #0
	beq	.L10401
	str	r3, [r4, #160]
	ldr	r2, [r3, #8]
	mov	r1, #208
	str	r6, [r3]
	ldr	r3, [r2, #8]
	blx	r3
	cmp	r0, #0
	mov	r7, r0
	str	r0, [r4, #164]
	beq	.L10405
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	moveq	r0, #16
	beq	.L10404
	mov	r1, #208
	bl	kmem_cache_alloc
.L10404:
	str	r0, [r7]
	ldr	r2, [r4, #164]
	ldr	r3, [r2]
	cmp	r3, #0
	beq	.L10405
	mov	r1, #8
	movw	r3, #:lower16:rndis_response_complete
	movt	r3, #:upper16:rndis_response_complete
	str	r1, [r2, #4]
	ldr	r0, [r4, #164]
	ldrb	r1, [r5, #-2694]	@ zero_extendqisi2
	ldrb	r2, [r5, #-2682]	@ zero_extendqisi2
	str	r4, [r0, #32]
	ldr	r0, [r4, #164]
	strb	r1, [r5, #-2658]
	strb	r2, [r5, #-2646]
	strb	r1, [r5, #-2622]
	str	r3, [r0, #28]
	ldr	r1, [r4, #20]
	ldrb	r3, [r5, #-2670]	@ zero_extendqisi2
	ldr	r0, .L10449+8
	strb	r2, [r5, #-2610]
	ldr	r2, [r1, #24]
	strb	r3, [r5, #-2634]
	strb	r3, [r5, #-2598]
	ldr	r7, [r2]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #8]
	beq	.L10408
	ldr	r3, [r7, #20]
	cmp	r3, #2
	bhi	.L10448
.L10407:
	movw	r3, #:lower16:.LANCHOR0
	movw	r1, #:lower16:rndis_open
	movt	r3, #:upper16:.LANCHOR0
	movw	r2, #:lower16:rndis_close
	ldrb	r0, [r3, #3717]	@ zero_extendqisi2
	movt	r1, #:upper16:rndis_open
	movt	r2, #:upper16:rndis_close
	str	r1, [r4, #128]
	str	r2, [r4, #132]
	cmp	r0, #0
	bne	.L10401
	ldr	r1, [r4, #152]
	movw	r2, #:lower16:rndis_response_available
	add	lr, r4, #142
	ldr	ip, [r5, #-2444]
	movt	r2, #:upper16:rndis_response_available
	mov	r5, #1
	str	r0, [r4, #156]
	strb	r5, [r3, #3717]
	cmp	r1, #0
	str	r0, [r3, #3724]
	moveq	r5, r1
	str	r0, [r3, #3728]
	str	lr, [r3, #3736]
	strb	ip, [r3, #3752]
	strb	r0, [r3, #3753]
	str	r2, [r3, #3760]
	str	r4, [r3, #3764]
	beq	.L10400
	ldr	r2, [r4, #148]
	cmp	r2, #0
	moveq	r5, r2
	beq	.L10400
	mov	r5, r0
	str	r2, [r3, #3748]
	str	r1, [r3, #3756]
	b	.L10400
.L10401:
	mvn	r5, #18
.L10403:
	ldr	r0, [r4, #8]
	bl	kfree
	ldr	r0, [r4, #12]
	bl	kfree
	ldr	r0, [r4, #16]
	bl	kfree
	ldr	r3, [r4, #164]
	cmp	r3, #0
	beq	.L10410
	ldr	r0, [r3]
	bl	kfree
	ldrd	r0, [r4, #160]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
.L10410:
	ldr	r3, [r4, #160]
	movw	r1, #:lower16:.LC532
	movt	r1, #:upper16:.LC532
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #84]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #80]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r0, [r6]
	mov	r3, r5
	ldr	r2, [r4]
	add	r0, r0, #32
	bl	dev_err
.L10400:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L10448:
	ldr	r0, .L10449+12
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #12]
	beq	.L10408
	ldr	r3, [r7, #20]
	cmp	r3, #4
	bls	.L10407
	ldr	r0, .L10449+16
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #16]
	bne	.L10407
.L10408:
	mov	r0, r4
	mvn	r5, #11
	bl	usb_free_all_descriptors
	b	.L10403
.L10405:
	mvn	r5, #11
	b	.L10403
.L10450:
	.align	2
.L10449:
	.word	.LANCHOR4-2696
	.word	.LANCHOR4-2684
	.word	.LANCHOR4-2588
	.word	.LANCHOR4-2544
	.word	.LANCHOR4-2500
	.fnend
	.size	rndis_bind, .-rndis_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_bind, %function
rndis_qc_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	mov	r6, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrb	r3, [r0, #44]	@ zero_extendqisi2
	ldr	r7, [r0, #24]
	cmp	r3, #15
	bhi	.L10477
	add	r1, r3, #12
	add	r2, r3, #1
	movw	r5, #:lower16:.LANCHOR4
	str	r4, [r0, r1, lsl #2]
	movt	r5, #:upper16:.LANCHOR4
	strb	r2, [r0, #44]
	strb	r3, [r4, #112]
	ldrb	r0, [r0, #44]	@ zero_extendqisi2
	strb	r3, [r5, #-2438]
	strb	r3, [r5, #-2430]
	strb	r3, [r5, #-2417]
	cmp	r0, #15
	bhi	.L10496
	add	r1, r0, #12
	add	r3, r0, #1
	mov	r2, #0
	str	r4, [r6, r1, lsl #2]
	sub	r1, r5, #2400
	strb	r0, [r5, #-2416]
	strb	r0, [r5, #-2410]
	strb	r3, [r6, #44]
	strb	r0, [r4, #113]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L10496
	ldr	r1, .L10500
	mov	r2, #0
	str	r0, [r4, #80]
	str	r7, [r0]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L10496
	ldr	r1, .L10500+4
	mov	r2, #0
	str	r0, [r4, #84]
	str	r7, [r0]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	subs	r3, r0, #0
	beq	.L10496
	str	r3, [r4, #148]
	ldr	r2, [r3, #8]
	mov	r1, #208
	str	r7, [r3]
	ldr	r3, [r2, #8]
	blx	r3
	cmp	r0, #0
	mov	r7, r0
	str	r0, [r4, #152]
	beq	.L10497
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	moveq	r0, #16
	beq	.L10458
	mov	r1, #208
	bl	kmem_cache_alloc
.L10458:
	str	r0, [r7]
	ldr	r2, [r4, #152]
	ldr	r3, [r2]
	cmp	r3, #0
	beq	.L10497
	mov	r1, #8
	movw	r3, #:lower16:rndis_qc_response_complete
	ldr	r0, .L10500+8
	movt	r3, #:upper16:rndis_qc_response_complete
	str	r1, [r2, #4]
	ldr	r2, [r4, #152]
	str	r4, [r2, #32]
	ldr	r2, [r4, #152]
	str	r3, [r2, #28]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #8]
	beq	.L10497
	ldr	r3, [r6, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bhi	.L10498
.L10461:
	movw	r2, #:lower16:.LANCHOR0
	movw	r0, #:lower16:rndis_qc_open
	movt	r2, #:upper16:.LANCHOR0
	movw	r1, #:lower16:rndis_qc_close
	ldrb	r3, [r2, #3717]	@ zero_extendqisi2
	movt	r0, #:upper16:rndis_qc_open
	movt	r1, #:upper16:rndis_qc_close
	strd	r0, [r4, #104]
	cmp	r3, #0
	bne	.L10496
	ldr	ip, [r4, #132]
	movw	r1, #:lower16:rndis_qc_response_available
	mov	lr, #1
	ldr	r5, .L10500+12
	movt	r1, #:upper16:rndis_qc_response_available
	add	r0, r4, #114
	str	r3, [r4, #136]
	strb	lr, [r2, #3717]
	cmp	ip, #0
	str	r3, [r2, #3724]
	strh	lr, [r5, #36]	@ movhi
	ldr	lr, [r4, #120]
	str	r3, [r2, #3728]
	str	r0, [r2, #3736]
	str	r1, [r2, #3760]
	str	r4, [r2, #3764]
	beq	.L10499
	ldrb	r1, [r4, #124]	@ zero_extendqisi2
	mov	r0, #2
	mov	r5, r3
	str	lr, [r2, #3748]
	strb	r1, [r2, #3752]
	strb	r0, [r2, #3753]
	str	ip, [r2, #3756]
.L10451:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L10496:
	ldr	r7, [r6, #24]
	mvn	r5, #18
.L10452:
	ldr	r3, [r7]
	ldr	r3, [r3, #20]
	cmp	r3, #4
	bls	.L10464
	ldr	r0, [r4, #16]
	cmp	r0, #0
	beq	.L10463
	bl	kfree
	ldr	r3, [r6, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
.L10464:
	cmp	r3, #2
	bhi	.L10463
.L10471:
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L10472
	bl	kfree
.L10472:
	ldr	r3, [r4, #152]
	cmp	r3, #0
	beq	.L10473
	ldr	r0, [r3]
	bl	kfree
	ldrd	r0, [r4, #148]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
.L10473:
	ldr	r3, [r4, #148]
	movw	r0, #:lower16:.LC519
	ldr	r1, .L10500+16
	movt	r0, #:upper16:.LC519
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #84]
	ldr	r2, [r3, #28]
	cmp	r2, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #80]
	ldr	r2, [r3, #28]
	cmp	r2, #0
	movne	r2, #0
	strne	r2, [r3]
	mov	r3, r5
	ldr	r2, [r4]
	bl	printk
	b	.L10451
.L10498:
	ldrb	r1, [r5, #-2398]	@ zero_extendqisi2
	ldrb	r2, [r5, #-2386]	@ zero_extendqisi2
	ldrb	r3, [r5, #-2374]	@ zero_extendqisi2
	ldr	r0, .L10500+20
	strb	r1, [r5, #-2318]
	strb	r2, [r5, #-2306]
	strb	r3, [r5, #-2294]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #12]
	beq	.L10497
	ldr	r3, [r6, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #4
	bls	.L10461
	ldrb	r1, [r5, #-2398]	@ zero_extendqisi2
	ldrb	r2, [r5, #-2386]	@ zero_extendqisi2
	ldrb	r3, [r5, #-2374]	@ zero_extendqisi2
	ldr	r0, .L10500+24
	strb	r1, [r5, #-2238]
	strb	r2, [r5, #-2226]
	strb	r3, [r5, #-2214]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #16]
	bne	.L10461
	ldr	r3, [r6, #24]
	mvn	r5, #11
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #4
	bls	.L10464
.L10463:
	ldr	r0, [r4, #12]
	cmp	r0, #0
	beq	.L10471
	bl	kfree
	b	.L10471
.L10477:
	mvn	r5, #18
	b	.L10452
.L10499:
	mov	r5, ip
	ldr	r7, [r6, #24]
	b	.L10452
.L10497:
	mvn	r5, #11
	ldr	r7, [r6, #24]
	b	.L10452
.L10501:
	.align	2
.L10500:
	.word	.LANCHOR4-2388
	.word	.LANCHOR4-2376
	.word	.LANCHOR4-2364
	.word	.LANCHOR0+3716
	.word	.LANCHOR2+4076
	.word	.LANCHOR4-2284
	.word	.LANCHOR4-2204
	.fnend
	.size	rndis_qc_bind, .-rndis_qc_bind
	.section	.rodata.str1.4
	.align	2
.LC547:
	.ascii	"android\000"
	.align	2
.LC548:
	.ascii	"<3>acc_bind() could not allocate requests\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_function_bind, %function
acc_function_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r2, #:lower16:.LC547
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r1
	movt	r2, #:upper16:.LC547
	mov	r1, #0
	strd	r6, [sp, #8]
	mov	r6, r0
	ldr	r0, .L10539
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	bl	__hid_register_driver
	subs	r5, r0, #0
	bne	.L10502
	str	r5, [r4, #1636]
	ldrb	r3, [r6, #44]	@ zero_extendqisi2
	cmp	r3, #15
	bhi	.L10505
	add	r0, r3, #12
	add	r1, r3, #1
	movw	r7, #:lower16:.LANCHOR4
	mov	r2, r5
	str	r4, [r6, r0, lsl #2]
	movt	r7, #:upper16:.LANCHOR4
	strb	r1, [r6, #44]
	ldr	r8, [r4, #76]
	sub	r1, r7, #2128
	sub	r1, r1, #8
	strb	r3, [r7, #-2146]
	ldr	r0, [r8]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L10505
	ldr	r9, .L10539+4
	mov	r2, r5
	str	r4, [r0]
	str	r0, [r4, #84]
	ldr	r0, [r8]
	mov	r1, r9
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L10505
	mov	r1, r9
	mov	r2, r5
	str	r4, [r0]
	str	r0, [r4, #88]
	ldr	r0, [r8]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L10505
	movw	r9, #:lower16:acc_complete_in
	add	r3, r4, #1648
	str	r4, [r0]
	movt	r9, #:upper16:acc_complete_in
	add	r10, r4, #80
	str	r0, [r4, #88]
	mov	r8, #4
	str	r3, [sp, #4]
.L10507:
	ldr	r0, [r4, #84]
	bl	adb_request_new.constprop.2
	mov	fp, r0
	mov	r0, r10
	cmp	fp, #0
	beq	.L10506
	str	r9, [fp, #28]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [sp, #4]
	add	ip, fp, #36
	mov	r1, r0
	ldr	r2, [r4, #1652]
	mov	r0, r10
	str	ip, [r4, #1652]
	str	r3, [fp, #36]
	str	r2, [fp, #40]
	str	ip, [r2]
	bl	_raw_spin_unlock_irqrestore
	subs	r8, r8, #1
	bne	.L10507
	ldr	r0, [r4, #88]
	bl	adb_request_new.constprop.2
	subs	r3, r0, #0
	beq	.L10506
	movw	r8, #:lower16:acc_complete_out
	movt	r8, #:upper16:acc_complete_out
	str	r8, [r3, #28]
	ldr	r0, [r4, #88]
	str	r3, [r4, #1680]
	bl	adb_request_new.constprop.2
	cmp	r0, #0
	beq	.L10506
	str	r8, [r0, #28]
	str	r0, [r4, #1684]
	ldr	r3, [r6, #24]
	ldr	r2, [r3]
	ldr	r2, [r2, #20]
	cmp	r2, #2
	bls	.L10502
	ldrb	r1, [r7, #-2134]	@ zero_extendqisi2
	ldrb	r2, [r7, #-2122]	@ zero_extendqisi2
	strb	r1, [r7, #-2110]
	strb	r2, [r7, #-2098]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #4
	bls	.L10502
	strb	r1, [r7, #-2086]
	strb	r2, [r7, #-2074]
.L10502:
	mov	r0, r5
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L10505:
	mvn	r5, #18
	b	.L10502
.L10506:
	movw	r0, #:lower16:.LC548
	mov	r6, #256
	movt	r0, #:upper16:.LC548
	mov	r5, #512
	bl	printk
.L10509:
	mov	r0, r10
	bl	_raw_spin_lock_irqsave
	ldr	r2, [sp, #4]
	mov	r1, r0
	ldr	r3, [r4, #1648]
	cmp	r3, r2
	bne	.L10538
	mov	r0, r10
	bl	_raw_spin_unlock_irqrestore
.L10513:
	ldr	r0, [r4, #1680]
	cmp	r0, #0
	beq	.L10512
	ldr	r1, [r4, #88]
	bl	acc_request_free.part.0
.L10512:
	ldr	r0, [r4, #1684]
	cmp	r0, #0
	beq	.L10514
	ldr	r1, [r4, #88]
	mvn	r5, #0
	bl	acc_request_free.part.0
	b	.L10502
.L10538:
	ldr	ip, [r3]
	sub	r7, r3, #36
	mov	r0, r10
	ldr	r2, [r3, #4]
	str	r2, [ip, #4]
	str	ip, [r2]
	str	r6, [r3]
	str	r5, [r3, #4]
	bl	_raw_spin_unlock_irqrestore
	cmp	r7, #0
	beq	.L10513
	mov	r0, r7
	ldr	r1, [r4, #84]
	bl	acc_request_free.part.0
	b	.L10509
.L10514:
	mvn	r5, #0
	b	.L10502
.L10540:
	.align	2
.L10539:
	.word	.LANCHOR1+1844
	.word	.LANCHOR4-2124
	.fnend
	.size	acc_function_bind, .-acc_function_bind
	.section	.rodata.str1.4
	.align	2
.LC549:
	.ascii	"<3>mtp_bind() could not allocate requests\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mtp_function_bind, %function
mtp_function_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r0, #24]
	str	r3, [r1, #76]
	ldrb	r3, [r0, #44]	@ zero_extendqisi2
	cmp	r3, #15
	bhi	.L10595
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r1
	add	r1, r3, #1
	strd	r6, [sp, #8]
	movw	r5, #:lower16:.LANCHOR4
	mov	r2, #0
	strd	r8, [sp, #16]
	mov	r8, r0
	add	r0, r3, #12
	strd	r10, [sp, #24]
	movt	r5, #:upper16:.LANCHOR4
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	str	r4, [r8, r0, lsl #2]
	strb	r1, [r8, #44]
	ldr	r6, [r4, #76]
	sub	r1, r5, #2048
	sub	r1, r1, #4
	strb	r3, [r5, #-2062]
	ldr	r0, [r6]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L10544
	ldr	r1, .L10598
	mov	r2, #0
	str	r4, [r0]
	str	r0, [r4, #84]
	ldr	r0, [r6]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L10544
	ldr	r1, .L10598+4
	mov	r2, #0
	str	r4, [r0]
	str	r0, [r4, #88]
	ldr	r0, [r6]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L10544
	movw	r6, #:lower16:.LANCHOR1
	str	r4, [r0]
	movt	r6, #:upper16:.LANCHOR1
	str	r0, [r4, #92]
	ldr	r1, [r6, #1840]
	cmp	r1, #16384
	bls	.L10545
	mov	r3, #4
	str	r3, [r5, #-2016]
.L10546:
	add	r3, r4, #108
	movw	fp, #:lower16:mtp_complete_in
	mov	r10, #0
	movt	fp, #:upper16:mtp_complete_in
	add	r9, r4, #80
	str	r3, [sp, #4]
	b	.L10555
.L10548:
	str	fp, [r7, #28]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [sp, #4]
	add	ip, r7, #36
	mov	r1, r0
	ldr	r2, [r4, #112]
	mov	r0, r9
	str	ip, [r4, #112]
	str	r3, [r7, #36]
	str	r2, [r7, #40]
	str	ip, [r2]
	bl	_raw_spin_unlock_irqrestore
	ldr	r2, [r5, #-2016]
	cmp	r2, r10
	bls	.L10547
	ldr	r1, [r6, #1840]
.L10555:
	ldr	r0, [r4, #84]
	add	r10, r10, #1
	bl	mtp_request_new
	mov	r7, r0
	mov	r0, r9
	cmp	r7, #0
	bne	.L10548
	ldr	r3, [r6, #1840]
	cmp	r3, #16384
	bls	.L10550
	add	r3, r4, #108
	add	r10, r4, #80
	str	r3, [sp, #4]
	b	.L10551
.L10552:
	ldr	ip, [r7]
	mov	r3, #256
	ldr	r2, [r7, #4]
	str	r2, [ip, #4]
	str	ip, [r2]
	str	r3, [r7]
	mov	r3, #512
	str	r3, [r7, #4]
	bl	_raw_spin_unlock_irqrestore
	cmp	r9, #0
	beq	.L10553
	ldr	fp, [r4, #84]
	ldr	r0, [r7, #-36]
	bl	kfree
	mov	r1, r9
	ldr	ip, [fp, #8]
	mov	r0, fp
	ldr	r2, [ip, #12]
	blx	r2
.L10551:
	mov	r0, r10
	bl	_raw_spin_lock_irqsave
	ldr	r3, [sp, #4]
	mov	r1, r0
	mov	r0, r10
	ldr	r7, [r4, #108]
	cmp	r7, r3
	sub	r9, r7, #36
	bne	.L10552
	bl	_raw_spin_unlock_irqrestore
.L10553:
	mov	r3, #16384
	mov	r2, #8
	mov	r1, r3
	str	r2, [r5, #-2016]
	str	r3, [r6, #1840]
.L10545:
	ldr	r3, [r5, #-2016]
	cmp	r3, #0
	bne	.L10546
.L10547:
	ldr	r1, [r6, #668]
	ubfx	r3, r1, #0, #10
	cmp	r3, #0
	bne	.L10596
.L10556:
	ldr	r10, [r4, #88]
	movw	r9, #:lower16:mtp_complete_out
	mov	r7, #16384
	movt	r9, #:upper16:mtp_complete_out
.L10562:
	mov	r0, r10
	bl	mtp_request_new
	subs	r3, r0, #0
	beq	.L10557
	str	r9, [r3, #28]
	ldr	r0, [r4, #88]
	str	r3, [r4, #160]
	ldr	r1, [r6, #668]
	bl	mtp_request_new
	cmp	r0, #0
	beq	.L10558
	movw	fp, #:lower16:kmalloc_caches
	movw	r10, #:lower16:mtp_complete_intr
	str	r9, [r0, #28]
	movt	fp, #:upper16:kmalloc_caches
	movt	r10, #:upper16:mtp_complete_intr
	str	r0, [r4, #164]
	mov	r7, #5
.L10559:
	ldr	r9, [r4, #92]
	mov	r1, #208
	ldr	r3, [r9, #8]
	mov	r0, r9
	ldr	r3, [r3, #8]
	blx	r3
	subs	r6, r0, #0
	mov	r1, #208
	mov	r3, #16
	beq	.L10550
	ldr	r0, [fp, #24]
	cmp	r0, #0
	streq	r3, [r6]
	beq	.L10564
	bl	kmem_cache_alloc
	cmp	r0, #0
	str	r0, [r6]
	beq	.L10597
.L10564:
	add	r9, r4, #80
	str	r10, [r6, #28]
	mov	r0, r9
	bl	_raw_spin_lock_irqsave
	ldr	r2, [r4, #120]
	add	ip, r6, #36
	add	r3, r4, #116
	mov	r1, r0
	mov	r0, r9
	str	ip, [r4, #120]
	str	r3, [r6, #36]
	str	r2, [r6, #40]
	str	ip, [r2]
	bl	_raw_spin_unlock_irqrestore
	subs	r7, r7, #1
	bne	.L10559
	ldr	r3, [r8, #24]
	ldr	r2, [r3]
	ldr	r2, [r2, #20]
	cmp	r2, #2
	movls	r0, r7
	bls	.L10541
	ldrb	r1, [r5, #-2050]	@ zero_extendqisi2
	mov	r0, r7
	ldrb	r2, [r5, #-2038]	@ zero_extendqisi2
	strb	r1, [r5, #-2010]
	strb	r2, [r5, #-1998]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #4
	bls	.L10541
	strb	r1, [r5, #-1986]
	strb	r2, [r5, #-1974]
.L10541:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L10596:
	mov	r3, #16384
	mov	r1, r3
	str	r3, [r6, #668]
	b	.L10556
.L10597:
	ldr	r3, [r9, #8]
	mov	r1, r6
	mov	r0, r9
	ldr	r3, [r3, #12]
	blx	r3
.L10550:
	movw	r0, #:lower16:.LC549
	movt	r0, #:upper16:.LC549
	bl	printk
	mvn	r0, #0
	b	.L10541
.L10544:
	mvn	r0, #18
	b	.L10541
.L10557:
	ldr	r3, [r6, #668]
	cmp	r3, #16384
	bls	.L10550
.L10594:
	ldr	r10, [r4, #88]
.L10565:
	mov	r1, #16384
	str	r7, [r6, #668]
	b	.L10562
.L10558:
	ldr	r3, [r6, #668]
	cmp	r3, #16384
	bls	.L10550
	ldr	r10, [r4, #88]
	ldr	fp, [r4, #164]
	cmp	fp, #0
	beq	.L10565
	ldr	r0, [fp]
	bl	kfree
	ldr	r3, [r10, #8]
	mov	r1, fp
	mov	r0, r10
	ldr	r3, [r3, #12]
	blx	r3
	b	.L10594
.L10595:
	mvn	r0, #18
	bx	lr
.L10599:
	.align	2
.L10598:
	.word	.LANCHOR4-2040
	.word	.LANCHOR4-2028
	.fnend
	.size	mtp_function_bind, .-mtp_function_bind
	.section	.rodata.str1.4
	.align	2
.LC550:
	.ascii	"<3>adb_bind() could not allocate requests\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_function_bind, %function
adb_function_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r0, #24]
	str	r3, [r1, #76]
	ldrb	r3, [r0, #44]	@ zero_extendqisi2
	cmp	r3, #15
	bhi	.L10626
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r1
	add	r1, r3, #1
	strd	r6, [sp, #8]
	mov	r6, r0
	add	r0, r3, #12
	strd	r8, [sp, #16]
	movw	r7, #:lower16:.LANCHOR4
	mov	r2, #0
	strd	r10, [sp, #24]
	movt	r7, #:upper16:.LANCHOR4
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	str	r4, [r6, r0, lsl #2]
	strb	r1, [r6, #44]
	ldr	r5, [r4, #76]
	sub	r1, r7, #1952
	strb	r3, [r7, #-1962]
	ldr	r0, [r5]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L10603
	ldr	r1, .L10627
	mov	r2, #0
	str	r4, [r0]
	str	r0, [r4, #84]
	ldr	r0, [r5]
	bl	usb_ep_autoconfig_ss
	subs	r3, r0, #0
	beq	.L10603
	str	r4, [r3]
	str	r3, [r4, #88]
	bl	adb_request_new.constprop.0
	cmp	r0, #0
	beq	.L10604
	movw	r3, #:lower16:adb_complete_out
	movw	r9, #:lower16:adb_complete_in
	movt	r3, #:upper16:adb_complete_out
	movt	r9, #:upper16:adb_complete_in
	mov	r8, #4
	add	r10, r4, #80
	add	fp, r4, #112
	str	r3, [r0, #28]
	str	r0, [r4, #144]
.L10605:
	ldr	r0, [r4, #84]
	bl	adb_request_new.constprop.0
	mov	r5, r0
	mov	r0, r10
	cmp	r5, #0
	beq	.L10604
	str	r9, [r5, #28]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #116]
	add	r2, r5, #36
	mov	r1, r0
	mov	r0, r10
	str	r2, [r4, #116]
	str	fp, [r5, #36]
	str	r3, [r5, #40]
	str	r2, [r3]
	bl	_raw_spin_unlock_irqrestore
	subs	r8, r8, #1
	bne	.L10605
	ldr	r3, [r6, #24]
	ldr	r2, [r3]
	ldr	r2, [r2, #20]
	cmp	r2, #2
	movls	r0, r8
	bls	.L10600
	ldrb	r1, [r7, #-1950]	@ zero_extendqisi2
	mov	r0, r8
	ldrb	r2, [r7, #-1938]	@ zero_extendqisi2
	strb	r1, [r7, #-1926]
	strb	r2, [r7, #-1914]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #4
	strbhi	r1, [r7, #-1902]
	strbhi	r2, [r7, #-1890]
.L10600:
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L10603:
	mvn	r0, #18
	b	.L10600
.L10626:
	mvn	r0, #18
	bx	lr
.L10604:
	movw	r0, #:lower16:.LC550
	movt	r0, #:upper16:.LC550
	bl	printk
	mvn	r0, #0
	b	.L10600
.L10628:
	.align	2
.L10627:
	.word	.LANCHOR4-1940
	.fnend
	.size	adb_function_bind, .-adb_function_bind
	.align	2
	.global	usb_ep_autoconfig
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_ep_autoconfig, %function
usb_ep_autoconfig:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r2, #0
	b	usb_ep_autoconfig_ss
	.fnend
	.size	usb_ep_autoconfig, .-usb_ep_autoconfig
	.align	2
	.global	usb_ep_autoconfig_reset
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_ep_autoconfig_reset, %function
usb_ep_autoconfig_reset:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #8]!
	cmp	r0, r3
	sub	r3, r3, #12
	beq	.L10631
	mov	r1, #0
.L10632:
	ldr	r2, [r3, #12]
	str	r1, [r3]
	cmp	r0, r2
	sub	r3, r2, #12
	bne	.L10632
.L10631:
	movw	r3, #:lower16:.LANCHOR0
	mov	r2, #0
	movt	r3, #:upper16:.LANCHOR0
	str	r2, [r3, #3272]
	bx	lr
	.fnend
	.size	usb_ep_autoconfig_reset, .-usb_ep_autoconfig_reset
	.section	.rodata.str1.4
	.align	2
.LC551:
	.ascii	"ep0 bMaxBurst must be 0\012\000"
	.text
	.align	2
	.global	config_ep_by_speed
	.syntax unified
	.arm
	.fpu softvfp
	.type	config_ep_by_speed, %function
config_ep_by_speed:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r0
	mov	r4, r2
	add	r0, r0, #32
	strd	r6, [sp, #8]
	mov	r6, r1
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	dev_get_drvdata
	cmp	r6, #0
	clz	r3, r4
	lsr	r3, r3, #5
	moveq	r3, #1
	cmp	r5, #0
	moveq	r3, #1
	cmp	r3, #0
	bne	.L10641
	ldr	r3, [r5, #16]
	cmp	r3, #3
	beq	.L10637
	cmp	r3, #5
	beq	.L10673
.L10638:
	ldr	ip, [r6, #8]
	mov	r7, #0
.L10640:
	ldr	r3, [ip]
	cmp	r3, #0
	bne	.L10643
	b	.L10641
.L10674:
	ldr	r3, [ip, #4]!
	cmp	r3, #0
	beq	.L10641
.L10643:
	ldrb	r1, [r3, #1]	@ zero_extendqisi2
	cmp	r1, #5
	bne	.L10674
	cmp	ip, #0
	ldrbne	lr, [r4, #25]	@ zero_extendqisi2
	beq	.L10641
	ldrb	r1, [r3, #2]	@ zero_extendqisi2
	cmp	r1, lr
	beq	.L10675
.L10644:
	ldr	r3, [ip, #4]
	add	r1, ip, #4
	cmp	r3, #0
	bne	.L10647
	b	.L10641
.L10676:
	ldr	r3, [r1, #4]!
	cmp	r3, #0
	beq	.L10641
.L10647:
	ldrb	r3, [r3, #1]	@ zero_extendqisi2
	cmp	r3, #5
	bne	.L10676
	cmp	r1, #0
	beq	.L10641
	ldr	r3, [r1]
	mov	ip, r1
	ldrb	r1, [r3, #2]	@ zero_extendqisi2
	cmp	r1, lr
	bne	.L10644
.L10675:
	ldrb	r2, [r4, #24]	@ zero_extendqisi2
	mov	lr, #0
	cmp	r7, #0
	ldrh	r1, [r3, #4]	@ unaligned
	bic	r2, r2, #127
	strh	r1, [r4, #20]	@ movhi
	strb	r2, [r4, #24]
	str	r3, [r4, #28]
	str	lr, [r4, #32]
	beq	.L10650
	ldr	r2, [ip, #4]
	cmp	r2, #0
	beq	.L10641
	ldrb	r1, [r2, #1]	@ zero_extendqisi2
	cmp	r1, #48
	bne	.L10641
	str	r2, [r4, #32]
	ldr	r1, [r5, #16]
	cmp	r1, #5
	beq	.L10677
.L10650:
	mov	r0, #0
	b	.L10634
.L10641:
	mvn	r0, #4
.L10634:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L10673:
	ldr	r3, [r5, #20]
	cmp	r3, #4
	bhi	.L10678
.L10639:
	cmp	r3, #2
	bls	.L10638
	mov	r7, #0
	ldr	ip, [r6, #12]
	b	.L10640
.L10637:
	ldr	r3, [r5, #20]
	b	.L10639
.L10678:
	mov	r7, #1
	ldr	ip, [r6, #16]
	b	.L10640
.L10677:
	ldrb	r3, [r3, #3]	@ zero_extendqisi2
	and	r3, r3, #3
	cmp	r3, #1
	beq	.L10651
	sub	r3, r3, #2
	cmp	r3, #1
	bhi	.L10679
.L10653:
	ldrb	r3, [r2, #2]	@ zero_extendqisi2
	mov	r0, #0
	ldrb	r2, [r4, #24]	@ zero_extendqisi2
	add	r3, r3, #1
	bfi	r2, r3, #2, #5
	strb	r2, [r4, #24]
	b	.L10634
.L10651:
	ldrb	r1, [r2, #3]	@ zero_extendqisi2
	ldrb	r3, [r4, #24]	@ zero_extendqisi2
	bfi	r3, r1, #0, #2
	strb	r3, [r4, #24]
	b	.L10653
.L10679:
	ldrb	r3, [r2, #2]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L10680
.L10654:
	ldrb	r3, [r4, #24]	@ zero_extendqisi2
	mov	r2, #1
	mov	r0, #0
	bfi	r3, r2, #2, #5
	strb	r3, [r4, #24]
	b	.L10634
.L10680:
	ldr	r0, [r0]
	movw	r1, #:lower16:.LC551
	movt	r1, #:upper16:.LC551
	add	r0, r0, #32
	bl	dev_err
	b	.L10654
	.fnend
	.size	config_ep_by_speed, .-config_ep_by_speed
	.section	.rodata.str1.4
	.align	2
.LC552:
	.ascii	"can't configure %s: %d\012\000"
	.align	2
.LC553:
	.ascii	"can't start %s: %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_midi_start_ep, %function
f_midi_start_ep:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r2
	mov	r5, r1
	strd	r6, [sp, #8]
	mov	r6, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r2, [r2]
	ldr	r3, [r1, #20]
	cmp	r2, #0
	ldr	r7, [r3, #24]
	beq	.L10682
	ldr	r3, [r4, #8]
	mov	r0, r4
	ldr	r3, [r3, #4]
	blx	r3
.L10682:
	mov	r1, r5
	mov	r2, r4
	ldr	r0, [r6, #76]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L10692
	ldr	r1, [r4, #28]
	ldrh	r3, [r1, #4]	@ unaligned
	cmp	r3, #0
	beq	.L10687
	ldr	r3, [r4, #8]
	mov	r0, r4
	ldr	r3, [r3]
	blx	r3
	subs	r5, r0, #0
	streq	r6, [r4]
	bne	.L10685
.L10681:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L10687:
	mvn	r5, #21
.L10685:
	ldr	r0, [r7]
	movw	r1, #:lower16:.LC553
	mov	r3, r5
	movt	r1, #:upper16:.LC553
	ldr	r2, [r4, #4]
	add	r0, r0, #32
	bl	dev_err
	b	.L10681
.L10692:
	ldr	r0, [r7]
	movw	r1, #:lower16:.LC552
	mov	r3, r5
	movt	r1, #:upper16:.LC552
	ldr	r2, [r4, #4]
	add	r0, r0, #32
	bl	dev_err
	b	.L10681
	.fnend
	.size	f_midi_start_ep, .-f_midi_start_ep
	.section	.rodata.str1.4
	.align	2
.LC554:
	.ascii	"%s: couldn't enqueue request: %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_midi_set_alt, %function
f_midi_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r1, r0
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r3, [r0, #20]
	ldr	r2, [r0, #80]
	ldr	r5, [r3, #24]
	bl	f_midi_start_ep
	subs	r6, r0, #0
	beq	.L10711
.L10693:
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L10711:
	mov	r1, r4
	mov	r0, r4
	ldr	r2, [r4, #84]
	bl	f_midi_start_ep
	subs	r6, r0, #0
	bne	.L10693
	ldr	r2, [r4, #84]
	ldr	r3, [r2]
	cmp	r3, #0
	beq	.L10695
	ldr	r3, [r2, #8]
	mov	r0, r2
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [r4, #84]
.L10695:
	mov	r1, r4
	ldr	r0, [r4, #76]
	bl	config_ep_by_speed
	subs	r6, r0, #0
	bne	.L10712
	ldr	r0, [r4, #84]
	ldr	r1, [r0, #28]
	ldrh	r3, [r1, #4]	@ unaligned
	cmp	r3, #0
	beq	.L10702
	ldr	r3, [r0, #8]
	ldr	r3, [r3]
	blx	r3
	subs	r6, r0, #0
	bne	.L10713
	ldr	r3, [r4, #84]
	str	r4, [r3]
	ldr	r3, [r4, #332]
	cmp	r3, #0
	beq	.L10693
	movw	r9, #:lower16:f_midi_complete
	mov	r8, r6
	movt	r9, #:upper16:f_midi_complete
	b	.L10699
.L10715:
	str	r9, [r5, #28]
	ldr	r0, [r4, #84]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r7, r0, #0
	bne	.L10714
	ldr	r3, [r4, #332]
	cmp	r3, r8
	bls	.L10693
.L10699:
	ldr	r0, [r4, #84]
	add	r8, r8, #1
	ldr	r1, [r4, #328]
	bl	midi_alloc_ep_req
	subs	r5, r0, #0
	mov	r2, #32
	mov	r1, r5
	bne	.L10715
	mvn	r6, #11
	b	.L10693
.L10713:
	ldr	r0, [r4, #84]
.L10697:
	ldr	ip, [r5]
	movw	r1, #:lower16:.LC553
	mov	r3, r6
	movt	r1, #:upper16:.LC553
	ldr	r2, [r0, #4]
	add	r0, ip, #32
	bl	dev_err
	b	.L10693
.L10712:
	ldr	r0, [r5]
	movw	r1, #:lower16:.LC552
	mov	r3, r6
	ldr	r2, [r4, #84]
	movt	r1, #:upper16:.LC552
	add	r0, r0, #32
	ldr	r2, [r2, #4]
	bl	dev_err
	b	.L10693
.L10714:
	ldr	r0, [r4, #76]
	movw	r1, #:lower16:.LC554
	mov	r3, r7
	ldr	r2, [r4, #84]
	movt	r1, #:upper16:.LC554
	add	r0, r0, #32
	ldr	r2, [r2, #4]
	bl	dev_err
	ldr	r0, [r5]
	cmp	r0, #0
	moveq	r6, r7
	beq	.L10693
	ldr	r4, [r4, #84]
	mov	r6, r7
	bl	kfree
	mov	r3, #0
	mov	r1, r5
	str	r3, [r5]
	ldr	r3, [r4, #8]
	mov	r0, r4
	ldr	r3, [r3, #12]
	blx	r3
	b	.L10693
.L10702:
	mvn	r6, #21
	b	.L10697
	.fnend
	.size	f_midi_set_alt, .-f_midi_set_alt
	.section	.rodata.str1.4
	.align	2
.LC555:
	.ascii	"can't enable %s, result %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	diag_function_set_alt, %function
diag_function_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r1, r0
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r0, #20]
	ldr	r2, [r0, #80]
	ldr	r5, [r3, #24]
	ldr	r0, [r5]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L10719
	mov	r1, r4
	ldr	r0, [r5]
	ldr	r2, [r4, #76]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L10719
	ldr	r3, [r4, #116]
	cmp	r3, #0
	beq	.L10724
	str	r4, [r3, #20]
	ldr	r3, [r4, #80]
	str	r4, [r3]
	ldr	r0, [r4, #80]
	ldr	r1, [r0, #28]
	ldrh	r3, [r1, #4]	@ unaligned
	cmp	r3, #0
	beq	.L10725
	ldr	r3, [r0, #8]
	ldr	r3, [r3]
	blx	r3
	subs	r5, r0, #0
	bne	.L10731
	ldr	r3, [r4, #76]
	str	r4, [r3]
	ldr	r0, [r4, #76]
	ldr	r1, [r0, #28]
	ldrh	r3, [r1, #4]	@ unaligned
	cmp	r3, #0
	beq	.L10726
	ldr	r3, [r0, #8]
	ldr	r3, [r3]
	blx	r3
	subs	r5, r0, #0
	beq	.L10723
	ldr	r0, [r4, #76]
.L10722:
	ldr	ip, [r4, #108]
	movw	r1, #:lower16:.LC555
	mov	r3, r5
	ldr	r2, [r0, #4]
	movt	r1, #:upper16:.LC555
	ldr	r0, [ip]
	add	r0, r0, #32
	bl	dev_err
	ldr	r0, [r4, #80]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
.L10716:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L10723:
	add	r6, r4, #100
	str	r5, [r4, #120]
	mov	r0, r6
	str	r5, [r4, #124]
	str	r5, [r4, #128]
	bl	_raw_spin_lock_irqsave
	mov	r3, #1
	mov	r1, r0
	mov	r0, r6
	str	r3, [r4, #104]
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, [r4, #116]
	ldr	r3, [r0, #12]
	cmp	r3, #0
	beq	.L10716
	mov	r2, r5
	mov	r1, r5
	ldr	r0, [r0, #16]
	blx	r3
	b	.L10716
.L10731:
	ldr	r0, [r4, #80]
.L10720:
	ldr	ip, [r4, #108]
	movw	r1, #:lower16:.LC555
	mov	r3, r5
	ldr	r2, [r0, #4]
	movt	r1, #:upper16:.LC555
	ldr	r0, [ip]
	add	r0, r0, #32
	bl	dev_err
	b	.L10716
.L10719:
	ldr	r2, [r4, #80]
	mov	r3, #0
	mvn	r5, #21
	str	r3, [r2, #28]
	ldr	r2, [r4, #76]
	str	r3, [r2, #28]
	b	.L10716
.L10725:
	mvn	r5, #21
	b	.L10720
.L10726:
	mvn	r5, #21
	b	.L10722
.L10724:
	mvn	r5, #18
	b	.L10716
	.fnend
	.size	diag_function_set_alt, .-diag_function_set_alt
	.section	.rodata.str1.4
	.align	2
.LC556:
	.ascii	"config_ep_by_speed failed for ep %s, result %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_set_alt, %function
rmnet_smd_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r1, r0
	mov	r5, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r6, [r0, #76]
	ldr	r2, [r0, #84]
	ldr	r0, [r6]
	bl	config_ep_by_speed
	subs	r4, r0, #0
	bne	.L10749
	ldr	r0, [r5, #84]
	ldr	r1, [r0, #28]
	ldrh	r3, [r1, #4]	@ unaligned
	cmp	r3, #0
	beq	.L10743
	ldr	r3, [r0, #8]
	ldr	r3, [r3]
	blx	r3
	subs	r4, r0, #0
	beq	.L10736
	ldr	r0, [r5, #84]
.L10735:
	ldr	ip, [r6]
	movw	r1, #:lower16:.LC555
	mov	r3, r4
	movt	r1, #:upper16:.LC555
	ldr	r2, [r0, #4]
	add	r0, ip, #32
	bl	dev_err
.L10732:
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L10736:
	mov	r1, r5
	ldr	r0, [r6]
	ldr	r2, [r5, #80]
	bl	config_ep_by_speed
	subs	r4, r0, #0
	bne	.L10750
	ldr	r0, [r5, #80]
	ldr	r1, [r0, #28]
	ldrh	r3, [r1, #4]	@ unaligned
	cmp	r3, #0
	beq	.L10744
	ldr	r3, [r0, #8]
	ldr	r3, [r3]
	blx	r3
	subs	r4, r0, #0
	beq	.L10739
	ldr	r0, [r5, #80]
.L10738:
	ldr	ip, [r6]
	movw	r1, #:lower16:.LC555
	mov	r3, r4
	movt	r1, #:upper16:.LC555
	ldr	r2, [r0, #4]
	add	r0, ip, #32
.L10748:
	bl	dev_err
	ldr	r0, [r5, #84]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L10732
.L10749:
	ldr	r2, [r5, #84]
	mov	r0, #0
	movw	r1, #:lower16:.LC556
	movt	r1, #:upper16:.LC556
	mov	r3, r4
	str	r0, [r2, #28]
	ldr	r0, [r6]
	ldr	r2, [r5, #84]
	add	r0, r0, #32
	ldr	r2, [r2, #4]
	bl	dev_err
	b	.L10732
.L10739:
	mov	r1, r5
	ldr	r0, [r6]
	ldr	r2, [r5, #88]
	bl	config_ep_by_speed
	subs	r4, r0, #0
	bne	.L10751
	ldr	r0, [r5, #88]
	ldr	r1, [r0, #28]
	ldrh	r3, [r1, #4]	@ unaligned
	cmp	r3, #0
	beq	.L10745
	ldr	r3, [r0, #8]
	ldr	r3, [r3]
	blx	r3
	subs	r4, r0, #0
	beq	.L10742
	ldr	r0, [r5, #88]
.L10741:
	ldr	ip, [r6]
	movw	r1, #:lower16:.LC555
	mov	r3, r4
	movt	r1, #:upper16:.LC555
	ldr	r2, [r0, #4]
	add	r0, ip, #32
.L10747:
	bl	dev_err
	ldr	r0, [r5, #84]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r5, #80]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L10732
.L10750:
	ldr	r2, [r5, #80]
	mov	r0, #0
	movw	r1, #:lower16:.LC556
	movt	r1, #:upper16:.LC556
	mov	r3, r4
	str	r0, [r2, #28]
	ldr	r0, [r6]
	ldr	r2, [r5, #80]
	add	r0, r0, #32
	ldr	r2, [r2, #4]
	b	.L10748
.L10742:
	add	r1, r5, #384
	ldr	r0, [r5, #380]
	bl	queue_work
	b	.L10732
.L10751:
	ldr	r2, [r5, #88]
	mov	r0, #0
	movw	r1, #:lower16:.LC556
	movt	r1, #:upper16:.LC556
	mov	r3, r4
	str	r0, [r2, #28]
	ldr	r0, [r6]
	ldr	r2, [r5, #88]
	add	r0, r0, #32
	ldr	r2, [r2, #4]
	b	.L10747
.L10743:
	mvn	r4, #21
	b	.L10735
.L10744:
	mvn	r4, #21
	b	.L10738
.L10745:
	mvn	r4, #21
	b	.L10741
	.fnend
	.size	rmnet_smd_set_alt, .-rmnet_smd_set_alt
	.section	.rodata.str1.4
	.align	2
.LC557:
	.ascii	"config_ep_by_speed failes for ep %s, result %d\012\000"
	.align	2
.LC558:
	.ascii	"<3>%s: unable to allocate memory for notify ep\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_set_alt, %function
rmnet_sdio_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r1, r0
	mov	r5, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r6, [r0, #76]
	ldr	r3, [r0, #84]
	str	r0, [r3]
	ldr	r2, [r0, #84]
	ldr	r0, [r6]
	bl	config_ep_by_speed
	subs	r4, r0, #0
	bne	.L10778
	ldr	r0, [r5, #84]
	ldr	r1, [r0, #28]
	ldrh	r3, [r1, #4]	@ unaligned
	cmp	r3, #0
	beq	.L10768
	ldr	r3, [r0, #8]
	ldr	r3, [r3]
	blx	r3
	subs	r4, r0, #0
	beq	.L10756
	ldr	r0, [r5, #84]
.L10755:
	ldr	ip, [r6]
	movw	r1, #:lower16:.LC555
	mov	r3, r4
	movt	r1, #:upper16:.LC555
	ldr	r2, [r0, #4]
	add	r0, ip, #32
	bl	dev_err
.L10752:
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L10756:
	ldr	r3, [r5, #80]
	mov	r1, r5
	str	r5, [r3]
	ldr	r0, [r6]
	ldr	r2, [r5, #80]
	bl	config_ep_by_speed
	subs	r4, r0, #0
	bne	.L10779
	ldr	r0, [r5, #80]
	ldr	r1, [r0, #28]
	ldrh	r3, [r1, #4]	@ unaligned
	cmp	r3, #0
	beq	.L10769
	ldr	r3, [r0, #8]
	ldr	r3, [r3]
	blx	r3
	subs	r4, r0, #0
	beq	.L10759
	ldr	r0, [r5, #80]
.L10758:
	ldr	ip, [r6]
	movw	r1, #:lower16:.LC555
	mov	r3, r4
	movt	r1, #:upper16:.LC555
	ldr	r2, [r0, #4]
	add	r0, ip, #32
.L10777:
	bl	dev_err
	ldr	r0, [r5, #84]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L10752
.L10778:
	ldr	r2, [r5, #84]
	mov	r0, #0
	movw	r1, #:lower16:.LC557
	movt	r1, #:upper16:.LC557
	mov	r3, r4
	str	r0, [r2, #28]
	ldr	r0, [r6]
	ldr	r2, [r5, #84]
	add	r0, r0, #32
	ldr	r2, [r2, #4]
	bl	dev_err
	b	.L10752
.L10759:
	mov	r1, r5
	ldr	r0, [r6]
	ldr	r2, [r5, #88]
	bl	config_ep_by_speed
	subs	r4, r0, #0
	bne	.L10780
	ldr	r0, [r5, #88]
	ldr	r1, [r0, #28]
	ldrh	r3, [r1, #4]	@ unaligned
	cmp	r3, #0
	beq	.L10770
	ldr	r3, [r0, #8]
	ldr	r3, [r3]
	blx	r3
	subs	r4, r0, #0
	beq	.L10762
	ldr	r0, [r5, #88]
.L10761:
	ldr	ip, [r6]
	movw	r1, #:lower16:.LC555
	mov	r3, r4
	movt	r1, #:upper16:.LC555
	ldr	r2, [r0, #4]
	add	r0, ip, #32
.L10776:
	bl	dev_err
	ldr	r0, [r5, #84]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r5, #80]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L10752
.L10779:
	ldr	r2, [r5, #80]
	mov	r0, #0
	movw	r1, #:lower16:.LC557
	movt	r1, #:upper16:.LC557
	mov	r3, r4
	str	r0, [r2, #28]
	ldr	r0, [r6]
	ldr	r2, [r5, #80]
	add	r0, r0, #32
	ldr	r2, [r2, #4]
	b	.L10777
.L10762:
	ldr	r6, [r5, #88]
	mov	r1, #32
	ldr	r3, [r6, #8]
	mov	r0, r6
	ldr	r3, [r3, #8]
	blx	r3
	subs	r4, r0, #0
	beq	.L10763
	mov	r2, #8
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	str	r2, [r4, #4]
	ldr	r0, [r3, #24]
	cmp	r0, #0
	moveq	r3, #16
	streq	r3, [r4]
	beq	.L10765
	mov	r1, #32
	bl	kmem_cache_alloc
	cmp	r0, #0
	str	r0, [r4]
	bne	.L10765
	ldr	r3, [r6, #8]
	mov	r1, r4
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
.L10763:
	mvn	r3, #11
	mov	r4, r3
	str	r3, [r5, #92]
.L10766:
	movw	r0, #:lower16:.LC558
	ldr	r1, .L10781
	movt	r0, #:upper16:.LC558
	bl	printk
	b	.L10752
.L10765:
	cmn	r4, #4096
	str	r4, [r5, #92]
	bhi	.L10766
	movw	r3, #:lower16:rmnet_sdio_notify_complete
	mov	r1, #8
	movt	r3, #:upper16:rmnet_sdio_notify_complete
	mov	r2, #1
	mov	r0, r5
	str	r3, [r4, #28]
	ldr	r3, [r5, #92]
	str	r5, [r3, #32]
	ldr	r3, [r5, #92]
	str	r1, [r3, #4]
	str	r2, [r5, #184]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	rmnet_sdio_start_io
.L10780:
	ldr	r2, [r5, #88]
	mov	r0, #0
	movw	r1, #:lower16:.LC557
	movt	r1, #:upper16:.LC557
	mov	r3, r4
	str	r0, [r2, #28]
	ldr	r0, [r6]
	ldr	r2, [r5, #88]
	add	r0, r0, #32
	ldr	r2, [r2, #4]
	b	.L10776
.L10768:
	mvn	r4, #21
	b	.L10755
.L10769:
	mvn	r4, #21
	b	.L10758
.L10770:
	mvn	r4, #21
	b	.L10761
.L10782:
	.align	2
.L10781:
	.word	.LANCHOR2+4092
	.fnend
	.size	rmnet_sdio_set_alt, .-rmnet_sdio_set_alt
	.section	.rodata.str1.4
	.align	2
.LC559:
	.ascii	"config_ep fail ep %s, result %d\012\000"
	.align	2
.LC560:
	.ascii	"failedto enable ep%s, result %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_set_alt, %function
audio_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	str	lr, [sp, #16]
	ldrb	r3, [r3, #2586]	@ zero_extendqisi2
	.pad #12
	sub	sp, sp, #12
	cmp	r3, r1
	beq	.L10794
.L10790:
	mov	r4, #0
.L10783:
	mov	r0, r4
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L10794:
	cmp	r2, #0
	mov	r5, r0
	beq	.L10785
	ldrb	r6, [r0, #144]	@ zero_extendqisi2
	cmp	r6, #0
	bne	.L10790
	ldr	r3, [r0, #20]
	mov	r1, r0
	ldr	r2, [r0, #96]
	ldr	r7, [r3, #24]
	ldr	r0, [r7]
	bl	config_ep_by_speed
	subs	r4, r0, #0
	bne	.L10795
	ldr	r0, [r5, #96]
	ldr	r1, [r0, #28]
	ldrh	r3, [r1, #4]	@ unaligned
	cmp	r3, #0
	beq	.L10791
	ldr	r3, [r0, #8]
	ldr	r3, [r3]
	blx	r3
	subs	r4, r0, #0
	moveq	r3, #1
	strbeq	r3, [r5, #144]
	beq	.L10783
	ldr	r0, [r5, #96]
.L10787:
	ldr	ip, [r7]
	movw	r1, #:lower16:.LC560
	mov	r3, r4
	movt	r1, #:upper16:.LC560
	ldr	r2, [r0, #4]
	add	r0, ip, #32
	bl	dev_err
	b	.L10783
.L10785:
	ldrb	r4, [r0, #144]	@ zero_extendqisi2
	cmp	r4, #0
	beq	.L10783
	ldr	r0, [r0, #96]
	mov	r4, r2
	str	r2, [sp, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [sp, #4]
	strb	r2, [r5, #144]
	b	.L10783
.L10795:
	ldr	r2, [r5, #96]
	movw	r1, #:lower16:.LC559
	mov	r3, r4
	movt	r1, #:upper16:.LC559
	str	r6, [r2, #28]
	ldr	r0, [r7]
	ldr	r2, [r5, #96]
	add	r0, r0, #32
	ldr	r2, [r2, #4]
	bl	dev_err
	b	.L10783
.L10791:
	mvn	r4, #21
	b	.L10787
	.fnend
	.size	audio_set_alt, .-audio_set_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	eth_stop, %function
eth_stop:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r1, [r0, #576]
	cmp	r1, #0
	beq	.L10820
	add	r1, r1, #80
	mov	r0, #0
	bl	_set_bit
.L10806:
	add	r7, r5, #1216
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r5, #1220]
	mov	r6, r0
	cmp	r4, #0
	beq	.L10799
	ldr	r3, [r4, #132]
	cmp	r3, #0
	beq	.L10800
	mov	r0, r4
	blx	r3
.L10800:
	ldr	r0, [r4, #80]
	ldr	r2, [r4, #84]
	ldr	r3, [r0, #8]
	ldr	r8, [r2, #28]
	ldr	r9, [r0, #28]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #84]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r5, #160]
	tst	r3, #4
	beq	.L10821
.L10799:
	mov	r0, r7
	mov	r1, r6
	bl	_raw_spin_unlock_irqrestore
	mov	r0, #0
.L10796:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L10821:
	mov	r1, r4
	ldr	r2, [r4, #80]
	ldr	r0, [r5, #1228]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L10804
	mov	r1, r4
	ldr	r2, [r4, #84]
	ldr	r0, [r5, #1228]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L10804
	ldr	r3, [r4, #80]
	str	r9, [r3, #28]
	ldr	r3, [r4, #84]
	str	r8, [r3, #28]
	ldr	r0, [r4, #80]
	ldr	r1, [r0, #28]
	ldrh	r3, [r1, #4]	@ unaligned
	cmp	r3, #0
	beq	.L10805
	ldr	r3, [r0, #8]
	ldr	r3, [r3]
	blx	r3
.L10805:
	ldr	r0, [r4, #84]
	ldr	r1, [r0, #28]
	ldrh	r3, [r1, #4]	@ unaligned
	cmp	r3, #0
	beq	.L10799
	ldr	r3, [r0, #8]
	ldr	r3, [r3]
	blx	r3
	b	.L10799
.L10804:
	ldr	r2, [r4, #80]
	mov	r3, #0
	mvn	r0, #21
	str	r3, [r2, #28]
	ldr	r2, [r4, #84]
	str	r3, [r2, #28]
	b	.L10796
.L10820:
	movw	r0, #:lower16:.LC82
	movw	r1, #1847
	movt	r0, #:upper16:.LC82
	bl	warn_slowpath_null
	movw	r0, #:lower16:.LC83
	movt	r0, #:upper16:.LC83
	bl	printk
	b	.L10806
	.fnend
	.size	eth_stop, .-eth_stop
	.section	.rodata.str1.4
	.align	2
.LC561:
	.ascii	"failed to enable ep %s, result %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_function_set_alt, %function
acc_function_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r1, r0
	mov	r5, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r0, #20]
	ldr	r2, [r0, #84]
	ldr	r6, [r3, #24]
	ldr	r0, [r6]
	bl	config_ep_by_speed
	subs	r4, r0, #0
	bne	.L10834
	ldr	r0, [r5, #84]
	ldr	r1, [r0, #28]
	ldrh	r3, [r1, #4]	@ unaligned
	cmp	r3, #0
	beq	.L10830
	ldr	r3, [r0, #8]
	ldr	r3, [r3]
	blx	r3
	subs	r4, r0, #0
	beq	.L10826
	ldr	r0, [r5, #84]
.L10825:
	ldr	ip, [r6]
	movw	r1, #:lower16:.LC561
	mov	r3, r4
	movt	r1, #:upper16:.LC561
	ldr	r2, [r0, #4]
	add	r0, ip, #32
	bl	dev_err
.L10822:
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L10826:
	mov	r1, r5
	ldr	r0, [r6]
	ldr	r2, [r5, #88]
	bl	config_ep_by_speed
	subs	r4, r0, #0
	bne	.L10835
	ldr	r0, [r5, #88]
	ldr	r1, [r0, #28]
	ldrh	r3, [r1, #4]	@ unaligned
	cmp	r3, #0
	beq	.L10831
	ldr	r3, [r0, #8]
	ldr	r3, [r3]
	blx	r3
	subs	r4, r0, #0
	beq	.L10829
	ldr	r0, [r5, #88]
.L10828:
	ldr	ip, [r6]
	movw	r1, #:lower16:.LC561
	mov	r3, r4
	movt	r1, #:upper16:.LC561
	ldr	r2, [r0, #4]
	add	r0, ip, #32
.L10833:
	bl	dev_err
	ldr	r0, [r5, #84]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L10822
.L10834:
	ldr	r2, [r5, #84]
	mov	r0, #0
	movw	r1, #:lower16:.LC557
	movt	r1, #:upper16:.LC557
	mov	r3, r4
	str	r0, [r2, #28]
	ldr	r0, [r6]
	ldr	r2, [r5, #84]
	add	r0, r0, #32
	ldr	r2, [r2, #4]
	bl	dev_err
	b	.L10822
.L10829:
	ldrb	ip, [r5, #92]	@ zero_extendqisi2
	mov	r2, #1
	add	r0, r5, #1648
	mov	r3, r4
	add	r0, r0, #8
	mov	r1, #3
	orr	ip, ip, r2
	strb	ip, [r5, #92]
	bl	__wake_up
	b	.L10822
.L10835:
	ldr	r2, [r5, #88]
	mov	r0, #0
	movw	r1, #:lower16:.LC557
	movt	r1, #:upper16:.LC557
	mov	r3, r4
	str	r0, [r2, #28]
	ldr	r0, [r6]
	ldr	r2, [r5, #88]
	add	r0, r0, #32
	ldr	r2, [r2, #4]
	b	.L10833
.L10830:
	mvn	r4, #21
	b	.L10825
.L10831:
	mvn	r4, #21
	b	.L10828
	.fnend
	.size	acc_function_set_alt, .-acc_function_set_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_set_alt, %function
fsg_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r1, r0
	mov	r5, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r6, [r0, #80]
	ldr	r2, [r0, #92]
	ldr	r0, [r6]
	bl	config_ep_by_speed
	subs	r4, r0, #0
	bne	.L10836
	ldr	r0, [r5, #92]
	ldr	r1, [r0, #28]
	ldrh	r3, [r1, #4]	@ unaligned
	cmp	r3, #0
	beq	.L10842
	ldr	r3, [r0, #8]
	ldr	r3, [r3]
	blx	r3
	subs	r4, r0, #0
	beq	.L10848
.L10836:
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L10848:
	ldr	r3, [r5, #92]
	mov	r1, r5
	str	r6, [r3]
	ldrb	r3, [r5, #86]	@ zero_extendqisi2
	ldr	r2, [r5, #96]
	orr	r3, r3, #1
	strb	r3, [r5, #86]
	ldr	r0, [r6]
	bl	config_ep_by_speed
	subs	r4, r0, #0
	bne	.L10838
	ldr	r0, [r5, #96]
	ldr	r1, [r0, #28]
	ldrh	r3, [r1, #4]	@ unaligned
	cmp	r3, #0
	beq	.L10843
	ldr	r3, [r0, #8]
	ldr	r3, [r3]
	blx	r3
	subs	r4, r0, #0
	beq	.L10849
.L10838:
	ldr	r0, [r5, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldrb	r3, [r5, #86]	@ zero_extendqisi2
	bfc	r3, #0, #1
	strb	r3, [r5, #86]
	b	.L10836
.L10849:
	ldr	r3, [r5, #96]
	add	r1, r5, #88
	str	r6, [r3]
	ldrb	r3, [r5, #86]	@ zero_extendqisi2
	ldr	r2, [r5, #96]
	orr	r3, r3, #2
	strb	r3, [r5, #86]
	ldr	r3, [r2, #28]
	ldrh	r3, [r3, #4]	@ unaligned
	str	r3, [r6, #108]
	bl	_clear_bit
	ldr	r2, [r5, #80]
	movw	r3, #:lower16:.LANCHOR0
	movt	r3, #:upper16:.LANCHOR0
	str	r4, [r3, #4012]
	str	r5, [r2, #12]
	ldr	r5, [r5, #80]
	str	r4, [r3, #4016]
	add	r6, r5, #44
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #112]
	mov	r4, r0
	cmp	r3, #4
	bgt	.L10840
	ldr	r3, [r5, #56]
	mov	r1, #4
	ldr	r2, [r5, #168]
	str	r1, [r5, #112]
	str	r3, [r5, #116]
	cmp	r2, #0
	beq	.L10840
	mov	r1, #2
	mov	r0, #10
	bl	send_sig_info
.L10840:
	mov	r1, r4
	mov	r0, r6
	movw	r4, #32767
	bl	_raw_spin_unlock_irqrestore
	b	.L10836
.L10842:
	mvn	r4, #21
	b	.L10836
.L10843:
	mvn	r4, #21
	b	.L10838
	.fnend
	.size	fsg_set_alt, .-fsg_set_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mtp_function_set_alt, %function
mtp_function_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r1, r0
	mov	r5, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r0, #20]
	ldr	r2, [r0, #84]
	ldr	r6, [r3, #24]
	ldr	r0, [r6]
	bl	config_ep_by_speed
	subs	r4, r0, #0
	bne	.L10865
	ldr	r0, [r5, #84]
	ldr	r1, [r0, #28]
	ldrh	r3, [r1, #4]	@ unaligned
	cmp	r3, #0
	beq	.L10860
	ldr	r3, [r0, #8]
	ldr	r3, [r3]
	blx	r3
	subs	r4, r0, #0
	beq	.L10854
	ldr	r0, [r5, #84]
.L10853:
	ldr	ip, [r6]
	movw	r1, #:lower16:.LC561
	mov	r3, r4
	movt	r1, #:upper16:.LC561
	ldr	r2, [r0, #4]
	add	r0, ip, #32
	bl	dev_err
.L10850:
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L10854:
	mov	r1, r5
	ldr	r0, [r6]
	ldr	r2, [r5, #88]
	bl	config_ep_by_speed
	subs	r4, r0, #0
	bne	.L10866
	ldr	r0, [r5, #88]
	ldr	r1, [r0, #28]
	ldrh	r3, [r1, #4]	@ unaligned
	cmp	r3, #0
	beq	.L10861
	ldr	r3, [r0, #8]
	ldr	r3, [r3]
	blx	r3
	subs	r4, r0, #0
	bne	.L10867
	ldr	r2, .L10869
	ldr	r3, [r5, #92]
	str	r2, [r3, #28]
	ldr	r0, [r5, #92]
	ldr	r1, [r0, #28]
	ldrh	r3, [r1, #4]	@ unaligned
	cmp	r3, #0
	beq	.L10862
	ldr	r3, [r0, #8]
	ldr	r3, [r3]
	blx	r3
	subs	r4, r0, #0
	beq	.L10868
.L10858:
	ldr	r0, [r5, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r5, #84]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L10850
.L10865:
	ldr	r2, [r5, #84]
	mov	r0, #0
	movw	r1, #:lower16:.LC557
	movt	r1, #:upper16:.LC557
	mov	r3, r4
	str	r0, [r2, #28]
	ldr	r0, [r6]
	ldr	r2, [r5, #84]
	add	r0, r0, #32
	ldr	r2, [r2, #4]
	bl	dev_err
	b	.L10850
.L10867:
	ldr	r0, [r5, #88]
.L10856:
	ldr	ip, [r6]
	movw	r1, #:lower16:.LC561
	mov	r3, r4
	movt	r1, #:upper16:.LC561
	ldr	r2, [r0, #4]
	add	r0, ip, #32
.L10864:
	bl	dev_err
	ldr	r0, [r5, #84]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L10850
.L10868:
	mov	r2, #1
	add	r0, r5, #124
	mov	r3, r4
	mov	r1, #3
	str	r2, [r5, #96]
	bl	__wake_up
	b	.L10850
.L10866:
	ldr	r2, [r5, #88]
	mov	r0, #0
	movw	r1, #:lower16:.LC557
	movt	r1, #:upper16:.LC557
	mov	r3, r4
	str	r0, [r2, #28]
	ldr	r0, [r6]
	ldr	r2, [r5, #88]
	add	r0, r0, #32
	ldr	r2, [r2, #4]
	b	.L10864
.L10862:
	mvn	r4, #21
	b	.L10858
.L10860:
	mvn	r4, #21
	b	.L10853
.L10861:
	mvn	r4, #21
	b	.L10856
.L10870:
	.align	2
.L10869:
	.word	.LANCHOR4-2028
	.fnend
	.size	mtp_function_set_alt, .-mtp_function_set_alt
	.section	.rodata.str1.4
	.align	2
.LC562:
	.ascii	"<3>%s: unable to allocate memory for out req\012\000"
	.align	2
.LC563:
	.ascii	"<3>%s: unable to allocate memory for in req\012\000"
	.align	2
.LC564:
	.ascii	"<3>%s: config_ep_by_speed failed for ep#%s, err#%d\012"
	.ascii	"\000"
	.align	2
.LC565:
	.ascii	"<3>%s: usb ep#%s enable failed, err#%d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_function_set_alt, %function
ccid_function_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r1, #32
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	ldr	r10, [r0, #76]
	ldr	r6, [r0, #92]
	ldr	r3, [r6, #8]
	mov	r0, r6
	ldr	r3, [r3, #8]
	blx	r3
	subs	r5, r0, #0
	beq	.L10872
	mov	r3, #4
	movw	r9, #:lower16:kmalloc_caches
	movt	r9, #:upper16:kmalloc_caches
	str	r3, [r5, #4]
	ldr	r0, [r9, #24]
	cmp	r0, #0
	moveq	r3, #16
	streq	r3, [r5]
	beq	.L10874
	mov	r1, #32
	bl	kmem_cache_alloc
	cmp	r0, #0
	str	r0, [r5]
	bne	.L10874
	ldr	r3, [r6, #8]
	mov	r1, r5
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
.L10872:
	mvn	r3, #11
	str	r3, [r4, #104]
.L10902:
	movw	r0, #:lower16:.LC544
	ldr	r1, .L10925
	movt	r0, #:upper16:.LC544
	bl	printk
	ldr	r8, [r4, #104]
	b	.L10871
.L10874:
	cmn	r5, #4096
	str	r5, [r4, #104]
	bhi	.L10902
	movw	r3, #:lower16:ccid_notify_complete
	mov	r1, #32
	movt	r3, #:upper16:ccid_notify_complete
	str	r3, [r5, #28]
	ldr	r3, [r4, #104]
	str	r4, [r3, #32]
	ldr	r5, [r4, #100]
	ldr	r3, [r5, #8]
	mov	r0, r5
	ldr	r3, [r3, #8]
	blx	r3
	subs	r6, r0, #0
	beq	.L10904
	movw	r3, #522
	str	r3, [r6, #4]
	ldr	r0, [r9, #40]
	cmp	r0, #0
	moveq	r3, #16
	streq	r3, [r6]
	beq	.L10878
	mov	r1, #32
	bl	kmem_cache_alloc
	cmp	r0, #0
	str	r0, [r6]
	bne	.L10878
	ldr	r3, [r5, #8]
	mov	r1, r6
	mov	r0, r5
	mvn	r8, #11
	ldr	r3, [r3, #12]
	blx	r3
.L10876:
	movw	r0, #:lower16:.LC562
	ldr	r1, .L10925
	movt	r0, #:upper16:.LC562
	bl	printk
.L10879:
	ldr	r0, [r4, #104]
	cmp	r0, #0
	beq	.L10871
	ldr	r1, [r4, #92]
	bl	ccid_request_free.part.0
	b	.L10871
.L10878:
	cmn	r6, #4096
	movhi	r8, r6
	bhi	.L10876
	movw	r3, #:lower16:ccid_bulk_complete_out
	movw	r8, #:lower16:ccid_bulk_complete_in
	str	r4, [r6, #32]
	movt	r3, #:upper16:ccid_bulk_complete_out
	movt	r8, #:upper16:ccid_bulk_complete_in
	mov	r5, #4
	str	r3, [r6, #28]
	str	r6, [r4, #176]
.L10884:
	ldr	r6, [r4, #96]
	mov	r1, #32
	ldr	r3, [r6, #8]
	mov	r0, r6
	ldr	r3, [r3, #8]
	blx	r3
	subs	fp, r0, #0
	beq	.L10905
	movw	r3, #523
	mov	r2, #16
	mov	r1, #32
	str	r3, [fp, #4]
	ldr	r0, [r9, #40]
	cmp	r0, #0
	streq	r2, [fp]
	beq	.L10882
	bl	kmem_cache_alloc
	cmp	r0, #0
	str	r0, [fp]
	bne	.L10882
	ldr	r2, [r6, #8]
	mov	r1, fp
	mov	r0, r6
	mvn	r8, #11
	ldr	r3, [r2, #12]
	blx	r3
.L10880:
	movw	r0, #:lower16:.LC563
	ldr	r1, .L10925
	movt	r0, #:upper16:.LC563
	bl	printk
.L10883:
	ldr	r0, [r4, #176]
	cmp	r0, #0
	beq	.L10879
	ldr	r1, [r4, #100]
	bl	ccid_request_free.part.0
	b	.L10879
.L10882:
	cmn	fp, #4096
	add	r6, r4, #84
	add	r7, r4, #184
	mov	r0, r6
	bhi	.L10921
	str	r8, [fp, #28]
	str	r4, [fp, #32]
	bl	_raw_spin_lock_irqsave
	ldr	r2, [r4, #188]
	add	ip, fp, #36
	mov	r1, r0
	mov	r0, r6
	str	ip, [r4, #188]
	str	r7, [fp, #36]
	str	r2, [fp, #40]
	str	ip, [r2]
	bl	_raw_spin_unlock_irqrestore
	subs	r5, r5, #1
	bne	.L10884
	mov	r1, r4
	ldr	r0, [r10]
	ldr	r2, [r4, #92]
	bl	config_ep_by_speed
	subs	r8, r0, #0
	ldr	r2, [r4, #92]
	bne	.L10922
	ldr	r1, [r2, #28]
	ldrh	r3, [r1, #4]	@ unaligned
	cmp	r3, #0
	beq	.L10906
	ldr	r3, [r2, #8]
	mov	r0, r2
	ldr	r3, [r3]
	blx	r3
	subs	r8, r0, #0
	ldrne	r2, [r4, #92]
	bne	.L10887
	ldr	r3, [r4, #92]
	mov	r1, r4
	str	r4, [r3]
	ldr	r0, [r10]
	ldr	r2, [r4, #96]
	bl	config_ep_by_speed
	subs	r8, r0, #0
	ldr	r2, [r4, #96]
	bne	.L10923
	ldr	r1, [r2, #28]
	ldrh	r3, [r1, #4]	@ unaligned
	cmp	r3, #0
	beq	.L10907
	ldr	r3, [r2, #8]
	mov	r0, r2
	ldr	r3, [r3]
	blx	r3
	subs	r8, r0, #0
	ldrne	r2, [r4, #96]
	bne	.L10891
	mov	r1, r4
	ldr	r0, [r10]
	ldr	r2, [r4, #100]
	bl	config_ep_by_speed
	subs	r8, r0, #0
	ldr	r2, [r4, #100]
	bne	.L10924
	ldr	r1, [r2, #28]
	ldrh	r3, [r1, #4]	@ unaligned
	cmp	r3, #0
	beq	.L10908
	ldr	r3, [r2, #8]
	mov	r0, r2
	ldr	r3, [r3]
	blx	r3
	subs	r8, r0, #0
	ldrne	r2, [r4, #100]
	bne	.L10895
	mov	r3, #1
	str	r3, [r4, #88]
	str	r3, [r4, #192]
.L10871:
	mov	r0, r8
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L10905:
	mvn	r8, #11
	b	.L10880
.L10904:
	mvn	r8, #11
	b	.L10876
.L10908:
	mvn	r8, #21
.L10895:
	movw	r0, #:lower16:.LC565
	ldr	r1, .L10925
	mov	r3, r8
	movt	r0, #:upper16:.LC565
	ldr	r2, [r2, #4]
	bl	printk
.L10894:
	ldr	r0, [r4, #96]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
.L10890:
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #92]
	mov	r2, #0
	str	r2, [r3]
.L10886:
	mov	r9, #256
	mov	r5, #512
.L10897:
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #184]
	mov	r1, r0
	cmp	r7, r3
	beq	.L10898
	ldr	ip, [r3]
	sub	r10, r3, #36
	mov	r0, r6
	ldr	r2, [r3, #4]
	str	r2, [ip, #4]
	str	ip, [r2]
	str	r9, [r3]
	str	r5, [r3, #4]
	bl	_raw_spin_unlock_irqrestore
	cmp	r10, #0
	beq	.L10883
	mov	r0, r10
	ldr	r1, [r4, #96]
	bl	ccid_request_free.part.0
	b	.L10897
.L10924:
	str	r5, [r2, #28]
	ldr	r2, [r4, #100]
	movw	r0, #:lower16:.LC564
	ldr	r1, .L10925
	mov	r3, r8
	movt	r0, #:upper16:.LC564
	ldr	r2, [r2, #4]
	bl	printk
	b	.L10894
.L10907:
	mvn	r8, #21
.L10891:
	movw	r0, #:lower16:.LC565
	ldr	r1, .L10925
	mov	r3, r8
	movt	r0, #:upper16:.LC565
	ldr	r2, [r2, #4]
	bl	printk
	b	.L10890
.L10921:
	mov	r8, fp
	b	.L10880
.L10906:
	mvn	r8, #21
.L10887:
	movw	r0, #:lower16:.LC565
	ldr	r1, .L10925
	mov	r3, r8
	movt	r0, #:upper16:.LC565
	ldr	r2, [r2, #4]
	bl	printk
	b	.L10886
.L10922:
	str	r5, [r2, #28]
	ldr	r2, [r4, #92]
	movw	r0, #:lower16:.LC564
	ldr	r1, .L10925
	mov	r3, r8
	movt	r0, #:upper16:.LC564
	ldr	r2, [r2, #4]
	bl	printk
	b	.L10886
.L10923:
	str	r5, [r2, #28]
	ldr	r2, [r4, #96]
	movw	r0, #:lower16:.LC564
	ldr	r1, .L10925
	mov	r3, r8
	movt	r0, #:upper16:.LC564
	ldr	r2, [r2, #4]
	bl	printk
	b	.L10890
.L10898:
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	b	.L10883
.L10926:
	.align	2
.L10925:
	.word	.LANCHOR5-4072
	.fnend
	.size	ccid_function_set_alt, .-ccid_function_set_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_function_set_alt, %function
adb_function_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r1, r0
	mov	r5, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r0, #20]
	ldr	r2, [r0, #84]
	ldr	r6, [r3, #24]
	ldr	r0, [r6]
	bl	config_ep_by_speed
	subs	r4, r0, #0
	bne	.L10939
	ldr	r0, [r5, #84]
	ldr	r1, [r0, #28]
	ldrh	r3, [r1, #4]	@ unaligned
	cmp	r3, #0
	beq	.L10935
	ldr	r3, [r0, #8]
	ldr	r3, [r3]
	blx	r3
	subs	r4, r0, #0
	beq	.L10931
	ldr	r0, [r5, #84]
.L10930:
	ldr	ip, [r6]
	movw	r1, #:lower16:.LC561
	mov	r3, r4
	movt	r1, #:upper16:.LC561
	ldr	r2, [r0, #4]
	add	r0, ip, #32
	bl	dev_err
.L10927:
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L10931:
	mov	r1, r5
	ldr	r0, [r6]
	ldr	r2, [r5, #88]
	bl	config_ep_by_speed
	subs	r4, r0, #0
	bne	.L10940
	ldr	r0, [r5, #88]
	ldr	r1, [r0, #28]
	ldrh	r3, [r1, #4]	@ unaligned
	cmp	r3, #0
	beq	.L10936
	ldr	r3, [r0, #8]
	ldr	r3, [r3]
	blx	r3
	subs	r4, r0, #0
	beq	.L10934
	ldr	r0, [r5, #88]
.L10933:
	ldr	ip, [r6]
	movw	r1, #:lower16:.LC561
	mov	r3, r4
	movt	r1, #:upper16:.LC561
	ldr	r2, [r0, #4]
	add	r0, ip, #32
.L10938:
	bl	dev_err
	ldr	r0, [r5, #84]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L10927
.L10939:
	ldr	r2, [r5, #84]
	mov	r0, #0
	movw	r1, #:lower16:.LC557
	movt	r1, #:upper16:.LC557
	mov	r3, r4
	str	r0, [r2, #28]
	ldr	r0, [r6]
	ldr	r2, [r5, #84]
	add	r0, r0, #32
	ldr	r2, [r2, #4]
	bl	dev_err
	b	.L10927
.L10934:
	mov	r2, #1
	add	r0, r5, #120
	mov	r3, r4
	mov	r1, #3
	str	r2, [r5, #92]
	bl	__wake_up
	b	.L10927
.L10940:
	ldr	r2, [r5, #88]
	mov	r0, #0
	movw	r1, #:lower16:.LC557
	movt	r1, #:upper16:.LC557
	mov	r3, r4
	str	r0, [r2, #28]
	ldr	r0, [r6]
	ldr	r2, [r5, #88]
	add	r0, r0, #32
	ldr	r2, [r2, #4]
	b	.L10938
.L10935:
	mvn	r4, #21
	b	.L10930
.L10936:
	mvn	r4, #21
	b	.L10933
	.fnend
	.size	adb_function_set_alt, .-adb_function_set_alt
	.section	.rodata.str1.4
	.align	2
.LC566:
	.ascii	"<3>qdss_st_alt: qdss supportes HS or SS only\012\000"
	.align	2
.LC567:
	.ascii	"<3>qdss_set_alt failed\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	qdss_set_alt, %function
qdss_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	cmp	r2, #0
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r0, #20]
	ldr	r3, [r3, #24]
	ldr	r6, [r3]
	bne	.L10954
	ldr	r3, [r6, #16]
	sub	r3, r3, #3
	bics	r3, r3, #2
	bne	.L10965
	ldrb	r3, [r0, #81]	@ zero_extendqisi2
	cmp	r3, r1
	beq	.L10966
	ldrb	r3, [r0, #80]	@ zero_extendqisi2
	cmp	r3, r1
	beq	.L10967
.L10948:
	ldrb	r3, [r4, #184]	@ zero_extendqisi2
	and	r3, r3, #7
	cmp	r3, #7
	moveq	r3, #1
	streq	r3, [r4, #84]
	beq	.L10952
	ldr	r3, [r4, #84]
	cmp	r3, #0
	bne	.L10952
.L10953:
	mov	r5, #0
.L10941:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L10952:
	ldr	r3, [r4, #128]
	cmp	r3, #0
	beq	.L10953
	add	r1, r4, #148
	ldr	r0, [r4, #188]
	mov	r5, #0
	bl	queue_work
	b	.L10941
.L10966:
	mov	r0, r6
	mov	r1, r4
	ldr	r2, [r4, #100]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L10949
	ldr	r0, [r4, #100]
	ldr	r1, [r0, #28]
	ldrh	r3, [r1, #4]	@ unaligned
	cmp	r3, #0
	beq	.L10950
	ldr	r3, [r0, #8]
	ldr	r3, [r3]
	blx	r3
	subs	r5, r0, #0
	bne	.L10942
	ldr	r3, [r4, #100]
	str	r4, [r3]
	ldrb	r3, [r4, #184]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r4, #184]
	b	.L10948
.L10967:
	mov	r1, r0
	mov	r0, r6
	ldr	r2, [r4, #96]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L10949
	ldr	r0, [r4, #96]
	ldr	r1, [r0, #28]
	ldrh	r3, [r1, #4]	@ unaligned
	cmp	r3, #0
	beq	.L10950
	ldr	r3, [r0, #8]
	ldr	r3, [r3]
	blx	r3
	subs	r5, r0, #0
	bne	.L10942
	ldr	r3, [r4, #96]
	mov	r0, r6
	mov	r1, r4
	str	r4, [r3]
	ldrb	r3, [r4, #184]	@ zero_extendqisi2
	ldr	r2, [r4, #92]
	orr	r3, r3, #2
	strb	r3, [r4, #184]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L10949
	ldr	r0, [r4, #92]
	ldr	r1, [r0, #28]
	ldrh	r3, [r1, #4]	@ unaligned
	cmp	r3, #0
	beq	.L10950
	ldr	r3, [r0, #8]
	ldr	r3, [r3]
	blx	r3
	subs	r5, r0, #0
	bne	.L10942
	ldr	r3, [r4, #92]
	str	r4, [r3]
	ldrb	r3, [r4, #184]	@ zero_extendqisi2
	orr	r3, r3, #4
	strb	r3, [r4, #184]
	b	.L10948
.L10949:
	mvn	r5, #21
	b	.L10941
.L10965:
	movw	r0, #:lower16:.LC566
	mvn	r5, #21
	movt	r0, #:upper16:.LC566
	bl	printk
.L10942:
	movw	r0, #:lower16:.LC567
	movt	r0, #:upper16:.LC567
	bl	printk
	mov	r0, r4
	bl	qdss_eps_disable
	b	.L10941
.L10950:
	mvn	r5, #21
	b	.L10942
.L10954:
	mov	r5, #0
	b	.L10942
	.fnend
	.size	qdss_set_alt, .-qdss_set_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_set_alt, %function
rmnet_mux_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r1, #32
	mov	r5, r0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r6, [r0, #76]
	ldr	r7, [r0, #88]
	ldr	r3, [r7, #8]
	mov	r0, r7
	ldr	r3, [r3, #8]
	blx	r3
	subs	r4, r0, #0
	bne	.L10995
.L10969:
	mvn	r3, #11
	mov	r4, r3
	str	r3, [r5, #92]
.L10968:
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L10995:
	mov	r2, #8
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	str	r2, [r4, #4]
	ldr	r0, [r3, #24]
	cmp	r0, #0
	moveq	r3, #16
	streq	r3, [r4]
	beq	.L10971
	mov	r1, #32
	bl	kmem_cache_alloc
	cmp	r0, #0
	str	r0, [r4]
	bne	.L10971
	ldr	r3, [r7, #8]
	mov	r1, r4
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
	b	.L10969
.L10971:
	cmn	r4, #4096
	str	r4, [r5, #92]
	bhi	.L10968
	movw	r3, #:lower16:rmnet_mux_notify_complete
	mov	r2, #8
	movt	r3, #:upper16:rmnet_mux_notify_complete
	mov	r1, r5
	str	r3, [r4, #28]
	ldr	r3, [r5, #92]
	str	r5, [r3, #32]
	ldr	r3, [r5, #92]
	str	r2, [r3, #4]
	ldr	r3, [r5, #84]
	str	r5, [r3]
	ldr	r0, [r6]
	ldr	r2, [r5, #84]
	bl	config_ep_by_speed
	subs	r4, r0, #0
	bne	.L10996
	ldr	r0, [r5, #84]
	ldr	r1, [r0, #28]
	ldrh	r3, [r1, #4]	@ unaligned
	cmp	r3, #0
	beq	.L10985
	ldr	r3, [r0, #8]
	ldr	r3, [r3]
	blx	r3
	subs	r4, r0, #0
	beq	.L10975
	ldr	r0, [r5, #84]
.L10974:
	ldr	ip, [r6]
	movw	r1, #:lower16:.LC555
	mov	r3, r4
	movt	r1, #:upper16:.LC555
	ldr	r2, [r0, #4]
	add	r0, ip, #32
	bl	dev_err
	b	.L10968
.L10975:
	ldr	r3, [r5, #80]
	mov	r1, r5
	str	r5, [r3]
	ldr	r0, [r6]
	ldr	r2, [r5, #80]
	bl	config_ep_by_speed
	subs	r4, r0, #0
	bne	.L10997
	ldr	r0, [r5, #80]
	ldr	r1, [r0, #28]
	ldrh	r3, [r1, #4]	@ unaligned
	cmp	r3, #0
	beq	.L10986
	ldr	r3, [r0, #8]
	ldr	r3, [r3]
	blx	r3
	subs	r4, r0, #0
	beq	.L10978
	ldr	r0, [r5, #80]
.L10977:
	ldr	ip, [r6]
	movw	r1, #:lower16:.LC555
	mov	r3, r4
	movt	r1, #:upper16:.LC555
	ldr	r2, [r0, #4]
	add	r0, ip, #32
.L10993:
	bl	dev_err
	ldr	r0, [r5, #84]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L10968
.L10978:
	mov	r1, r5
	ldr	r0, [r6]
	ldr	r2, [r5, #88]
	bl	config_ep_by_speed
	subs	r4, r0, #0
	bne	.L10998
	ldr	r0, [r5, #88]
	ldr	r1, [r0, #28]
	ldrh	r3, [r1, #4]	@ unaligned
	cmp	r3, #0
	beq	.L10987
	ldr	r3, [r0, #8]
	ldr	r3, [r3]
	blx	r3
	subs	r4, r0, #0
	bne	.L10999
	mov	r3, #0
	mov	r2, #1
	str	r3, [r5, #300]
	str	r2, [r5, #360]
	str	r3, [r5, #388]
	str	r3, [r5, #392]
	str	r3, [r5, #396]
	str	r3, [r5, #400]
	str	r3, [r5, #404]
	str	r3, [r5, #408]
	str	r3, [r5, #412]
	b	.L10968
.L10996:
	ldr	r2, [r5, #84]
	mov	r0, #0
	movw	r1, #:lower16:.LC557
	movt	r1, #:upper16:.LC557
	mov	r3, r4
	str	r0, [r2, #28]
	ldr	r0, [r6]
	ldr	r2, [r5, #84]
	add	r0, r0, #32
	ldr	r2, [r2, #4]
	bl	dev_err
	b	.L10968
.L10997:
	ldr	r2, [r5, #80]
	mov	r0, #0
	movw	r1, #:lower16:.LC557
	movt	r1, #:upper16:.LC557
	mov	r3, r4
	str	r0, [r2, #28]
	ldr	r0, [r6]
	ldr	r2, [r5, #80]
	add	r0, r0, #32
	ldr	r2, [r2, #4]
	b	.L10993
.L10999:
	ldr	r0, [r5, #88]
.L10980:
	ldr	ip, [r6]
	movw	r1, #:lower16:.LC555
	mov	r3, r4
	movt	r1, #:upper16:.LC555
	ldr	r2, [r0, #4]
	add	r0, ip, #32
.L10994:
	bl	dev_err
	ldr	r0, [r5, #84]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r5, #80]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L10968
.L10998:
	ldr	r2, [r5, #88]
	mov	r0, #0
	movw	r1, #:lower16:.LC557
	movt	r1, #:upper16:.LC557
	mov	r3, r4
	str	r0, [r2, #28]
	ldr	r0, [r6]
	ldr	r2, [r5, #88]
	add	r0, r0, #32
	ldr	r2, [r2, #4]
	b	.L10994
.L10985:
	mvn	r4, #21
	b	.L10974
.L10986:
	mvn	r4, #21
	b	.L10977
.L10987:
	mvn	r4, #21
	b	.L10980
	.fnend
	.size	rmnet_mux_set_alt, .-rmnet_mux_set_alt
	.section	.rodata.str1.4
	.align	2
.LC568:
	.ascii	"<3>%s: Invalid port_num#%d\012\000"
	.align	2
.LC569:
	.ascii	"<3>%s: grmnet port is null\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gps_set_alt, %function
gps_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	ldr	r5, [r0, #120]
	ldr	r2, [r0, #128]
	ldr	r3, [r2]
	cmp	r3, #0
	beq	.L11001
	ldr	r3, [r2, #8]
	mov	r0, r2
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [r4, #128]
.L11001:
	mov	r1, r4
	ldr	r0, [r5]
	bl	config_ep_by_speed
	subs	r8, r0, #0
	ldr	r2, [r4, #128]
	bne	.L11030
	ldr	r1, [r2, #28]
	ldrh	r3, [r1, #4]	@ unaligned
	cmp	r3, #0
	beq	.L11016
	ldr	r3, [r2, #8]
	mov	r0, r2
	ldr	r3, [r3]
	blx	r3
	subs	r8, r0, #0
	ldrne	r2, [r4, #128]
	bne	.L11004
	ldr	r3, [r4, #128]
	str	r4, [r3]
	ldrb	r2, [r4, #104]	@ zero_extendqisi2
	cmp	r2, #5
	bhi	.L11006
	movw	r5, #:lower16:.LANCHOR0
	mov	r3, #84
	movt	r5, #:upper16:.LANCHOR0
	mla	r3, r3, r2, r5
	ldr	r6, [r3, #2288]
	cmp	r6, #0
	beq	.L11006
	cmp	r4, #0
	beq	.L11031
	add	r7, r6, #108
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	movw	r2, #:lower16:grmnet_ctrl_smd_send_cpkt_tomodem
	movw	r3, #:lower16:gsmd_ctrl_send_cbits_tomodem
	str	r4, [r6, #104]
	movt	r2, #:upper16:grmnet_ctrl_smd_send_cpkt_tomodem
	movt	r3, #:upper16:gsmd_ctrl_send_cbits_tomodem
	mov	r1, r0
	mov	r0, r7
	strd	r2, [r4, #88]
	bl	_raw_spin_unlock_irqrestore
	mov	r2, r8
	add	r1, r6, #112
	ldr	r0, [r5, #2280]
	bl	queue_delayed_work
.L11009:
	mov	r3, #1
	mov	r7, r4
	str	r3, [r4, #112]
	ldr	r5, [r7, #136]!
	cmp	r5, r7
	beq	.L11000
	add	r10, r4, #124
	add	r6, r4, #144
	mvn	r9, #94
	b	.L11015
.L11033:
	ldr	ip, [fp]
	cmp	ip, #0
	beq	.L11029
	.syntax divided
@ 60 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 111 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/processor.h" 1
	pld	[r6]
@ 0 "" 2
@ 63 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	ip, [r6]
	add	ip, ip, #1
	strex	r1, ip, [r6]
	teq	r1, #0
	bne	1b
@ 0 "" 2
@ 73 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	ip, #1
	mov	r1, r2
	bne	.L11029
	ldr	r2, [fp]
	strb	r9, [r2]
	strb	ip, [r2, #1]
	strb	r3, [r2, #2]
	strb	r3, [r2, #3]
	ldrh	ip, [r4, #108]
	strh	ip, [r2, #4]	@ unaligned
	strb	r3, [r2, #6]
	strb	r3, [r2, #7]
	bl	_raw_spin_unlock_irqrestore
	ldrd	r0, [r4, #128]
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	bne	.L11032
	ldr	r5, [r5]
	cmp	r5, r7
	beq	.L11000
.L11015:
	mov	r0, r10
	ldr	fp, [r4, #132]
	bl	_raw_spin_lock_irqsave
	ldr	ip, [r4, #112]
	mov	r2, r0
	mov	r0, r10
	mov	r1, r2
	clz	r3, fp
	lsr	r3, r3, #5
	cmp	ip, #0
	moveq	r3, #1
	cmp	r3, #0
	beq	.L11033
.L11029:
	bl	_raw_spin_unlock_irqrestore
.L11034:
	ldr	r5, [r5]
	cmp	r5, r7
	bne	.L11015
.L11000:
	mov	r0, r8
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L11032:
	mov	r0, r10
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #136]
	mov	fp, r0
	cmp	r7, r3
	beq	.L11014
	.syntax divided
@ 83 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r2, [r6]
	sub	r2, r2, #1
	strex	r1, r2, [r6]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	ldrd	r0, [r3]
	mov	lr, #256
	mov	ip, #512
	mov	r2, r3
	str	r1, [r0, #4]
	str	r0, [r1]
	str	lr, [r3]
	str	ip, [r3, #4]
	ldr	r0, [r2, #-8]!
	str	r2, [sp]
	str	r2, [sp, #4]
	bl	kfree
	ldr	r2, [sp]
	mov	r0, r2
	bl	kfree
.L11014:
	mov	r1, fp
	mov	r0, r10
	bl	_raw_spin_unlock_irqrestore
	b	.L11034
.L11030:
	mov	r0, #0
	movw	r1, #:lower16:.LC557
	movt	r1, #:upper16:.LC557
	mov	r3, r8
	str	r0, [r2, #28]
	ldr	r0, [r5]
	ldr	r2, [r4, #128]
	add	r0, r0, #32
	ldr	r2, [r2, #4]
	bl	dev_err
	b	.L11000
.L11031:
	movw	r0, #:lower16:.LC569
	ldr	r1, .L11035
	mvn	r8, #18
	movt	r0, #:upper16:.LC569
	bl	printk
	b	.L11009
.L11016:
	mvn	r8, #21
.L11004:
	movw	r0, #:lower16:.LC565
	ldr	r1, .L11035+4
	mov	r3, r8
	movt	r0, #:upper16:.LC565
	ldr	r2, [r2, #4]
	bl	printk
	b	.L11000
.L11006:
	movw	r0, #:lower16:.LC568
	ldr	r1, .L11035
	mvn	r8, #18
	movt	r0, #:upper16:.LC568
	bl	printk
	b	.L11009
.L11036:
	.align	2
.L11035:
	.word	.LANCHOR5-4036
	.word	.LANCHOR5-4048
	.fnend
	.size	gps_set_alt, .-gps_set_alt
	.align	2
	.global	usb_add_function
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_add_function, %function
usb_add_function:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r1, #32]
	cmp	r3, #0
	beq	.L11042
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r1, #40]
	cmp	r3, #0
	beq	.L11043
	str	r0, [r1, #20]
	ldr	ip, [r0, #40]
	add	r3, r1, #64
	add	r2, r0, #36
	mov	r5, r0
	str	r3, [r0, #40]
	str	r2, [r1, #64]
	str	ip, [r1, #68]
	str	r3, [ip]
	ldr	r3, [r1, #24]
	cmp	r3, #0
	moveq	r0, r3
	beq	.L11039
	blx	r3
	cmp	r0, #0
	blt	.L11058
.L11039:
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L11040
.L11059:
	ldr	r2, [r4, #8]
	cmp	r2, #0
	beq	.L11040
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r5, #45]
.L11040:
	tst	r3, #2
	bne	.L11041
	ldr	r2, [r4, #12]
	cmp	r2, #0
	beq	.L11041
	ldrb	r2, [r5, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r5, #45]
.L11041:
	tst	r3, #1
	bne	.L11037
	ldr	r3, [r4, #16]
	cmp	r3, #0
	beq	.L11037
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r5, #45]
.L11037:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L11058:
	ldrd	r2, [r4, #64]
	mov	ip, #256
	mov	r1, #512
	mov	lr, #0
	str	r3, [r2, #4]
	str	r2, [r3]
	str	lr, [r4, #20]
	str	ip, [r4, #64]
	str	r1, [r4, #68]
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L11040
	b	.L11059
.L11043:
.L11038:
	mvn	r0, #21
	b	.L11037
.L11042:
	mvn	r0, #21
	bx	lr
	.fnend
	.size	usb_add_function, .-usb_add_function
	.section	.rodata.str1.4
	.align	2
.LC570:
	.ascii	"<6>acc_bind_config\012\000"
	.align	2
.LC571:
	.ascii	"accessory\000"
	.section	.text.unlikely
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	accessory_function_bind_config, %function
accessory_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR0
	movw	r0, #:lower16:.LC570
	movt	r3, #:upper16:.LANCHOR0
	push	{r4, r5, r6, lr}
	.save {r4, r5, r6, lr}
	movt	r0, #:upper16:.LC570
	mov	r5, r1
	ldr	r4, [r3, #824]
	bl	printk
	movw	r2, #:lower16:.LANCHOR4
	movt	r2, #:upper16:.LANCHOR4
	ldrb	r3, [r2, #-1880]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L11061
	ldr	r1, [r5, #24]
	ldrb	r3, [r1, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L11062
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r2, #-2140]
	strb	r3, [r2, #-1880]
	strb	r3, [r1, #48]
.L11061:
	ldr	r3, .L11065
	movw	r2, #:lower16:.LC571
	movw	ip, #:lower16:acc_function_unbind
	movt	r2, #:upper16:.LC571
	ldr	r0, [r5, #24]
	movt	ip, #:upper16:acc_function_unbind
	str	r2, [r4]
	sub	r1, r3, #8
	add	r2, r3, #16
	stmib	r4, {r1, r3}
	movw	r1, #:lower16:acc_function_bind
	str	r2, [r4, #12]
	movt	r1, #:upper16:acc_function_bind
	str	r0, [r4, #76]
	ldr	r2, [r5, #24]
	mov	r0, r5
	ldr	r2, [r2]
	ldr	r2, [r2, #20]
	str	r1, [r4, #24]
	mov	r1, r4
	str	ip, [r4, #28]
	cmp	r2, #4
	movw	r2, #:lower16:acc_function_set_alt
	addhi	r3, r3, #32
	movt	r2, #:upper16:acc_function_set_alt
	strhi	r3, [r4, #16]
	movw	r3, #:lower16:acc_function_disable
	movt	r3, #:upper16:acc_function_disable
	str	r2, [r4, #32]
	str	r3, [r4, #40]
	pop	{r4, r5, r6, lr}
	b	usb_add_function
.L11062:
	mvn	r0, #18
	pop	{r4, r5, r6, pc}
.L11066:
	.align	2
.L11065:
	.word	.LANCHOR4-1856
	.fnend
	.size	accessory_function_bind_config, .-accessory_function_bind_config
	.section	.rodata.str1.4
	.align	2
.LC572:
	.ascii	"<6>mtp_bind_config\012\000"
	.align	2
.LC573:
	.ascii	"mtp\000"
	.section	.text.unlikely
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mtp_bind_config, %function
mtp_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, lr}
	.save {r4, r5, r6, lr}
	movw	r3, #:lower16:.LANCHOR0
	mov	r5, r0
	movw	r0, #:lower16:.LC572
	movt	r3, #:upper16:.LANCHOR0
	movt	r0, #:upper16:.LC572
	mov	r6, r1
	ldr	r4, [r3, #836]
	bl	printk
	movw	r2, #:lower16:.LANCHOR4
	movt	r2, #:upper16:.LANCHOR4
	ldrb	r3, [r2, #-1800]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L11068
	ldr	r1, [r5, #24]
	ldrb	r3, [r1, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L11069
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r2, #-2056]
	strb	r3, [r2, #-1800]
	strb	r3, [r1, #48]
.L11068:
	ldr	r3, .L11075
	movw	r2, #:lower16:.LC573
	cmp	r6, #0
	movt	r2, #:upper16:.LC573
	ldr	r1, [r5, #24]
	str	r2, [r4]
	sub	r2, r3, #8
	str	r2, [r4, #4]
	str	r1, [r4, #76]
	beq	.L11070
	add	r2, r3, #20
	str	r3, [r4, #8]
	str	r2, [r4, #12]
	ldr	r2, [r5, #24]
	ldr	r2, [r2]
	ldr	r2, [r2, #20]
	cmp	r2, #4
	addhi	r3, r3, #40
	strhi	r3, [r4, #16]
	b	.L11072
.L11070:
	add	r2, r3, #92
	add	r1, r3, #72
	str	r1, [r4, #8]
	str	r2, [r4, #12]
	ldr	r2, [r5, #24]
	ldr	r2, [r2]
	ldr	r2, [r2, #20]
	cmp	r2, #4
	addhi	r3, r3, #112
	strhi	r3, [r4, #16]
.L11072:
	movw	r1, #:lower16:mtp_function_bind
	movw	ip, #:lower16:mtp_function_unbind
	movw	r2, #:lower16:mtp_function_set_alt
	movw	r3, #:lower16:mtp_function_disable
	movt	r1, #:upper16:mtp_function_bind
	movt	ip, #:upper16:mtp_function_unbind
	movt	r2, #:upper16:mtp_function_set_alt
	movt	r3, #:upper16:mtp_function_disable
	mov	r0, r5
	str	r1, [r4, #24]
	mov	r1, r4
	str	ip, [r4, #28]
	str	r2, [r4, #32]
	str	r3, [r4, #40]
	pop	{r4, r5, r6, lr}
	b	usb_add_function
.L11069:
	mvn	r0, #18
	pop	{r4, r5, r6, pc}
.L11076:
	.align	2
.L11075:
	.word	.LANCHOR4-1776
	.fnend
	.size	mtp_bind_config, .-mtp_bind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ptp_function_bind_config, %function
ptp_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, r1
	mov	r1, #1
	b	mtp_bind_config
	.fnend
	.size	ptp_function_bind_config, .-ptp_function_bind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mtp_function_bind_config, %function
mtp_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, r1
	mov	r1, #0
	b	mtp_bind_config
	.fnend
	.size	mtp_function_bind_config, .-mtp_function_bind_config
	.section	.rodata.str1.4
	.align	2
.LC574:
	.ascii	"<3>%s: Unable to allocate gps device\012\000"
	.align	2
.LC575:
	.ascii	"<3>%s: gps: Cannot init gps port\000"
	.align	2
.LC576:
	.ascii	"gsmd_ctrl\000"
	.align	2
.LC577:
	.ascii	"<3>%s: Unable to create workqueue grmnet_ctrl\012\000"
	.align	2
.LC578:
	.ascii	"<3>%s: Unable to alloc port:%d\012\000"
	.align	2
.LC579:
	.ascii	"<3>%s: gps: Cannot setup transports\000"
	.align	2
.LC580:
	.ascii	"<3>%s: failed to get string id, err:%d\012\000"
	.align	2
.LC581:
	.ascii	"gps\000"
	.align	2
.LC582:
	.ascii	"<3>%s: cannot allocate memory for name\012\000"
	.align	2
.LC583:
	.ascii	"<3>%s: usb add function failed: %d\012\000"
	.align	2
.LC584:
	.ascii	"<3>%s: Could not bind gps config\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gps_function_bind_config, %function
gps_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR3
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	movt	r3, #:upper16:.LANCHOR3
	strd	r6, [sp, #8]
	mov	r6, r1
	str	lr, [sp, #16]
	ldr	r2, [r3, #-4072]
	.pad #12
	sub	sp, sp, #12
	cmp	r2, #0
	movwne	r4, #:lower16:.LANCHOR0
	movtne	r4, #:upper16:.LANCHOR0
	bne	.L11080
	movw	r2, #:lower16:kmalloc_caches
	mov	r1, #1
	movt	r2, #:upper16:kmalloc_caches
	ldr	r0, [r2, #8]
	str	r1, [r3, #-4072]
	cmp	r0, #0
	beq	.L11093
	movw	r1, #32976
	bl	kmem_cache_alloc
	cmp	r0, #0
	beq	.L11100
.L11081:
	movw	r4, #:lower16:.LANCHOR0
	mov	r2, #0
	movt	r4, #:upper16:.LANCHOR0
	add	r3, r0, #136
	mov	r1, #3
	strb	r2, [r0, #104]
	str	r2, [r0, #124]
	str	r3, [r0, #136]
	str	r3, [r0, #140]
	str	r1, [r4, #208]
	str	r0, [r4, #212]
.L11080:
	ldrb	r3, [r4]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L11101
.L11083:
	add	r3, r3, #1
	mov	r0, #3
	strb	r3, [r4]
	bl	grmnet_ctrl_smd_port_alloc
	subs	r5, r0, #0
	bne	.L11086
	ldr	r4, [r4, #212]
	movw	r2, #:lower16:.LANCHOR4
	movt	r2, #:upper16:.LANCHOR4
	ldrb	r1, [r2, #-1632]	@ zero_extendqisi2
	ldrb	r3, [r4, #104]	@ zero_extendqisi2
	cmp	r1, #0
	add	r3, r3, #3
	strb	r3, [r4, #104]
	bne	.L11088
	ldr	r1, [r6, #24]
	ldrb	r3, [r1, #48]	@ zero_extendqisi2
	cmp	r3, #253
	addls	r3, r3, #1
	uxtbls	r3, r3
	strbls	r3, [r1, #48]
	strbls	r3, [r2, #-1632]
	bhi	.L11102
.L11088:
	add	r7, r4, #124
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r6, #24]
	movw	r1, #:lower16:.LC581
	mov	r5, r0
	movt	r1, #:upper16:.LC581
	mov	r0, #32
	str	r3, [r4, #120]
	bl	kasprintf
	mov	r3, r0
	mov	r1, r5
	mov	r0, r7
	str	r3, [r4]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r4]
	cmp	r3, #0
	beq	.L11103
	movw	r1, #:lower16:gps_bind
	movw	ip, #:lower16:gps_unbind
	ldr	r5, .L11105
	movw	r3, #:lower16:gps_disable
	movw	r2, #:lower16:gps_set_alt
	movt	r1, #:upper16:gps_bind
	movt	ip, #:upper16:gps_unbind
	movt	r3, #:upper16:gps_disable
	movt	r2, #:upper16:gps_set_alt
	movw	lr, #:lower16:gps_setup
	mov	r0, r6
	str	r5, [r4, #4]
	str	r1, [r4, #24]
	movw	r1, #:lower16:gps_suspend
	movt	lr, #:upper16:gps_setup
	str	ip, [r4, #28]
	movw	ip, #:lower16:gps_send_cpkt_response
	movt	r1, #:upper16:gps_suspend
	str	r2, [r4, #32]
	movw	r2, #:lower16:gps_disconnect
	movt	ip, #:upper16:gps_send_cpkt_response
	str	r3, [r4, #40]
	movw	r3, #:lower16:gps_connect
	movt	r2, #:upper16:gps_disconnect
	movt	r3, #:upper16:gps_connect
	str	lr, [r4, #44]
	str	r1, [r4, #48]
	mov	r1, r4
	str	ip, [r4, #84]
	strd	r2, [r4, #96]
	bl	usb_add_function
	subs	r5, r0, #0
	bne	.L11104
.L11079:
	mov	r0, r5
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L11093:
	mov	r0, #16
	b	.L11081
.L11101:
	movw	r0, #:lower16:.LC576
	mov	r2, #1
	str	r3, [sp]
	movt	r0, #:upper16:.LC576
	mov	r1, #10
	bl	__alloc_workqueue_key
	cmp	r0, #0
	str	r0, [r4, #2280]
	beq	.L11084
	ldrb	r3, [r4]	@ zero_extendqisi2
	b	.L11083
.L11100:
	movw	r0, #:lower16:.LC574
	ldr	r1, .L11105+4
	mvn	r5, #11
	movt	r0, #:upper16:.LC574
	bl	printk
	movw	r0, #:lower16:.LC575
	ldr	r1, .L11105+8
	movt	r0, #:upper16:.LC575
	bl	printk
	b	.L11079
.L11084:
	movw	r0, #:lower16:.LC577
	ldr	r1, .L11105+12
	mvn	r5, #11
	movt	r0, #:upper16:.LC577
	bl	printk
	ldr	r2, [r4, #212]
	ldrb	r3, [r2, #104]	@ zero_extendqisi2
	add	r3, r3, #3
	strb	r3, [r2, #104]
.L11085:
	movw	r0, #:lower16:.LC579
	ldr	r1, .L11105+8
	movt	r0, #:upper16:.LC579
	bl	printk
	b	.L11079
.L11104:
	movw	r0, #:lower16:.LC583
	ldr	r1, .L11105+16
	mov	r2, r5
	movt	r0, #:upper16:.LC583
	bl	printk
	ldr	r0, [r4]
	bl	kfree
.L11091:
	movw	r0, #:lower16:.LC584
	ldr	r1, .L11105+8
	movt	r0, #:upper16:.LC584
	bl	printk
	b	.L11079
.L11103:
	movw	r0, #:lower16:.LC582
	ldr	r1, .L11105+16
	mvn	r5, #11
	movt	r0, #:upper16:.LC582
	bl	printk
	b	.L11091
.L11102:
	movw	r0, #:lower16:.LC580
	mvn	r2, #18
	ldr	r1, .L11105+16
	movt	r0, #:upper16:.LC580
	mov	r5, r2
	bl	printk
	b	.L11091
.L11086:
	movw	r0, #:lower16:.LC578
	ldr	r1, .L11105+12
	mov	r2, #3
	movt	r0, #:upper16:.LC578
	bl	printk
	ldrb	r3, [r4]	@ zero_extendqisi2
	sub	r3, r3, #1
	uxtb	r3, r3
	cmp	r3, #0
	strb	r3, [r4]
	bne	.L11089
	ldr	r0, [r4, #2280]
	bl	destroy_workqueue
.L11089:
	ldr	r2, [r4, #212]
	ldrb	r3, [r2, #104]	@ zero_extendqisi2
	add	r3, r3, #3
	strb	r3, [r2, #104]
	b	.L11085
.L11106:
	.align	2
.L11105:
	.word	.LANCHOR4-1616
	.word	.LANCHOR5-4016
	.word	.LANCHOR5-4000
	.word	.LANCHOR5-3972
	.word	.LANCHOR5-3956
	.fnend
	.size	gps_function_bind_config, .-gps_function_bind_config
	.section	.rodata.str1.4
	.align	2
.LC585:
	.ascii	"qdss\000"
	.align	2
.LC586:
	.ascii	"<3>qdss_bind_config: allocating channel failed\012\000"
	.align	2
.LC587:
	.ascii	"<3>qdss usb_add_function failed\012\000"
	.align	2
.LC588:
	.ascii	"<3>%s: qdss: Cannot open channel qdss\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	qdss_function_bind_config, %function
qdss_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR4
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	movt	r3, #:upper16:.LANCHOR4
	strd	r6, [sp, #8]
	mov	r6, r1
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldrb	r2, [r3, #-1608]	@ zero_extendqisi2
	.pad #8
	sub	sp, sp, #8
	cmp	r2, #0
	bne	.L11108
	ldr	r1, [r1, #24]
	ldrb	r2, [r1, #48]	@ zero_extendqisi2
	cmp	r2, #253
	bhi	.L11111
	add	r2, r2, #1
	uxtb	r2, r2
	strb	r2, [r1, #48]
	ldr	r1, [r6, #24]
	strb	r2, [r3, #-3924]
	strb	r2, [r3, #-1608]
	ldrb	r2, [r1, #48]	@ zero_extendqisi2
	cmp	r2, #253
	bhi	.L11111
	add	r2, r2, #1
	uxtb	r2, r2
	strb	r2, [r3, #-3912]
	strb	r2, [r3, #-1600]
	strb	r2, [r1, #48]
.L11108:
	movw	r10, #:lower16:.LANCHOR1
	ldr	r0, .L11132
	movt	r10, #:upper16:.LANCHOR1
	mov	r8, r10
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r8, #312]!
	mov	r7, r0
	cmp	r5, r8
	sub	r5, r5, #4
	beq	.L11112
	movw	r4, #:lower16:.LC585
	movt	r4, #:upper16:.LC585
	b	.L11114
.L11127:
	ldr	r5, [r5, #4]
	cmp	r5, r8
	sub	r5, r5, #4
	beq	.L11112
.L11114:
	mov	r0, r4
	ldr	r1, [r5]
	bl	strcmp
	cmp	r0, #0
	bne	.L11127
	movw	r9, #:lower16:.LC585
	sub	r4, r5, #104
	movt	r9, #:upper16:.LC585
	str	r4, [r5, #20]
.L11118:
	mov	r1, r7
	ldr	r0, .L11132
	mov	r7, #0
	bl	_raw_spin_unlock_irqrestore
	movw	ip, #:lower16:qdss_set_alt
	ldr	r8, .L11132+4
	mov	r0, r6
	movt	ip, #:upper16:qdss_set_alt
	movw	r2, #:lower16:qdss_bind
	ldr	lr, [r6, #24]
	movw	r3, #:lower16:qdss_unbind
	ldr	r6, .L11132+8
	movt	r2, #:upper16:qdss_bind
	movt	r3, #:upper16:qdss_unbind
	movw	r1, #:lower16:qdss_disable
	str	r9, [r4]
	movt	r1, #:upper16:qdss_disable
	str	ip, [r4, #32]
	add	ip, r4, #140
	stmib	r4, {r6, r8}
	add	r6, r4, #132
	strd	r2, [r4, #24]
	movw	r2, #:lower16:usb_qdss_connect_work
	movw	r3, #:lower16:usb_qdss_disconnect_work
	movt	r2, #:upper16:usb_qdss_connect_work
	movt	r3, #:upper16:usb_qdss_disconnect_work
	str	r8, [r4, #12]
	str	r1, [r4, #40]
	mov	r1, #2560
	str	lr, [r4, #76]
	add	lr, r4, #152
	str	ip, [r4, #140]
	str	ip, [r4, #144]
	add	ip, r4, #168
	str	r6, [r4, #132]
	str	r6, [r4, #136]
	str	r1, [r4, #148]
	str	lr, [r4, #152]
	str	lr, [r4, #156]
	str	r2, [r4, #160]
	str	r1, [r4, #164]
	mov	r1, r4
	str	ip, [r4, #168]
	str	ip, [r4, #172]
	str	r3, [r4, #176]
	str	r7, [r4, #180]
	bl	usb_add_function
	subs	r6, r0, #0
	bne	.L11128
.L11107:
	mov	r0, r6
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L11112:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L11129
	movw	r1, #32800
	bl	kmem_cache_alloc
	subs	r4, r0, #0
	beq	.L11130
.L11115:
	ldr	r0, .L11132
	mov	r1, r7
	movw	r9, #:lower16:.LC585
	bl	_raw_spin_unlock_irqrestore
	mov	r3, #0
	movt	r9, #:upper16:.LC585
	mov	r0, r9
	mov	r2, #1
	mov	r1, #10
	str	r3, [sp]
	bl	__alloc_workqueue_key
	cmp	r0, #0
	str	r0, [r4, #188]
	beq	.L11131
	ldr	r0, .L11132
	add	r5, r4, #104
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r10, #316]
	add	r2, r4, #108
	mov	r7, r0
	str	r9, [r4, #104]
	str	r8, [r4, #108]
	str	r2, [r10, #316]
	str	r3, [r4, #112]
	str	r2, [r3]
	b	.L11118
.L11129:
	mov	r4, #16
	b	.L11115
.L11111:
	mvn	r6, #18
.L11110:
	movw	r0, #:lower16:.LC588
	ldr	r1, .L11132+12
	movt	r0, #:upper16:.LC588
	bl	printk
	b	.L11107
.L11131:
	mov	r0, r4
	mvn	r6, #11
	bl	kfree
	b	.L11110
.L11128:
	movw	r0, #:lower16:.LC587
	movt	r0, #:upper16:.LC587
	bl	printk
	mov	r0, r4
	str	r7, [r5, #20]
	bl	kfree
	b	.L11110
.L11130:
	movw	r0, #:lower16:.LC586
	mvn	r6, #11
	movt	r0, #:upper16:.LC586
	bl	printk
	ldr	r0, .L11132
	mov	r1, r7
	bl	_raw_spin_unlock_irqrestore
	b	.L11110
.L11133:
	.align	2
.L11132:
	.word	.LANCHOR0+2272
	.word	.LANCHOR4-3812
	.word	.LANCHOR4-1584
	.word	.LANCHOR5-3940
	.fnend
	.size	qdss_function_bind_config, .-qdss_function_bind_config
	.section	.rodata.str1.4
	.align	2
.LC589:
	.ascii	"gmidi function\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	midi_function_bind_config, %function
midi_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	mov	r7, r1
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r6, [r0, #4]
	cmp	r6, #0
	beq	.L11135
	mvn	r3, #0
	str	r3, [r6]
	str	r3, [r6, #4]
.L11135:
	movw	r5, #:lower16:kmalloc_caches
	movt	r5, #:upper16:kmalloc_caches
	ldr	r0, [r5, #36]
	cmp	r0, #0
	beq	.L11143
	movw	r1, #32976
	bl	kmem_cache_alloc
	subs	r4, r0, #0
	beq	.L11156
	ldr	r0, [r5, #24]
	cmp	r0, #0
	beq	.L11157
.L11154:
	movw	r1, #32976
	bl	kmem_cache_alloc
	subs	r3, r0, #0
	beq	.L11158
.L11141:
	mov	r5, #0
	movw	r1, #:lower16:f_midi_in_tasklet
	mov	r2, r4
	movt	r1, #:upper16:f_midi_in_tasklet
	strd	r4, [r3]
	add	r0, r4, #292
	strb	r5, [r3, #8]
	str	r3, [r4, #224]
	ldr	r3, [r7, #24]
	ldr	r3, [r3]
	str	r3, [r4, #76]
	bl	tasklet_init
	mov	r0, r5
	mov	r1, #208
	bl	kstrdup
	mov	ip, r0
	mov	r3, #1
	mvn	r0, #0
	mov	r1, #1024
	mov	r2, #32
	str	r3, [r4, #312]
	str	r3, [r4, #316]
	str	r0, [r4, #320]
	mov	r0, r4
	str	ip, [r4, #324]
	str	r1, [r4, #328]
	str	r2, [r4, #332]
	bl	f_midi_register_card
	subs	r5, r0, #0
	blt	.L11139
	ldr	lr, .L11159
	movw	r3, #:lower16:.LC589
	movw	ip, #:lower16:f_midi_bind
	movt	r3, #:upper16:.LC589
	movw	r1, #:lower16:f_midi_unbind
	movw	r2, #:lower16:f_midi_set_alt
	movt	ip, #:upper16:f_midi_bind
	movt	r1, #:upper16:f_midi_unbind
	movt	r2, #:upper16:f_midi_set_alt
	stm	r4, {r3, lr}
	movw	r3, #:lower16:f_midi_disable
	mov	r0, r7
	movt	r3, #:upper16:f_midi_disable
	str	ip, [r4, #24]
	str	r1, [r4, #28]
	mov	r1, r4
	str	r2, [r4, #32]
	str	r3, [r4, #40]
	bl	usb_add_function
	subs	r5, r0, #0
	bne	.L11139
	cmp	r6, #0
	beq	.L11134
	ldr	r3, [r4, #92]
	ldr	r3, [r3]
	ldr	r3, [r3]
	str	r3, [r6]
	ldr	r3, [r4, #92]
	ldr	r3, [r3, #12]
	str	r3, [r6, #4]
	b	.L11134
.L11139:
	ldr	r0, [r4, #224]
	bl	kfree
.L11138:
	mov	r0, r4
	bl	kfree
.L11134:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L11143:
	ldr	r0, [r5, #24]
	mov	r4, #16
	cmp	r0, #0
	bne	.L11154
.L11157:
	mov	r3, #16
	b	.L11141
.L11158:
	mvn	r5, #11
	b	.L11138
.L11156:
	mvn	r5, #11
	b	.L11134
.L11160:
	.align	2
.L11159:
	.word	.LANCHOR4-1576
	.fnend
	.size	midi_function_bind_config, .-midi_function_bind_config
	.section	.rodata.str1.4
	.align	2
.LC590:
	.ascii	"USB audio source\000"
	.align	2
.LC591:
	.ascii	"USB gadget audio\000"
	.align	2
.LC592:
	.ascii	"audio_source\000"
	.align	2
.LC593:
	.ascii	"USB accessory audio source\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_source_function_bind_config, %function
audio_source_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mvn	ip, #0
	mov	r3, #0
	strd	r6, [sp, #8]
	mov	r2, r3
	mov	r6, r1
	str	r8, [sp, #16]
	mov	r1, r3
	str	lr, [sp, #20]
	ldr	r7, [r0, #4]
	.pad #16
	sub	sp, sp, #16
	add	lr, sp, #8
	mov	r0, ip
	str	ip, [r7]
	str	ip, [r7, #4]
	str	lr, [sp]
	bl	snd_card_create
	subs	r4, r0, #0
	beq	.L11169
.L11161:
	mov	r0, r4
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L11169:
	ldr	r3, [r6, #24]
	add	lr, sp, #12
	movw	r1, #:lower16:.LC590
	ldr	r0, [sp, #8]
	mov	r2, r4
	movt	r1, #:upper16:.LC590
	movw	r5, #:lower16:.LANCHOR4
	ldr	ip, [r3]
	mov	r3, #1
	add	ip, ip, #32
	str	ip, [r0, #500]
	stm	sp, {r4, lr}
	bl	snd_pcm_new
	subs	r4, r0, #0
	movtne	r5, #:upper16:.LANCHOR4
	bne	.L11165
	ldr	r3, [sp, #12]
	movt	r5, #:upper16:.LANCHOR4
	movw	r1, #:lower16:.LC591
	sub	r8, r5, #1568
	movt	r1, #:upper16:.LC591
	mov	r2, #80
	add	r0, r3, #88
	str	r4, [r3, #16]
	str	r8, [r3, #276]
	str	r3, [r5, #-1488]
	bl	strlcpy
	sub	r2, r5, #1408
	mov	r1, r4
	ldr	r0, [sp, #12]
	sub	r2, r2, #8
	bl	snd_pcm_set_ops
	mov	ip, #65536
	mov	r3, r4
	ldr	r0, [sp, #12]
	mov	r2, r4
	mov	r1, #2
	str	ip, [sp]
	bl	snd_pcm_lib_preallocate_pages_for_all
	ldr	r0, [sp, #8]
	movw	r1, #:lower16:.LC592
	mov	r2, #16
	movt	r1, #:upper16:.LC592
	add	r0, r0, #20
	bl	strlcpy
	ldr	r0, [sp, #8]
	mov	r2, #32
	add	r1, r0, #20
	add	r0, r0, #36
	bl	strlcpy
	ldr	r0, [sp, #8]
	movw	r1, #:lower16:.LC593
	mov	r2, #80
	movt	r1, #:upper16:.LC593
	add	r0, r0, #68
	bl	strlcpy
	ldr	r0, [sp, #8]
	bl	snd_card_register
	subs	r4, r0, #0
	beq	.L11170
.L11163:
.L11164:
.L11165:
	ldr	r0, [r5, #-1492]
	bl	snd_card_free
	b	.L11161
.L11170:
	mov	r1, r8
	mov	r0, r6
	bl	usb_add_function
	subs	r4, r0, #0
	bne	.L11165
	ldr	r3, [sp, #12]
	ldr	r2, [r3]
	ldr	r2, [r2]
	str	r2, [r7]
	ldr	r2, [r3, #12]
	ldr	r3, [sp, #8]
	str	r2, [r7, #4]
	str	r3, [r5, #-1492]
	b	.L11161
	.fnend
	.size	audio_source_function_bind_config, .-audio_source_function_bind_config
	.align	2
	.global	usb_function_deactivate
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_function_deactivate, %function
usb_function_deactivate:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r3, [r0, #20]
	ldr	r4, [r3, #24]
	add	r7, r4, #60
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r1, [r4, #52]
	mov	r5, r0
	cmp	r1, #0
	bne	.L11172
	ldr	r0, [r4]
	ldr	r3, [r0]
	ldr	r3, [r3, #20]
	cmp	r3, #0
	beq	.L11174
	blx	r3
	subs	r6, r0, #0
	bne	.L11173
	ldr	r1, [r4, #52]
.L11172:
	add	r1, r1, #1
	mov	r6, #0
	str	r1, [r4, #52]
.L11173:
	mov	r0, r7
	mov	r1, r5
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L11174:
	mvn	r6, #94
	b	.L11173
	.fnend
	.size	usb_function_deactivate, .-usb_function_deactivate
	.align	2
	.global	usb_function_activate
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_function_activate, %function
usb_function_activate:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r0, #20]
	ldr	r4, [r3, #24]
	add	r5, r4, #60
	mov	r0, r5
	bl	_raw_spin_lock
	ldr	r3, [r4, #52]
	cmp	r3, #0
	beq	.L11183
	sub	r3, r3, #1
	cmp	r3, #0
	str	r3, [r4, #52]
	bne	.L11184
	ldr	r0, [r4]
	ldr	r3, [r0]
	ldr	r3, [r3, #20]
	cmp	r3, #0
	beq	.L11180
	mov	r1, #1
	blx	r3
	mov	r4, r0
	b	.L11178
.L11184:
	mov	r4, #0
.L11178:
	mov	r0, r5
	bl	_raw_spin_unlock
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L11183:
	movw	r0, #:lower16:.LC425
	movw	r1, #307
	movt	r0, #:upper16:.LC425
	mvn	r4, #21
	bl	warn_slowpath_null
	b	.L11178
.L11180:
	mvn	r4, #94
	b	.L11178
	.fnend
	.size	usb_function_activate, .-usb_function_activate
	.align	2
	.global	usb_interface_id
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_interface_id, %function
usb_interface_id:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r3, r0
	ldrb	r0, [r0, #44]	@ zero_extendqisi2
	cmp	r0, #15
	bhi	.L11187
	add	ip, r0, #12
	add	r2, r0, #1
	str	r1, [r3, ip, lsl #2]
	strb	r2, [r3, #44]
	bx	lr
.L11187:
	mvn	r0, #18
	bx	lr
	.fnend
	.size	usb_interface_id, .-usb_interface_id
	.align	2
	.global	usb_add_config
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_add_config, %function
usb_add_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrb	r4, [r1, #20]	@ zero_extendqisi2
	cmp	r4, #0
	cmpne	r2, #0
	beq	.L11195
	mov	lr, r0
	mov	r5, r1
	ldr	r3, [lr, #36]!
	mov	r6, r0
	mov	r7, r2
	cmp	lr, r3
	sub	r3, r3, #28
	bne	.L11191
	b	.L11190
.L11200:
	ldr	r3, [r3, #28]
	cmp	lr, r3
	sub	r3, r3, #28
	beq	.L11190
.L11191:
	ldrb	ip, [r3, #20]	@ zero_extendqisi2
	cmp	ip, r4
	bne	.L11200
.L11189:
	mvn	r0, #15
	b	.L11188
.L11190:
	str	r6, [r5, #24]
	ldr	r0, [r6, #40]
	add	r2, r5, #28
	add	r3, r5, #36
	mov	r4, #0
	mov	r1, #64
	str	r2, [r6, #40]
	str	lr, [r5, #28]
	str	r0, [r5, #32]
	str	r2, [r0]
	add	r0, r5, #48
	str	r3, [r5, #36]
	str	r3, [r5, #40]
	strb	r4, [r5, #44]
	bl	__memzero
	mov	r0, r5
	blx	r7
	cmp	r0, #0
	blt	.L11201
.L11192:
	ldr	r1, [r6]
	ldr	r3, [r1, #8]!
	cmp	r1, r3
	sub	r3, r3, #12
	beq	.L11193
	mov	ip, #0
.L11194:
	ldr	r2, [r3, #12]
	str	ip, [r3]
	cmp	r1, r2
	sub	r3, r2, #12
	bne	.L11194
.L11193:
	movw	r3, #:lower16:.LANCHOR0
	mov	r2, #0
	movt	r3, #:upper16:.LANCHOR0
	str	r2, [r3, #3272]
.L11188:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L11201:
	ldrd	r2, [r5, #28]
	mov	ip, #256
	mov	r1, #512
	str	r3, [r2, #4]
	str	r2, [r3]
	str	r4, [r5, #24]
	str	ip, [r5, #28]
	str	r1, [r5, #32]
	b	.L11192
.L11195:
	mvn	r0, #21
	b	.L11188
	.fnend
	.size	usb_add_config, .-usb_add_config
	.section	.rodata.str1.4
	.align	2
.LC594:
	.ascii	"<7>usb: %s cdev->config=%pK, config=%pK\012\000"
	.section	.text.unlikely
	.align	2
	.global	usb_remove_config
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_remove_config, %function
usb_remove_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, r7, r8, r9, r10, lr}
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r1
	mov	r5, r0
	movw	r0, #:lower16:.LC594
	ldr	r1, .L11225
	mov	r3, r4
	movt	r0, #:upper16:.LC594
	ldr	r2, [r5, #12]
	add	r8, r5, #60
	bl	printk
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #24]
	mov	r7, r0
	cmp	r3, #0
	bne	.L11203
	movw	r0, #:lower16:.LC425
	movw	r1, #845
	movt	r0, #:upper16:.LC425
	bl	warn_slowpath_null
	mov	r1, r7
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	b	.L11218
.L11203:
	ldr	r3, [r5, #12]
	cmp	r3, r4
	bne	.L11212
	ldr	r6, [r4, #36]
	mov	r9, #0
	sub	r6, r6, #64
.L11205:
	ldr	r3, [r5, #12]
	add	r2, r6, #64
	add	r3, r3, #36
	cmp	r2, r3
	beq	.L11223
	ldr	r3, [r6, #40]
	cmp	r3, #0
	beq	.L11206
	mov	r0, r6
	blx	r3
.L11206:
	ldr	r3, [r6, #64]
	str	r9, [r6, #72]
	sub	r6, r3, #64
	b	.L11205
.L11223:
	mov	r3, #0
	str	r3, [r5, #12]
	str	r3, [r5, #56]
.L11212:
	ldr	ip, [r4, #28]
	mov	r3, #256
	mov	lr, #512
	ldr	r2, [r4, #32]
	mov	r1, r7
	mov	r0, r8
	mov	r5, r3
	add	r6, r4, #36
	str	r2, [ip, #4]
	str	ip, [r2]
	str	r3, [r4, #28]
	str	lr, [r4, #32]
	bl	_raw_spin_unlock_irqrestore
.L11208:
	mov	r0, #512
.L11209:
	ldr	r1, [r4, #36]
	cmp	r1, r6
	beq	.L11224
	ldrd	r2, [r1]
	str	r3, [r2, #4]
	str	r2, [r3]
	ldr	r3, [r1, #-36]
	str	r5, [r1]
	str	r0, [r1, #4]
	cmp	r3, #0
	beq	.L11209
	sub	r1, r1, #64
	mov	r0, r4
	blx	r3
	b	.L11208
.L11224:
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L11218
	mov	r0, r4
	blx	r3
.L11218:
	mov	r0, #0
	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
.L11226:
	.align	2
.L11225:
	.word	.LANCHOR5-3912
	.fnend
	.size	usb_remove_config, .-usb_remove_config
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	android_disable, %function
android_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r5, [r0, #8]
	ldr	r1, [r0, #20]
	add	r3, r1, #1
	cmp	r1, #0
	str	r3, [r0, #20]
	bne	.L11227
	mov	r4, r0
	ldr	r0, [r5]
	ldr	r3, [r0]
	ldr	r3, [r3, #20]
	cmp	r3, #0
	beq	.L11229
	blx	r3
	ldr	r0, [r5]
.L11229:
	ldr	r0, [r0, #4]
	ldr	r1, [r5, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	ldr	r3, [r4, #196]!
	cmp	r4, r3
	sub	r3, r3, #120
	bne	.L11237
.L11227:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L11237:
	mov	r6, r3
.L11231:
	mov	r1, r6
	mov	r0, r5
	bl	usb_remove_config
	ldr	r3, [r6, #120]
	cmp	r4, r3
	sub	r6, r3, #120
	beq	.L11227
	b	.L11231
	.fnend
	.size	android_disable, .-android_disable
	.section	.rodata.str1.4
	.align	2
.LC595:
	.ascii	"enabled\000"
	.align	2
.LC596:
	.ascii	"disabled\000"
	.align	2
.LC597:
	.ascii	"<3>%s: %s: android_enable failed\012\000"
	.align	2
.LC598:
	.ascii	"<3>%s: android_usb: already %s\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	enable_store, %function
enable_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r2
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #20
	sub	sp, sp, #20
	str	r3, [sp, #4]
	bl	dev_get_drvdata
	ldr	r5, [r0, #8]
	mov	r3, #0
	str	r3, [sp, #12]
	cmp	r5, r3
	beq	.L11258
	add	r10, r0, #24
	mov	r8, r0
	mov	r0, r10
	bl	mutex_lock
	movw	r1, #:lower16:.LC246
	mov	r0, r4
	movt	r1, #:upper16:.LC246
	add	r2, sp, #12
	bl	sscanf
	ldr	r3, [sp, #12]
	cmp	r3, #0
	beq	.L11240
	ldrb	r4, [r8, #16]	@ zero_extendqisi2
	cmp	r4, #0
	bne	.L11241
	movw	r3, #:lower16:.LANCHOR1
	mov	fp, r8
	movt	r3, #:upper16:.LANCHOR1
	ldrb	r0, [r3, #228]	@ zero_extendqisi2
	ldrb	r1, [r3, #229]	@ zero_extendqisi2
	ldrb	r2, [r3, #230]	@ zero_extendqisi2
	ldr	ip, [r3, #232]
	ldrh	r3, [r3, #236]
	strb	r0, [r5, #21]
	strb	r1, [r5, #22]
	strb	r2, [r5, #23]
	str	ip, [r5, #25]	@ unaligned
	strh	r3, [r5, #29]	@ unaligned
	ldr	r7, [fp, #196]!
	cmp	fp, r7
	sub	r7, r7, #120
	beq	.L11243
	movw	r6, #:lower16:.LC592
	movt	r6, #:upper16:.LC592
.L11242:
	mov	r5, r7
	ldr	r3, [r5, #112]!
	cmp	r5, r3
	sub	r9, r3, #4
	beq	.L11244
.L11247:
	ldr	r0, [r9]
	ldr	r2, [r0, #32]
	cmp	r2, #0
	beq	.L11245
	blx	r2
	ldr	r0, [r9]
.L11245:
	mov	r2, #12
	mov	r1, r6
	ldr	r0, [r0]
	bl	strncmp
	ldr	r3, [r9, #4]
	cmp	r0, #0
	moveq	r4, #1
	cmp	r5, r3
	sub	r9, r3, #4
	bne	.L11247
.L11244:
	ldr	r7, [r7, #120]
	cmp	fp, r7
	sub	r7, r7, #120
	bne	.L11242
	cmp	r4, #0
	bne	.L11279
.L11243:
	mov	r0, r8
	bl	android_enable
	cmp	r0, #0
	movge	r3, #1
	strbge	r3, [r8, #16]
	bge	.L11250
	ldr	r2, .L11282
	movw	r0, #:lower16:.LC597
	movt	r0, #:upper16:.LC597
	mov	r1, r2
	bl	printk
	mov	r3, #0
	mov	r0, r10
	strb	r3, [r8, #16]
	strb	r3, [r8, #52]
	bl	mutex_unlock
	ldr	r0, [sp, #4]
	b	.L11238
.L11240:
	ldrb	r3, [r8, #16]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L11280
.L11241:
	ldr	r4, .L11282+4
	ldr	r0, .L11282+8
	sub	r1, r4, #4
	bl	___ratelimit
	cmp	r0, #0
	bne	.L11281
.L11250:
	mov	r0, r10
	bl	mutex_unlock
	ldr	r0, [sp, #4]
.L11238:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L11279:
	mov	r0, #100
	bl	msleep
	b	.L11243
.L11280:
	mov	r6, r8
	mov	r0, r8
	bl	android_disable
	ldr	r5, [r6, #196]!
	cmp	r6, r5
	sub	r5, r5, #120
	beq	.L11253
.L11251:
	mov	r7, r5
	ldr	r4, [r7, #112]!
	cmp	r7, r4
	sub	r4, r4, #4
	beq	.L11256
.L11252:
	ldr	r0, [r4]
	ldr	r3, [r0, #36]
	cmp	r3, #0
	beq	.L11254
	blx	r3
	ldr	r4, [r4, #4]
	cmp	r7, r4
	sub	r4, r4, #4
	bne	.L11252
.L11256:
	ldr	r5, [r5, #120]
	cmp	r6, r5
	sub	r5, r5, #120
	bne	.L11251
.L11253:
	mov	r3, #0
	strb	r3, [r8, #16]
	b	.L11250
.L11254:
	ldr	r4, [r4, #4]
	cmp	r7, r4
	sub	r4, r4, #4
	bne	.L11252
	b	.L11256
.L11258:
	mvn	r0, #18
	b	.L11238
.L11281:
	ldrb	ip, [r8, #16]	@ zero_extendqisi2
	movw	r3, #:lower16:.LC596
	movw	r2, #:lower16:.LC595
	movt	r3, #:upper16:.LC596
	movw	r0, #:lower16:.LC598
	movt	r2, #:upper16:.LC595
	sub	r1, r4, #4
	movt	r0, #:upper16:.LC598
	cmp	ip, #0
	moveq	r2, r3
	bl	printk
	b	.L11250
.L11283:
	.align	2
.L11282:
	.word	.LANCHOR5-3892
	.word	.LANCHOR5-3888
	.word	.LANCHOR4-1352
	.fnend
	.size	enable_store, .-enable_store
	.section	.rodata.str1.4
	.align	2
.LC599:
	.ascii	"<6>adb_release\012\000"
	.align	2
.LC600:
	.ascii	"<3>%s: adb_closed_callback: data->dev is NULL\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_release, %function
adb_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r1, .L11307
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	ldr	r0, .L11307+4
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	___ratelimit
	cmp	r0, #0
	bne	.L11303
.L11285:
	movw	r4, #:lower16:.LANCHOR0
	movt	r4, #:upper16:.LANCHOR0
	ldr	r3, [r4, #2284]
	ldrb	r2, [r3, #152]	@ zero_extendqisi2
	cmp	r2, #0
	bne	.L11304
.L11286:
	add	r2, r3, #108
	.syntax divided
@ 83 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r1, [r2]
	sub	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	ldrd	r4, [sp]
	mov	r0, #0
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L11304:
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r6, [r3, #1420]
	ldr	r5, [r3, #1436]
	cmp	r5, #0
	beq	.L11305
.L11287:
	add	r7, r5, #24
	mov	r8, #0
	mov	r0, r7
	bl	mutex_lock
	ldrb	r3, [r6, #1]	@ zero_extendqisi2
	strb	r8, [r6]
	cmp	r3, r8
	beq	.L11306
	mov	r0, r5
	bl	android_disable
	str	r8, [r6, #4]
.L11291:
	mov	r0, r7
	bl	mutex_unlock
.L11290:
	ldr	r3, [r4, #2284]
	mov	r2, #1
	strb	r2, [r3, #153]
	b	.L11286
.L11305:
	ldr	r5, [r6, #4]
	cmp	r5, #0
	bne	.L11287
	movw	r0, #:lower16:.LC600
	ldr	r1, .L11307+8
	movt	r0, #:upper16:.LC600
	bl	printk
	ldrb	r3, [r6, #1]	@ zero_extendqisi2
	strb	r5, [r6]
	cmp	r3, #0
	moveq	r5, r3
	str	r5, [r6, #4]
	b	.L11290
.L11306:
	str	r3, [r6, #4]
	b	.L11291
.L11303:
	movw	r0, #:lower16:.LC599
	movt	r0, #:upper16:.LC599
	bl	printk
	b	.L11285
.L11308:
	.align	2
.L11307:
	.word	.LANCHOR5-3876
	.word	.LANCHOR4-1328
	.word	.LANCHOR5-3864
	.fnend
	.size	adb_release, .-adb_release
	.section	.rodata.str1.4
	.align	2
.LC601:
	.ascii	"<3>%s: adb_closed_callback: config->dev is NULL\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_data_clear, %function
ffs_data_clear:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	mov	r0, #0
	add	r5, r4, #132
	strd	r6, [sp, #8]
	mov	r1, r5
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	_test_and_clear_bit
	cmp	r0, #0
	bne	.L11342
.L11311:
	ldr	r3, [r4]
	cmp	r3, #0
	bne	.L11322
	ldr	r8, [r4, #220]
	cmp	r8, #0
	beq	.L11320
	ldrh	r6, [r4, #184]
	cmp	r6, #0
	beq	.L11321
	mov	r7, r3
	mov	r5, r8
.L11325:
	ldr	r3, [r5]
	cmp	r3, #1
	bne	.L11322
	ldr	r2, [r5, #28]
	add	r3, r5, #28
	cmp	r2, r3
	bne	.L11322
	ldr	r0, [r5, #48]
	cmp	r0, #0
	beq	.L11324
	bl	d_delete
	ldr	r0, [r5, #48]
	bl	dput
	str	r7, [r5, #48]
.L11324:
	subs	r6, r6, #1
	add	r5, r5, #60
	bne	.L11325
.L11321:
	mov	r0, r8
	bl	kfree
.L11320:
	ldr	r0, [r4, #148]
	bl	kfree
	ldr	r0, [r4, #188]
	bl	kfree
	ldr	r0, [r4, #192]
	bl	kfree
	ldr	r0, [r4, #196]
	bl	kfree
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	ldr	r0, [r4, #200]
	ldrd	r4, [sp]
	add	sp, sp, #24
	b	kfree
.L11322:
	.syntax divided
@ 1543 "drivers/usb/gadget/f_fs.c" 1
	.word 0xe7f001f2
@ 0 "" 2
	.arm
	.syntax unified
.L11342:
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r8, [r3, #1624]
	ldr	r7, [r3, #1640]
	cmp	r7, #0
	beq	.L11343
.L11312:
	add	r0, r7, #24
	bl	mutex_lock
	ldrb	r3, [r8, #1]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L11314
.L11315:
	mov	r6, #0
	strb	r6, [r8]
	str	r6, [r8, #4]
	str	r6, [r8, #8]
	ldr	r3, [r4]
	cmp	r3, r6
	beq	.L11344
	ldr	r0, [r3, #4]
	ldr	r1, [r4, #32]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	mov	r3, r4
	str	r6, [r4, #32]
	str	r6, [r3], #88
	.syntax divided
@ 99 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 111 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/processor.h" 1
	pld	[r3]
@ 0 "" 2
@ 102 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r2, [r3]
	sub	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
@ 112 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r2, #0
	beq	.L11345
.L11327:
	mov	r1, r5
	mov	r0, #1
	bl	_clear_bit
.L11317:
	cmp	r7, #0
	beq	.L11311
	add	r0, r7, #24
	bl	mutex_unlock
	b	.L11311
.L11314:
	mov	r0, r7
	bl	android_disable
	b	.L11315
.L11343:
	ldr	r7, [r8, #8]
	cmp	r7, #0
	bne	.L11312
	movw	r0, #:lower16:.LC601
	ldr	r1, .L11346
	movt	r0, #:upper16:.LC601
	bl	printk
	b	.L11315
.L11344:
	movw	r0, #:lower16:.LC12
	movw	r1, #1497
	movt	r0, #:upper16:.LC12
	bl	warn_slowpath_null
	b	.L11317
.L11345:
	mov	r0, r4
	bl	ffs_data_put.part.0
	b	.L11327
.L11347:
	.align	2
.L11346:
	.word	.LANCHOR5-3844
	.fnend
	.size	ffs_data_clear, .-ffs_data_clear
	.section	.rodata.str1.4
	.align	2
.LC602:
	.ascii	"<6>%s(): freeing\012\000"
	.section	.text.unlikely
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_data_put.part.0, %function
ffs_data_put.part.0:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, lr}
	.save {r4, lr}
	mov	r4, r0
	movw	r0, #:lower16:.LC602
	ldr	r1, .L11352
	movt	r0, #:upper16:.LC602
	bl	printk
	mov	r0, r4
	bl	ffs_data_clear
	ldr	r2, [r4, #124]
	add	r3, r4, #124
	cmp	r2, r3
	bne	.L11349
	ldr	r2, [r4, #44]
	add	r3, r4, #44
	cmp	r2, r3
	beq	.L11350
.L11349:
	.syntax divided
@ 1362 "drivers/usb/gadget/f_fs.c" 1
	.word 0xe7f001f2
@ 0 "" 2
	.arm
	.syntax unified
.L11350:
	ldr	r0, [r4, #140]
	bl	kfree
	mov	r0, r4
	pop	{r4, lr}
	b	kfree
.L11353:
	.align	2
.L11352:
	.word	.LANCHOR5-3816
	.fnend
	.size	ffs_data_put.part.0, .-ffs_data_put.part.0
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_fs_kill_sb, %function
ffs_fs_kill_sb:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	bl	kill_litter_super
	ldr	r0, [r4, #624]
	cmp	r0, #0
	beq	.L11354
	add	r3, r0, #88
	.syntax divided
@ 99 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 111 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/processor.h" 1
	pld	[r3]
@ 0 "" 2
@ 102 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r2, [r3]
	sub	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
@ 112 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r2, #0
	beq	.L11359
.L11354:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L11359:
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	ffs_data_put.part.0
	.fnend
	.size	ffs_fs_kill_sb, .-ffs_fs_kill_sb
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_func_free, %function
ffs_func_free:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	mov	r7, r0
	mov	r6, #0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r3, [r0, #8]
	ldr	r4, [r0, #12]
	add	r0, r3, #28
	ldrh	r5, [r3, #184]
	bl	_raw_spin_lock_irqsave
	add	r4, r4, #28
	mov	r8, r0
.L11362:
	ldr	r3, [r4, #-28]
	cmp	r3, #0
	mov	r0, r3
	beq	.L11361
	ldr	r1, [r4, #-24]
	cmp	r1, #0
	beq	.L11361
	ldr	r3, [r3, #8]
	ldr	r3, [r3, #12]
	blx	r3
.L11361:
	subs	r5, r5, #1
	add	r4, r4, #28
	str	r6, [r4, #-56]
	str	r6, [r4, #-52]
	bne	.L11362
	ldr	r0, [r7, #8]
	mov	r1, r8
	add	r0, r0, #28
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, [r7, #8]
	add	r3, r0, #88
	.syntax divided
@ 99 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 111 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/processor.h" 1
	pld	[r3]
@ 0 "" 2
@ 102 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r2, [r3]
	sub	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
@ 112 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r2, #0
	beq	.L11372
.L11363:
	ldr	r0, [r7, #12]
	bl	kfree
	ldr	r0, [r7, #32]
	bl	kfree
	ldr	r0, [r7, #36]
	bl	kfree
	ldr	r0, [r7, #40]
	bl	kfree
	ldr	r0, [r7, #44]
	bl	kfree
	ldr	r0, [r7, #48]
	bl	kfree
	mov	r0, r7
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	kfree
.L11372:
	bl	ffs_data_put.part.0
	b	.L11363
	.fnend
	.size	ffs_func_free, .-ffs_func_free
	.section	.rodata.str1.4
	.align	2
.LC603:
	.ascii	"Function FS Gadget\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_function_bind_config, %function
ffs_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	movt	r3, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r2, [r0, #4]
	ldr	r0, [r3, #28]
	ldr	r7, [r1, #24]
	ldr	r6, [r2, #4]
	cmp	r0, #0
	beq	.L11381
	movw	r1, #32976
	bl	kmem_cache_alloc
	subs	r4, r0, #0
	mvneq	r6, #11
	bne	.L11374
.L11373:
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L11381:
	mov	r4, #16
.L11374:
	movw	r3, #:lower16:.LC603
	movw	r1, #:lower16:ffs_func_bind
	movt	r3, #:upper16:.LC603
	movw	r2, #:lower16:ffs_func_set_alt
	movt	r1, #:upper16:ffs_func_bind
	movt	r2, #:upper16:ffs_func_set_alt
	str	r3, [r4, #52]
	movw	r3, #:lower16:ffs_func_unbind
	ldr	ip, [r6, #192]
	movt	r3, #:upper16:ffs_func_unbind
	movw	r0, #:lower16:ffs_func_disable
	str	r5, [r4]
	str	r1, [r4, #76]
	movw	r1, #:lower16:ffs_func_setup
	movt	r0, #:upper16:ffs_func_disable
	str	r2, [r4, #84]
	movw	r2, #:lower16:ffs_func_resume
	movt	r1, #:upper16:ffs_func_setup
	str	r3, [r4, #80]
	movw	r3, #:lower16:ffs_func_suspend
	movt	r2, #:upper16:ffs_func_resume
	movt	r3, #:upper16:ffs_func_suspend
	str	ip, [r4, #56]
	str	r0, [r4, #92]
	str	r1, [r4, #96]
	str	r3, [r4, #100]
	add	r3, r6, #88
	str	r2, [r4, #104]
	ldr	r2, [r7]
	stmib	r4, {r2, r6}
	.syntax divided
@ 44 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	@ atomic_add
1:	ldrex	r2, [r3]
	add	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r3, [r4, #84]
	cmp	r3, #0
	beq	.L11384
	ldr	r3, [r4, #92]
	cmp	r3, #0
	beq	.L11384
	str	r5, [r4, #72]
	ldr	r0, [r5, #40]
	add	r3, r4, #116
	add	r2, r5, #36
	add	r1, r4, #52
	str	r3, [r5, #40]
	str	r2, [r4, #116]
	str	r0, [r4, #120]
	str	r3, [r0]
	ldr	r6, [r4, #76]
	cmp	r6, #0
	beq	.L11377
	mov	r0, r5
	blx	r6
	subs	r6, r0, #0
	blt	.L11399
.L11377:
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L11378
.L11400:
	ldr	r2, [r4, #60]
	cmp	r2, #0
	beq	.L11378
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r5, #45]
.L11378:
	tst	r3, #2
	bne	.L11379
	ldr	r2, [r4, #64]
	cmp	r2, #0
	beq	.L11379
	ldrb	r2, [r5, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r5, #45]
.L11379:
	tst	r3, #1
	bne	.L11380
	ldr	r3, [r4, #68]
	cmp	r3, #0
	beq	.L11380
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r5, #45]
.L11380:
	cmp	r6, #0
	beq	.L11373
.L11376:
	mov	r0, r4
	bl	ffs_func_free
	b	.L11373
.L11399:
	ldrd	r2, [r4, #116]
	mov	r0, #256
	mov	r1, #512
	mov	ip, #0
	str	r3, [r2, #4]
	str	r2, [r3]
	str	ip, [r4, #72]
	strd	r0, [r4, #116]
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L11378
	b	.L11400
.L11384:
	mvn	r6, #21
	b	.L11376
	.fnend
	.size	ffs_function_bind_config, .-ffs_function_bind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_func_unbind, %function
ffs_func_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	sub	r6, r1, #52
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r4, [r1, #-44]
	.pad #12
	sub	sp, sp, #12
	ldr	r3, [r4, #136]
	cmp	r3, r6
	beq	.L11417
.L11402:
	add	r5, r4, #120
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #100]
	mov	r7, r0
	add	lr, r4, #104
	ldrh	r2, [r4, #108]
	cmp	r3, #1
	moveq	r3, #2
	streq	r3, [r4, #100]
	cmp	r2, #0
	beq	.L11411
	add	r1, r4, #103
	mov	r3, lr
	add	r2, r1, r2
.L11410:
	ldrb	ip, [r1, #1]!	@ zero_extendqisi2
	mov	r0, r3
	sub	r8, ip, #5
	cmp	r8, #1
	strbls	ip, [r0], #1
	movls	r3, r0
	cmp	r1, r2
	bne	.L11410
	sub	r3, r3, lr
	add	r1, r3, #1
	uxth	r3, r3
	uxth	r1, r1
.L11408:
	add	r3, r4, r3
	strh	r1, [r4, #108]	@ movhi
	mov	r2, #1
	mov	r0, r5
	mov	r1, #3
	strb	r2, [r3, #104]
	bl	__wake_up_locked
	mov	r0, r5
	mov	r1, r7
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r6
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	ffs_func_free
.L11417:
	ldr	r7, [r1, #-40]
	add	r0, r4, #28
	mov	r5, r1
	ldrh	fp, [r4, #184]
	mov	r10, #1
	mov	r9, #0
	ldr	r8, [r4, #220]
	bl	_raw_spin_lock_irqsave
	add	r7, r7, #28
	str	r0, [sp, #4]
	b	.L11406
.L11418:
	ldr	r3, [r3, #8]
	add	r7, r7, #28
	add	r8, r8, #60
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r7, #-56]
	subs	fp, fp, #1
	str	r9, [r3]
	str	r9, [r8, #-16]
	beq	.L11405
.L11406:
	str	r10, [r8, #36]
	ldr	r3, [r7, #-28]
	subs	r0, r3, #0
	bne	.L11418
	subs	fp, fp, #1
	add	r7, r7, #28
	str	r3, [r8, #44]
	add	r8, r8, #60
	bne	.L11406
.L11405:
	ldr	r0, [r5, #-44]
	ldr	r1, [sp, #4]
	add	r0, r0, #28
	bl	_raw_spin_unlock_irqrestore
	mov	r3, #0
	str	r3, [r4, #136]
	b	.L11402
.L11411:
	mov	r3, r2
	mov	r1, #1
	b	.L11408
	.fnend
	.size	ffs_func_unbind, .-ffs_func_unbind
	.section	.rodata.str1.4
	.align	2
.LC604:
	.ascii	"<3>'=' missing in %s\012\000"
	.align	2
.LC605:
	.ascii	"<3>%s: invalid value: %s\012\000"
	.align	2
.LC606:
	.ascii	"rmode\000"
	.align	2
.LC607:
	.ascii	"fmode\000"
	.align	2
.LC608:
	.ascii	"mode\000"
	.align	2
.LC609:
	.ascii	"uid\000"
	.align	2
.LC610:
	.ascii	"gid\000"
	.align	2
.LC611:
	.ascii	"<3>%s: invalid option\012\000"
	.align	2
.LC612:
	.ascii	"&ffs->mutex\000"
	.align	2
.LC613:
	.ascii	"&ffs->ev.waitq\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_fs_mount, %function
ffs_fs_mount:
	.fnstart
	@ args = 0, pretend = 0, frame = 48
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	ip, #33152
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	subs	r4, r3, #0
	movt	ip, 65535
	movw	r3, #16704
	strd	r6, [sp, #8]
	mov	r6, #0
	mov	r7, #0
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	mov	r8, r2
	str	lr, [sp, #32]
	.pad #52
	sub	sp, sp, #52
	strd	r0, [sp, #4]
	strd	r6, [sp, #24]
	strh	ip, [sp, #24]	@ movhi
	strd	r6, [sp, #32]
	strh	r3, [sp, #36]	@ movhi
	strd	r6, [sp, #40]
	beq	.L11420
	ldrb	r3, [r4]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L11420
	mov	fp, #32768
	movw	r9, #:lower16:.LC606
	str	r2, [sp, #12]
	movw	r10, #:lower16:.LC607
	movt	fp, 65535
	movt	r9, #:upper16:.LC606
	movt	r10, #:upper16:.LC607
	b	.L11439
.L11426:
	mov	r2, r5
	mov	r1, r9
	mov	r0, r4
	bl	memcmp
	cmp	r0, #0
	bne	.L11429
	movw	r0, #365
	and	r7, r7, r0
	orr	r7, r7, #16384
	strh	r7, [sp, #36]	@ movhi
.L11430:
	cmp	r6, #0
	beq	.L11472
	add	r4, r6, #1
.L11439:
	mov	r1, #44
	mov	r0, r4
	bl	strchr
	subs	r6, r0, #0
	mov	r1, #61
	movne	r3, #0
	mov	r0, r4
	strbne	r3, [r6]
	bl	strchr
	subs	r5, r0, #0
	beq	.L11474
	mov	r2, #0
	mov	r8, r5
	add	r1, sp, #20
	strb	r2, [r8], #1
	mov	r0, r8
	bl	simple_strtoul
	ldr	r2, [sp, #20]
	mov	r7, r0
	ldrb	r2, [r2]	@ zero_extendqisi2
	cmp	r2, #44
	cmpne	r2, #0
	bne	.L11475
	sub	r5, r5, r4
	cmp	r5, #4
	beq	.L11425
	cmp	r5, #5
	beq	.L11426
	cmp	r5, #3
	beq	.L11427
.L11428:
	movw	r0, #:lower16:.LC611
	mov	r1, r4
	movt	r0, #:upper16:.LC611
	bl	printk
.L11423:
	mvn	r4, #21
.L11419:
	mov	r0, r4
	add	sp, sp, #52
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L11425:
	ldrb	r3, [r4]	@ zero_extendqisi2
	cmp	r3, #109
	bne	.L11428
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	add	r2, r4, #1
	cmp	r3, #111
	bne	.L11428
	ldrb	r3, [r2, #1]!	@ zero_extendqisi2
	cmp	r3, #100
	bne	.L11428
	ldrb	r3, [r2, #1]	@ zero_extendqisi2
	cmp	r3, #101
	bne	.L11428
	movw	r3, #365
	movw	r2, #438
	and	r3, r3, r0
	and	r7, r7, r2
	orr	r3, r3, #16384
	orr	r7, r7, fp
	strh	r7, [sp, #24]	@ movhi
	strh	r3, [sp, #36]	@ movhi
	b	.L11430
.L11427:
	ldrb	r3, [r4]	@ zero_extendqisi2
	cmp	r3, #117
	beq	.L11476
	cmp	r3, #103
	bne	.L11428
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	cmp	r3, #105
	bne	.L11428
	ldrb	r3, [r4, #2]	@ zero_extendqisi2
	cmp	r3, #100
	bne	.L11428
	str	r0, [sp, #32]
	b	.L11430
.L11472:
	ldr	r8, [sp, #12]
.L11420:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #32]
	cmp	r0, #0
	beq	.L11444
	movw	r1, #32976
	bl	kmem_cache_alloc
	subs	r4, r0, #0
	bne	.L11441
.L11443:
	mvn	r4, #11
	b	.L11419
.L11429:
	mov	r2, r5
	mov	r1, r10
	mov	r0, r4
	bl	memcmp
	cmp	r0, #0
	bne	.L11428
	movw	r0, #438
	and	r7, r7, r0
	orr	r7, r7, fp
	strh	r7, [sp, #24]	@ movhi
	b	.L11430
.L11476:
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	cmp	r3, #105
	bne	.L11428
	ldrb	r3, [r4, #2]	@ zero_extendqisi2
	cmp	r3, #100
	bne	.L11428
	str	r0, [sp, #28]
	b	.L11430
.L11444:
	mov	r4, #16
.L11441:
	mov	r5, #0
	mov	r6, #1
	ldr	r2, .L11478
	movw	r1, #:lower16:.LC612
	add	r0, r4, #4
	movt	r1, #:upper16:.LC612
	str	r6, [r4, #88]
	str	r5, [r4, #92]
	str	r5, [r4, #96]
	bl	__mutex_init
	movw	r1, #:lower16:.LC613
	ldr	r2, .L11478
	add	r0, r4, #120
	movt	r1, #:upper16:.LC613
	str	r5, [r4, #28]
	bl	__init_waitqueue_head
	movw	r1, #:lower16:.LC494
	ldr	r2, .L11478+4
	add	r0, r4, #40
	movt	r1, #:upper16:.LC494
	str	r5, [r4, #36]
	bl	__init_waitqueue_head
	movw	r1, #:lower16:.LC494
	ldr	r2, .L11478+4
	add	r0, r4, #76
	movt	r1, #:upper16:.LC494
	str	r5, [r4, #72]
	bl	__init_waitqueue_head
	movw	r1, #:lower16:.LC494
	ldr	r2, .L11478+4
	add	r0, r4, #60
	movt	r1, #:upper16:.LC494
	str	r5, [r4, #56]
	bl	__init_waitqueue_head
	ldrd	r2, [sp, #24]
	mov	r0, r8
	mov	r1, #208
	ldr	ip, [sp, #32]
	strh	r6, [r4, #110]	@ movhi
	strd	r2, [r4, #208]
	str	ip, [r4, #216]
	bl	kstrdup
	cmp	r0, r5
	str	r0, [r4, #140]
	beq	.L11477
	movw	r3, #:lower16:ffs_sb_fill
	add	r2, sp, #24
	str	r5, [r4, #144]
	movt	r3, #:upper16:ffs_sb_fill
	ldrd	r0, [sp, #4]
	str	r4, [sp, #44]
	bl	mount_nodev
	cmn	r0, #4096
	mov	r4, r0
	bls	.L11419
	ldr	r0, [sp, #44]
	cmp	r0, #0
	beq	.L11419
	add	r3, r0, #88
	.syntax divided
@ 99 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 111 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/processor.h" 1
	pld	[r3]
@ 0 "" 2
@ 102 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r2, [r3]
	sub	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
@ 112 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r2, #0
	bne	.L11419
	bl	ffs_data_put.part.0
	b	.L11419
.L11477:
	add	r3, r4, #88
	.syntax divided
@ 99 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 111 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/processor.h" 1
	pld	[r3]
@ 0 "" 2
@ 102 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r2, [r3]
	sub	r2, r2, r6
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
@ 112 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r2, r5
	bne	.L11443
	mov	r0, r4
	mvn	r4, #11
	bl	ffs_data_put.part.0
	b	.L11419
.L11474:
	movw	r0, #:lower16:.LC604
	mov	r1, r4
	movt	r0, #:upper16:.LC604
	bl	printk
	b	.L11423
.L11475:
	movw	r0, #:lower16:.LC605
	mov	r2, r8
	mov	r1, r4
	movt	r0, #:upper16:.LC605
	bl	printk
	b	.L11423
.L11479:
	.align	2
.L11478:
	.word	.LANCHOR3-4068
	.word	.LANCHOR3-4072
	.fnend
	.size	ffs_fs_mount, .-ffs_fs_mount
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_epfile_release, %function
ffs_epfile_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r2, #1
	str	r6, [sp, #8]
	mov	r6, r1
	str	lr, [sp, #12]
	ldr	r3, [r0, #348]
	ldr	r4, [r3, #40]
	str	r2, [r3, #36]
	add	r3, r4, #92
	.syntax divided
@ 99 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 111 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/processor.h" 1
	pld	[r3]
@ 0 "" 2
@ 102 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r5, [r3]
	sub	r5, r5, #1
	strex	r2, r5, [r3]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 112 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r5, #0
	beq	.L11484
.L11481:
	add	r3, r4, #88
	.syntax divided
@ 99 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 111 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/processor.h" 1
	pld	[r3]
@ 0 "" 2
@ 102 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r2, [r3]
	sub	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
@ 112 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r2, #0
	beq	.L11485
.L11482:
	mov	r0, #0
	str	r0, [r6, #132]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L11484:
	mov	r3, #3
	mov	r0, r4
	str	r3, [r4, #96]
	bl	ffs_data_clear
	str	r5, [r4, #96]
	str	r5, [r4, #100]
	strh	r5, [r4, #108]	@ movhi
	str	r5, [r4, #132]
	str	r5, [r4, #148]
	str	r5, [r4, #152]
	str	r5, [r4, #156]
	str	r5, [r4, #160]
	str	r5, [r4, #164]
	str	r5, [r4, #168]
	str	r5, [r4, #172]
	str	r5, [r4, #176]
	str	r5, [r4, #180]
	strh	r5, [r4, #184]	@ movhi
	str	r5, [r4, #188]
	str	r5, [r4, #192]
	str	r5, [r4, #196]
	str	r5, [r4, #200]
	str	r5, [r4, #220]
	b	.L11481
.L11485:
	mov	r0, r4
	bl	ffs_data_put.part.0
	b	.L11482
	.fnend
	.size	ffs_epfile_release, .-ffs_epfile_release
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_ep0_release, %function
ffs_ep0_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r1, #132]
	add	r3, r4, #92
	.syntax divided
@ 99 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 111 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/processor.h" 1
	pld	[r3]
@ 0 "" 2
@ 102 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r5, [r3]
	sub	r5, r5, #1
	strex	r2, r5, [r3]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 112 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r5, #0
	beq	.L11490
.L11487:
	add	r3, r4, #88
	.syntax divided
@ 99 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 111 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/processor.h" 1
	pld	[r3]
@ 0 "" 2
@ 102 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r2, [r3]
	sub	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
@ 112 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r2, #0
	beq	.L11491
.L11488:
	ldrd	r4, [sp]
	mov	r0, #0
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L11490:
	mov	r3, #3
	mov	r0, r4
	str	r3, [r4, #96]
	bl	ffs_data_clear
	str	r5, [r4, #96]
	str	r5, [r4, #100]
	strh	r5, [r4, #108]	@ movhi
	str	r5, [r4, #132]
	str	r5, [r4, #148]
	str	r5, [r4, #152]
	str	r5, [r4, #156]
	str	r5, [r4, #160]
	str	r5, [r4, #164]
	str	r5, [r4, #168]
	str	r5, [r4, #172]
	str	r5, [r4, #176]
	str	r5, [r4, #180]
	strh	r5, [r4, #184]	@ movhi
	str	r5, [r4, #188]
	str	r5, [r4, #192]
	str	r5, [r4, #196]
	str	r5, [r4, #200]
	str	r5, [r4, #220]
	b	.L11487
.L11491:
	mov	r0, r4
	bl	ffs_data_put.part.0
	b	.L11488
	.fnend
	.size	ffs_ep0_release, .-ffs_ep0_release
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_android_function_enable, %function
adb_android_function_enable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r1, #1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r0, #4]
	ldr	r4, [r0, #20]
	ldrb	r2, [r3]	@ zero_extendqisi2
	strb	r1, [r3, #1]
	cmp	r2, #0
	beq	.L11501
.L11492:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L11501:
	ldr	r5, [r4, #8]
	ldr	r1, [r4, #20]
	add	r3, r1, #1
	cmp	r1, #0
	str	r3, [r4, #20]
	bne	.L11492
	ldr	r0, [r5]
	ldr	r3, [r0]
	ldr	r3, [r3, #20]
	cmp	r3, #0
	beq	.L11494
	blx	r3
	ldr	r0, [r5]
.L11494:
	ldr	r0, [r0, #4]
	ldr	r1, [r5, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	ldr	r3, [r4, #196]!
	cmp	r4, r3
	sub	r3, r3, #120
	beq	.L11492
	mov	r6, r3
.L11495:
	mov	r1, r6
	mov	r0, r5
	bl	usb_remove_config
	ldr	r3, [r6, #120]
	cmp	r4, r3
	sub	r6, r3, #120
	beq	.L11492
	b	.L11495
	.fnend
	.size	adb_android_function_enable, .-adb_android_function_enable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_function_enable, %function
ffs_function_enable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r1, #1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r0, #4]
	ldr	r4, [r0, #20]
	ldrb	r2, [r3]	@ zero_extendqisi2
	strb	r1, [r3, #1]
	cmp	r2, #0
	beq	.L11511
.L11502:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L11511:
	ldr	r5, [r4, #8]
	ldr	r1, [r4, #20]
	add	r3, r1, #1
	cmp	r1, #0
	str	r3, [r4, #20]
	bne	.L11502
	ldr	r0, [r5]
	ldr	r3, [r0]
	ldr	r3, [r3, #20]
	cmp	r3, #0
	beq	.L11504
	blx	r3
	ldr	r0, [r5]
.L11504:
	ldr	r0, [r0, #4]
	ldr	r1, [r5, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	ldr	r3, [r4, #196]!
	cmp	r4, r3
	sub	r3, r3, #120
	beq	.L11502
	mov	r6, r3
.L11505:
	mov	r1, r6
	mov	r0, r5
	bl	usb_remove_config
	ldr	r3, [r6, #120]
	cmp	r4, r3
	sub	r6, r3, #120
	beq	.L11502
	b	.L11505
	.fnend
	.size	ffs_function_enable, .-ffs_function_enable
	.align	2
	.global	usb_string_id
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_string_id, %function
usb_string_id:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldrb	r3, [r0, #48]	@ zero_extendqisi2
	mov	r2, r0
	cmp	r3, #253
	bhi	.L11514
	add	r3, r3, #1
	uxtb	r3, r3
	mov	r0, r3
	strb	r3, [r2, #48]
	bx	lr
.L11514:
	mvn	r0, #18
	bx	lr
	.fnend
	.size	usb_string_id, .-usb_string_id
	.align	2
	.global	usb_string_ids_tab
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_string_ids_tab, %function
usb_string_ids_tab:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {lr}
	str	lr, [sp, #-4]!
	ldr	r2, [r1, #4]
	mov	lr, r0
	ldrb	r3, [r0, #48]	@ zero_extendqisi2
	cmp	r2, #0
	beq	.L11528
	cmp	r3, #253
	bgt	.L11517
	add	r1, r1, #8
.L11518:
	ldr	ip, [r1, #4]
	add	r3, r3, #1
	add	r1, r1, #8
	uxtb	r2, r3
	cmp	ip, #0
	strb	r2, [r1, #-16]
	beq	.L11516
	cmp	r3, #254
	bne	.L11518
.L11517:
	mvn	r0, #18
	ldr	pc, [sp], #4
.L11528:
	mov	r2, r3
.L11516:
	mov	r0, #0
	strb	r2, [lr, #48]
	ldr	pc, [sp], #4
	.fnend
	.size	usb_string_ids_tab, .-usb_string_ids_tab
	.align	2
	.global	usb_string_ids_n
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_string_ids_n, %function
usb_string_ids_n:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	cmp	r1, #254
	mov	r3, r0
	ldrb	r0, [r0, #48]	@ zero_extendqisi2
	bhi	.L11533
	add	r1, r0, r1
	cmp	r1, #254
	bhi	.L11533
	add	r0, r0, #1
	strb	r1, [r3, #48]
	bx	lr
.L11533:
	mvn	r0, #18
	bx	lr
	.fnend
	.size	usb_string_ids_n, .-usb_string_ids_n
	.section	.rodata.str1.4
	.align	2
.LC614:
	.ascii	"composite\000"
	.text
	.align	2
	.global	usb_composite_probe
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_composite_probe, %function
usb_composite_probe:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	subs	r3, r0, #0
	beq	.L11539
	ldr	r2, [r3, #12]
	mov	r0, r1
	cmp	r1, #0
	cmpne	r2, #0
	beq	.L11539
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	ldr	ip, [r3]
	cmp	ip, #0
	beq	.L11547
.L11536:
	ldr	r2, [r3, #4]
	movw	r4, #:lower16:.LANCHOR0
	movw	r1, #:lower16:composite_bind
	movt	r4, #:upper16:.LANCHOR0
	movt	r1, #:upper16:composite_bind
	str	r3, [r4, #396]
	cmp	r2, #0
	movw	r2, #:lower16:.LANCHOR1
	str	r0, [r4, #4020]
	movt	r2, #:upper16:.LANCHOR1
	streq	ip, [r3, #4]
	add	r0, r2, #400
	str	ip, [r2, #400]
	ldr	ip, [r3]
	str	ip, [r2, #428]
	ldr	r3, [r3, #20]
	str	r3, [r2, #404]
	bl	usb_gadget_probe_driver
	cmp	r0, #0
	movne	r3, #0
	strne	r3, [r4, #396]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L11547:
	movw	r2, #:lower16:.LC614
	movt	r2, #:upper16:.LC614
	mov	ip, r2
	str	r2, [r3]
	b	.L11536
.L11539:
	mvn	r0, #21
	bx	lr
	.fnend
	.size	usb_composite_probe, .-usb_composite_probe
	.section	.rodata.str1.4
	.align	2
.LC615:
	.ascii	"<3>%s: unable to allocate platform data\012\000"
	.align	2
.LC616:
	.ascii	"qcom,android-usb-swfi-latency\000"
	.align	2
.LC617:
	.ascii	"qcom,android-usb-cdrom\000"
	.align	2
.LC618:
	.ascii	"qcom,android-usb-internal-ums\000"
	.align	2
.LC619:
	.ascii	"qcom,streaming-func\000"
	.align	2
.LC620:
	.ascii	"<3>%s: Invalid number of functions used.\012\000"
	.align	2
.LC621:
	.ascii	"qcom,android-usb-uicc-nluns\000"
	.align	2
.LC622:
	.ascii	"android_usb\000"
	.align	2
.LC623:
	.ascii	"<3>%s: %s(): Failed to alloc memory for android_dev"
	.ascii	"\012\000"
	.align	2
.LC624:
	.ascii	"&android_dev->mutex\000"
	.align	2
.LC625:
	.ascii	"ioremap failed\012\000"
	.align	2
.LC626:
	.ascii	"android%d\000"
	.align	2
.LC627:
	.ascii	"<3>%s: %s(): android_create_device failed\012\000"
	.align	2
.LC628:
	.ascii	"<3>%s: %s(): Failed to register android composite d"
	.ascii	"river\012\000"
	.align	2
.LC629:
	.ascii	"high\000"
	.section	.rodata.cst4
	.align	2
.LC630:
	.word	__stack_chk_guard
	.section	.devinit.text,"ax",%progbits
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	android_probe, %function
android_probe:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LC630
	push	{r4, r5, r6, r7, r8, r9, lr}
	.save {r4, r5, r6, r7, r8, r9, lr}
	movt	r3, #:upper16:.LC630
	.pad #36
	sub	sp, sp, #36
	ldr	r3, [r3]
	str	r3, [sp, #28]
	mov	r3,#0
	ldr	r3, [r0, #300]
	mov	r6, r0
	cmp	r3, #0
	beq	.L11549
	mov	r2, #208
	mov	r1, #52
	add	r0, r0, #8
	bl	devm_kzalloc
	subs	r7, r0, #0
	bne	.L11550
	movw	r0, #:lower16:.LC615
	ldr	r1, .L11591
	mvn	r5, #11
	movt	r0, #:upper16:.LC615
	bl	printk
	b	.L11548
.L11550:
	movw	r1, #:lower16:.LC616
	mov	r3, #1
	ldr	r0, [r6, #300]
	movt	r1, #:upper16:.LC616
	add	r2, r7, #4
	bl	of_property_read_u32_array
	movw	r1, #:lower16:.LC617
	mov	r2, #0
	ldr	r0, [r6, #300]
	movt	r1, #:upper16:.LC617
	mov	r4, r2
	bl	of_find_property
	subs	r0, r0, r4
	movw	r1, #:lower16:.LC618
	movne	r0, #1
	movt	r1, #:upper16:.LC618
	mov	r2, r4
	strb	r0, [r7, #9]
	ldr	r0, [r6, #300]
	bl	of_find_property
	subs	r0, r0, r4
	movw	r1, #:lower16:.LC619
	movne	r0, #1
	mov	r3, r4
	mov	r2, r4
	movt	r1, #:upper16:.LC619
	strb	r0, [r7, #10]
	ldr	r0, [r6, #300]
	str	r4, [sp]
	bl	of_property_read_string_helper
	cmp	r0, #3
	mov	r5, r0
	movwle	r8, #:lower16:.LC619
	movle	r9, r4
	movtle	r8, #:upper16:.LC619
	ble	.L11552
	movw	r0, #:lower16:.LC620
	ldr	r1, .L11591
	mvn	r5, #21
	movt	r0, #:upper16:.LC620
	bl	printk
	b	.L11548
.L11555:
	mov	r1, r8
	mov	r3, #1
	str	r4, [sp]
	add	r2, sp, #12
	ldr	r0, [r6, #300]
	str	r9, [sp, #12]
	bl	of_property_read_string_helper
	ldr	r1, [sp, #12]
	cmp	r1, #0
	beq	.L11554
	add	r0, r7, #11
	mov	r2, #10
	mla	r0, r2, r4, r0
	bl	strlcpy
.L11554:
	add	r4, r4, #1
.L11552:
	cmp	r4, r5
	blt	.L11555
	movw	r1, #:lower16:.LC621
	mov	r3, #1
	str	r5, [r7, #44]
	movt	r1, #:upper16:.LC621
	add	r2, r7, #48
	ldr	r0, [r6, #300]
	bl	of_property_read_u32_array
	b	.L11556
.L11549:
	ldr	r7, [r0, #92]
.L11556:
	movw	r4, #:lower16:.LANCHOR0
	movt	r4, #:upper16:.LANCHOR0
	ldr	r0, [r4, #3260]
	mov	r8, r4
	cmp	r0, #0
	bne	.L11557
	movw	r1, #:lower16:.LC622
	ldr	r2, .L11591+4
	movt	r1, #:upper16:.LC622
	bl	__class_create
	cmn	r0, #4096
	str	r0, [r4, #3260]
	movhi	r5, r0
	bhi	.L11548
.L11557:
	movw	r3, #:lower16:kmalloc_caches
	ldr	r9, .L11591+8
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #36]
	cmp	r0, #0
	beq	.L11576
	movw	r1, #32976
	bl	kmem_cache_alloc
	subs	r4, r0, #0
	bne	.L11558
	ldr	r2, .L11591
	movw	r0, #:lower16:.LC623
	mvn	r5, #11
	movt	r0, #:upper16:.LC623
	mov	r1, r2
	bl	printk
	b	.L11559
.L11576:
	mov	r4, #16
.L11558:
	ldr	lr, .L11591+12
	movw	r3, #:lower16:android_work
	mov	r2, #1
	ldr	r1, [r6]
	movt	r3, #:upper16:android_work
	mov	ip, #0
	add	r0, r4, #196
	movw	r5, #:lower16:.LANCHOR1
	movt	r5, #:upper16:.LANCHOR1
	str	ip, [r4, #204]
	str	r3, [r4, #192]
	add	r3, r4, #184
	str	r2, [r4, #20]
	mov	r2, #2560
	stm	r4, {r1, lr}
	movw	r1, #:lower16:.LC624
	movt	r1, #:upper16:.LC624
	strd	r2, [r4, #180]
	ldr	r2, .L11591+4
	str	r3, [r4, #188]
	str	r0, [r4, #196]
	str	r0, [r4, #200]
	add	r0, r4, #24
	bl	__mutex_init
	ldr	r1, [r8, #200]
	add	r3, r4, #208
	cmp	r7, #0
	ldr	r2, [r8, #2276]
	str	r7, [r4, #48]
	mov	r0, r6
	str	r3, [r8, #200]
	str	r9, [r4, #208]
	str	r1, [r4, #212]
	str	r3, [r1]
	ldrbne	r3, [r7, #8]	@ zero_extendqisi2
	add	r2, r2, #1
	moveq	r3, r7
	mov	r1, #512
	str	r2, [r8, #2276]
	mov	r2, #0
	strb	r3, [r5, #484]
	bl	platform_get_resource
	cmp	r0, #0
	beq	.L11561
	ldm	r0, {r1, r2}
	add	r6, r6, #8
	mov	r0, r6
	add	r2, r2, #1
	sub	r2, r2, r1
	bl	devm_ioremap
	cmp	r0, #0
	str	r0, [r8, #2868]
	bne	.L11561
	movw	r1, #:lower16:.LC625
	mov	r0, r6
	movt	r1, #:upper16:.LC625
	mvn	r5, #11
	bl	dev_err
	b	.L11562
.L11561:
	add	r6, sp, #17
	movw	r2, #:lower16:.LC626
	ldrb	r3, [r5, #484]	@ zero_extendqisi2
	movt	r2, #:upper16:.LC626
	mov	r1, #11
	mov	r0, r6
	bl	snprintf
	mov	r3, #0
	str	r6, [sp]
	ldr	r0, [r8, #3260]
	mov	r2, r3
	mov	r1, r3
	bl	device_create
	cmn	r0, #4096
	mov	r5, r0
	str	r0, [r4, #12]
	bls	.L11563
	cmp	r0, #0
	beq	.L11565
	b	.L11567
.L11563:
	mov	r1, r4
	ldr	r6, .L11591+16
	bl	dev_set_drvdata
.L11566:
	ldr	r1, [r6], #4
	cmp	r1, #0
	beq	.L11565
	ldr	r0, [r4, #12]
	bl	device_create_file
	subs	r5, r0, #0
	beq	.L11566
	ldr	r3, [r4, #12]
	ldr	r0, [r8, #3260]
	ldr	r1, [r3, #296]
	bl	device_destroy
.L11567:
	ldr	r2, .L11591
	movw	r0, #:lower16:.LC627
	movt	r0, #:upper16:.LC627
	mov	r1, r2
	bl	printk
	b	.L11562
.L11565:
	movw	r1, #:lower16:android_bind
	ldr	r0, .L11591+20
	movt	r1, #:upper16:android_bind
	bl	usb_composite_probe
	subs	r5, r0, #0
	beq	.L11570
	ldr	r2, .L11591
	movw	r0, #:lower16:.LC628
	movt	r0, #:upper16:.LC628
	ldr	r6, .L11591+16
	mov	r1, r2
	bl	printk
.L11571:
	ldr	r1, [r6], #4
	cmp	r1, #0
	beq	.L11590
	ldr	r0, [r4, #12]
	bl	device_remove_file
	b	.L11571
.L11590:
	ldr	r3, [r4, #12]
	ldr	r0, [r8, #3260]
	ldr	r1, [r3, #296]
	bl	device_destroy
	b	.L11562
.L11570:
	cmp	r7, #0
	beq	.L11573
	ldr	r3, [r7, #4]
	cmp	r3, #0
	beq	.L11573
	mvn	r2, #0
	mov	r1, #1
	add	r0, r4, #64
	bl	pm_qos_add_request
.L11573:
	movw	r1, #:lower16:.LC629
	add	r0, r4, #56
	movt	r1, #:upper16:.LC629
	mov	r2, #5
	bl	strlcpy
	b	.L11548
.L11562:
	ldr	r3, [r8, #2276]
	mov	lr, #256
	mov	ip, #512
	ldr	r1, [r4, #208]
	mov	r0, r4
	ldr	r2, [r4, #212]
	sub	r3, r3, #1
	str	r2, [r1, #4]
	str	r1, [r2]
	str	lr, [r4, #208]
	str	ip, [r4, #212]
	str	r3, [r8, #2276]
	bl	kfree
.L11559:
	ldr	r3, [r8, #196]
	cmp	r3, r9
	bne	.L11548
	ldr	r0, [r8, #3260]
	bl	class_destroy
	mov	r3, #0
	str	r3, [r8, #3260]
.L11548:
	movw	r3, #:lower16:.LC630
	movt	r3, #:upper16:.LC630
	ldr	r2, [r3]
	ldr	r3, [sp, #28]
	eors	r2, r3, r2
	beq	.L11574
	bl	__stack_chk_fail
.L11574:
	mov	r0, r5
	add	sp, sp, #36
	@ sp needed
	pop	{r4, r5, r6, r7, r8, r9, pc}
.L11592:
	.align	2
.L11591:
	.word	.LANCHOR5-3800
	.word	.LANCHOR3-4068
	.word	.LANCHOR0+196
	.word	.LANCHOR4-1304
	.word	.LANCHOR1+1516
	.word	.LANCHOR1+1576
	.fnend
	.size	android_probe, .-android_probe
	.text
	.align	2
	.global	usb_composite_unregister
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_composite_unregister, %function
usb_composite_unregister:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR0
	movt	r3, #:upper16:.LANCHOR0
	ldr	r3, [r3, #396]
	cmp	r3, r0
	beq	.L11595
	bx	lr
.L11595:
	ldr	r0, .L11596
	b	usb_gadget_unregister_driver
.L11597:
	.align	2
.L11596:
	.word	.LANCHOR1+400
	.fnend
	.size	usb_composite_unregister, .-usb_composite_unregister
	.section	.rodata.str1.4
	.align	2
.LC631:
	.ascii	"%s: Unexpected call\012\000"
	.text
	.align	2
	.global	usb_composite_setup_continue
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_composite_setup_continue, %function
usb_composite_setup_continue:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	add	r7, r0, #60
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r8, [r0, #4]
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #56]
	mov	r6, r0
	cmp	r3, #0
	bne	.L11599
	cmp	r4, #0
	bne	.L11604
.L11601:
	mov	r1, r6
	mov	r0, r7
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore
.L11599:
	sub	r5, r3, #1
	cmp	r5, #0
	str	r5, [r4, #56]
	bne	.L11601
	str	r5, [r8, #4]
	ldr	r3, [r4]
	mov	r2, #32
	mov	r1, r8
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	strlt	r5, [r8, #44]
	b	.L11601
.L11604:
	movw	r2, #:lower16:.LC631
	movw	r0, #:lower16:.LC425
	ldr	r3, .L11605
	movt	r2, #:upper16:.LC631
	movt	r0, #:upper16:.LC425
	movw	r1, #1738
	bl	warn_slowpath_fmt
	b	.L11601
.L11606:
	.align	2
.L11605:
	.word	.LANCHOR5-3784
	.fnend
	.size	usb_composite_setup_continue, .-usb_composite_setup_continue
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	handle_exception, %function
handle_exception:
	.fnstart
	@ args = 0, pretend = 0, frame = 128
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	mov	r6, r0
	add	r7, r0, #44
	strd	r8, [sp, #16]
	movw	r9, #1284
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	.pad #128
	sub	sp, sp, #128
	mov	r3, sp
	bic	r10, r3, #8128
	bic	r10, r10, #63
	b	.L11609
.L11677:
	cmp	r5, #10
	bne	.L11676
.L11609:
	ldr	r4, [r10, #12]
	ldr	r0, [r4, #728]
	add	r0, r0, r9
	bl	_raw_spin_lock_irqsave
	mov	r8, r0
	add	r1, r4, #732
	mov	r2, sp
	mov	r0, r4
	bl	dequeue_signal
	ldr	r3, [r4, #728]
	mov	r5, r0
	mov	r1, r8
	add	r0, r3, r9
	bl	_raw_spin_unlock_irqrestore
	cmp	r5, #0
	bne	.L11677
	ldr	r3, [r6, #8]
	cmp	r3, #0
	beq	.L11615
	mov	r8, r5
.L11614:
	ldr	r4, [r6, #68]
	add	r4, r4, r8
	add	r8, r8, #32
	ldr	r3, [r4, #20]
	cmp	r3, #0
	beq	.L11616
	ldr	r3, [r6, #8]
	ldr	r1, [r4, #16]
	ldr	r0, [r3, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
.L11616:
	ldr	r3, [r4, #28]
	cmp	r3, #0
	beq	.L11617
	ldr	r3, [r6, #8]
	ldr	r1, [r4, #24]
	ldr	r0, [r3, #96]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
.L11617:
	cmp	r8, #128
	bne	.L11614
	b	.L11619
.L11678:
	bl	sleep_thread
	cmp	r0, #0
	bne	.L11607
.L11619:
	mov	r0, r7
	bl	_raw_spin_lock_irq
	ldr	r3, [r6, #68]
	mov	r0, r7
	ldr	r4, [r3, #20]
	ldr	r1, [r3, #28]
	ldr	r2, [r3, #52]
	ldr	lr, [r3, #60]
	ldr	ip, [r3, #84]
	add	r4, r4, r1
	ldr	r1, [r3, #92]
	add	r4, r4, r2
	ldr	r2, [r3, #116]
	add	r4, r4, lr
	ldr	r3, [r3, #124]
	add	r4, r4, ip
	add	r4, r4, r1
	add	r4, r4, r2
	add	r4, r4, r3
	bl	_raw_spin_unlock_irq
	cmp	r4, #0
	mov	r0, r6
	bne	.L11678
	ldr	r3, [r6, #8]
	ldrb	r2, [r3, #86]	@ zero_extendqisi2
	tst	r2, #1
	beq	.L11621
	ldr	r0, [r3, #92]
	ldr	r1, [r0, #8]
	ldr	r1, [r1, #36]
	cmp	r1, #0
	beq	.L11621
	blx	r1
	ldr	r3, [r6, #8]
	ldrb	r2, [r3, #86]	@ zero_extendqisi2
.L11621:
	tst	r2, #2
	beq	.L11615
	ldr	r0, [r3, #96]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L11615
	blx	r3
.L11615:
	mov	r0, r7
	mov	r8, #0
	bl	_raw_spin_lock_irq
	ldr	r3, [r6, #68]
	str	r8, [r3, #4]
	ldr	r3, [r6, #68]
	str	r8, [r3, #36]
	ldr	r3, [r6, #68]
	str	r8, [r3, #68]
	ldr	r3, [r6, #68]
	str	r8, [r3, #100]
	ldr	r3, [r6, #68]
	ldr	r9, [r6, #112]
	str	r3, [r6, #60]
	cmp	r9, #1
	str	r3, [r6, #64]
	beq	.L11623
	ldr	r3, [r6, #92]
	ldr	r4, [r6, #116]
	cmp	r3, r8
	movne	r1, r8
	movne	r0, r1
	beq	.L11632
.L11624:
	ldr	r3, [r6, #100]
	add	r5, r5, #1
	add	r3, r3, r1
	add	r1, r1, #400
	ldrb	r2, [r3, #24]	@ zero_extendqisi2
	str	r0, [r3, #28]
	str	r0, [r3, #32]
	str	r0, [r3, #36]
	bic	r2, r2, #80
	strb	r2, [r3, #24]
	ldr	r3, [r6, #92]
	cmp	r3, r5
	bhi	.L11624
.L11632:
	mov	r3, #0
	mov	r0, r7
	sub	r9, r9, #2
	str	r3, [r6, #112]
	bl	_raw_spin_unlock_irq
	cmp	r9, #5
	ldrls	pc, [pc, r9, asl #2]
	b	.L11607
.L11627:
	.word	.L11629
	.word	.L11607
	.word	.L11628
	.word	.L11607
	.word	.L11626
	.word	.L11626
.L11629:
	ldr	r1, [r6, #8]
	cmp	r1, #0
	beq	.L11633
	add	r1, r1, #88
	mov	r0, #0
	bl	_test_and_clear_bit
	cmp	r0, #0
	beq	.L11635
	ldr	r3, [r6, #8]
	mov	r1, #0
	ldr	r0, [r3, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #24]
	blx	r3
.L11635:
	ldr	r3, [r6, #56]
	cmp	r3, r4
	bne	.L11607
	ldr	r0, [r6, #4]
	cmp	r0, #0
	bne	.L11675
	ldrd	r0, [r6, #48]
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	ldr	r2, [r6, #48]
	cmp	r0, #0
	cmnne	r0, #108
	mov	r3, r0
	str	r6, [r2]
	beq	.L11607
	ldr	r0, [r6]
	movw	r1, #:lower16:.LC77
	ldr	r2, [r6, #48]
	movt	r1, #:upper16:.LC77
	add	r0, r0, #32
	ldr	r2, [r2, #4]
	bl	dev_warn
.L11607:
	add	sp, sp, #128
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L11676:
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r6, #112]
	mov	ip, #6
	mov	r4, r0
	cmp	r3, ip
	bgt	.L11611
	ldr	r3, [r6, #56]
	mov	r1, #2
	mov	r0, #10
	ldr	r2, [r6, #168]
	str	ip, [r6, #112]
	str	r3, [r6, #116]
	cmp	r2, #0
	beq	.L11611
	bl	send_sig_info
.L11611:
	mov	r1, r4
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	b	.L11609
.L11623:
	mvn	r3, #7
	mov	r0, r7
	str	r3, [r6, #112]
	bl	_raw_spin_unlock_irq
	mov	r0, r6
	bl	send_status
	mov	r0, r7
	bl	_raw_spin_lock_irq
	ldr	r3, [r6, #112]
	cmn	r3, #8
	beq	.L11679
.L11631:
	mov	r0, r7
	bl	_raw_spin_unlock_irq
	b	.L11607
.L11626:
	mov	r1, #0
	mov	r0, r6
	bl	do_set_interface
	mov	r0, r7
	bl	_raw_spin_lock_irq
	mov	r3, #7
	mov	r0, r7
	str	r3, [r6, #112]
	bl	_raw_spin_unlock_irq
	b	.L11607
.L11628:
	mov	r0, r6
	ldr	r1, [r6, #12]
	bl	do_set_interface
	ldr	r3, [r6, #12]
	cmp	r3, #0
	beq	.L11607
	ldr	r0, [r6, #4]
.L11675:
	bl	usb_composite_setup_continue
	b	.L11607
.L11679:
	str	r8, [r6, #112]
	b	.L11631
.L11633:
	ldr	r0, [r6]
	movw	r1, #:lower16:.LC75
	movw	r3, #2700
	ldr	r2, .L11680
	movt	r1, #:upper16:.LC75
	add	r0, r0, #32
	bl	dev_err
	movw	r0, #:lower16:.LC76
	movw	r1, #461
	movt	r0, #:upper16:.LC76
	bl	warn_slowpath_null
	b	.L11607
.L11681:
	.align	2
.L11680:
	.word	.LANCHOR5-3752
	.fnend
	.size	handle_exception, .-handle_exception
	.section	.rodata.str1.4
	.align	2
.LC632:
	.ascii	"usb_ep_set_wedge -> %d\012\000"
	.align	2
.LC633:
	.ascii	"usb_ep_set_halt -> %d\012\000"
	.align	2
.LC634:
	.ascii	"Unknown x%02x\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_main_thread, %function
fsg_main_thread:
	.fnstart
	@ args = 0, pretend = 0, frame = 64
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	mov	r0, #2
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #76
	sub	sp, sp, #76
	bl	allow_signal
	mov	r0, #15
	bl	allow_signal
	mov	r0, #9
	bl	allow_signal
	mov	r0, #10
	bl	allow_signal
	bl	set_freezable
	mov	r2, #57344
	mov	r3, sp
	movt	r2, 65535
	mov	r1, #0
	and	r3, r3, r2
	str	r1, [r3, #8]
	ldr	r3, [r4, #112]
	cmp	r3, #7
	addeq	r5, r4, #44
	beq	.L11683
	movw	r1, #21333
	movw	r0, #23593
	movw	ip, #21250
	mov	lr, sp
	movt	r1, 17218
	movt	r0, 49807
	movt	ip, 5
	and	fp, lr, r2
	add	r5, r4, #44
	str	r1, [sp, #12]
	str	r0, [sp, #16]
	str	ip, [sp, #20]
.L11847:
	cmp	r3, #0
	bgt	.L11684
	ldr	r3, [fp, #12]
	ldr	r3, [r3, #4]
	ldr	r9, [r3]
	ands	r9, r9, #1
	bne	.L11684
	ldrb	r3, [r4, #144]	@ zero_extendqisi2
	tst	r3, #32
	beq	.L12010
	mov	r0, r5
	bl	_raw_spin_lock_irq
	ldr	r6, [r4, #60]
	ldr	r3, [r6, #4]
	cmp	r3, #0
	bne	.L11688
	b	.L11692
.L12011:
	mov	r0, r5
	bl	_raw_spin_lock_irq
	ldr	r3, [r6, #4]
	cmp	r3, #0
	beq	.L11692
.L11688:
	mov	r0, r5
	bl	_raw_spin_unlock_irq
	mov	r0, r4
	bl	sleep_thread
	cmp	r0, #0
	beq	.L12011
.L11686:
	ldr	r3, [r4, #112]
	cmp	r3, #7
	bne	.L11847
.L11683:
	mov	r0, r5
	bl	_raw_spin_lock_irq
	mov	r3, #0
	mov	r0, r5
	str	r3, [r4, #168]
	bl	_raw_spin_unlock_irq
	ldr	r3, [r4, #172]
	cmp	r3, #0
	beq	.L11851
	ldr	r3, [r3]
	cmp	r3, #0
	beq	.L11851
	mov	r0, r4
	blx	r3
	cmp	r0, #0
	blt	.L11851
.L11852:
	add	r0, r4, #152
	mov	r1, #0
	bl	complete_and_exit
.L11851:
	ldr	r6, [r4, #92]
	add	r8, r4, #28
	ldr	r5, [r4, #100]
	mov	r0, r8
	bl	down_write
	cmp	r6, #0
	sub	r6, r6, #1
	movne	r7, #14848
	addne	r5, r5, #400
	movtne	r7, 2
	movne	r9, #0
	beq	.L11850
.L11854:
	ldr	r0, [r5, #-400]
	cmp	r0, #0
	beq	.L11853
	bl	fput
	str	r9, [r5, #-400]
	str	r7, [r5, #-364]
.L11853:
	sub	r6, r6, #1
	add	r5, r5, #400
	cmn	r6, #1
	bne	.L11854
.L11850:
	mov	r0, r8
	bl	up_write
	b	.L11852
.L11684:
	mov	r0, r4
	bl	handle_exception
	ldr	r3, [r4, #112]
	cmp	r3, #7
	bne	.L11847
	b	.L11683
.L11692:
	mov	r0, r5
	bl	_raw_spin_unlock_irq
	mov	r2, #31
	mov	r0, r4
	str	r2, [r6, #12]
	ldr	r1, [r4, #108]
	udiv	r3, r2, r1
	mul	r3, r1, r3
	subs	r3, r2, r3
	addne	r2, r1, #31
	mov	r1, r6
	subne	r2, r2, r3
	ldr	r3, [r6, #24]
	str	r2, [r3, #4]
	bl	start_out_transfer
	cmp	r0, #0
	bne	.L11983
	b	.L11686
.L11694:
	bl	_raw_spin_unlock_irq
	mov	r0, r4
	bl	sleep_thread
	cmp	r0, #0
	bne	.L11686
.L11983:
	mov	r0, r5
	bl	_raw_spin_lock_irq
	ldr	r3, [r6, #4]
	mov	r0, r5
	cmp	r3, #1
	bne	.L11694
	bl	_raw_spin_unlock_irq
	.syntax divided
@ 2446 "drivers/usb/gadget/f_mass_storage.c" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r10, [r4, #8]
	cmp	r10, #0
	beq	.L12012
	ldr	r3, [r6, #24]
	ldr	r7, [r10, #80]
	ldr	r8, [r3]
	ldr	r2, [r3, #44]
	cmp	r2, #0
	bne	.L11718
	ldr	r1, [r10, #88]
	tst	r1, #1
	bne	.L11700
	ldr	r3, [r3, #48]
	cmp	r3, #31
	bne	.L11701
	ldr	r3, [r8]
	ldr	r2, [sp, #12]
	cmp	r3, r2
	bne	.L11701
	ldrb	r3, [r8, #13]	@ zero_extendqisi2
	cmp	r3, #7
	bhi	.L11713
	ldrb	r3, [r8, #12]	@ zero_extendqisi2
	tst	r3, #127
	bne	.L11713
	ldrb	r2, [r8, #14]	@ zero_extendqisi2
	sub	r3, r2, #1
	cmp	r3, #15
	bhi	.L11713
	add	r1, r8, #15
	add	r0, r7, #76
	str	r2, [r7, #72]
	bl	memcpy
	ldrsb	r3, [r8, #12]
	mov	r0, r5
	ldr	r2, [r7, #92]
	cmp	r3, #0
	movlt	r3, #2
	movge	r3, #1
	str	r3, [r7, #120]
	ldr	r3, [r8, #8]
	cmp	r3, #0
	str	r3, [r7, #124]
	moveq	r3, #3
	streq	r3, [r7, #120]
	ldrb	r3, [r8, #13]	@ zero_extendqisi2
	cmp	r3, r2
	str	r3, [r7, #96]
	ldrcc	r2, [r7, #100]
	movcc	r1, #400
	movcs	r3, #0
	mlacc	r3, r1, r3, r2
	str	r3, [r7, #104]
	ldr	r3, [r8, #4]
	str	r3, [r7, #132]
	bl	_raw_spin_lock_irq
	mov	r3, #0
	mov	r0, r5
	str	r3, [r6, #4]
	bl	_raw_spin_unlock_irq
	mov	r0, r5
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #112]
	cmp	r3, #0
	ble	.L12013
.L11724:
	mov	r0, r5
	bl	_raw_spin_unlock_irq
	mov	r0, r5
	bl	_raw_spin_lock_irq
	ldr	r6, [r4, #60]
	str	r6, [r4, #64]
	ldr	r3, [r6, #4]
	cmp	r3, #0
	bne	.L11725
	b	.L11750
.L12014:
	mov	r0, r5
	bl	_raw_spin_lock_irq
	ldr	r3, [r6, #4]
	cmp	r3, #0
	beq	.L11750
.L11725:
	mov	r0, r5
	bl	_raw_spin_unlock_irq
	mov	r0, r4
	bl	sleep_thread
	cmp	r0, #0
	beq	.L12014
	b	.L11686
.L12013:
	mvn	r3, #8
	str	r3, [r4, #112]
	b	.L11724
.L12010:
	mov	r0, r4
	bl	sleep_thread
	ldr	r3, [r4, #112]
	cmp	r3, #7
	bne	.L11847
	b	.L11683
.L11750:
	mov	r0, r5
	add	r8, r4, #28
	bl	_raw_spin_unlock_irq
	ldrb	r3, [r4, #144]	@ zero_extendqisi2
	mov	r0, r8
	bic	r3, r3, #12
	strb	r3, [r4, #144]
	bl	down_read
	ldrb	r2, [r4, #76]	@ zero_extendqisi2
	cmp	r2, #90
	bhi	.L11726
	cmp	r2, #90
	ldrls	pc, [pc, r2, asl #2]
	b	.L11727
.L11729:
	.word	.L11747
	.word	.L11727
	.word	.L11727
	.word	.L11746
	.word	.L11727
	.word	.L11727
	.word	.L11727
	.word	.L11727
	.word	.L11745
	.word	.L11727
	.word	.L11744
	.word	.L11727
	.word	.L11727
	.word	.L11727
	.word	.L11727
	.word	.L11727
	.word	.L11727
	.word	.L11727
	.word	.L11743
	.word	.L11727
	.word	.L11727
	.word	.L11742
	.word	.L11727
	.word	.L11727
	.word	.L11727
	.word	.L11727
	.word	.L11741
	.word	.L11740
	.word	.L11727
	.word	.L11727
	.word	.L11739
	.word	.L11727
	.word	.L11727
	.word	.L11727
	.word	.L11727
	.word	.L11738
	.word	.L11727
	.word	.L11737
	.word	.L11727
	.word	.L11727
	.word	.L11736
	.word	.L11727
	.word	.L11735
	.word	.L11727
	.word	.L11727
	.word	.L11727
	.word	.L11727
	.word	.L11734
	.word	.L11727
	.word	.L11727
	.word	.L11727
	.word	.L11727
	.word	.L11727
	.word	.L11733
	.word	.L11727
	.word	.L11727
	.word	.L11727
	.word	.L11727
	.word	.L11727
	.word	.L11727
	.word	.L11727
	.word	.L11727
	.word	.L11727
	.word	.L11727
	.word	.L11727
	.word	.L11727
	.word	.L11727
	.word	.L11732
	.word	.L11731
	.word	.L11727
	.word	.L11727
	.word	.L11727
	.word	.L11727
	.word	.L11727
	.word	.L11727
	.word	.L11727
	.word	.L11727
	.word	.L11727
	.word	.L11727
	.word	.L11727
	.word	.L11727
	.word	.L11727
	.word	.L11727
	.word	.L11727
	.word	.L11727
	.word	.L11730
	.word	.L11727
	.word	.L11727
	.word	.L11727
	.word	.L11727
	.word	.L11728
.L11726:
	cmp	r2, #168
	beq	.L11748
	cmp	r2, #170
	bne	.L11727
	ldr	r3, [r4, #82]	@ unaligned
	ldr	r2, [r4, #104]
	rev	r3, r3
	cmp	r2, #0
	str	r3, [r4, #128]
	beq	.L11809
	ldr	r2, [r2, #40]
	lsl	r3, r3, r2
	str	r3, [r4, #128]
.L11809:
	mov	r2, #1
	movw	r3, #1022
	mov	r1, #12
	b	.L12004
.L12012:
	ldr	r0, [r4]
	movw	r1, #:lower16:.LC75
	movw	r3, #2447
	ldr	r2, .L12035
	movt	r1, #:upper16:.LC75
	add	r0, r0, #32
	bl	dev_err
	movw	r0, #:lower16:.LC76
	movw	r1, #461
	movt	r0, #:upper16:.LC76
	bl	warn_slowpath_null
	mov	r0, r5
	bl	_raw_spin_lock_irq
	mov	r0, r5
	str	r10, [r6, #4]
	bl	_raw_spin_unlock_irq
	b	.L11686
.L11727:
	mov	r7, #0
	movw	r1, #:lower16:.LC634
	ldr	r0, .L12035+4
	movt	r1, #:upper16:.LC634
	str	r7, [r4, #128]
	bl	sprintf
	mov	r2, r7
	mvn	r3, #0
	str	r7, [sp]
	mov	r0, r4
	ldr	r1, [r4, #72]
	bl	check_command.constprop.0
	subs	r7, r0, #0
	beq	.L12015
.L11751:
	mov	r0, r8
	bl	up_read
	cmn	r7, #4
	beq	.L11686
	ldr	r3, [fp, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	bne	.L11686
	cmn	r7, #22
	beq	.L11855
	cmp	r7, #0
	bge	.L11811
.L11988:
	ldr	r8, [r4, #120]
.L11793:
	cmp	r8, #1
	beq	.L11813
	cmp	r8, #2
	beq	.L11814
	cmp	r8, #0
	beq	.L12016
.L11815:
	mov	r0, r5
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #112]
	mov	r0, r5
	cmp	r3, #0
	mvnle	r3, #7
	strle	r3, [r4, #112]
	bl	_raw_spin_unlock_irq
	movw	r3, #:lower16:.LANCHOR0
	movt	r3, #:upper16:.LANCHOR0
	ldr	r2, [r3, #4016]
	cmp	r2, #0
	movne	r2, #0
	strne	r2, [r3, #4016]
	bne	.L11686
	mov	r0, r4
	bl	send_status
	subs	r6, r0, #0
	bne	.L11686
	mov	r0, r5
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #112]
	mov	r0, r5
	cmp	r3, #0
	strle	r6, [r4, #112]
	bl	_raw_spin_unlock_irq
	b	.L11686
.L11730:
	ldrb	lr, [r4, #83]	@ zero_extendqisi2
	mov	r1, #0
	movw	r3, #386
	ldrb	ip, [r4, #84]	@ zero_extendqisi2
	mov	r2, #1
	mov	r0, r4
	str	r1, [sp]
	mov	r1, #10
	orr	ip, ip, lr, lsl #8
	str	ip, [r4, #128]
	bl	check_command.constprop.0
	subs	r7, r0, #0
	bne	.L11751
.L12007:
	ldr	r3, [r4, #104]
	cmp	r3, #0
	beq	.L11755
.L11995:
	mov	r2, #335872
	mov	r0, r8
	str	r2, [r3, #28]
	bl	up_read
.L11756:
	ldr	r3, [fp, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	bne	.L11686
.L11855:
	mov	r7, #0
.L11811:
	ldr	r8, [r4, #120]
	cmp	r8, #2
	bne	.L11793
	ldr	r3, [r4, #128]
	mov	r2, #1
	ldr	r1, [r6, #16]
	cmp	r7, r3
	movcs	r7, r3
	str	r7, [r1, #4]
	str	r2, [r6, #4]
	ldr	r8, [r4, #120]
	ldr	r3, [r4, #136]
	sub	r7, r3, r7
	str	r7, [r4, #136]
	b	.L11793
.L11814:
	ldr	r3, [r4, #124]
	cmp	r3, #0
	beq	.L11815
	ldr	r3, [r4, #8]
	cmp	r3, #0
	beq	.L12017
	ldr	r6, [r4, #60]
	mov	r0, r4
	ldr	r3, [r4, #136]
	mov	r1, r6
	ldr	r2, [r6, #16]
	cmp	r3, #0
	bne	.L11823
	ldrb	ip, [r2, #26]	@ zero_extendqisi2
	bfi	ip, r3, #1, #1
	strb	ip, [r2, #26]
	bl	start_in_transfer
	cmp	r0, #0
	beq	.L11686
	ldr	r3, [r6, #8]
	str	r3, [r4, #60]
	b	.L11815
.L11813:
	ldr	r3, [r4, #136]
	cmp	r3, #0
	beq	.L11815
	ldrb	r3, [r4, #144]	@ zero_extendqisi2
	ands	r7, r3, #8
	beq	.L11990
	b	.L12018
.L12019:
	ldr	r3, [r4, #140]
	cmp	r3, #0
	beq	.L11815
	ldr	r8, [r4, #60]
	ldr	r2, [r8, #4]
	cmp	r2, #0
	beq	.L11856
.L11840:
	mov	r0, r4
	bl	sleep_thread
	cmp	r0, #0
	bne	.L11686
.L11990:
	ldr	r3, [r4, #64]
.L11833:
	ldr	r2, [r3, #4]
	cmp	r2, #0
	beq	.L12019
	cmp	r2, #1
	bne	.L11834
	.syntax divided
@ 1683 "drivers/usb/gadget/f_mass_storage.c" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r1, [r3, #8]
	str	r7, [r3, #4]
	str	r1, [r4, #64]
	ldr	r2, [r3, #24]
	ldr	r3, [r3, #12]
	ldr	r0, [r2, #48]
	cmp	r0, r3
	bcc	.L11835
	ldr	r3, [r2, #44]
	cmp	r3, #0
	bne	.L11835
	mov	r3, r1
	b	.L11833
.L11834:
	ldr	r8, [r4, #60]
	ldr	r3, [r8, #4]
	cmp	r3, #0
	bne	.L11840
	ldr	r3, [r4, #140]
	cmp	r3, #0
	beq	.L11840
.L11856:
	cmp	r3, #16384
	mov	r1, r8
	movcc	r6, r3
	movcs	r6, #16384
	mov	r0, r4
	str	r6, [r8, #12]
	ldr	r3, [r4, #108]
	udiv	r2, r6, r3
	mls	r2, r3, r2, r6
	cmp	r2, #0
	addne	r3, r6, r3
	moveq	r3, r6
	subne	r3, r3, r2
	ldr	r2, [r8, #24]
	str	r3, [r2, #4]
	bl	start_out_transfer
	cmp	r0, #0
	beq	.L11686
	ldr	r1, [r8, #8]
	ldr	r2, [r4, #140]
	ldr	r3, [r4, #64]
	str	r1, [r4, #60]
	sub	r6, r2, r6
	str	r6, [r4, #140]
	b	.L11833
.L12016:
	ldrb	r3, [r4, #144]	@ zero_extendqisi2
	tst	r3, #1
	beq	.L11815
	ldr	r3, [r4, #8]
	cmp	r3, #0
	ldreq	r0, [r4]
	movweq	r1, #:lower16:.LC75
	movweq	r3, #1743
	beq	.L11992
	ldr	r0, [r3, #96]
	mov	r1, #1
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #24]
	blx	r3
	ldr	r6, [r4, #8]
	mov	r1, #1
	ldr	r0, [r6, #92]
	b	.L12009
.L11820:
	mov	r0, #100
	bl	msleep_interruptible
	cmp	r0, #0
	bne	.L11686
	ldr	r0, [r6, #92]
	mov	r1, #1
.L12009:
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #24]
	blx	r3
	cmp	r0, #0
	beq	.L11815
	cmn	r0, #11
	beq	.L11820
.L11991:
	ldr	r3, [r6, #76]
	movw	r1, #:lower16:.LC633
	mov	r2, r0
	movt	r1, #:upper16:.LC633
	add	r0, r3, #32
	bl	dev_warn
	b	.L11815
.L12017:
	ldr	r0, [r4]
	movw	r1, #:lower16:.LC75
	movw	r3, #1758
.L11992:
	ldr	r2, .L12035+8
	movt	r1, #:upper16:.LC75
	add	r0, r0, #32
	bl	dev_err
	movw	r0, #:lower16:.LC76
	movw	r1, #461
	movt	r0, #:upper16:.LC76
	bl	warn_slowpath_null
	b	.L11686
.L12033:
	ldr	r3, [r10, #76]
	movw	r1, #:lower16:.LC633
	mov	r2, r0
	movt	r1, #:upper16:.LC633
	add	r0, r3, #32
	bl	dev_warn
.L11718:
	mov	r0, r5
	bl	_raw_spin_lock_irq
	mov	r3, #0
	mov	r0, r5
	str	r3, [r6, #4]
	bl	_raw_spin_unlock_irq
	b	.L11686
.L11823:
	ldrb	r3, [r2, #26]	@ zero_extendqisi2
	orr	r3, r3, #2
	strb	r3, [r2, #26]
	bl	start_in_transfer
	cmp	r0, #0
	ldrb	r2, [r4, #144]	@ zero_extendqisi2
	ldr	r3, [r6, #8]
	beq	.L12020
	tst	r2, #1
	str	r3, [r4, #60]
	beq	.L11815
.L11826:
	ldr	r6, [r4, #8]
	mov	r1, #1
	ldr	r0, [r6, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #24]
	blx	r3
	b	.L11825
.L11827:
	mov	r0, #100
	bl	msleep_interruptible
	cmp	r0, #0
	bne	.L11686
	ldr	r0, [r6, #92]
	mov	r1, #1
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #24]
	blx	r3
.L11825:
	cmp	r0, #0
	beq	.L11815
	cmn	r0, #11
	beq	.L11827
	b	.L11991
.L11747:
	mov	r3, #0
	mov	r1, #1
	mov	r2, #3
	mov	r0, r4
	str	r1, [sp]
	mov	r1, #6
	str	r3, [r4, #128]
	bl	check_command.constprop.0
	mov	r7, r0
	b	.L11751
.L11728:
	ldrb	lr, [r4, #83]	@ zero_extendqisi2
	mov	r1, #0
	movw	r3, #390
	ldrb	ip, [r4, #84]	@ zero_extendqisi2
	mov	r2, #2
	mov	r0, r4
	str	r1, [sp]
	mov	r1, #10
	orr	ip, ip, lr, lsl #8
	str	ip, [r4, #128]
	bl	check_command.constprop.0
	subs	r7, r0, #0
	bne	.L11751
.L11985:
	mov	r1, r6
	mov	r0, r4
	bl	do_mode_sense
	mov	r7, r0
	b	.L11751
.L11731:
	ldr	r3, [r4, #104]
	cmp	r3, #0
	beq	.L11727
	ldrb	r3, [r3, #24]	@ zero_extendqisi2
	tst	r3, #8
	beq	.L11727
	ldrb	lr, [r4, #83]	@ zero_extendqisi2
	mov	r0, #1
	movw	r3, #446
	ldrb	ip, [r4, #84]	@ zero_extendqisi2
	mov	r2, #2
	mov	r1, #10
	str	r0, [sp]
	mov	r0, r4
	orr	ip, ip, lr, lsl #8
	str	ip, [r4, #128]
	bl	check_command.constprop.0
	subs	r7, r0, #0
	bne	.L11751
	ldrb	r3, [r4, #77]	@ zero_extendqisi2
	ldr	r9, [r4, #78]	@ unaligned
	ldr	r10, [r6]
	ldr	ip, [r4, #104]
	tst	r3, #253
	and	lr, r3, #2
	rev	r9, r9
	bne	.L12021
	ldrd	r2, [ip, #16]
	mov	r1, #0
	cmp	r9, r2
	sbcs	r3, r1, r3
	bge	.L12022
	mov	r1, #8
	mov	r0, r10
	str	lr, [sp, #40]
	bl	__memzero
	ldr	lr, [sp, #40]
	mov	r3, #1
	strb	r3, [r10]
	cmp	lr, #0
	beq	.L11770
	lsr	r1, r9, #2
	mov	r2, #75
	strb	r7, [r10, #4]
	mov	r3, #60
	add	r1, r1, #150
	mov	r0, r8
	mov	r7, #8
	udiv	ip, r1, r2
	udiv	lr, ip, r3
	mls	r2, r2, ip, r1
	mls	r3, r3, lr, ip
	strb	lr, [r10, #5]
	strb	r2, [r10, #7]
	strb	r3, [r10, #6]
	bl	up_read
.L11753:
	ldr	r3, [fp, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L11811
	b	.L11686
.L11739:
	mov	ip, #0
	mov	r3, #16
	mov	r2, #3
	mov	r1, #6
	mov	r0, r4
	str	ip, [sp]
	str	ip, [r4, #128]
	bl	check_command.constprop.0
	subs	r7, r0, #0
	bne	.L11751
	ldr	r9, [r4, #104]
	cmp	r9, #0
	beq	.L11755
	ldrb	r3, [r9, #24]	@ zero_extendqisi2
	tst	r3, #4
	beq	.L11994
	ldrb	r10, [r4, #80]	@ zero_extendqisi2
	bics	r7, r10, #1
	bne	.L11996
	and	r1, r3, #144
	mvn	r2, r10
	cmp	r1, #16
	movne	r2, #0
	andeq	r2, r2, #1
	cmp	r2, #0
	bne	.L12023
.L11761:
	ldrb	r3, [r9, #24]	@ zero_extendqisi2
	mov	r0, r8
	bfi	r3, r10, #4, #1
	strb	r3, [r9, #24]
	bl	up_read
	b	.L11753
.L11741:
	ldrb	ip, [r4, #80]	@ zero_extendqisi2
	mov	r0, #0
	mov	r3, #22
	mov	r2, #2
	mov	r1, #6
	str	r0, [sp]
	mov	r0, r4
	str	ip, [r4, #128]
	bl	check_command.constprop.0
	subs	r7, r0, #0
	bne	.L11751
	b	.L11985
.L11742:
	ldrb	ip, [r4, #80]	@ zero_extendqisi2
	mov	r0, #0
	mov	r3, #18
	mov	r2, #1
	mov	r1, #6
	str	r0, [sp]
	mov	r0, r4
	str	ip, [r4, #128]
	bl	check_command.constprop.0
	subs	r7, r0, #0
	bne	.L11751
	b	.L12007
.L11735:
	ldrb	r1, [r4, #83]	@ zero_extendqisi2
	ldrb	r3, [r4, #84]	@ zero_extendqisi2
	ldr	r2, [r4, #104]
	orr	r3, r3, r1, lsl #8
	cmp	r2, #0
	str	r3, [r4, #128]
	beq	.L11808
	ldr	r2, [r2, #40]
	lsl	r3, r3, r2
	str	r3, [r4, #128]
.L11808:
	mov	r2, #1
	movw	r3, #446
	mov	r1, #10
.L12004:
	mov	r0, r4
	str	r2, [sp]
	bl	check_command.constprop.0
	subs	r7, r0, #0
	bne	.L11751
	mov	r0, r4
	bl	do_write
	mov	r7, r0
	b	.L11751
.L11736:
	ldrb	r1, [r4, #83]	@ zero_extendqisi2
	ldrb	r3, [r4, #84]	@ zero_extendqisi2
	ldr	r2, [r4, #104]
	orr	r3, r3, r1, lsl #8
	cmp	r2, #0
	str	r3, [r4, #128]
	beq	.L11764
	ldr	r2, [r2, #40]
	lsl	r3, r3, r2
	str	r3, [r4, #128]
.L11764:
	mov	r0, #1
	movw	r3, #446
	mov	r2, #2
	mov	r1, #10
.L11999:
	str	r0, [sp]
	mov	r0, r4
	bl	check_command.constprop.0
	subs	r7, r0, #0
	bne	.L11751
	mov	r0, r4
	bl	do_read
	mov	r7, r0
	b	.L11751
.L11737:
	mov	r0, #1
	mov	r9, #8
	mov	r3, #316
	mov	r2, #2
	mov	r1, #10
	str	r0, [sp]
	mov	r0, r4
	str	r9, [r4, #128]
	bl	check_command.constprop.0
	subs	r7, r0, #0
	bne	.L11751
	ldrb	r2, [r4, #84]	@ zero_extendqisi2
	ldr	r0, [r4, #78]	@ unaligned
	ldr	r3, [r6]
	ldr	r1, [r4, #104]
	cmp	r2, #1
	rev	r0, r0
	bhi	.L11766
	eor	r2, r2, #1
	cmp	r0, #0
	moveq	r2, #0
	andne	r2, r2, #1
	cmp	r2, #0
	bne	.L11766
	ldr	r2, [r1, #16]
	mov	r0, r8
	mov	r7, r9
	sub	r2, r2, #1
	lsr	ip, r2, #16
	lsr	lr, r2, #24
	strb	r2, [r3, #3]
	ubfx	r2, r2, #8, #8
	strb	lr, [r3]
	strb	ip, [r3, #1]
	strb	r2, [r3, #2]
	ldr	r2, [r1, #44]
	lsr	r1, r2, #16
	lsr	ip, r2, #24
	strb	ip, [r3, #4]
	strb	r2, [r3, #7]
	ubfx	r2, r2, #8, #8
	strb	r1, [r3, #5]
	strb	r2, [r3, #6]
	bl	up_read
	b	.L11753
.L11738:
	ldrb	lr, [r4, #83]	@ zero_extendqisi2
	mov	r1, #1
	mov	r3, #384
	ldrb	ip, [r4, #84]	@ zero_extendqisi2
	mov	r2, #2
	mov	r0, r4
	str	r1, [sp]
	mov	r1, #10
	orr	ip, ip, lr, lsl #8
	str	ip, [r4, #128]
	bl	check_command.constprop.0
	subs	r7, r0, #0
	bne	.L11751
	ldr	r3, [r6]
	mov	r2, #134217728
	mov	r0, r8
	ldr	r1, [r4, #104]
	mov	ip, #2
	mov	r7, #12
	str	r2, [r3]	@ unaligned
	ldr	r2, [r1, #16]
	lsr	r8, r2, #24
	lsr	lr, r2, #16
	strb	r8, [r3, #4]
	strb	r2, [r3, #7]
	ubfx	r2, r2, #8, #8
	strb	lr, [r3, #5]
	strb	r2, [r3, #6]
	ldr	r2, [r1, #44]
	strb	ip, [r3, #8]
	lsr	r1, r2, #16
	ubfx	ip, r2, #8, #8
	strb	r1, [r3, #9]
	strb	ip, [r3, #10]
	strb	r2, [r3, #11]
	bl	up_read
	b	.L11753
.L11733:
	mov	ip, #0
	mov	r9, #1
	mov	r3, #444
	mov	r2, #3
	mov	r1, #10
	mov	r0, r4
	str	r9, [sp]
	str	ip, [r4, #128]
	bl	check_command.constprop.0
	subs	r7, r0, #0
	bne	.L11751
	ldr	r10, [r4, #104]
	ldrb	r3, [r10, #24]	@ zero_extendqisi2
	tst	r3, #2
	bne	.L11788
	ldr	r0, [r10]
	cmp	r0, #0
	beq	.L11788
	mov	r1, r9
	bl	vfs_fsync
	cmp	r0, #0
	beq	.L11788
	movw	r3, #3074
	mov	r0, r8
	movt	r3, 3
	str	r3, [r10, #28]
	bl	up_read
	b	.L11753
.L11734:
	mov	ip, #0
	mov	r0, #1
	movw	r3, #446
	mov	r2, #3
	mov	r1, #10
	str	r0, [sp]
	mov	r0, r4
	str	ip, [r4, #128]
	bl	check_command.constprop.0
	subs	r7, r0, #0
	bne	.L11751
	ldr	r3, [r4, #60]
	mov	r1, #0
	ldr	r9, [r4, #104]
	ldr	ip, [r4, #78]	@ unaligned
	str	r3, [sp, #40]
	ldrd	r2, [r9, #16]
	rev	ip, ip
	cmp	ip, r2
	sbcs	r3, r1, r3
	bge	.L12024
	ldrb	r7, [r4, #77]	@ zero_extendqisi2
	bics	r7, r7, #16
	bne	.L11996
	ldrb	r1, [r4, #83]	@ zero_extendqisi2
	ldrb	r3, [r4, #84]	@ zero_extendqisi2
	orrs	r1, r3, r1, lsl #8
	beq	.L12025
	ldr	r0, [r9]
	ldr	r2, [r9, #40]
	ldrb	r3, [r9, #24]	@ zero_extendqisi2
	cmp	r0, #0
	sub	lr, r2, #32
	lsl	r10, r1, r2
	orr	r1, r7, ip, lsl lr
	ubfx	r3, r3, #1, #1
	moveq	r3, #1
	str	r1, [sp, #28]
	rsb	r1, r2, #32
	cmp	r3, #0
	ldr	lr, [sp, #28]
	lsl	r3, ip, r2
	str	r3, [sp, #24]
	orr	r1, lr, ip, lsr r1
	str	r1, [sp, #28]
	bne	.L11794
	mov	r1, #1
	bl	vfs_fsync
.L11794:
	ldr	r3, [fp, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	ands	r1, r3, #1
	bne	.L11993
	ldr	r3, [r9]
	mvn	r2, #0
	ldr	r3, [r3, #12]
	ldr	r3, [r3, #40]
	ldr	r0, [r3, #32]
	bl	invalidate_mapping_pages
	ldr	r3, [fp, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	bne	.L11993
	str	r6, [sp, #44]
	str	r8, [sp, #48]
	strd	r4, [sp, #52]
	ldrd	r4, [sp, #32]
	str	r7, [sp, #60]
	ldrd	r6, [sp, #24]
	b	.L11796
.L12028:
	cmp	r0, #0
	blt	.L11801
	cmp	r4, r0
	bls	.L11802
	ldr	r3, [r9, #44]
	rsb	r3, r3, #0
	and	r0, r0, r3
.L11802:
	cmp	r0, #0
	beq	.L11801
	adds	r6, r6, r0
	sub	r10, r10, r0
	adc	r7, r7, r0, asr #31
.L11796:
	cmp	r10, #0
	beq	.L12026
	ldr	r1, [r9, #8]
	cmp	r10, #16384
	mov	r3, #0
	ldr	r0, [r9, #12]
	movcc	r2, r10
	movcs	r2, #16384
	subs	r4, r1, r6
	sbc	r5, r0, r7
	cmp	r2, r4
	sbcs	r1, r3, r5
	movlt	r4, r2
	movlt	r5, r3
	cmp	r4, #0
	beq	.L12027
	ldr	r1, [sp, #40]
	add	r3, sp, #64
	mov	r2, r4
	strd	r6, [sp, #64]
	ldr	r0, [r9]
	ldr	r1, [r1]
	bl	vfs_read
	ldr	r3, [fp, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L12028
	strd	r6, [sp, #24]
	mvn	r7, #3
	ldr	r6, [sp, #44]
	strd	r4, [sp, #32]
	ldr	r8, [sp, #48]
	ldrd	r4, [sp, #52]
	b	.L11751
.L11732:
	ldr	r3, [r4, #104]
	cmp	r3, #0
	beq	.L11727
	ldrb	r3, [r3, #24]	@ zero_extendqisi2
	tst	r3, #8
	beq	.L11727
	ldrb	lr, [r4, #83]	@ zero_extendqisi2
	mov	r10, #1
	movw	r3, #450
	ldrb	ip, [r4, #84]	@ zero_extendqisi2
	mov	r2, #2
	mov	r1, #10
	mov	r0, r4
	str	r10, [sp]
	orr	ip, ip, lr, lsl #8
	str	ip, [r4, #128]
	bl	check_command.constprop.0
	subs	r7, r0, #0
	bne	.L11751
	ldrb	r3, [r4, #77]	@ zero_extendqisi2
	ldrb	r0, [r4, #82]	@ zero_extendqisi2
	ldr	r9, [r6]
	and	r1, r3, #253
	and	r2, r3, #2
	ldr	r3, [r4, #104]
	cmp	r0, r10
	cmpls	r1, #0
	bne	.L12029
	mov	r1, #20
	mov	r0, r9
	str	r3, [sp, #40]
	str	r2, [sp, #44]
	bl	__memzero
	mov	r1, #18
	ldr	r3, [sp, #40]
	ldr	r2, [sp, #44]
	strb	r1, [r9, #1]
	strb	r10, [r9, #2]
	strb	r10, [r9, #3]
	cmp	r2, #0
	mov	r2, #22
	strb	r10, [r9, #6]
	strb	r2, [r9, #5]
	beq	.L11772
	mov	r1, #131072
	mov	r0, r8
	strb	r2, [r9, #13]
	mvn	r2, #85
	str	r1, [r9, #8]	@ unaligned
	mov	r1, #75
	strb	r2, [r9, #14]
	ldr	r3, [r3, #16]
	mov	r2, #60
	strb	r7, [r9, #16]
	mov	r7, #20
	lsr	r3, r3, #2
	add	r3, r3, #150
	udiv	ip, r3, r1
	udiv	lr, ip, r2
	mls	r3, r1, ip, r3
	mls	r2, r2, lr, ip
	strb	lr, [r9, #17]
	strb	r3, [r9, #19]
	strb	r2, [r9, #18]
	bl	up_read
	b	.L11753
.L11743:
	ldrb	ip, [r4, #80]	@ zero_extendqisi2
	mov	r0, #0
	mov	r3, #16
	mov	r2, #2
	mov	r1, #6
	str	r0, [sp]
	mov	r0, r4
	str	ip, [r4, #128]
	bl	check_command.constprop.0
	subs	r7, r0, #0
	bne	.L11751
	ldr	lr, [r4, #104]
	ldr	r9, [r6]
	cmp	lr, #0
	beq	.L12030
	ldrb	r2, [lr, #24]	@ zero_extendqisi2
	mov	r1, #2
	mov	ip, #31
	mov	r3, r4
	mov	r0, r8
	ands	r2, r2, #8
	movne	r2, #5
	strb	r2, [r9]
	ldrb	r2, [lr, #24]	@ zero_extendqisi2
	strb	r1, [r9, #2]
	strb	r1, [r9, #3]
	strb	ip, [r9, #4]
	lsl	r2, r2, #5
	strb	r7, [r9, #5]
	strb	r7, [r9, #6]
	bic	r2, r2, #127
	strb	r2, [r9, #1]
	strb	r7, [r9, #7]
	ldr	ip, [r3, #180]!	@ unaligned
	mov	r7, #36
	ldr	r1, [r3, #4]	@ unaligned
	ldr	r2, [r3, #8]	@ unaligned
	ldr	lr, [r3, #12]	@ unaligned
	str	ip, [r9, #8]	@ unaligned
	str	r1, [r9, #12]	@ unaligned
	str	r2, [r9, #16]	@ unaligned
	str	lr, [r9, #20]	@ unaligned
	ldr	ip, [r3, #16]	@ unaligned
	ldr	r1, [r3, #20]	@ unaligned
	ldr	r2, [r3, #24]	@ unaligned
	str	ip, [r9, #24]	@ unaligned
	str	r1, [r9, #28]	@ unaligned
	str	r2, [r9, #32]	@ unaligned
	ldrb	r3, [r3, #28]	@ zero_extendqisi2
	strb	r3, [r9, #36]
	bl	up_read
	b	.L11753
.L11744:
	ldrb	r3, [r4, #80]	@ zero_extendqisi2
	ldr	r2, [r4, #104]
	cmp	r3, #0
	moveq	r3, #256
	cmp	r2, #0
	str	r3, [r4, #128]
	beq	.L11807
	ldr	r2, [r2, #40]
	lsl	r3, r3, r2
	str	r3, [r4, #128]
.L11807:
	mov	r2, #1
	mov	r3, #30
	mov	r1, #6
	b	.L12004
.L11740:
	mov	ip, #0
	mov	r3, #18
	mov	r2, #3
	mov	r1, #6
	mov	r0, r4
	str	ip, [sp]
	str	ip, [r4, #128]
	bl	check_command.constprop.0
	subs	r7, r0, #0
	bne	.L11751
	ldr	r9, [r4, #104]
	cmp	r9, #0
	beq	.L11755
	ldrb	r2, [r9, #24]	@ zero_extendqisi2
	tst	r2, #4
	beq	.L11994
	ldrb	r3, [r4, #77]	@ zero_extendqisi2
	tst	r3, #254
	bne	.L11996
	ldrb	r3, [r4, #80]	@ zero_extendqisi2
	bics	r7, r3, #3
	bne	.L11996
	tst	r3, #1
	beq	.L11779
	ldr	r3, [r9]
	cmp	r3, #0
	beq	.L11780
.L11788:
	mov	r0, r8
	bl	up_read
	b	.L11753
.L11745:
	ldrb	r3, [r4, #80]	@ zero_extendqisi2
	ldr	r2, [r4, #104]
	cmp	r3, #0
	moveq	r3, #256
	cmp	r2, #0
	str	r3, [r4, #128]
	beq	.L11763
	ldr	r2, [r2, #40]
	lsl	r3, r3, r2
	str	r3, [r4, #128]
.L11763:
	mov	r0, #1
	mov	r3, #30
	mov	r2, #2
	mov	r1, #6
	b	.L11999
.L11746:
	ldrb	ip, [r4, #80]	@ zero_extendqisi2
	mov	r10, #0
	mov	r3, #16
	mov	r2, #2
	mov	r1, #6
	mov	r0, r4
	str	r10, [sp]
	str	ip, [r4, #128]
	bl	check_command.constprop.0
	subs	r7, r0, #0
	bne	.L11751
	ldr	r1, [r4, #104]
	ldr	r3, [r6]
	cmp	r1, r10
	beq	.L12031
	ldrb	r0, [r1, #24]	@ zero_extendqisi2
	ldr	r2, [r1, #28]
	str	r10, [r1, #28]
	ldr	r9, [r1, #32]
	str	r10, [r1, #32]
	mov	ip, r0
	ubfx	r0, r0, #6, #1
	lsl	r7, r0, #7
	bfi	ip, r10, #6, #1
	strb	ip, [r1, #24]
.L11774:
	mov	r0, r3
	mov	r1, #18
	str	r3, [sp, #40]
	str	r2, [sp, #44]
	orr	r7, r7, #112
	bl	__memzero
	ldr	r3, [sp, #40]
	lsr	r1, r9, #16
	lsr	ip, r9, #24
	ldr	r2, [sp, #44]
	strb	r7, [r3]
	mov	r7, #18
	lsr	lr, r2, #16
	lsr	r0, r2, #8
	strb	r9, [r3, #6]
	ubfx	r9, r9, #8, #8
	strb	lr, [r3, #2]
	strb	r2, [r3, #13]
	mov	r2, #10
	strb	ip, [r3, #3]
	strb	r1, [r3, #4]
	strb	r9, [r3, #5]
	strb	r2, [r3, #7]
	strb	r0, [r3, #12]
	mov	r0, r8
	bl	up_read
	b	.L11753
.L12015:
	ldr	r3, [r4, #104]
	b	.L11995
.L12020:
	tst	r2, #1
	str	r3, [r4, #60]
	beq	.L11686
	b	.L11826
.L11748:
	ldr	r3, [r4, #82]	@ unaligned
	ldr	r2, [r4, #104]
	rev	r3, r3
	cmp	r2, #0
	str	r3, [r4, #128]
	beq	.L11765
	ldr	r2, [r2, #40]
	lsl	r3, r3, r2
	str	r3, [r4, #128]
.L11765:
	mov	r0, #1
	movw	r3, #1022
	mov	r2, #2
	mov	r1, #12
	b	.L11999
.L11713:
	ldrb	r3, [r7, #144]	@ zero_extendqisi2
	ands	r7, r3, #1
	bne	.L11715
	mov	r0, r5
	bl	_raw_spin_lock_irq
	mov	r0, r5
	str	r7, [r6, #4]
	bl	_raw_spin_unlock_irq
	b	.L11686
.L11835:
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #112]
	mov	r6, r0
	cmp	r3, #1
	bgt	.L11838
	ldr	r3, [r4, #56]
	mov	r1, #1
	ldr	r2, [r4, #168]
	str	r1, [r4, #112]
	str	r3, [r4, #116]
	cmp	r2, #0
	beq	.L11838
.L12008:
	mov	r1, #2
	mov	r0, #10
	bl	send_sig_info
.L11838:
	mov	r1, r6
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	b	.L11686
.L12036:
	.align	2
.L12035:
	.word	.LANCHOR5-3732
	.word	.LANCHOR3-4068
	.word	.LANCHOR5-3712
.L11701:
	ldr	r0, [r10, #92]
	ldr	r3, [r0, #8]
	ldr	r2, [r3, #28]
	cmp	r2, #0
	beq	.L11703
	blx	r2
.L11704:
	cmp	r0, #0
	beq	.L11707
	cmn	r0, #11
	bne	.L12032
	mov	r0, #100
	bl	msleep_interruptible
	cmp	r0, #0
	bne	.L11707
	ldr	r0, [r10, #92]
	ldr	r2, [r0, #8]
	ldr	r3, [r2, #28]
	cmp	r3, #0
	beq	.L11709
	blx	r3
	b	.L11704
.L11709:
	mov	r1, #1
	ldr	r3, [r2, #24]
	blx	r3
	b	.L11704
.L12032:
	ldr	r3, [r10, #76]
	movw	r1, #:lower16:.LC632
	mov	r2, r0
	movt	r1, #:upper16:.LC632
	add	r0, r3, #32
	bl	dev_warn
.L11707:
	add	r1, r10, #88
	mov	r0, #0
	bl	_set_bit
	b	.L11718
.L11715:
	ldr	r0, [r10, #96]
	mov	r1, #1
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #24]
	blx	r3
	b	.L11984
.L11719:
	cmn	r0, #11
	bne	.L12033
	mov	r0, #100
	bl	msleep_interruptible
	cmp	r0, #0
	bne	.L11718
.L11984:
	ldr	r0, [r10, #92]
	mov	r1, #1
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #24]
	blx	r3
	cmp	r0, #0
	bne	.L11719
	b	.L11718
.L11755:
	mov	r0, r8
	bl	up_read
	b	.L11756
.L11700:
	mov	r0, r5
	str	r2, [sp, #40]
	bl	_raw_spin_lock_irq
	ldr	r2, [sp, #40]
	mov	r0, r5
	str	r2, [r6, #4]
	bl	_raw_spin_unlock_irq
	b	.L11686
.L11703:
	mov	r1, #1
	ldr	r3, [r3, #24]
	blx	r3
	b	.L11704
.L11779:
	tst	r2, #16
	bne	.L12034
	tst	r3, #2
	beq	.L11788
	ldr	r3, [r4, #172]
	cmp	r3, #0
	beq	.L11783
	ldr	r3, [r3, #4]
	cmp	r3, #0
	beq	.L11783
	ldr	r2, [r4, #100]
	mov	r1, r9
	mov	r0, r4
	ldr	ip, [sp, #16]
	sub	r2, r9, r2
	asr	r2, r2, #4
	mul	r2, ip, r2
	blx	r3
	cmp	r0, #0
	blt	.L11861
	bne	.L11788
.L11783:
	mov	r0, r8
	bl	up_read
	mov	r0, r8
	bl	down_write
	ldr	r0, [r9]
	cmp	r0, #0
	beq	.L11784
	bl	fput
	mov	r3, #0
	str	r3, [r9]
.L11784:
	mov	r0, r8
	bl	up_write
	mov	r0, r8
	bl	down_read
	ldr	r3, [r4, #172]
	cmp	r3, #0
	beq	.L11788
	ldr	r3, [r3, #8]
	cmp	r3, #0
	beq	.L11788
	ldr	r2, [r4, #100]
	mov	r1, r9
	mov	r0, r4
	ldr	ip, [sp, #16]
	sub	r2, r9, r2
	asr	r2, r2, #4
	mul	r2, ip, r2
	blx	r3
	and	r7, r0, r0, asr #31
	b	.L11751
.L12031:
	ldrb	r1, [r4, #144]	@ zero_extendqisi2
	mov	r2, #9472
	movt	r2, 5
	orr	r1, r1, #16
	strb	r1, [r4, #144]
	b	.L11774
.L11772:
	mvn	r1, #85
	str	r7, [r9, #8]	@ unaligned
	mov	r0, r8
	strb	r2, [r9, #13]
	mov	r7, #20
	strb	r1, [r9, #14]
	ldr	r3, [r3, #16]
	lsr	r2, r3, #16
	lsr	r1, r3, #24
	strb	r1, [r9, #16]
	strb	r3, [r9, #19]
	ubfx	r3, r3, #8, #8
	strb	r2, [r9, #17]
	strb	r3, [r9, #18]
	bl	up_read
	b	.L11753
.L11770:
	lsr	r3, r9, #16
	lsr	r2, r9, #24
	mov	r0, r8
	mov	r7, #8
	strb	r2, [r10, #4]
	strb	r9, [r10, #7]
	ubfx	r9, r9, #8, #8
	strb	r3, [r10, #5]
	strb	r9, [r10, #6]
	bl	up_read
	b	.L11753
.L11993:
	mov	r0, r8
	bl	up_read
	b	.L11686
.L12025:
	mov	r0, r8
	bl	up_read
	ldr	r3, [fp, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L11988
	b	.L11686
.L11801:
	mov	r0, r6
	mov	r1, r7
	strd	r4, [sp, #32]
	ldr	r3, [r9, #40]
	mov	r2, #4352
	ldr	r6, [sp, #44]
	movt	r2, 3
	ldr	r8, [sp, #48]
	ldrd	r4, [sp, #52]
	ldr	r7, [sp, #60]
.L12002:
	strd	r0, [sp, #24]
	subs	r1, r3, #32
	ldr	ip, [sp, #28]
	str	r2, [r9, #28]
	lsr	r2, r0, r3
	rsb	r3, r3, #32
	mov	r0, r8
	orr	r2, r2, ip, lsl r3
	movpl	r3, ip
	orrpl	r2, r2, r3, asr r1
	ldrb	r3, [r9, #24]	@ zero_extendqisi2
	str	r2, [r9, #32]
	orr	r3, r3, #64
	strb	r3, [r9, #24]
	bl	up_read
	b	.L11753
.L12018:
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #112]
	mov	r6, r0
	cmp	r3, #1
	bgt	.L11838
	ldr	r3, [r4, #56]
	str	r8, [r4, #112]
	ldr	r2, [r4, #168]
	str	r3, [r4, #116]
	cmp	r2, #0
	bne	.L12008
	b	.L11838
.L12030:
	ldrb	r3, [r4, #144]	@ zero_extendqisi2
	mov	r1, #36
	mov	r0, r9
	mov	r7, r1
	orr	r3, r3, #16
	strb	r3, [r4, #144]
	bl	__memzero
	mov	r2, #127
	mov	r3, #31
	mov	r0, r8
	strb	r2, [r9]
	strb	r3, [r9, #4]
	bl	up_read
	b	.L11753
.L12023:
	ldr	r0, [r9]
	ubfx	r3, r3, #1, #1
	cmp	r0, #0
	moveq	r3, #1
	cmp	r3, #0
	bne	.L11761
	mov	r1, #1
	bl	vfs_fsync
	b	.L11761
.L12026:
	strd	r6, [sp, #24]
	ldr	r6, [sp, #44]
	strd	r4, [sp, #32]
	ldr	r8, [sp, #48]
	ldrd	r4, [sp, #52]
	ldr	r7, [sp, #60]
	b	.L11751
.L11766:
	mov	r3, #9216
	mov	r0, r8
	movt	r3, 5
	str	r3, [r1, #28]
	bl	up_read
	b	.L11756
.L11996:
	mov	r3, #9216
	mov	r0, r8
	movt	r3, 5
	str	r3, [r9, #28]
	bl	up_read
	b	.L11756
.L12027:
	mov	r2, #8448
	mov	r0, r6
	strd	r4, [sp, #32]
	mov	r1, r7
	movt	r2, 5
	ldr	r3, [r9, #40]
	ldr	r6, [sp, #44]
	ldr	r8, [sp, #48]
	ldrd	r4, [sp, #52]
	ldr	r7, [sp, #60]
	b	.L12002
.L11994:
	mov	r3, #335872
	mov	r0, r8
	str	r3, [r9, #28]
	bl	up_read
	b	.L11756
.L11780:
	mov	r3, #14848
	mov	r0, r8
	movt	r3, 2
	str	r3, [r9, #28]
	bl	up_read
	b	.L11756
.L12022:
	mov	r3, #8448
	mov	r0, r8
	movt	r3, 5
	str	r3, [ip, #28]
	bl	up_read
	b	.L11756
.L12021:
	mov	r3, #9216
	mov	r0, r8
	movt	r3, 5
	str	r3, [ip, #28]
	bl	up_read
	b	.L11756
.L12024:
	mov	r3, #8448
	mov	r0, r8
	movt	r3, 5
	str	r3, [r9, #28]
	bl	up_read
	b	.L11756
.L11861:
	mov	r7, r0
	b	.L11751
.L12029:
	mov	r2, #9216
	mov	r0, r8
	movt	r2, 5
	str	r2, [r3, #28]
	bl	up_read
	b	.L11756
.L12034:
	ldr	r3, [sp, #20]
	mov	r0, r8
	str	r3, [r9, #28]
	bl	up_read
	b	.L11756
	.fnend
	.size	fsg_main_thread, .-fsg_main_thread
	.align	2
	.global	f_midi_bind_config
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_midi_bind_config, %function
f_midi_bind_config:
	.fnstart
	@ args = 16, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	mov	r8, r0
	strd	r10, [sp, #24]
	mov	r10, r3
	mov	fp, r2
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	ldr	r3, [sp, #60]
	str	r1, [sp, #4]
	cmp	r3, #0
	beq	.L12038
	mvn	r2, #0
	str	r2, [r3]
	str	r2, [r3, #4]
.L12038:
	ldr	r3, [sp, #48]
	cmp	r3, #16
	cmpls	r10, #16
	bhi	.L12050
	movw	r9, #:lower16:kmalloc_caches
	movt	r9, #:upper16:kmalloc_caches
	ldr	r0, [r9, #36]
	cmp	r0, #0
	beq	.L12051
	movw	r1, #32976
	bl	kmem_cache_alloc
	subs	r5, r0, #0
	beq	.L12063
.L12040:
	cmp	r10, #0
	movne	r4, #0
	addne	r6, r5, #220
	movne	r7, r4
	bne	.L12043
	b	.L12064
.L12054:
	mov	r4, r2
.L12043:
	ldr	r0, [r9, #24]
	movw	r1, #32976
	mov	r3, #16
	cmp	r0, #0
	beq	.L12041
	bl	kmem_cache_alloc
	subs	r3, r0, #0
	beq	.L12042
.L12041:
	add	r2, r4, #1
	stm	r3, {r5, r7}
	cmp	r2, r10
	strb	r4, [r3, #8]
	str	r3, [r6, #4]!
	bne	.L12054
.L12044:
	ldr	ip, [r8, #24]
	movw	r1, #:lower16:f_midi_in_tasklet
	mov	r2, r5
	movt	r1, #:upper16:f_midi_in_tasklet
	add	r0, r5, #292
	ldr	ip, [ip]
	str	ip, [r5, #76]
	bl	tasklet_init
	mov	r1, #208
	mov	r0, fp
	bl	kstrdup
	ldr	r3, [sp, #48]
	mov	r2, r0
	mov	r0, r5
	str	r10, [r5, #312]
	str	r3, [r5, #316]
	ldr	r3, [sp, #4]
	str	r2, [r5, #324]
	str	r3, [r5, #320]
	ldr	r3, [sp, #52]
	str	r3, [r5, #328]
	ldr	r3, [sp, #56]
	str	r3, [r5, #332]
	bl	f_midi_register_card
	subs	r7, r0, #0
	blt	.L12046
	ldr	lr, .L12065
	movw	r3, #:lower16:.LC589
	movw	ip, #:lower16:f_midi_bind
	movt	r3, #:upper16:.LC589
	movw	r1, #:lower16:f_midi_unbind
	movw	r2, #:lower16:f_midi_set_alt
	movt	ip, #:upper16:f_midi_bind
	movt	r1, #:upper16:f_midi_unbind
	movt	r2, #:upper16:f_midi_set_alt
	stm	r5, {r3, lr}
	movw	r3, #:lower16:f_midi_disable
	mov	r0, r8
	movt	r3, #:upper16:f_midi_disable
	str	ip, [r5, #24]
	str	r1, [r5, #28]
	mov	r1, r5
	str	r2, [r5, #32]
	str	r3, [r5, #40]
	bl	usb_add_function
	subs	r7, r0, #0
	bne	.L12046
	ldr	r3, [sp, #60]
	cmp	r3, #0
	beq	.L12037
	mov	r2, r3
	ldr	r3, [r5, #92]
	ldr	r3, [r3]
	ldr	r3, [r3]
	str	r3, [r2]
	ldr	r3, [r5, #92]
	ldr	r3, [r3, #12]
	str	r3, [r2, #4]
	b	.L12037
.L12042:
	sub	r4, r4, #1
	mvn	r7, #11
.L12046:
	cmn	r4, #1
	addne	r4, r4, #57
	addne	r6, r5, #224
	addne	r4, r5, r4, lsl #2
	beq	.L12049
.L12048:
	ldr	r0, [r4, #-4]!
	bl	kfree
	cmp	r6, r4
	bne	.L12048
.L12049:
	mov	r0, r5
	bl	kfree
.L12037:
	mov	r0, r7
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L12051:
	mov	r5, #16
	b	.L12040
.L12064:
	mvn	r4, #0
	b	.L12044
.L12050:
	mvn	r7, #21
	b	.L12037
.L12063:
	mvn	r7, #11
	b	.L12037
.L12066:
	.align	2
.L12065:
	.word	.LANCHOR4-1576
	.fnend
	.size	f_midi_bind_config, .-f_midi_bind_config
	.align	2
	.global	usb_diag_open
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_diag_open, %function
usb_diag_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	movw	r7, #:lower16:.LANCHOR1
	mov	r6, r0
	movt	r7, #:upper16:.LANCHOR1
	ldr	r0, .L12081
	strd	r8, [sp, #16]
	mov	r5, r7
	mov	r9, r1
	str	r10, [sp, #24]
	mov	r10, r2
	str	lr, [sp, #28]
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r5, #40]!
	mov	r8, r0
	cmp	r4, r5
	beq	.L12068
	sub	r4, r4, #4
	b	.L12070
.L12079:
	ldr	r4, [r4, #4]
	cmp	r4, r5
	sub	r4, r4, #4
	beq	.L12068
.L12070:
	mov	r0, r6
	ldr	r1, [r4]
	bl	strcmp
	cmp	r0, #0
	bne	.L12079
	ldr	r0, .L12081
	mov	r1, r8
	bl	_raw_spin_unlock_irqrestore
.L12072:
	ldr	r0, .L12081
	str	r6, [r4]
	str	r10, [r4, #12]
	str	r9, [r4, #16]
	bl	_raw_spin_lock_irqsave
	ldr	r2, [r7, #44]
	add	r3, r4, #4
	mov	r1, r0
	ldr	r0, .L12081
	str	r3, [r7, #44]
	str	r5, [r4, #4]
	str	r2, [r4, #8]
	str	r3, [r2]
	bl	_raw_spin_unlock_irqrestore
.L12067:
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L12068:
	ldr	r0, .L12081
	mov	r1, r8
	bl	_raw_spin_unlock_irqrestore
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L12080
	movw	r1, #32976
	bl	kmem_cache_alloc
	subs	r4, r0, #0
	bne	.L12072
	mvn	r4, #11
	b	.L12067
.L12080:
	mov	r4, #16
	b	.L12072
.L12082:
	.align	2
.L12081:
	.word	.LANCHOR0+204
	.fnend
	.size	usb_diag_open, .-usb_diag_open
	.align	2
	.global	usb_diag_close
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_diag_close, %function
usb_diag_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r5, #:lower16:.LANCHOR0
	mov	r4, r0
	movt	r5, #:upper16:.LANCHOR0
	str	r6, [sp, #8]
	add	r0, r5, #204
	str	lr, [sp, #12]
	bl	_raw_spin_lock_irqsave
	ldr	lr, [r4, #4]
	mov	ip, #0
	mov	r2, r5
	ldr	r3, [r4, #8]
	mov	r5, r0
	mov	r1, #512
	str	ip, [r4, #12]
	mov	r0, #256
	str	ip, [r4, #16]
	str	r3, [lr, #4]
	str	lr, [r3]
	ldr	r3, [r2, #188]!
	strd	r0, [r4, #4]
	cmp	r3, r2
	beq	.L12084
	sub	r3, r3, #132
	mov	lr, ip
.L12087:
	ldr	ip, [r3, #116]
	cmp	ip, r4
	beq	.L12089
	ldr	r3, [r3, #132]
	cmp	r3, r2
	sub	r3, r3, #132
	bne	.L12087
.L12084:
	mov	r0, r4
	bl	kfree
	mov	r1, r5
	ldr	r0, .L12090
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock_irqrestore
.L12089:
	ldr	ip, [r3, #132]
	str	lr, [r3, #116]
	cmp	ip, r2
	sub	r3, ip, #132
	bne	.L12087
	b	.L12084
.L12091:
	.align	2
.L12090:
	.word	.LANCHOR0+204
	.fnend
	.size	usb_diag_close, .-usb_diag_close
	.align	2
	.global	usb_diag_alloc_req
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_diag_alloc_req, %function
usb_diag_alloc_req:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r10, [r0, #20]
	.pad #4
	sub	sp, sp, #4
	cmp	r10, #0
	beq	.L12099
	add	r9, r10, #100
	mov	r4, r1
	mov	r0, r9
	mov	r7, r2
	bl	_raw_spin_lock_irqsave
	mov	r8, r0
	mov	r0, r10
	bl	free_reqs
	cmp	r4, #0
	ble	.L12094
	movw	r5, #:lower16:diag_write_complete
	mov	fp, #0
	movt	r5, #:upper16:diag_write_complete
	add	r6, r10, #92
	b	.L12096
.L12109:
	str	r5, [r0, #28]
	ldr	r2, [r10, #96]
	cmp	r4, fp
	str	r3, [r10, #96]
	str	r6, [r0, #36]
	str	r2, [r0, #40]
	str	r3, [r2]
	beq	.L12094
.L12096:
	ldr	r0, [r10, #80]
	mov	r1, #32
	add	fp, fp, #1
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	cmp	r0, #0
	add	r3, r0, #36
	bne	.L12109
.L12095:
	mov	r0, r10
	bl	free_reqs
	mov	r0, r9
	mov	r1, r8
	bl	_raw_spin_unlock_irqrestore
	mvn	r0, #11
.L12092:
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L12094:
	cmp	r7, #0
	ble	.L12097
	movw	r4, #:lower16:diag_read_complete
	mov	r6, #0
	movt	r4, #:upper16:diag_read_complete
	add	r5, r10, #84
	b	.L12098
.L12110:
	str	r4, [r0, #28]
	ldr	r2, [r10, #88]
	cmp	r7, r6
	str	r3, [r10, #88]
	str	r5, [r0, #36]
	str	r2, [r0, #40]
	str	r3, [r2]
	beq	.L12097
.L12098:
	ldr	r0, [r10, #76]
	mov	r1, #32
	add	r6, r6, #1
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	cmp	r0, #0
	add	r3, r0, #36
	bne	.L12110
	b	.L12095
.L12097:
	mov	r0, r9
	mov	r1, r8
	bl	_raw_spin_unlock_irqrestore
	mov	r0, #0
	b	.L12092
.L12099:
	mvn	r0, #18
	b	.L12092
	.fnend
	.size	usb_diag_alloc_req, .-usb_diag_alloc_req
	.section	.rodata.str1.4
	.align	2
.LC635:
	.ascii	"%s: no requests available\012\000"
	.align	2
.LC636:
	.ascii	"%s: cannot queue read request\012\000"
	.text
	.align	2
	.global	usb_diag_read
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_diag_read, %function
usb_diag_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r5, [r0, #20]
	cmp	r5, #0
	beq	.L12115
	add	r7, r5, #100
	mov	r6, r1
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #104]
	mov	r1, r0
	cmp	r3, #0
	beq	.L12121
	ldr	r4, [r5, #84]
	add	r8, r5, #84
	cmp	r8, r4
	beq	.L12122
	ldrd	r2, [r4]
	mov	lr, #256
	mov	ip, #512
	mov	r0, r7
	str	r3, [r2, #4]
	str	r2, [r3]
	str	lr, [r4]
	str	ip, [r4, #4]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r6]
	mov	r2, #32
	sub	r1, r4, #36
	str	r3, [r4, #-36]
	ldr	r3, [r6, #4]
	str	r3, [r4, #-32]
	str	r6, [r4, #-4]
	ldr	r0, [r5, #76]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	bne	.L12123
.L12111:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L12115:
	mvn	r0, #18
	b	.L12111
.L12121:
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	mvn	r0, #4
	b	.L12111
.L12123:
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #88]
	mov	r1, r0
	mov	r0, r7
	str	r4, [r5, #88]
	str	r8, [r4]
	str	r3, [r4, #4]
	str	r4, [r3]
	bl	_raw_spin_unlock_irqrestore
	ldr	r1, .L12124
	ldr	r0, .L12124+4
	bl	___ratelimit
	cmp	r0, #0
	mvneq	r0, #4
	beq	.L12111
	ldr	r3, [r5, #108]
	movw	r1, #:lower16:.LC636
	ldr	r2, .L12124
	movt	r1, #:upper16:.LC636
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	dev_err
	mvn	r0, #4
	b	.L12111
.L12122:
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r5, #108]
	movw	r1, #:lower16:.LC635
	ldr	r2, .L12124
	movt	r1, #:upper16:.LC635
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	dev_err
	mvn	r0, #10
	b	.L12111
.L12125:
	.align	2
.L12124:
	.word	.LANCHOR5-3696
	.word	.LANCHOR4-1192
	.fnend
	.size	usb_diag_read, .-usb_diag_read
	.align	2
	.global	usb_diag_write
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_diag_write, %function
usb_diag_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r0, #20]
	cmp	r4, #0
	beq	.L12132
	add	r7, r4, #100
	mov	r6, r1
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #104]
	mov	r1, r0
	cmp	r3, #0
	beq	.L12137
	ldr	r5, [r4, #92]
	add	r8, r4, #92
	cmp	r8, r5
	beq	.L12138
	ldrd	r2, [r5]
	mov	lr, #256
	mov	ip, #512
	mov	r0, r7
	str	r3, [r2, #4]
	str	r2, [r3]
	str	lr, [r5]
	str	ip, [r5, #4]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r6]
	mov	r2, #32
	sub	r1, r5, #36
	str	r3, [r5, #-36]
	ldr	r3, [r6, #4]
	str	r3, [r5, #-32]
	str	r6, [r5, #-4]
	ldr	r0, [r4, #80]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	bne	.L12139
	ldr	r2, [r4, #120]
	ldr	r3, [r4, #128]
	add	r2, r2, #1
	add	r3, r3, #1
	str	r2, [r4, #120]
	str	r3, [r4, #128]
.L12126:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L12139:
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #96]
	mov	r6, r0
	str	r5, [r4, #96]
	ldr	r1, .L12141
	str	r8, [r5]
	ldr	r0, .L12141+4
	str	r3, [r5, #4]
	str	r5, [r3]
	bl	___ratelimit
	cmp	r0, #0
	bne	.L12140
.L12131:
	mov	r1, r6
.L12137:
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	mvn	r0, #4
	b	.L12126
.L12132:
	mvn	r0, #18
	b	.L12126
.L12138:
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r4, #108]
	movw	r1, #:lower16:.LC635
	ldr	r2, .L12141
	movt	r1, #:upper16:.LC635
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	dev_err
	mvn	r0, #10
	b	.L12126
.L12140:
	ldr	r3, [r4, #108]
	movw	r1, #:lower16:.LC636
	ldr	r2, .L12141
	movt	r1, #:upper16:.LC636
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	dev_err
	b	.L12131
.L12142:
	.align	2
.L12141:
	.word	.LANCHOR5-3680
	.word	.LANCHOR4-1168
	.fnend
	.size	usb_diag_write, .-usb_diag_write
	.section	.rodata.str1.4
	.align	2
.LC637:
	.ascii	"usb_add_function failed\012\000"
	.align	2
.LC638:
	.ascii	"unable to get diag usb channel\012\000"
	.text
	.align	2
	.global	diag_function_add
	.syntax unified
	.arm
	.fpu softvfp
	.type	diag_function_add, %function
diag_function_add:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movw	r5, #:lower16:.LANCHOR1
	movt	r5, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	mov	r7, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r5, #40]!
	cmp	r4, r5
	beq	.L12144
	mov	r6, r1
	mov	r8, r2
	sub	r4, r4, #4
	b	.L12146
.L12158:
	ldr	r4, [r4, #4]
	cmp	r4, r5
	sub	r4, r4, #4
	beq	.L12144
.L12146:
	mov	r0, r6
	ldr	r1, [r4]
	bl	strcmp
	cmp	r0, #0
	bne	.L12158
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L12159
	movw	r1, #32976
	bl	kmem_cache_alloc
	subs	r5, r0, #0
	beq	.L12160
.L12148:
	movw	r3, #:lower16:.LANCHOR0
	add	r2, r5, #132
	ldr	ip, .L12162
	movt	r3, #:upper16:.LANCHOR0
	ldr	r1, [r3, #192]
	add	r0, r3, #188
	str	r2, [r3, #192]
	movw	r3, #:lower16:diag_function_disable
	movt	r3, #:upper16:diag_function_disable
	strd	r0, [r5, #132]
	movw	r0, #:lower16:diag_function_bind
	str	r2, [r1]
	movw	r1, #:lower16:diag_function_unbind
	movw	r2, #:lower16:diag_function_set_alt
	str	r8, [r5, #112]
	movt	r0, #:upper16:diag_function_bind
	movt	r1, #:upper16:diag_function_unbind
	str	r4, [r5, #116]
	ldr	lr, [r7, #24]
	movt	r2, #:upper16:diag_function_set_alt
	add	r8, ip, #40
	str	lr, [r5, #108]
	ldr	r6, [r4]
	add	lr, r5, #84
	mov	r4, #0
	str	r6, [r5]
	str	ip, [r5, #8]
	add	ip, r5, #92
	str	r8, [r5, #12]
	strd	r0, [r5, #24]
	mov	r1, r5
	mov	r0, r7
	str	r2, [r5, #32]
	str	r3, [r5, #40]
	str	lr, [r5, #84]
	str	lr, [r5, #88]
	str	ip, [r5, #92]
	str	ip, [r5, #96]
	str	r4, [r5, #100]
	bl	usb_add_function
	subs	r4, r0, #0
	bne	.L12161
.L12143:
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L12159:
	mov	r5, #16
	b	.L12148
.L12161:
	ldr	r3, [r7, #24]
	movw	r1, #:lower16:.LC637
	movt	r1, #:upper16:.LC637
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	_dev_info
	ldrd	r2, [r5, #132]
	mov	ip, #256
	mov	r1, #512
	mov	r0, r5
	str	r3, [r2, #4]
	str	r2, [r3]
	str	ip, [r5, #132]
	str	r1, [r5, #136]
	bl	kfree
	b	.L12143
.L12144:
	ldr	r3, [r7, #24]
	movw	r1, #:lower16:.LC638
	mvn	r4, #18
	movt	r1, #:upper16:.LC638
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	dev_err
	b	.L12143
.L12160:
	mvn	r4, #11
	b	.L12143
.L12163:
	.align	2
.L12162:
	.word	.LANCHOR1+2264
	.fnend
	.size	diag_function_add, .-diag_function_add
	.section	.rodata.str1.4
	.align	2
.LC639:
	.ascii	"<3>%s: diag: Cannot open channel '%s'\000"
	.section	.rodata.cst4
	.align	2
.LC640:
	.word	__stack_chk_guard
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	diag_function_bind_config, %function
diag_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 40
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r2, #:lower16:.LANCHOR0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	r3, #:lower16:.LC640
	movt	r2, #:upper16:.LANCHOR0
	strd	r6, [sp, #8]
	movt	r3, #:upper16:.LC640
	strd	r8, [sp, #16]
	mov	r9, r1
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r4, [r2, #196]!
	.pad #44
	sub	sp, sp, #44
	ldr	r3, [r3]
	str	r3, [sp, #36]
	mov	r3,#0
	ldr	r1, [r1, #24]
	cmp	r4, r2
	sub	r4, r4, #208
	bne	.L12166
	b	.L12165
.L12184:
	ldr	r4, [r4, #208]
	cmp	r4, r2
	sub	r4, r4, #208
	beq	.L12165
.L12166:
	ldr	r3, [r4, #8]
	cmp	r1, r3
	bne	.L12184
.L12165:
	ldr	r1, .L12188
	mov	r2, #32
	add	r0, sp, #4
	bl	strlcpy
	add	r0, sp, #4
	bl	strim
	cmp	r0, #0
	str	r0, [sp]
	beq	.L12172
	movw	r8, #:lower16:.LC253
	movw	r10, #:lower16:usb_diag_update_pid_and_serial_num
	ldr	fp, .L12188+4
	movt	r8, #:upper16:.LC253
	movt	r10, #:upper16:usb_diag_update_pid_and_serial_num
	mov	r6, #0
	mvn	r7, #0
	b	.L12170
.L12186:
	ldr	r2, [r3]
	cmp	r2, #0
	moveq	r2, r10
.L12168:
	cmp	r5, #0
	beq	.L12169
	mov	r1, r5
	mov	r0, r9
	bl	diag_function_add
	subs	r7, r0, #0
	bne	.L12185
.L12169:
	ldr	r3, [sp]
	add	r6, r6, #1
	cmp	r3, #0
	beq	.L12164
.L12170:
	mov	r1, r8
	mov	r0, sp
	bl	strsep
	cmp	r6, #0
	mov	r5, r0
	movne	r2, #0
	bne	.L12168
	ldr	r3, [r4, #48]
	cmp	r3, #0
	bne	.L12186
	movw	r2, #:lower16:usb_diag_update_pid_and_serial_num
	movt	r2, #:upper16:usb_diag_update_pid_and_serial_num
	b	.L12168
.L12172:
	mvn	r7, #0
.L12164:
	movw	r3, #:lower16:.LC640
	movt	r3, #:upper16:.LC640
	ldr	r2, [r3]
	ldr	r3, [sp, #36]
	eors	r2, r3, r2
	bne	.L12187
	mov	r0, r7
	add	sp, sp, #44
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L12187:
	bl	__stack_chk_fail
.L12185:
	movw	r0, #:lower16:.LC639
	mov	r2, r5
	mov	r1, fp
	movt	r0, #:upper16:.LC639
	bl	printk
	b	.L12169
.L12189:
	.align	2
.L12188:
	.word	.LANCHOR0+2872
	.word	.LANCHOR5-3664
	.fnend
	.size	diag_function_bind_config, .-diag_function_bind_config
	.section	.rodata.str1.4
	.align	2
.LC641:
	.ascii	"<3>usb_ep_alloc_request failed\012\000"
	.align	2
.LC642:
	.ascii	"<3>send_sps_req: usb_ep_queue error\012\000"
	.text
	.align	2
	.global	send_sps_req
	.syntax unified
	.arm
	.fpu softvfp
	.type	send_sps_req, %function
send_sps_req:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r1, #32
	mov	r5, r0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r6, [r0]
	ldr	r3, [r0, #8]
	ldr	r2, [r6, #76]
	ldr	r3, [r3, #8]
	ldr	r7, [r2]
	blx	r3
	subs	r4, r0, #0
	beq	.L12199
	movw	r0, #:lower16:.LC289
	ldr	r1, [r7, #28]
	movt	r0, #:upper16:.LC289
	bl	strcmp
	cmp	r0, #0
	movw	r3, #:lower16:.LANCHOR3
	bne	.L12193
	movt	r3, #:upper16:.LANCHOR3
	mov	r2, #32768
	ldr	r3, [r3, #-4052]
	orr	r3, r3, #1312
.L12194:
	str	r2, [r4, #4]
	mov	r1, r4
	mov	r0, r5
	str	r3, [r4, #52]
	mov	r2, #32
	str	r4, [r6, #88]
	ldr	r3, [r5, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	bne	.L12200
.L12190:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L12193:
	movt	r3, #:upper16:.LANCHOR3
	mov	r2, #0
	ldr	r3, [r3, #-4052]
	bic	r3, r3, #65536
	bic	r3, r3, #96
	orr	r3, r3, #65536
	orr	r3, r3, #32
	b	.L12194
.L12199:
	movw	r0, #:lower16:.LC641
	movt	r0, #:upper16:.LC641
	bl	printk
	mvn	r0, #11
	b	.L12190
.L12200:
	movw	r0, #:lower16:.LC642
	movt	r0, #:upper16:.LC642
	bl	printk
	mvn	r0, #4
	b	.L12190
	.fnend
	.size	send_sps_req, .-send_sps_req
	.section	.rodata.str1.4
	.align	2
.LC643:
	.ascii	"<3>msm_ep_config failed\012\000"
	.align	2
.LC644:
	.ascii	"<3>init_data error\000"
	.align	2
.LC645:
	.ascii	"<3>qdss_data_connection: memory alloc failed\012\000"
	.align	2
.LC646:
	.ascii	"<3>set_qdss_data_connection error\000"
	.align	2
.LC647:
	.ascii	"<3>send_sps_req error\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_qdss_connect_work, %function
usb_qdss_connect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r0
	movw	r0, #:lower16:.LC289
	strd	r6, [sp, #8]
	movt	r0, #:upper16:.LC289
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r10, [r4, #-48]
	.pad #8
	sub	sp, sp, #8
	ldr	r3, [r10]
	ldr	r3, [r3, #76]
	ldr	r3, [r3]
	ldr	r1, [r3, #28]
	bl	strcmp
	cmp	r0, #0
	beq	.L12216
.L12202:
	ldr	r0, [r4, #-72]
	mov	r2, #1
	mov	r3, #0
	mov	r1, r2
	movw	r5, #:lower16:.LANCHOR3
	movt	r5, #:upper16:.LANCHOR3
	sub	r9, r5, #4048
	ldr	r8, [r0]
	ldr	r0, [r8, #28]
	bl	usb_bam_get_connection_idx
	uxtb	r6, r0
	sub	r1, r9, #4
	mov	r0, r6
	bl	usb_bam_connect
	movw	r3, #:lower16:kmalloc_caches
	mov	r7, r0
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	moveq	r3, #16
	streq	r3, [r5, #-4040]
	beq	.L12205
	movw	r1, #32976
	bl	kmem_cache_alloc
	cmp	r0, #0
	str	r0, [r5, #-4040]
	beq	.L12217
.L12205:
	ldr	r0, [r8, #28]
	bl	usb_bam_set_qdss_core
	ldr	ip, [r5, #-4040]
	mov	r2, #0
	add	r1, r9, #4
	ldr	r3, .L12220
	mov	r0, r6
	stm	sp, {r2, ip}
	sub	r2, r9, #4
	bl	get_bam2bam_connection_info
	movw	r0, #:lower16:.LC289
	ldr	r1, [r8, #28]
	movt	r0, #:upper16:.LC289
	bl	strcmp
	cmp	r0, #0
	beq	.L12218
.L12207:
	cmp	r7, #0
	bne	.L12206
	ldr	r5, [r4, #-32]
	cmp	r5, #0
	beq	.L12209
	sub	r3, r4, #44
	mov	r2, r7
	ldr	r0, [r4, #-28]
	mov	r1, r7
	blx	r5
.L12209:
	ldr	r0, [r4, #-48]
	bl	send_sps_req
	cmp	r0, #0
	bne	.L12219
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L12216:
	mov	r0, r10
	bl	msm_ep_config
	cmp	r0, #0
	bne	.L12203
	ldr	r10, [r4, #-48]
	b	.L12202
.L12218:
	ldr	r2, [r5, #-4040]
	mov	r0, r10
	ldrb	r3, [r5, #-4052]	@ zero_extendqisi2
	ldmib	r2, {r1, r2}
	bl	msm_data_fifo_config
	b	.L12207
.L12203:
	movw	r0, #:lower16:.LC643
	movt	r0, #:upper16:.LC643
	bl	printk
	movw	r0, #:lower16:.LC644
	movt	r0, #:upper16:.LC644
.L12215:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	printk
.L12217:
	movw	r0, #:lower16:.LC645
	movt	r0, #:upper16:.LC645
	bl	printk
.L12206:
	movw	r0, #:lower16:.LC646
	movt	r0, #:upper16:.LC646
	b	.L12215
.L12219:
	movw	r0, #:lower16:.LC647
	movt	r0, #:upper16:.LC647
	b	.L12215
.L12221:
	.align	2
.L12220:
	.word	.LANCHOR3-4048
	.fnend
	.size	usb_qdss_connect_work, .-usb_qdss_connect_work
	.align	2
	.global	init_data
	.syntax unified
	.arm
	.fpu softvfp
	.type	init_data, %function
init_data:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	movw	r0, #:lower16:.LC289
	str	lr, [sp, #4]
	ldr	r3, [r4]
	movt	r0, #:upper16:.LC289
	ldr	r3, [r3, #76]
	ldr	r3, [r3]
	ldr	r1, [r3, #28]
	bl	strcmp
	cmp	r0, #0
	movne	r4, #0
	beq	.L12229
.L12222:
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L12229:
	mov	r0, r4
	bl	msm_ep_config
	subs	r4, r0, #0
	beq	.L12222
	movw	r0, #:lower16:.LC643
	movt	r0, #:upper16:.LC643
	bl	printk
	b	.L12222
	.fnend
	.size	init_data, .-init_data
	.section	.rodata.str1.4
	.align	2
.LC648:
	.ascii	"<3>uninit_data\012\000"
	.align	2
.LC649:
	.ascii	"<3>msm_ep_unconfig failed\012\000"
	.section	.text.unlikely
	.align	2
	.global	uninit_data
	.syntax unified
	.arm
	.fpu softvfp
	.type	uninit_data, %function
uninit_data:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, lr}
	.save {r4, r5, r6, lr}
	mov	r4, r0
	ldr	r3, [r4]
	movw	r0, #:lower16:.LC648
	movt	r0, #:upper16:.LC648
	ldr	r3, [r3, #76]
	ldr	r5, [r3]
	bl	printk
	movw	r0, #:lower16:.LC289
	movt	r0, #:upper16:.LC289
	ldr	r1, [r5, #28]
	bl	strcmp
	cmp	r0, #0
	movne	r4, #0
	bne	.L12230
	mov	r0, r4
	bl	msm_ep_unconfig
	subs	r4, r0, #0
	beq	.L12230
	movw	r0, #:lower16:.LC649
	movt	r0, #:upper16:.LC649
	bl	printk
.L12230:
	mov	r0, r4
	pop	{r4, r5, r6, pc}
	.fnend
	.size	uninit_data, .-uninit_data
	.section	.rodata.str1.4
	.align	2
.LC650:
	.ascii	"<3>%s: uninit_data error\012\000"
	.align	2
.LC651:
	.ascii	"<3>usb_bam_disconnection error\012\000"
	.align	2
.LC652:
	.ascii	"<3>qdss_disconnect error\000"
	.section	.text.unlikely
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_qdss_disconnect_work, %function
usb_qdss_disconnect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, lr}
	.save {r4, r5, r6, lr}
	mov	r4, r0
	ldr	r0, [r0, #-64]
	bl	uninit_data
	cmp	r0, #0
	beq	.L12238
	movw	r0, #:lower16:.LC650
	ldr	r1, .L12249
	movt	r0, #:upper16:.LC650
	bl	printk
.L12238:
	ldr	r5, [r4, #-48]
	cmp	r5, #0
	popeq	{r4, r5, r6, pc}
	mov	r3, #0
	mov	r1, #1
	ldr	r0, [r4, #-44]
	mov	r2, r3
	blx	r5
	ldr	r0, [r4, #-88]
	mov	r2, #1
	mov	r3, #0
	mov	r1, r2
	ldr	r0, [r0]
	ldr	r0, [r0, #28]
	bl	usb_bam_get_connection_idx
	movw	r3, #:lower16:.LANCHOR3
	mov	r4, r0
	movt	r3, #:upper16:.LANCHOR3
	ldr	r0, [r3, #-4040]
	bl	kfree
	uxtb	r0, r4
	bl	usb_bam_disconnect_pipe
	cmp	r0, #0
	popeq	{r4, r5, r6, pc}
	movw	r0, #:lower16:.LC651
	movt	r0, #:upper16:.LC651
	bl	printk
	movw	r0, #:lower16:.LC652
	pop	{r4, r5, r6, lr}
	movt	r0, #:upper16:.LC652
	b	printk
.L12250:
	.align	2
.L12249:
	.word	.LANCHOR5-3636
	.fnend
	.size	usb_qdss_disconnect_work, .-usb_qdss_disconnect_work
	.section	.rodata.str1.4
	.align	2
.LC653:
	.ascii	"<3>usb_qdss_free_req: qdss ctx is NULL\012\000"
	.text
	.align	2
	.global	usb_qdss_free_req
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_qdss_free_req, %function
usb_qdss_free_req:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r5, [r0, #20]
	cmp	r5, #0
	beq	.L12263
	mov	r6, r5
	ldr	r3, [r6, #140]!
	cmp	r3, r6
	ldr	r4, [r3]
	movne	r8, #256
	movne	r7, #512
	beq	.L12256
.L12253:
	ldr	r2, [r3, #4]
	sub	r1, r3, #36
	str	r2, [r4, #4]
	str	r4, [r2]
	str	r8, [r3]
	str	r7, [r3, #4]
	ldr	r0, [r5, #96]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	cmp	r6, r4
	mov	r3, r4
	ldr	r4, [r4]
	bne	.L12253
.L12256:
	mov	r6, r5
	ldr	r3, [r6, #132]!
	cmp	r3, r6
	ldr	r4, [r3]
	movne	r8, #256
	movne	r7, #512
	beq	.L12251
.L12254:
	ldr	r2, [r3, #4]
	sub	r1, r3, #36
	str	r2, [r4, #4]
	str	r4, [r2]
	str	r8, [r3]
	str	r7, [r3, #4]
	ldr	r0, [r5, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	cmp	r6, r4
	mov	r3, r4
	ldr	r4, [r4]
	bne	.L12254
.L12251:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L12263:
	movw	r0, #:lower16:.LC653
	ldrd	r4, [sp]
	movt	r0, #:upper16:.LC653
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	printk
	.fnend
	.size	usb_qdss_free_req, .-usb_qdss_free_req
	.section	.rodata.str1.4
	.align	2
.LC654:
	.ascii	"<3>usb_qdss_alloc_req: missing params\012\000"
	.align	2
.LC655:
	.ascii	"<3>usb_qdss_alloc_req: ctrl_in allocation err\012\000"
	.align	2
.LC656:
	.ascii	"<3>usb_qdss_alloc_req:ctrl_out allocation err\012\000"
	.text
	.align	2
	.global	usb_qdss_alloc_req
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_qdss_alloc_req, %function
usb_qdss_alloc_req:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	subs	r6, r1, #0
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	movle	r10, #1
	movgt	r10, #0
	str	lr, [sp, #28]
	ldr	r4, [r0, #20]
	subs	r5, r2, #0
	orrle	r10, r10, #1
	cmp	r4, #0
	moveq	r10, #1
	cmp	r10, #0
	movweq	r8, #:lower16:qdss_ctrl_write_complete
	moveq	r7, r0
	movteq	r8, #:upper16:qdss_ctrl_write_complete
	addeq	r9, r4, #140
	bne	.L12275
.L12265:
	ldr	r0, [r4, #96]
	mov	r1, #32
	add	r10, r10, #1
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	cmp	r0, #0
	add	r2, r0, #36
	beq	.L12276
	str	r8, [r0, #28]
	ldr	r3, [r4, #144]
	cmp	r6, r10
	str	r2, [r4, #144]
	str	r9, [r0, #36]
	str	r3, [r0, #40]
	str	r2, [r3]
	bgt	.L12265
	movw	r8, #:lower16:qdss_ctrl_read_complete
	mov	r6, #0
	movt	r8, #:upper16:qdss_ctrl_read_complete
	add	r9, r4, #132
.L12270:
	ldr	r0, [r4, #92]
	mov	r1, #32
	add	r6, r6, #1
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	cmp	r0, #0
	add	r2, r0, #36
	beq	.L12277
	str	r8, [r0, #28]
	ldr	r3, [r4, #136]
	cmp	r5, r6
	str	r2, [r4, #136]
	str	r9, [r0, #36]
	str	r3, [r0, #40]
	str	r2, [r3]
	bgt	.L12270
	mov	r0, #0
.L12264:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L12275:
	movw	r0, #:lower16:.LC654
	movt	r0, #:upper16:.LC654
	bl	printk
	mvn	r0, #18
	b	.L12264
.L12277:
	movw	r0, #:lower16:.LC656
	movt	r0, #:upper16:.LC656
	bl	printk
.L12268:
	mov	r0, r7
	bl	usb_qdss_free_req
	mvn	r0, #11
	b	.L12264
.L12276:
	movw	r0, #:lower16:.LC655
	movt	r0, #:upper16:.LC655
	bl	printk
	b	.L12268
	.fnend
	.size	usb_qdss_alloc_req, .-usb_qdss_alloc_req
	.section	.rodata.str1.4
	.align	2
.LC657:
	.ascii	"<3>error: usb_qdss_ctrl_read list is empty\012\000"
	.align	2
.LC658:
	.ascii	"<3>qdss usb_ep_queue failed\012\000"
	.text
	.align	2
	.global	usb_qdss_ctrl_read
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_qdss_ctrl_read, %function
usb_qdss_ctrl_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r5, [r0, #20]
	cmp	r5, #0
	beq	.L12282
	add	r7, r5, #180
	mov	r6, r1
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #84]
	mov	r1, r0
	cmp	r3, #0
	beq	.L12287
	ldr	r4, [r5, #132]
	add	r8, r5, #132
	cmp	r8, r4
	beq	.L12288
	ldrd	r2, [r4]
	mov	lr, #256
	mov	ip, #512
	mov	r0, r7
	str	r3, [r2, #4]
	str	r2, [r3]
	str	lr, [r4]
	str	ip, [r4, #4]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r6]
	mov	r2, #32
	sub	r1, r4, #36
	str	r3, [r4, #-36]
	ldr	r3, [r6, #4]
	str	r3, [r4, #-32]
	str	r6, [r4, #-4]
	ldr	r0, [r5, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	bne	.L12289
.L12278:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L12282:
	mvn	r0, #18
	b	.L12278
.L12287:
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	mvn	r0, #4
	b	.L12278
.L12289:
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #136]
	mov	r1, r0
	mov	r0, r7
	str	r4, [r5, #136]
	str	r8, [r4]
	str	r3, [r4, #4]
	str	r4, [r3]
	bl	_raw_spin_unlock_irqrestore
	movw	r0, #:lower16:.LC658
	movt	r0, #:upper16:.LC658
	bl	printk
	mvn	r0, #4
	b	.L12278
.L12288:
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	movw	r0, #:lower16:.LC657
	movt	r0, #:upper16:.LC657
	bl	printk
	mvn	r0, #10
	b	.L12278
	.fnend
	.size	usb_qdss_ctrl_read, .-usb_qdss_ctrl_read
	.section	.rodata.str1.4
	.align	2
.LC659:
	.ascii	"<3>error: usb_qdss_ctrl_write list is empty\012\000"
	.text
	.align	2
	.global	usb_qdss_ctrl_write
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_qdss_ctrl_write, %function
usb_qdss_ctrl_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r5, [r0, #20]
	.pad #8
	sub	sp, sp, #8
	cmp	r5, #0
	beq	.L12294
	add	r7, r5, #180
	mov	r6, r1
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #84]
	mov	r1, r0
	cmp	r3, #0
	beq	.L12299
	ldr	r4, [r5, #140]
	add	r8, r5, #140
	cmp	r8, r4
	beq	.L12300
	ldrd	r2, [r4]
	mov	lr, #256
	mov	ip, #512
	mov	r0, r7
	str	r3, [r2, #4]
	str	r2, [r3]
	str	lr, [r4]
	str	ip, [r4, #4]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r6]
	mov	r2, #32
	sub	r1, r4, #36
	str	r3, [r4, #-36]
	ldr	r3, [r6, #4]
	str	r3, [r4, #-32]
	str	r6, [r4, #-4]
	ldr	r0, [r5, #96]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	bne	.L12301
.L12290:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L12294:
	mvn	r0, #18
	b	.L12290
.L12299:
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	mvn	r0, #4
	b	.L12290
.L12301:
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #144]
	mov	r1, r0
	mov	r0, r7
	str	r4, [r5, #144]
	str	r8, [r4]
	str	r3, [r4, #4]
	str	r4, [r3]
	bl	_raw_spin_unlock_irqrestore
	movw	r0, #:lower16:.LC658
	movt	r0, #:upper16:.LC658
	bl	printk
	mvn	r0, #4
	b	.L12290
.L12300:
	movw	r0, #:lower16:.LC659
	str	r1, [sp, #4]
	movt	r0, #:upper16:.LC659
	bl	printk
	mov	r0, r7
	ldr	r1, [sp, #4]
	bl	_raw_spin_unlock_irqrestore
	mvn	r0, #10
	b	.L12290
	.fnend
	.size	usb_qdss_ctrl_write, .-usb_qdss_ctrl_write
	.section	.rodata.str1.4
	.align	2
.LC660:
	.ascii	"<3>usb_qdss_open: notification func is missing\012\000"
	.text
	.align	2
	.global	usb_qdss_open
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_qdss_open, %function
usb_qdss_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	subs	r8, r2, #0
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	beq	.L12316
	movw	r9, #:lower16:.LANCHOR1
	mov	r5, r0
	ldr	r0, .L12322
	movt	r9, #:upper16:.LANCHOR1
	mov	r10, r1
	mov	r6, r9
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r6, #312]!
	mov	r7, r0
	cmp	r4, r6
	sub	r4, r4, #4
	bne	.L12307
	b	.L12305
.L12317:
	ldr	r4, [r4, #4]
	cmp	r4, r6
	sub	r4, r4, #4
	beq	.L12305
.L12307:
	mov	r0, r5
	ldr	r1, [r4]
	bl	strcmp
	cmp	r0, #0
	bne	.L12317
	sub	fp, r4, #104
	str	fp, [r4, #20]
.L12310:
	mov	r3, #1
	ldr	r0, .L12322
	mov	r1, r7
	str	r5, [r4]
	str	r8, [r4, #12]
	str	r10, [r4, #16]
	str	r3, [r4, #24]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [fp, #84]
	cmp	r3, #1
	beq	.L12318
.L12302:
	mov	r0, r4
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L12305:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L12319
	movw	r1, #32800
	bl	kmem_cache_alloc
	subs	fp, r0, #0
	beq	.L12320
.L12308:
	ldr	r0, .L12322
	mov	r1, r7
	bl	_raw_spin_unlock_irqrestore
	mov	r3, #0
	mov	r2, #1
	mov	r1, #10
	mov	r0, r5
	str	r3, [sp]
	bl	__alloc_workqueue_key
	cmp	r0, #0
	str	r0, [fp, #188]
	beq	.L12321
	ldr	r0, .L12322
	add	r4, fp, #104
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r9, #316]
	add	r2, fp, #108
	mov	r7, r0
	str	r6, [fp, #108]
	str	r2, [r9, #316]
	str	r3, [fp, #112]
	str	r2, [r3]
	b	.L12310
.L12319:
	mov	fp, #16
	b	.L12308
.L12318:
	add	r1, fp, #148
	ldr	r0, [fp, #188]
	bl	queue_work
	b	.L12302
.L12321:
	mov	r0, fp
	mvn	r4, #11
	bl	kfree
	b	.L12302
.L12320:
	ldr	r0, .L12322
	mov	r1, r7
	mvn	r4, #11
	bl	_raw_spin_unlock_irqrestore
	b	.L12302
.L12316:
	movw	r0, #:lower16:.LC660
	mov	r4, r8
	movt	r0, #:upper16:.LC660
	bl	printk
	b	.L12302
.L12323:
	.align	2
.L12322:
	.word	.LANCHOR0+2272
	.fnend
	.size	usb_qdss_open, .-usb_qdss_open
	.align	2
	.global	usb_qdss_close
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_qdss_close, %function
usb_qdss_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r0
	ldr	r0, .L12328
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r5, #20]
	ldr	r3, [r4, #76]
	ldr	r7, [r3]
	bl	_raw_spin_lock_irqsave
	mov	r6, r0
	ldr	r1, [r4, #88]
	ldr	r3, [r4, #100]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r3, [r2, #20]
	blx	r3
	ldr	r1, [r4, #88]
	ldr	r0, [r4, #100]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	mov	r3, #0
	ldr	r0, .L12328
	mov	r1, r6
	str	r3, [r4, #88]
	str	r3, [r5, #24]
	bl	_raw_spin_unlock_irqrestore
	movw	r0, #:lower16:.LC289
	ldr	r1, [r7, #28]
	movt	r0, #:upper16:.LC289
	bl	strcmp
	cmp	r0, #0
	beq	.L12327
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L12327:
	mov	r0, r7
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	msm_dwc3_restart_usb_session
.L12329:
	.align	2
.L12328:
	.word	.LANCHOR0+2272
	.fnend
	.size	usb_qdss_close, .-usb_qdss_close
	.section	.rodata.str1.4
	.align	2
.LC661:
	.ascii	"k_rmnet_work\000"
	.align	2
.LC662:
	.ascii	"&dev->smd_ctl.wait\000"
	.align	2
.LC663:
	.ascii	"&dev->smd_data.wait\000"
	.align	2
.LC664:
	.ascii	"rmnet\000"
	.text
	.align	2
	.global	rmnet_smd_bind_config
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_bind_config, %function
rmnet_smd_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	mov	r6, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r0, [r3, #36]
	.pad #8
	sub	sp, sp, #8
	cmp	r0, #0
	beq	.L12334
	movw	r1, #32976
	bl	kmem_cache_alloc
	subs	r4, r0, #0
	beq	.L12341
.L12331:
	movw	ip, #:lower16:.LANCHOR0
	mov	r5, #0
	movt	ip, #:upper16:.LANCHOR0
	movw	r0, #:lower16:.LC661
	mov	r3, r5
	movt	r0, #:upper16:.LC661
	str	r5, [sp]
	mov	r2, #1
	mov	r1, #10
	str	r4, [ip, #2028]
	bl	__alloc_workqueue_key
	cmp	r0, r5
	str	r0, [r4, #380]
	beq	.L12336
	add	r1, r4, #388
	movw	r2, #:lower16:rmnet_smd_connect_work
	str	r5, [r4, #156]
	movw	r3, #:lower16:rmnet_smd_disconnect_work
	mov	ip, #2560
	str	r5, [r4, #160]
	movt	r3, #:upper16:rmnet_smd_disconnect_work
	add	r0, r4, #404
	str	r5, [r4, #164]
	movt	r2, #:upper16:rmnet_smd_connect_work
	str	r1, [r4, #388]
	add	r8, r4, #100
	str	r1, [r4, #392]
	movw	r1, #:lower16:rmnet_control_rx_tlet
	add	r7, r4, #108
	movt	r1, #:upper16:rmnet_control_rx_tlet
	str	r5, [r4, #300]
	str	r5, [r4, #364]
	str	ip, [r4, #384]
	str	r2, [r4, #396]
	mov	r2, r4
	str	ip, [r4, #400]
	str	r0, [r4, #404]
	str	r0, [r4, #408]
	add	r0, r4, #276
	str	r3, [r4, #412]
	bl	tasklet_init
	movw	r1, #:lower16:rmnet_control_tx_tlet
	mov	r2, r4
	movt	r1, #:upper16:rmnet_control_tx_tlet
	add	r0, r4, #256
	bl	tasklet_init
	movw	r1, #:lower16:rmnet_data_rx_tlet
	mov	r2, r4
	movt	r1, #:upper16:rmnet_data_rx_tlet
	add	r0, r4, #340
	bl	tasklet_init
	movw	r1, #:lower16:rmnet_data_tx_tlet
	mov	r2, r4
	movt	r1, #:upper16:rmnet_data_tx_tlet
	add	r0, r4, #320
	bl	tasklet_init
	movw	r1, #:lower16:.LC662
	ldr	r2, .L12343
	add	r0, r4, #304
	movt	r1, #:upper16:.LC662
	bl	__init_waitqueue_head
	movw	r1, #:lower16:.LC663
	ldr	r2, .L12343
	add	r0, r4, #368
	movt	r1, #:upper16:.LC663
	bl	__init_waitqueue_head
	ldr	r3, .L12343+4
	movw	lr, #:lower16:rmnet_smd_ch_probe
	movw	ip, #:lower16:rmnet_smd_bind
	movt	lr, #:upper16:rmnet_smd_ch_probe
	movt	ip, #:upper16:rmnet_smd_bind
	movw	r1, #:lower16:.LC664
	movw	r2, #:lower16:.LC483
	movt	r1, #:upper16:.LC664
	movt	r2, #:upper16:.LC483
	str	lr, [r4, #168]
	sub	lr, r3, #8
	mov	r0, r6
	str	r1, [r4]
	movw	r1, #:lower16:rmnet_smd_setup
	add	r6, r4, #116
	str	lr, [r4, #4]
	movw	lr, #:lower16:rmnet_smd_set_alt
	movt	r1, #:upper16:rmnet_smd_setup
	str	ip, [r4, #24]
	movw	ip, #:lower16:rmnet_smd_disable
	movt	lr, #:upper16:rmnet_smd_set_alt
	str	r5, [r4, #196]
	movw	r5, #:lower16:rmnet_smd_unbind
	movt	ip, #:upper16:rmnet_smd_disable
	movt	r5, #:upper16:rmnet_smd_unbind
	str	r3, [r4, #8]
	add	r3, r3, #20
	str	r3, [r4, #12]
	add	r3, r4, #148
	str	r5, [r4, #28]
	add	r5, r4, #124
	str	lr, [r4, #32]
	add	lr, r4, #132
	str	ip, [r4, #40]
	add	ip, r4, #140
	str	r1, [r4, #44]
	mov	r1, r4
	str	r8, [r4, #100]
	str	r8, [r4, #104]
	str	r7, [r4, #108]
	str	r7, [r4, #112]
	str	r6, [r4, #116]
	str	r6, [r4, #120]
	str	r5, [r4, #124]
	str	r5, [r4, #128]
	str	lr, [r4, #132]
	str	lr, [r4, #136]
	str	ip, [r4, #140]
	str	ip, [r4, #144]
	str	r3, [r4, #148]
	str	r3, [r4, #152]
	str	r2, [r4, #188]
	bl	usb_add_function
	subs	r5, r0, #0
	bne	.L12342
.L12330:
	mov	r0, r5
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L12334:
	mov	r4, #16
	b	.L12331
.L12336:
	mvn	r5, #11
.L12333:
	mov	r0, r4
	bl	kfree
	b	.L12330
.L12342:
	ldr	r0, [r4, #380]
	bl	destroy_workqueue
	b	.L12333
.L12341:
	mvn	r5, #11
	b	.L12330
.L12344:
	.align	2
.L12343:
	.word	.LANCHOR3-4036
	.word	.LANCHOR4-1136
	.fnend
	.size	rmnet_smd_bind_config, .-rmnet_smd_bind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_function_bind_config, %function
rmnet_smd_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, r1
	b	rmnet_smd_bind_config
	.fnend
	.size	rmnet_smd_function_bind_config, .-rmnet_smd_function_bind_config
	.section	.rodata.str1.4
	.align	2
.LC665:
	.ascii	"rmnet_sdio\000"
	.text
	.align	2
	.global	rmnet_sdio_function_add
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_function_add, %function
rmnet_sdio_function_add:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	mov	r7, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r0, [r3, #36]
	.pad #8
	sub	sp, sp, #8
	cmp	r0, #0
	beq	.L12350
	movw	r1, #32976
	bl	kmem_cache_alloc
	subs	r4, r0, #0
	beq	.L12357
.L12347:
	mov	r5, #0
	movw	r0, #:lower16:.LC661
	mov	r3, r5
	movt	r0, #:upper16:.LC661
	mov	r2, #1
	mov	r1, #10
	str	r5, [sp]
	bl	__alloc_workqueue_key
	cmp	r0, r5
	str	r0, [r4, #192]
	beq	.L12352
	movw	ip, #:lower16:rmnet_sdio_disconnect_work
	movw	r0, #:lower16:rmnet_sdio_control_rx_work
	str	r5, [r4, #180]
	movw	r2, #:lower16:rmnet_sdio_data_rx_work
	movt	ip, #:upper16:rmnet_sdio_disconnect_work
	str	r5, [r4, #184]
	movt	r0, #:upper16:rmnet_sdio_control_rx_work
	movt	r2, #:upper16:rmnet_sdio_data_rx_work
	str	r5, [r4, #188]
	movw	r3, #:lower16:rmnet_sdio_set_modem_cbits_w
	movw	r1, #:lower16:rmnet_open_sdio_work
	str	ip, [r4, #208]
	mov	r6, #2560
	add	lr, r4, #216
	add	ip, r4, #232
	movt	r3, #:upper16:rmnet_sdio_set_modem_cbits_w
	add	r8, r4, #200
	movt	r1, #:upper16:rmnet_open_sdio_work
	str	r6, [r4, #196]
	str	r0, [r4, #224]
	add	r0, r4, #328
	str	r2, [r4, #240]
	add	r2, r4, #248
	str	r8, [r4, #200]
	str	r8, [r4, #204]
	movw	r8, #:lower16:rmnet_sdio_bind
	str	r6, [r4, #212]
	movt	r8, #:upper16:rmnet_sdio_bind
	str	lr, [r4, #216]
	str	lr, [r4, #220]
	str	r6, [r4, #228]
	str	ip, [r4, #232]
	str	ip, [r4, #236]
	str	r6, [r4, #244]
	str	r2, [r4, #248]
	str	r2, [r4, #252]
	mov	r2, r5
	str	r1, [r4, #256]
	mov	r1, r5
	str	r6, [r4, #324]
	str	r0, [r4, #328]
	str	r0, [r4, #332]
	add	r0, r4, #260
	str	r3, [r4, #336]
	bl	init_timer_key
	movw	r1, #:lower16:.LC665
	ldr	r3, .L12359
	movw	lr, #:lower16:rmnet_sdio_unbind
	movt	r1, #:upper16:.LC665
	movt	lr, #:upper16:rmnet_sdio_unbind
	mov	r0, r7
	movw	r7, #:lower16:rmnet_sdio_set_alt
	str	r1, [r4]
	movw	r1, #:lower16:rmnet_sdio_setup
	movt	r7, #:upper16:rmnet_sdio_set_alt
	movt	r1, #:upper16:rmnet_sdio_setup
	str	r3, [r4, #8]
	movw	ip, #:lower16:delayed_work_timer_fn
	str	r8, [r4, #24]
	sub	r8, r3, #8
	add	r3, r3, #20
	movw	r2, #:lower16:rmnet_close_sdio_work
	movt	ip, #:upper16:delayed_work_timer_fn
	str	r1, [r4, #44]
	movw	r1, #:lower16:rmnet_sdio_suspend
	movt	r2, #:upper16:rmnet_close_sdio_work
	movt	r1, #:upper16:rmnet_sdio_suspend
	str	lr, [r4, #28]
	movw	lr, #:lower16:rmnet_sdio_disable
	str	r3, [r4, #12]
	add	r3, r4, #100
	movt	lr, #:upper16:rmnet_sdio_disable
	str	r8, [r4, #4]
	str	r1, [r4, #48]
	add	r1, r4, #112
	str	r7, [r4, #32]
	add	r7, r4, #244
	str	r3, [r4, #100]
	str	r3, [r4, #104]
	add	r3, r4, #152
	str	lr, [r4, #40]
	add	lr, r4, #296
	str	r1, [r4, #112]
	str	r1, [r4, #116]
	add	r1, r4, #124
	str	r1, [r4, #124]
	str	r1, [r4, #128]
	add	r1, r4, #136
	str	r3, [r4, #152]
	str	r3, [r4, #156]
	add	r3, r4, #164
	str	r1, [r4, #136]
	str	r1, [r4, #140]
	mov	r1, r4
	str	r5, [r4, #144]
	str	r5, [r4, #148]
	str	r3, [r4, #164]
	str	r3, [r4, #168]
	str	r5, [r4, #172]
	str	r5, [r4, #176]
	str	ip, [r4, #276]
	str	r7, [r4, #280]
	str	r6, [r4, #292]
	str	lr, [r4, #296]
	str	lr, [r4, #300]
	str	r2, [r4, #304]
	bl	usb_add_function
	subs	r5, r0, #0
	bne	.L12358
.L12346:
	mov	r0, r5
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L12350:
	mov	r4, #16
	b	.L12347
.L12352:
	mvn	r5, #11
.L12349:
	mov	r0, r4
	bl	kfree
	b	.L12346
.L12358:
	ldr	r0, [r4, #192]
	bl	destroy_workqueue
	b	.L12349
.L12357:
	mvn	r5, #11
	b	.L12346
.L12360:
	.align	2
.L12359:
	.word	.LANCHOR4-1088
	.fnend
	.size	rmnet_sdio_function_add, .-rmnet_sdio_function_add
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_function_bind_config, %function
rmnet_sdio_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, r1
	b	rmnet_sdio_function_add
	.fnend
	.size	rmnet_sdio_function_bind_config, .-rmnet_sdio_function_bind_config
	.align	2
	.global	frmnet_free_req
	.syntax unified
	.arm
	.fpu softvfp
	.type	frmnet_free_req, %function
frmnet_free_req:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	mov	r5, r1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r0, [r1]
	bl	kfree
	ldr	r3, [r4, #8]
	mov	r1, r5
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	ldr	r3, [r3, #12]
	bx	r3	@ indirect register sibling call
	.fnend
	.size	frmnet_free_req, .-frmnet_free_req
	.align	2
	.global	gps_free_req
	.syntax unified
	.arm
	.fpu softvfp
	.type	gps_free_req, %function
gps_free_req:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	mov	r5, r1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r0, [r1]
	bl	kfree
	ldr	r3, [r4, #8]
	mov	r1, r5
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	ldr	r3, [r3, #12]
	bx	r3	@ indirect register sibling call
	.fnend
	.size	gps_free_req, .-gps_free_req
	.align	2
	.global	audio_source_bind_config
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_source_bind_config, %function
audio_source_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	mvn	ip, #0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	mov	r3, #0
	mov	r7, r0
	str	r8, [sp, #16]
	mov	r2, r3
	mov	r0, ip
	str	lr, [sp, #20]
	.pad #16
	sub	sp, sp, #16
	str	ip, [r1]
	add	r1, sp, #8
	str	r1, [sp]
	mov	r1, r3
	str	ip, [r5, #4]
	bl	snd_card_create
	subs	r4, r0, #0
	beq	.L12374
.L12366:
	mov	r0, r4
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L12374:
	ldr	r3, [r7, #24]
	add	lr, sp, #12
	movw	r1, #:lower16:.LC590
	ldr	r0, [sp, #8]
	mov	r2, r4
	movt	r1, #:upper16:.LC590
	movw	r6, #:lower16:.LANCHOR4
	ldr	ip, [r3]
	mov	r3, #1
	add	ip, ip, #32
	str	ip, [r0, #500]
	stm	sp, {r4, lr}
	bl	snd_pcm_new
	subs	r4, r0, #0
	movtne	r6, #:upper16:.LANCHOR4
	bne	.L12370
	ldr	r3, [sp, #12]
	movt	r6, #:upper16:.LANCHOR4
	movw	r1, #:lower16:.LC591
	sub	r8, r6, #1568
	movt	r1, #:upper16:.LC591
	mov	r2, #80
	add	r0, r3, #88
	str	r4, [r3, #16]
	str	r8, [r3, #276]
	str	r3, [r6, #-1488]
	bl	strlcpy
	sub	r2, r6, #1408
	mov	r1, r4
	ldr	r0, [sp, #12]
	sub	r2, r2, #8
	bl	snd_pcm_set_ops
	mov	ip, #65536
	mov	r3, r4
	ldr	r0, [sp, #12]
	mov	r2, r4
	mov	r1, #2
	str	ip, [sp]
	bl	snd_pcm_lib_preallocate_pages_for_all
	ldr	r0, [sp, #8]
	movw	r1, #:lower16:.LC592
	mov	r2, #16
	movt	r1, #:upper16:.LC592
	add	r0, r0, #20
	bl	strlcpy
	ldr	r0, [sp, #8]
	mov	r2, #32
	add	r1, r0, #20
	add	r0, r0, #36
	bl	strlcpy
	ldr	r0, [sp, #8]
	movw	r1, #:lower16:.LC593
	mov	r2, #80
	movt	r1, #:upper16:.LC593
	add	r0, r0, #68
	bl	strlcpy
	ldr	r0, [sp, #8]
	bl	snd_card_register
	subs	r4, r0, #0
	beq	.L12375
.L12368:
.L12369:
.L12370:
	ldr	r0, [r6, #-1492]
	bl	snd_card_free
	b	.L12366
.L12375:
	mov	r1, r8
	mov	r0, r7
	bl	usb_add_function
	subs	r4, r0, #0
	bne	.L12370
	ldrd	r2, [sp, #8]
	ldr	r1, [r3]
	ldr	r1, [r1]
	str	r1, [r5]
	ldr	r3, [r3, #12]
	str	r3, [r5, #4]
	str	r2, [r6, #-1492]
	b	.L12366
	.fnend
	.size	audio_source_bind_config, .-audio_source_bind_config
	.align	2
	.global	gs_alloc_req
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_alloc_req, %function
gs_alloc_req:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r2
	strd	r6, [sp, #8]
	mov	r6, r1
	mov	r1, r2
	str	r8, [sp, #16]
	mov	r7, r0
	str	lr, [sp, #20]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r4, r0, #0
	beq	.L12376
	mov	r1, r5
	mov	r0, r6
	str	r6, [r4, #4]
	bl	__kmalloc
	cmp	r0, #0
	mov	r3, r0
	str	r0, [r4]
	beq	.L12382
.L12376:
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L12382:
	ldr	r2, [r7, #8]
	mov	r1, r4
	mov	r0, r7
	mov	r4, r3
	ldr	r3, [r2, #12]
	blx	r3
	b	.L12376
	.fnend
	.size	gs_alloc_req, .-gs_alloc_req
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_start_io, %function
gs_start_io:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	adds	r2, r0, #44
	mov	r4, r0
	strd	r6, [sp, #8]
	add	r6, r0, #32
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r3, [r0, #4]
	.pad #12
	sub	sp, sp, #12
	str	r2, [sp]
	ldr	r5, [r3, #84]
	beq	.L12422
	ldr	r7, [r0, #44]
	rsb	r7, r7, #8
	cmp	r7, #0
	ble	.L12386
	movw	r10, #:lower16:kmalloc_caches
	movw	r9, #:lower16:gs_read_complete
	movt	r10, #:upper16:kmalloc_caches
	movt	r9, #:upper16:gs_read_complete
	mov	r8, #0
.L12385:
	ldr	r3, [r5, #8]
	mov	r1, #32
	mov	r0, r5
	ldr	r3, [r3, #8]
	blx	r3
	subs	fp, r0, #0
	mov	r3, #4096
	beq	.L12393
	str	r3, [fp, #4]
	ldr	r0, [r10, #48]
	mov	r3, #16
	mov	r1, #32
	cmp	r0, #0
	streq	r3, [fp]
	beq	.L12395
	bl	kmem_cache_alloc
	cmp	r0, #0
	str	r0, [fp]
	bne	.L12395
.L12389:
	ldr	r2, [r5, #8]
	mov	r1, fp
	mov	r0, r5
	ldr	r3, [r2, #12]
	blx	r3
.L12393:
	ldr	r3, [r4, #32]
	cmp	r6, r3
	beq	.L12409
.L12391:
	ldr	r3, [r4, #4]
.L12386:
	adds	r2, r4, #88
	add	r8, r4, #76
	ldr	fp, [r3, #80]
	str	r2, [sp, #4]
	beq	.L12424
	ldr	r9, [r4, #88]
	rsb	r9, r9, #8
	cmp	r9, #0
	movwgt	r10, #:lower16:gs_write_complete
	movgt	r7, #0
	movtgt	r10, #:upper16:gs_write_complete
	bgt	.L12399
	b	.L12400
.L12403:
	str	r10, [r0, #28]
	ldr	r3, [r4, #80]
	cmp	r9, r7
	str	r2, [r4, #80]
	str	r8, [r0, #36]
	str	r3, [r0, #40]
	str	r2, [r3]
	ldr	r3, [r4, #88]
	add	r3, r3, #1
	str	r3, [r4, #88]
	ble	.L12400
.L12399:
	mov	r2, #32
	mov	r1, #4096
	mov	r0, fp
	add	r7, r7, #1
	bl	gs_alloc_req
	cmp	r0, #0
	add	r2, r0, #36
	bne	.L12403
.L12401:
	ldr	r3, [r4, #76]
	cmp	r8, r3
	beq	.L12450
.L12400:
	mov	r7, #0
	mov	r0, r4
	str	r7, [r4, #56]
	bl	gs_start_rx
	ldr	r3, [r4, #4]
	cmp	r3, r7
	beq	.L12421
	cmp	r0, #0
	beq	.L12451
	ldr	r0, [r4, #8]
	bl	tty_wakeup
	mov	r0, r7
.L12383:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L12395:
	str	r9, [fp, #28]
	ldr	r3, [r4, #36]
	add	r2, fp, #36
	add	r8, r8, #1
	str	r2, [r4, #36]
	cmp	r7, r8
	str	r6, [fp, #36]
	str	r3, [fp, #40]
	str	r2, [r3]
	ldr	r3, [r4, #44]
	add	r3, r3, #1
	str	r3, [r4, #44]
	bgt	.L12385
	b	.L12391
.L12450:
	ldr	r10, [sp]
	mov	r9, #256
	mov	r8, #512
.L12404:
	cmp	r10, #0
	ldr	r3, [r4, #32]
	bne	.L12405
	cmp	r6, r3
	beq	.L12409
	mov	r9, #256
	mov	r8, #512
.L12407:
	ldm	r3, {r1, r2}
	mov	r7, r3
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r9, [r3]
	str	r8, [r3, #4]
	ldr	r0, [r7, #-36]!
	bl	kfree
	ldr	r3, [r5, #8]
	mov	r0, r5
	mov	r1, r7
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, [r4, #32]
	cmp	r6, r3
	bne	.L12407
.L12409:
	mvn	r0, #11
	b	.L12383
.L12422:
	movw	r9, #:lower16:kmalloc_caches
	movw	r8, #:lower16:gs_read_complete
	movt	r9, #:upper16:kmalloc_caches
	movt	r8, #:upper16:gs_read_complete
	adds	r7, r0, #44
	b	.L12384
.L12452:
	bl	kmem_cache_alloc
	cmp	r0, #0
	str	r0, [fp]
	beq	.L12389
.L12390:
	str	r8, [fp, #28]
	ldr	r3, [r4, #36]
	add	r7, r7, #1
	add	r2, fp, #36
	cmp	r7, #8
	str	r2, [r4, #36]
	str	r6, [fp, #36]
	str	r3, [fp, #40]
	str	r2, [r3]
	beq	.L12391
.L12384:
	ldr	r3, [r5, #8]
	mov	r1, #32
	mov	r0, r5
	ldr	r3, [r3, #8]
	blx	r3
	subs	fp, r0, #0
	mov	r3, #4096
	beq	.L12393
	str	r3, [fp, #4]
	ldr	r0, [r9, #48]
	mov	r1, #32
	mov	r3, #16
	cmp	r0, #0
	bne	.L12452
	str	r3, [fp]
	b	.L12390
.L12424:
	movw	r7, #:lower16:gs_write_complete
	adds	r9, r4, #88
	movt	r7, #:upper16:gs_write_complete
	b	.L12398
.L12453:
	str	r7, [r0, #28]
	ldr	r3, [r4, #80]
	cmp	r9, #8
	str	r2, [r4, #80]
	str	r8, [r0, #36]
	str	r3, [r0, #40]
	str	r2, [r3]
	beq	.L12400
.L12398:
	mov	r2, #32
	mov	r1, #4096
	mov	r0, fp
	add	r9, r9, #1
	bl	gs_alloc_req
	cmp	r0, #0
	add	r2, r0, #36
	bne	.L12453
	b	.L12401
.L12405:
	cmp	r6, r3
	mov	r7, r3
	beq	.L12409
	ldm	r3, {r1, r2}
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r9, [r3]
	str	r8, [r3, #4]
	ldr	r0, [r7, #-36]!
	bl	kfree
	ldr	r3, [r5, #8]
	mov	r0, r5
	mov	r1, r7
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, [r4, #44]
	sub	r3, r3, #1
	str	r3, [r4, #44]
	b	.L12404
.L12451:
	ldr	fp, [sp]
	mov	r10, #256
	mov	r9, #512
.L12411:
	cmp	fp, #0
	ldr	r3, [r4, #32]
	bne	.L12412
	cmp	r6, r3
	beq	.L12413
	mov	r9, #256
	mov	r7, #512
.L12414:
	ldm	r3, {r1, r2}
	mov	r10, r3
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r9, [r3]
	str	r7, [r3, #4]
	ldr	r0, [r10, #-36]!
	bl	kfree
	ldr	r3, [r5, #8]
	mov	r0, r5
	mov	r1, r10
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, [r4, #32]
	cmp	r6, r3
	bne	.L12414
.L12413:
	ldr	r3, [r4, #4]
	mov	r9, #256
	mov	r7, #512
	ldr	r10, [sp, #4]
	ldr	r6, [r3, #80]
.L12416:
	cmp	r10, #0
	ldr	r3, [r4, #76]
	bne	.L12417
	cmp	r8, r3
	beq	.L12421
	mov	r9, #256
	mov	r7, #512
.L12419:
	ldm	r3, {r1, r2}
	mov	r5, r3
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r9, [r3]
	str	r7, [r3, #4]
	ldr	r0, [r5, #-36]!
	bl	kfree
	ldr	r3, [r6, #8]
	mov	r0, r6
	mov	r1, r5
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, [r4, #76]
	cmp	r8, r3
	bne	.L12419
.L12421:
	mvn	r0, #4
	b	.L12383
.L12412:
	cmp	r6, r3
	mov	r7, r3
	beq	.L12413
	ldm	r3, {r1, r2}
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r10, [r3]
	str	r9, [r3, #4]
	ldr	r0, [r7, #-36]!
	bl	kfree
	ldr	r3, [r5, #8]
	mov	r0, r5
	mov	r1, r7
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, [r4, #44]
	sub	r3, r3, #1
	str	r3, [r4, #44]
	b	.L12411
.L12417:
	cmp	r8, r3
	mov	r5, r3
	beq	.L12421
	ldm	r3, {r1, r2}
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r9, [r3]
	str	r7, [r3, #4]
	ldr	r0, [r5, #-36]!
	bl	kfree
	ldr	r3, [r6, #8]
	mov	r0, r6
	mov	r1, r5
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, [r4, #88]
	sub	r3, r3, #1
	str	r3, [r4, #88]
	b	.L12416
	.fnend
	.size	gs_start_io, .-gs_start_io
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_open, %function
gs_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	ldr	r6, .L12475
	mov	r7, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r5, [r0, #20]
	add	r3, r6, #24
	rsb	r5, r5, r5, lsl #3
	lsl	r5, r5, #2
	add	r6, r6, r5
	add	r5, r5, r3
.L12461:
	mov	r0, r6
	bl	mutex_lock
	ldr	r4, [r5]
	subs	r0, r4, #0
	beq	.L12472
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L12457
	add	r3, r3, #1
	mov	r0, r4
	mov	r5, #0
	str	r3, [r4, #12]
	bl	_raw_spin_unlock_irq
	mov	r0, r6
	bl	mutex_unlock
.L12454:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L12472:
	mov	r0, r6
	mvn	r5, #18
	bl	mutex_unlock
	b	.L12454
.L12457:
	ldrb	r3, [r4, #16]	@ zero_extendqisi2
	mov	r0, r4
	cmp	r3, #0
	bne	.L12458
	mov	r3, #1
	strb	r3, [r4, #16]
	bl	_raw_spin_unlock_irq
	mov	r0, r6
	bl	mutex_unlock
	mov	r0, r4
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #96]
	cmp	r3, #0
	beq	.L12473
.L12460:
	str	r4, [r7, #280]
	ldr	r6, [r4, #4]
	mov	r5, #0
	mov	r3, #1
	str	r7, [r4, #8]
	str	r3, [r4, #12]
	cmp	r6, r5
	strb	r5, [r4, #16]
	beq	.L12467
	mov	r0, r4
	bl	gs_start_io
	ldr	r3, [r6, #108]
	cmp	r3, #0
	beq	.L12467
	mov	r0, r6
	blx	r3
	b	.L12465
.L12458:
	bl	_raw_spin_unlock_irq
	mov	r0, r6
	bl	mutex_unlock
	mov	r0, #1
	bl	msleep
	b	.L12461
.L12467:
	mov	r5, #0
.L12465:
	mov	r0, r4
	bl	_raw_spin_unlock_irq
	b	.L12454
.L12473:
	mov	r0, r4
	bl	_raw_spin_unlock_irq
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #52]
	cmp	r0, #0
	beq	.L12474
	mov	r1, #208
	bl	kmem_cache_alloc
	cmp	r0, #0
	mov	r6, r0
	str	r0, [r4, #96]
	beq	.L12464
.L12463:
	mov	r3, #8192
	mov	r0, r4
	str	r3, [r4, #92]
	str	r6, [r4, #100]
	str	r6, [r4, #104]
	bl	_raw_spin_lock_irq
	b	.L12460
.L12474:
	mov	r3, #16
	mov	r6, r3
	str	r3, [r4, #96]
	b	.L12463
.L12464:
	mov	r0, r4
	mvn	r5, #11
	bl	_raw_spin_lock_irq
	strb	r6, [r4, #16]
	b	.L12465
.L12476:
	.align	2
.L12475:
	.word	.LANCHOR0+3788
	.fnend
	.size	gs_open, .-gs_open
	.align	2
	.global	gs_free_req
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_free_req, %function
gs_free_req:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	mov	r5, r1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r0, [r1]
	bl	kfree
	ldr	r3, [r4, #8]
	mov	r1, r5
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	ldr	r3, [r3, #12]
	bx	r3	@ indirect register sibling call
	.fnend
	.size	gs_free_req, .-gs_free_req
	.section	.rodata.str1.4
	.align	2
.LC666:
	.ascii	"g_serial\000"
	.align	2
.LC667:
	.ascii	"ttyGS\000"
	.align	2
.LC668:
	.ascii	"k_gserial\000"
	.align	2
.LC669:
	.ascii	"&ports[i].lock\000"
	.align	2
.LC670:
	.ascii	"&port->close_wait\000"
	.align	2
.LC671:
	.ascii	"&port->drain_wait\000"
	.align	2
.LC672:
	.ascii	"<3>%s: cannot register, err %d\012\000"
	.align	2
.LC673:
	.ascii	"<4>%s: no classdev for port %d, err %ld\012\000"
	.text
	.align	2
	.global	gserial_setup
	.syntax unified
	.arm
	.fpu softvfp
	.type	gserial_setup, %function
gserial_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	sub	r3, r1, #1
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	cmp	r3, #7
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #36
	sub	sp, sp, #36
	str	r1, [sp, #8]
	str	r3, [sp, #20]
	str	r0, [sp, #28]
	bhi	.L12492
	mov	r0, r1
	mov	r1, #0
	bl	__alloc_tty_driver
	movw	r10, #:lower16:.LANCHOR0
	cmp	r0, #0
	movt	r10, #:upper16:.LANCHOR0
	str	r10, [sp, #16]
	str	r0, [r10, #3784]
	beq	.L12493
	movw	r2, #:lower16:.LC666
	movw	r3, #:lower16:tty_std_termios
	ldr	r1, .L12506
	movt	r3, #:upper16:tty_std_termios
	movt	r2, #:upper16:.LC666
	ldrd	r4, [r3]
	mov	lr, #3
	str	r2, [r0, #72]
	movw	r2, #:lower16:.LC667
	ldrd	r6, [r3, #8]
	movt	r2, #:upper16:.LC667
	ldrd	r8, [r3, #32]
	movt	lr, 1
	str	r2, [r0, #76]
	str	lr, [r0, #96]
	mov	lr, #14
	strd	r4, [r0, #100]
	ldrd	r4, [r3, #16]
	ldrd	r2, [r3, #24]
	strd	r6, [r0, #108]
	strd	r4, [r0, #116]
	movw	r4, #3261
	mov	r5, #0
	strd	r8, [r0, #132]
	strd	r2, [r0, #124]
	mov	r3, #9600
	str	r4, [r0, #108]
	str	r3, [r0, #136]
	str	r3, [r0, #140]
	str	lr, [r0, #144]
	bl	tty_set_operations
	movw	r0, #:lower16:.LC668
	mov	r3, r5
	str	r5, [sp]
	movt	r0, #:upper16:.LC668
	mov	r2, #1
	mov	r1, #10
	bl	__alloc_workqueue_key
	cmp	r0, r5
	str	r0, [r10, #2032]
	beq	.L12494
	ldr	r6, .L12506+4
	movw	r3, #:lower16:.LC671
	movw	r9, #:lower16:kmalloc_caches
	movt	r3, #:upper16:.LC671
	movw	r8, #:lower16:.LC669
	movw	fp, #:lower16:.LC670
	movt	r9, #:upper16:kmalloc_caches
	movt	r8, #:upper16:.LC669
	movt	fp, #:upper16:.LC670
	str	r3, [sp, #12]
	str	r6, [sp, #24]
	b	.L12484
.L12496:
	mov	r5, lr
.L12484:
	ldr	r4, .L12506+8
	mov	r1, r8
	mov	r0, r6
	mov	r7, #0
	sub	r2, r4, #4
	sub	r10, r4, #4
	bl	__mutex_init
	ldr	r0, [r9, #8]
	movw	r1, #32976
	mov	r4, #16
	cmp	r0, r7
	beq	.L12482
	bl	kmem_cache_alloc
	subs	r4, r0, #0
	beq	.L12483
.L12482:
	mov	r0, r4
	mov	r2, r10
	mov	r1, fp
	add	r6, r6, #28
	str	r7, [r0], #20
	bl	__init_waitqueue_head
	mov	r2, r10
	add	r0, r4, #108
	ldr	r1, [sp, #12]
	bl	__init_waitqueue_head
	ldr	r0, [sp, #8]
	add	ip, r4, #32
	mov	r2, #2560
	movw	r3, #:lower16:gs_rx_push
	add	lr, r5, #1
	strb	r5, [r4, #17]
	add	r1, r4, #64
	movt	r3, #:upper16:gs_rx_push
	str	ip, [r4, #32]
	str	ip, [r4, #36]
	mov	ip, #8
	cmp	r0, lr
	add	r0, r4, #48
	strh	r7, [r4, #126]	@ movhi
	mov	r7, #9600
	str	r2, [r4, #60]
	add	r2, r4, #76
	str	r0, [r4, #48]
	str	r0, [r4, #52]
	str	r1, [r4, #64]
	str	r1, [r4, #68]
	str	r3, [r4, #72]
	str	r2, [r4, #76]
	str	r2, [r4, #80]
	str	r7, [r4, #121]	@ unaligned
	strb	ip, [r4, #125]
	str	r4, [r6, #-4]
	bne	.L12496
	ldr	r2, [sp, #8]
	ldr	r3, [sp, #16]
	ldr	r0, [r3, #3784]
	str	r2, [r3, #3780]
	bl	tty_register_driver
	subs	r6, r0, #0
	bne	.L12504
	ldr	r9, .L12506+12
	movw	r8, #:lower16:.LC673
	mov	r4, r6
	ldr	r3, [sp, #28]
	movt	r8, #:upper16:.LC673
	ldr	r10, [sp, #16]
	add	r7, r3, #32
.L12487:
	mov	r2, r7
	mov	r1, r4
	ldr	r0, [r10, #3784]
	bl	tty_register_device
	cmn	r0, #4096
	bhi	.L12505
.L12486:
	cmp	r5, r4
	add	r4, r4, #1
	bne	.L12487
.L12479:
	mov	r0, r6
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L12483:
	sub	r3, r5, #1
	cmp	r5, #0
	mvn	r6, #11
	str	r3, [sp, #20]
	beq	.L12489
.L12490:
	ldr	r3, [sp, #20]
	ldr	r5, .L12506+4
	rsb	r4, r3, r3, lsl #3
	ldr	r3, [sp, #24]
	add	r4, r3, r4, lsl #2
.L12488:
	ldr	r0, [r4, #24]
	bl	kfree
	cmp	r4, r5
	sub	r4, r4, #28
	bne	.L12488
.L12489:
	ldr	r3, [sp, #16]
	ldr	r0, [r3, #2032]
	cmp	r0, #0
	beq	.L12491
	bl	destroy_workqueue
.L12491:
	ldr	r4, [sp, #16]
	ldr	r0, [r4, #3784]
	bl	put_tty_driver
	mov	r3, #0
	str	r3, [r4, #3784]
	b	.L12479
.L12494:
	ldr	r3, .L12506+4
	mvn	r6, #11
	str	r3, [sp, #24]
	b	.L12490
.L12492:
	mvn	r6, #21
	b	.L12479
.L12493:
	mvn	r6, #11
	b	.L12479
.L12504:
	movw	r0, #:lower16:.LC672
	ldr	r1, .L12506+12
	mov	r2, r6
	movt	r0, #:upper16:.LC672
	bl	printk
	b	.L12490
.L12505:
	mov	r3, r0
	mov	r2, r4
	mov	r1, r9
	mov	r0, r8
	bl	printk
	b	.L12486
.L12507:
	.align	2
.L12506:
	.word	.LANCHOR5-3608
	.word	.LANCHOR0+3788
	.word	.LANCHOR3-4032
	.word	.LANCHOR5-3484
	.fnend
	.size	gserial_setup, .-gserial_setup
	.align	2
	.global	gserial_cleanup
	.syntax unified
	.arm
	.fpu softvfp
	.type	gserial_cleanup, %function
gserial_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR0
	movt	r3, #:upper16:.LANCHOR0
	ldr	r3, [r3, #3784]
	cmp	r3, #0
	beq	.L12508
	b	gserial_cleanup.part.0
.L12508:
	bx	lr
	.fnend
	.size	gserial_cleanup, .-gserial_cleanup
	.align	2
	.global	gserial_connect
	.syntax unified
	.arm
	.fpu softvfp
	.type	gserial_connect, %function
gserial_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:.LANCHOR0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r2, [r3, #3784]
	cmp	r2, #0
	beq	.L12519
	ldr	r2, [r3, #3780]
	cmp	r1, r2
	bcs	.L12519
	mov	r4, r0
	ldr	r0, [r0, #80]
	rsb	r1, r1, r1, lsl #3
	add	r3, r3, r1, lsl #2
	ldr	r1, [r0, #28]
	ldr	r6, [r3, #3812]
	ldrh	r3, [r1, #4]	@ unaligned
	cmp	r3, #0
	beq	.L12520
	ldr	r3, [r0, #8]
	ldr	r3, [r3]
	blx	r3
	subs	r5, r0, #0
	blt	.L12510
	ldr	r3, [r4, #80]
	str	r6, [r3]
	ldr	r0, [r4, #84]
	ldr	r1, [r0, #28]
	ldrh	r3, [r1, #4]	@ unaligned
	cmp	r3, #0
	beq	.L12521
	ldr	r3, [r0, #8]
	ldr	r3, [r3]
	blx	r3
	subs	r5, r0, #0
	blt	.L12512
	ldr	r3, [r4, #84]
	mov	r0, r6
	str	r6, [r3]
	bl	_raw_spin_lock_irqsave
	mov	r2, r6
	str	r6, [r4, #76]
	mov	r7, r0
	str	r4, [r6, #4]
	ldr	ip, [r2, #121]!	@ unaligned
	str	ip, [r4, #88]
	ldrh	r1, [r2, #4]	@ unaligned
	strh	r1, [r4, #92]	@ movhi
	ldrb	r2, [r2, #6]	@ zero_extendqisi2
	strb	r2, [r4, #94]
	ldr	r3, [r6, #12]
	cmp	r3, #0
	bne	.L12527
	ldr	r3, [r4, #112]
	cmp	r3, #0
	beq	.L12516
.L12526:
	mov	r0, r4
	blx	r3
.L12516:
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
.L12510:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L12521:
	mvn	r5, #21
.L12512:
	ldr	r0, [r4, #80]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #80]
	mov	r2, #0
	str	r2, [r3]
	b	.L12510
.L12527:
	mov	r0, r6
	bl	gs_start_io
	ldr	r3, [r4, #108]
	cmp	r3, #0
	bne	.L12526
	b	.L12516
.L12519:
	mvn	r5, #5
	b	.L12510
.L12520:
	mvn	r5, #21
	b	.L12510
	.fnend
	.size	gserial_connect, .-gserial_connect
	.align	2
	.global	gserial_disconnect
	.syntax unified
	.arm
	.fpu softvfp
	.type	gserial_disconnect, %function
gserial_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r4, [r0, #76]
	.pad #4
	sub	sp, sp, #4
	cmp	r4, #0
	beq	.L12528
	mov	r5, r0
	mov	r0, r4
	bl	_raw_spin_lock_irqsave
	ldr	r2, [r5, #88]
	mov	r3, #0
	mov	r6, r0
	str	r2, [r4, #121]	@ unaligned
	ldrh	r2, [r5, #92]
	strh	r2, [r4, #125]	@ unaligned
	ldrb	r2, [r5, #94]	@ zero_extendqisi2
	str	r3, [r4, #4]
	strb	r2, [r4, #127]
	str	r3, [r5, #76]
	ldr	r3, [r4, #12]
	cmp	r3, #0
	bne	.L12530
	ldrb	r3, [r4, #16]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L12531
.L12530:
	mov	r2, #1
	add	r0, r4, #108
	mov	r3, #0
	mov	r1, r2
	bl	__wake_up
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L12531
	bl	tty_hangup
.L12531:
	mov	r1, r6
	mov	r0, r4
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, [r5, #84]
	mov	r6, #0
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r5, #84]
	str	r6, [r3]
	ldr	r0, [r5, #80]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r5, #80]
	mov	r0, r4
	str	r6, [r3]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #12]
	mov	r7, r0
	cmp	r3, r6
	bne	.L12533
	ldrb	r6, [r4, #16]	@ zero_extendqisi2
	cmp	r6, #0
	beq	.L12549
.L12533:
	ldr	r3, [r4, #32]
	add	fp, r4, #32
	ldr	r6, [r5, #84]
	cmp	fp, r3
	beq	.L12534
	mov	r10, #256
	mov	r9, #512
.L12535:
	ldm	r3, {r1, r2}
	mov	r8, r3
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r10, [r3]
	str	r9, [r3, #4]
	ldr	r0, [r8, #-36]!
	bl	kfree
	ldr	r3, [r6, #8]
	mov	r0, r6
	mov	r1, r8
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, [r4, #32]
	cmp	fp, r3
	bne	.L12535
	ldr	r6, [r5, #84]
.L12534:
	ldr	r3, [r4, #48]
	add	fp, r4, #48
	cmp	fp, r3
	beq	.L12539
	mov	r10, #256
	mov	r9, #512
.L12536:
	ldm	r3, {r1, r2}
	mov	r8, r3
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r10, [r3]
	str	r9, [r3, #4]
	ldr	r0, [r8, #-36]!
	bl	kfree
	ldr	r3, [r6, #8]
	mov	r0, r6
	mov	r1, r8
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, [r4, #48]
	cmp	fp, r3
	bne	.L12536
.L12539:
	ldr	r3, [r4, #76]
	add	r9, r4, #76
	ldr	r10, [r5, #80]
	cmp	r9, r3
	beq	.L12538
	mov	r8, #256
	mov	r6, #512
.L12537:
	ldm	r3, {r1, r2}
	mov	r5, r3
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r8, [r3]
	str	r6, [r3, #4]
	ldr	r0, [r5, #-36]!
	bl	kfree
	ldr	r3, [r10, #8]
	mov	r0, r10
	mov	r1, r5
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, [r4, #76]
	cmp	r9, r3
	bne	.L12537
.L12538:
	mov	r3, #0
	mov	r1, r7
	mov	r0, r4
	str	r3, [r4, #40]
	str	r3, [r4, #44]
	str	r3, [r4, #84]
	str	r3, [r4, #88]
	str	r3, [r4, #128]
	str	r3, [r4, #132]
	str	r3, [r4, #136]
	str	r3, [r4, #140]
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L12528:
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L12549:
	ldr	r0, [r4, #96]
	bl	kfree
	str	r6, [r4, #96]
	b	.L12533
	.fnend
	.size	gserial_disconnect, .-gserial_disconnect
	.align	2
	.global	gsdio_free_req
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_free_req, %function
gsdio_free_req:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	mov	r5, r1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r0, [r1]
	bl	kfree
	ldr	r3, [r4, #8]
	mov	r1, r5
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	ldr	r3, [r3, #12]
	bx	r3	@ indirect register sibling call
	.fnend
	.size	gsdio_free_req, .-gsdio_free_req
	.align	2
	.global	gsdio_alloc_req
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_alloc_req, %function
gsdio_alloc_req:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	mov	r1, r2
	strd	r6, [sp, #8]
	mov	r7, r0
	mov	r6, r2
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r4, r0, #0
	beq	.L12556
	mov	r0, r5
	mov	r1, r6
	str	r5, [r4, #4]
	bl	__kmalloc
	cmp	r0, #0
	mov	r5, r0
	str	r0, [r4]
	beq	.L12557
.L12552:
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L12556:
	movw	r0, #:lower16:.LC401
	ldr	r1, .L12558
	movt	r0, #:upper16:.LC401
	bl	printk
	b	.L12552
.L12557:
	movw	r0, #:lower16:.LC402
	ldr	r1, .L12558
	movt	r0, #:upper16:.LC402
	bl	printk
	ldr	r3, [r7, #8]
	mov	r1, r4
	mov	r0, r7
	mov	r4, r5
	ldr	r3, [r3, #12]
	blx	r3
	b	.L12552
.L12559:
	.align	2
.L12558:
	.word	.LANCHOR5-3468
	.fnend
	.size	gsdio_alloc_req, .-gsdio_alloc_req
	.align	2
	.global	gsdio_free_requests
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_free_requests, %function
gsdio_free_requests:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r1]
	cmp	r1, r3
	bxeq	lr
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	mov	r6, r0
	mov	r7, #512
	str	r8, [sp, #16]
	mov	r8, #256
	str	lr, [sp, #20]
.L12562:
	ldr	ip, [r3]
	mov	r4, r3
	ldr	r2, [r3, #4]
	str	r2, [ip, #4]
	str	ip, [r2]
	str	r8, [r3]
	str	r7, [r3, #4]
	ldr	r0, [r4, #-36]!
	bl	kfree
	ldr	r3, [r6, #8]
	mov	r0, r6
	mov	r1, r4
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, [r5]
	cmp	r5, r3
	bne	.L12562
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
	.fnend
	.size	gsdio_free_requests, .-gsdio_free_requests
	.set	gsmd_free_requests,gsdio_free_requests
	.section	.rodata.str1.4
	.align	2
.LC674:
	.ascii	"<3>%s: unable to allocate out requests\012\000"
	.align	2
.LC675:
	.ascii	"<3>%s: unable to allocate IN requests\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_notify, %function
gsmd_notify:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	sub	r1, r1, #1
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	ldr	r5, [r0, #72]
	cmp	r1, #3
	ldrls	pc, [pc, r1, asl #2]
	b	.L12568
.L12571:
	.word	.L12574
	.word	.L12573
	.word	.L12572
	.word	.L12570
.L12568:
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L12570:
	ldr	r0, [r5]
	bl	smd_tiocmget
	ands	r3, r0, #128
	movne	r1, #9
	moveq	r1, #1
	movne	r3, #8
	tst	r0, #64
	moveq	r1, r3
	tst	r0, #256
	ldr	r0, [r4, #68]
	orrne	r1, r1, #2
	str	r1, [r4, #160]
	cmp	r0, #0
	beq	.L12568
	ldr	r3, [r0, #128]
	cmp	r3, #0
	beq	.L12568
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	bx	r3
.L12574:
	ldr	r0, [r5]
	bl	smd_read_avail
	cmp	r0, #0
	bne	.L12637
.L12575:
	ldr	r0, [r5]
	bl	smd_write_avail
	cmp	r0, #0
	beq	.L12568
	movw	r3, #:lower16:.LANCHOR0
	add	r1, r4, #28
	movt	r3, #:upper16:.LANCHOR0
	ldr	r0, [r3, #2260]
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	queue_work
.L12573:
	add	r1, r5, #8
	mov	r0, #0
	add	r7, r4, #4
	bl	_set_bit
	mov	r0, r7
	bl	_raw_spin_lock
	ldr	r3, [r4, #68]
	cmp	r3, #0
	beq	.L12581
	ldr	r3, [r4, #72]
	movw	r8, #:lower16:gsmd_read_complete
	add	r6, r4, #12
	ldr	r1, [r4, #156]
	movt	r8, #:upper16:gsmd_read_complete
	mov	r5, #8
	ldr	r0, [r3]
	mvn	r2, r1
	bl	smd_tiocmset_from_cb
	ldr	r3, [r4, #68]
	ldr	r9, [r3, #84]
.L12582:
	mov	r1, #2048
	mov	r0, r9
	bl	gsmd_alloc_req.constprop.0
	cmp	r0, #0
	add	r3, r0, #36
	beq	.L12638
	str	r8, [r0, #28]
	ldr	r2, [r4, #12]
	subs	r5, r5, #1
	str	r3, [r2, #4]
	str	r2, [r0, #36]
	str	r6, [r0, #40]
	str	r3, [r4, #12]
	bne	.L12582
.L12583:
	ldr	r3, [r4, #68]
	movw	r5, #:lower16:gsmd_write_complete
	add	r8, r4, #44
	movt	r5, #:upper16:gsmd_write_complete
	mov	r10, #8
	ldr	r9, [r3, #80]
.L12580:
	mov	r1, #2048
	mov	r0, r9
	bl	gsmd_alloc_req.constprop.0
	cmp	r0, #0
	add	r3, r0, #36
	beq	.L12639
	str	r5, [r0, #28]
	ldr	r2, [r4, #44]
	subs	r10, r10, #1
	str	r3, [r2, #4]
	str	r2, [r0, #36]
	str	r8, [r0, #40]
	str	r3, [r4, #44]
	bne	.L12580
.L12636:
	mov	r0, r7
	bl	_raw_spin_unlock
	mov	r0, r4
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	gsmd_start_rx
.L12572:
	add	r1, r5, #8
	mov	r0, #0
	add	r7, r4, #4
	bl	_clear_bit
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #68]
	mov	r1, r0
	cmp	r3, #0
	beq	.L12640
	ldr	r6, [r3, #80]
	mov	r0, r7
	ldr	r5, [r3, #84]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r6, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L12588
	mov	r0, r6
	blx	r3
.L12588:
	ldr	r3, [r5, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L12589
	mov	r0, r5
	blx	r3
.L12589:
	mov	r0, r7
	bl	_raw_spin_lock
	ldr	r0, [r4, #68]
	cmp	r0, #0
	beq	.L12590
	ldr	r3, [r4, #12]
	add	r8, r4, #12
	cmp	r8, r3
	beq	.L12594
	mov	r10, #256
	mov	r9, #512
.L12591:
	ldm	r3, {r1, r2}
	mov	fp, r3
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r10, [r3]
	str	r9, [r3, #4]
	ldr	r0, [fp, #-36]!
	bl	kfree
	ldr	r3, [r5, #8]
	mov	r0, r5
	mov	r1, fp
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, [r4, #12]
	cmp	r8, r3
	bne	.L12591
.L12594:
	ldr	r3, [r4, #20]
	add	r8, r4, #20
	cmp	r3, r8
	beq	.L12593
	mov	r10, #256
	mov	r9, #512
.L12592:
	ldm	r3, {r1, r2}
	mov	fp, r3
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r10, [r3]
	str	r9, [r3, #4]
	ldr	r0, [fp, #-36]!
	bl	kfree
	ldr	r3, [r5, #8]
	mov	r0, r5
	mov	r1, fp
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, [r4, #20]
	cmp	r8, r3
	bne	.L12592
.L12593:
	ldr	r3, [r4, #44]
	add	r8, r4, #44
	cmp	r8, r3
	beq	.L12596
	mov	r10, #256
	mov	r9, #512
.L12595:
	ldm	r3, {r1, r2}
	mov	r5, r3
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r10, [r3]
	str	r9, [r3, #4]
	ldr	r0, [r5, #-36]!
	bl	kfree
	ldr	r3, [r6, #8]
	mov	r0, r6
	mov	r1, r5
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, [r4, #44]
	cmp	r8, r3
	bne	.L12595
.L12596:
	ldr	r0, [r4, #68]
	mov	r3, #0
	str	r3, [r4, #8]
	str	r3, [r4, #160]
.L12590:
	ldr	r3, [r0, #128]
	cmp	r3, #0
	beq	.L12581
	ldr	r1, [r4, #160]
	blx	r3
.L12581:
	mov	r0, r7
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock
.L12639:
	ldr	r3, [r4, #44]
	cmp	r8, r3
	bne	.L12636
	ldr	r3, [r4, #68]
	mov	r1, r6
	ldr	r0, [r3, #84]
	bl	gsmd_free_requests
	movw	r0, #:lower16:.LC675
	ldr	r1, .L12641
	movt	r0, #:upper16:.LC675
	bl	printk
	b	.L12581
.L12638:
	ldr	r3, [r4, #12]
	cmp	r6, r3
	bne	.L12583
	movw	r0, #:lower16:.LC674
	ldr	r1, .L12641
	movt	r0, #:upper16:.LC674
	bl	printk
	b	.L12581
.L12637:
	movw	r3, #:lower16:.LANCHOR0
	add	r1, r4, #52
	movt	r3, #:upper16:.LANCHOR0
	ldr	r0, [r3, #2260]
	bl	queue_work
	b	.L12575
.L12640:
	mov	r0, r7
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L12642:
	.align	2
.L12641:
	.word	.LANCHOR5-3452
	.fnend
	.size	gsmd_notify, .-gsmd_notify
	.align	2
	.global	gsdio_alloc_requests
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_alloc_requests, %function
gsdio_alloc_requests:
	.fnstart
	@ args = 4, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	subs	r9, r2, #0
	movgt	r7, r0
	movgt	r5, r1
	str	r10, [sp, #24]
	movgt	r8, r3
	movgt	r6, #0
	str	lr, [sp, #28]
	ldr	r10, [sp, #32]
	ble	.L12649
.L12650:
	ldr	r3, [r7, #8]
	mov	r1, #32
	mov	r0, r7
	add	r6, r6, #1
	ldr	r3, [r3, #8]
	blx	r3
	mov	r4, r0
	mov	r1, #32
	cmp	r4, #0
	mov	r0, r8
	beq	.L12653
	str	r8, [r4, #4]
	bl	__kmalloc
	cmp	r0, #0
	add	r3, r4, #36
	str	r0, [r4]
	beq	.L12654
	str	r10, [r4, #28]
	ldr	r2, [r5]
	cmp	r9, r6
	str	r3, [r2, #4]
	str	r2, [r4, #36]
	str	r5, [r4, #40]
	str	r3, [r5]
	bne	.L12650
.L12649:
	mov	r0, #0
.L12643:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L12653:
	movw	r0, #:lower16:.LC401
	ldr	r1, .L12655
	movt	r0, #:upper16:.LC401
	bl	printk
.L12647:
	ldr	r3, [r5]
	cmp	r5, r3
	mvneq	r0, #11
	bne	.L12649
	b	.L12643
.L12654:
	movw	r0, #:lower16:.LC402
	ldr	r1, .L12655
	movt	r0, #:upper16:.LC402
	bl	printk
	ldr	r3, [r7, #8]
	mov	r1, r4
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
	b	.L12647
.L12656:
	.align	2
.L12655:
	.word	.LANCHOR5-3468
	.fnend
	.size	gsdio_alloc_requests, .-gsdio_alloc_requests
	.align	2
	.global	gsdio_start_rx
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_start_rx, %function
gsdio_start_rx:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	subs	r5, r0, #0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	beq	.L12672
	add	r6, r5, #4
	mov	r0, r6
	bl	_raw_spin_lock_irq
	ldr	r3, [r5, #96]
	cmp	r3, #0
	beq	.L12660
	ldr	r2, [r5, #108]
	cmp	r2, #0
	beq	.L12660
	add	r8, r5, #12
	mov	fp, #256
	ldr	r7, [r3, #84]
	mov	r10, #512
	b	.L12662
.L12664:
	ldrd	r2, [r4]
	str	r3, [r2, #4]
	str	r2, [r3]
	mov	r3, #2048
	str	r3, [r4, #-32]
	str	fp, [r4]
	str	r10, [r4, #4]
	ldr	r3, [r5, #44]
	sub	r3, r3, #1
	str	r3, [r5, #44]
	bl	_raw_spin_unlock_irq
	ldr	r3, [r7, #8]
	mov	r2, #32
	sub	r1, r4, #36
	mov	r0, r7
	ldr	r3, [r3, #16]
	blx	r3
	mov	r9, r0
	mov	r0, r6
	bl	_raw_spin_lock_irq
	cmp	r9, #0
	bne	.L12673
	ldr	r3, [r5, #96]
	cmp	r3, #0
	beq	.L12660
.L12662:
	ldr	r4, [r5, #12]
	mov	r0, r6
	cmp	r8, r4
	bne	.L12664
.L12660:
	mov	r0, r6
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irq
.L12672:
	ldr	r1, .L12674
	movw	r0, #:lower16:.LC15
	movt	r0, #:upper16:.LC15
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	printk
.L12673:
	movw	r0, #:lower16:.LC16
	ldr	r1, .L12674
	mov	r2, r5
	movt	r0, #:upper16:.LC16
	ldr	r3, [r5]
	bl	printk
	ldr	r3, [r5, #16]
	str	r4, [r5, #16]
	str	r8, [r4]
	str	r3, [r4, #4]
	str	r4, [r3]
	ldr	r3, [r5, #44]
	add	r3, r3, #1
	str	r3, [r5, #44]
	b	.L12660
.L12675:
	.align	2
.L12674:
	.word	.LANCHOR5-3436
	.fnend
	.size	gsdio_start_rx, .-gsdio_start_rx
	.section	.rodata.str1.4
	.align	2
.LC676:
	.ascii	"<3>%s: sio channel is not open\012\000"
	.align	2
.LC677:
	.ascii	"<3>%s: usb request is null port#%d\012\000"
	.align	2
.LC678:
	.ascii	"<3>%s: port#%d sdio write failed err:%d\000"
	.text
	.align	2
	.global	gsdio_rx_push
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_rx_push, %function
gsdio_rx_push:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	sub	r7, r0, #28
	strd	r8, [sp, #16]
	sub	r8, r0, #24
	mov	r0, r8
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	.pad #8
	sub	sp, sp, #8
	bl	_raw_spin_lock_irq
	ldr	r3, [r5, #68]
	cmp	r3, #0
	beq	.L12696
	ldr	r4, [r5, #-8]
	sub	r9, r5, #8
	ldr	r10, [r3, #84]
	cmp	r9, r4
	beq	.L12678
	ldr	r3, [r4, #8]
	sub	r6, r4, #36
	cmn	r3, #108
	beq	.L12678
	cmp	r3, #0
	bne	.L12697
.L12679:
	ldr	r3, [r5, #80]
	cmp	r3, #0
	beq	.L12698
	ldrd	r2, [r4]
	mov	r0, #256
	mov	r1, #512
	cmp	r7, #0
	str	r3, [r2, #4]
	str	r2, [r3]
	strd	r0, [r4]
	ldr	r3, [r5, #20]
	sub	r3, r3, #1
	str	r3, [r5, #20]
	beq	.L12699
	cmp	r6, #0
	beq	.L12700
	ldr	r3, [r5, #80]
	cmp	r3, #0
	beq	.L12682
	ldr	r3, [r4, #12]
	cmp	r3, #0
	bne	.L12684
	str	r3, [r5, #-20]
.L12682:
	ldr	r3, [r5, #68]
	cmp	r3, #0
	beq	.L12701
	ldr	r3, [r5, #-8]
	str	r4, [r3, #4]
	stm	r4, {r3, r9}
	ldr	r3, [r5, #20]
	str	r4, [r5, #-8]
	add	r3, r3, #1
	str	r3, [r5, #20]
.L12678:
	mov	r0, r8
	bl	_raw_spin_unlock_irq
	mov	r0, r7
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	gsdio_start_rx
.L12701:
	str	r3, [r5, #-20]
	ldr	r0, [r4, #-36]
	bl	kfree
	ldr	r3, [r10, #8]
	mov	r1, r6
	mov	r0, r10
	ldr	r3, [r3, #12]
	blx	r3
.L12696:
	mov	r0, r8
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irq
.L12684:
	mov	r0, r8
	bl	_raw_spin_unlock_irq
	mov	r0, r8
	bl	_raw_spin_lock_irq
	movw	r0, #:lower16:.LC678
	ldr	r1, .L12702
	mvn	r3, #18
	movt	r0, #:upper16:.LC678
	ldr	r2, [r5, #-28]
	bl	printk
	b	.L12682
.L12699:
	movw	r0, #:lower16:.LC15
	ldr	r1, .L12702
	movt	r0, #:upper16:.LC15
	bl	printk
	b	.L12682
.L12698:
	movw	r0, #:lower16:.LC676
	ldr	r1, .L12702+4
	movt	r0, #:upper16:.LC676
	bl	printk
	ldm	r4, {r1, r2}
	mov	r3, r5
	str	r2, [r1, #4]
	str	r1, [r2]
	ldr	r2, [r3, #-16]!
	str	r4, [r2, #4]
	strd	r2, [r4]
	ldrd	r2, [r5, #16]
	str	r4, [r5, #-16]
	add	r2, r2, #1
	sub	r3, r3, #1
	strd	r2, [r5, #16]
	b	.L12678
.L12700:
	movw	r0, #:lower16:.LC677
	ldr	r1, .L12702
	movt	r0, #:upper16:.LC677
	ldr	r2, [r5, #-28]
	bl	printk
	b	.L12682
.L12697:
	movw	r0, #:lower16:.LC108
	ldr	r1, .L12702+4
	mov	r2, r7
	movt	r0, #:upper16:.LC108
	str	r3, [sp]
	ldr	r3, [r5, #-28]
	bl	printk
	b	.L12679
.L12703:
	.align	2
.L12702:
	.word	.LANCHOR5-3404
	.word	.LANCHOR5-3420
	.fnend
	.size	gsdio_rx_push, .-gsdio_rx_push
	.align	2
	.global	gsdio_write
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_write, %function
gsdio_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	subs	r4, r0, #0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	beq	.L12713
	cmp	r1, #0
	beq	.L12714
	ldr	r3, [r4, #108]
	cmp	r3, #0
	beq	.L12706
	ldr	r3, [r1, #48]
	cmp	r3, #0
	bne	.L12708
	str	r3, [r4, #8]
.L12706:
	ldrd	r4, [sp]
	mvn	r0, #18
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L12708:
	add	r5, r4, #4
	mov	r0, r5
	bl	_raw_spin_unlock_irq
	mov	r0, r5
	bl	_raw_spin_lock_irq
	movw	r0, #:lower16:.LC678
	ldr	r1, .L12715
	mvn	r3, #18
	movt	r0, #:upper16:.LC678
	ldr	r2, [r4]
	bl	printk
	b	.L12706
.L12714:
	movw	r0, #:lower16:.LC677
	ldr	r1, .L12715
	movt	r0, #:upper16:.LC677
	ldr	r2, [r4]
	bl	printk
	b	.L12706
.L12713:
	movw	r0, #:lower16:.LC15
	ldr	r1, .L12715
	movt	r0, #:upper16:.LC15
	bl	printk
	b	.L12706
.L12716:
	.align	2
.L12715:
	.word	.LANCHOR5-3404
	.fnend
	.size	gsdio_write, .-gsdio_write
	.align	2
	.global	gsdio_read_pending
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_read_pending, %function
gsdio_read_pending:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	cmp	r0, #0
	beq	.L12721
	ldr	r3, [r0, #120]
	ldr	r3, [r3, #4]
	cmp	r3, #0
	beq	.L12717
.L12720:
	b	.L12720
.L12717:
	bx	lr
.L12721:
	movw	r0, #:lower16:.LC15
	ldr	r1, .L12722
	movt	r0, #:upper16:.LC15
	b	printk
.L12723:
	.align	2
.L12722:
	.word	.LANCHOR2+2420
	.fnend
	.size	gsdio_read_pending, .-gsdio_read_pending
	.section	.rodata.str1.4
	.align	2
.LC679:
	.ascii	"<3>%s: unable to allocate out reqs\012\000"
	.align	2
.LC680:
	.ascii	"<3>%s: unable to allocate in reqs\012\000"
	.text
	.align	2
	.global	gsdio_start_io
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_start_io, %function
gsdio_start_io:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	add	r8, r0, #4
	mov	r0, r8
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #96]
	mov	r6, r0
	cmp	r3, #0
	beq	.L12739
	movw	fp, #:lower16:kmalloc_caches
	movw	r10, #:lower16:gsdio_read_complete
	ldr	r9, [r3, #84]
	movt	fp, #:upper16:kmalloc_caches
	add	r3, r4, #12
	movt	r10, #:upper16:gsdio_read_complete
	mov	r7, #8
	str	r3, [sp]
.L12735:
	ldr	r2, [r9, #8]
	mov	r1, #32
	mov	r0, r9
	ldr	r2, [r2, #8]
	blx	r2
	subs	r5, r0, #0
	mov	ip, #2048
	mov	r1, #32
	mov	r2, #16
	beq	.L12740
	str	ip, [r5, #4]
	ldr	r0, [fp, #44]
	cmp	r0, #0
	streq	r2, [r5]
	beq	.L12730
	bl	kmem_cache_alloc
	cmp	r0, #0
	str	r0, [r5]
	beq	.L12741
.L12730:
	str	r10, [r5, #28]
	ldr	r3, [sp]
	add	r2, r5, #36
	ldr	r1, [r4, #12]
	subs	r7, r7, #1
	str	r2, [r1, #4]
	str	r1, [r5, #36]
	str	r3, [r5, #40]
	str	r2, [r4, #12]
	bne	.L12735
.L12731:
	ldr	r2, [r4, #96]
	mov	r3, #8
	movw	r10, #:lower16:gsdio_write_complete
	mov	r7, r3
	movt	r10, #:upper16:gsdio_write_complete
	str	r3, [r4, #44]
	add	fp, r4, #52
	ldr	r3, [r2, #80]
.L12734:
	mov	r2, #32
	mov	r0, r3
	str	r3, [sp, #4]
	mov	r1, #2048
	bl	gsdio_alloc_req
	subs	r5, r0, #0
	ldr	r3, [sp, #4]
	add	r2, r5, #36
	beq	.L12742
	str	r10, [r5, #28]
	ldr	r1, [r4, #52]
	subs	r7, r7, #1
	str	r2, [r1, #4]
	str	r1, [r5, #36]
	str	fp, [r5, #40]
	str	r2, [r4, #52]
	bne	.L12734
.L12733:
	mov	r3, #8
	mov	r1, r6
	mov	r0, r8
	str	r3, [r4, #76]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r4
	bl	gsdio_start_rx
	movw	r3, #:lower16:.LANCHOR0
	add	r1, r4, #60
	movt	r3, #:upper16:.LANCHOR0
	ldr	r0, [r3, #2036]
	bl	queue_work
	mov	r0, #0
.L12724:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L12742:
	ldr	r3, [r4, #52]
	cmp	fp, r3
	bne	.L12733
	ldr	r3, [r4, #96]
	ldr	r1, [sp]
	ldr	r0, [r3, #84]
	bl	gsdio_free_requests
	mov	r1, r6
	mov	r0, r8
	str	r5, [r4, #44]
	bl	_raw_spin_unlock_irqrestore
	movw	r0, #:lower16:.LC680
	ldr	r1, .L12743
	movt	r0, #:upper16:.LC680
	bl	printk
	mvn	r0, #11
	b	.L12724
.L12739:
	mov	r1, r0
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	mvn	r0, #18
	b	.L12724
.L12741:
	movw	r0, #:lower16:.LC402
	ldr	r1, .L12743+4
	movt	r0, #:upper16:.LC402
	bl	printk
	ldr	r2, [r9, #8]
	mov	r1, r5
	mov	r0, r9
	ldr	r3, [r2, #12]
	blx	r3
.L12728:
	ldr	r2, [sp]
	ldr	r3, [r4, #12]
	cmp	r2, r3
	bne	.L12731
	mov	r1, r6
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	movw	r0, #:lower16:.LC679
	ldr	r1, .L12743
	movt	r0, #:upper16:.LC679
	bl	printk
	mvn	r0, #11
	b	.L12724
.L12740:
	movw	r0, #:lower16:.LC401
	ldr	r1, .L12743+4
	movt	r0, #:upper16:.LC401
	bl	printk
	b	.L12728
.L12744:
	.align	2
.L12743:
	.word	.LANCHOR5-3392
	.word	.LANCHOR5-3468
	.fnend
	.size	gsdio_start_io, .-gsdio_start_io
	.align	2
	.global	gsdio_port_free
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_port_free, %function
gsdio_port_free:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	mov	r3, #108
	movw	r1, #:lower16:.LANCHOR0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movt	r1, #:upper16:.LANCHOR0
	str	lr, [sp, #4]
	ldr	ip, .L12749
	mul	r3, r3, r0
	mov	r2, r0
	add	r1, r1, r3
	add	r0, r3, ip
	ldr	r4, [r1, #2068]
	cmp	r4, #0
	beq	.L12748
	bl	platform_driver_unregister
	mov	r0, r4
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	kfree
.L12748:
	movw	r0, #:lower16:.LC96
	ldr	r1, .L12749+4
	movt	r0, #:upper16:.LC96
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	printk
.L12750:
	.align	2
.L12749:
	.word	.LANCHOR0+2072
	.word	.LANCHOR5-3376
	.fnend
	.size	gsdio_port_free, .-gsdio_port_free
	.align	2
	.global	gsdio_ctrl_modem_status
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_ctrl_modem_status, %function
gsdio_ctrl_modem_status:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r3, r1
	ands	r1, r0, #128
	moveq	r2, #1
	streq	r1, [r3, #172]
	beq	.L12753
	mov	ip, #8
	mov	r2, #9
	mov	r1, ip
	str	ip, [r3, #172]
.L12753:
	tst	r0, #64
	movne	r1, r2
	strne	r2, [r3, #172]
	tst	r0, #256
	ldr	r0, [r3, #96]
	orrne	r1, r1, #2
	strne	r1, [r3, #172]
	cmp	r0, #0
	beq	.L12751
	ldr	r3, [r0, #128]
	cmp	r3, #0
	beq	.L12751
	bx	r3
.L12751:
	bx	lr
	.fnend
	.size	gsdio_ctrl_modem_status, .-gsdio_ctrl_modem_status
	.align	2
	.global	gsdio_ch_notify
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_ch_notify, %function
gsdio_ch_notify:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	cmp	r1, #2
	beq	.L12772
	cmp	r1, #1
	beq	.L12773
	bx	lr
.L12772:
	movw	r3, #:lower16:.LANCHOR0
	add	r1, r0, #28
	movt	r3, #:upper16:.LANCHOR0
	ldr	r0, [r3, #2036]
	b	queue_work
.L12773:
	movw	r3, #:lower16:.LANCHOR0
	add	r1, r0, #60
	movt	r3, #:upper16:.LANCHOR0
	ldr	r0, [r3, #2036]
	b	queue_work
	.fnend
	.size	gsdio_ch_notify, .-gsdio_ch_notify
	.section	.rodata.str1.4
	.align	2
.LC681:
	.ascii	"<3>%s: port allocation failed\012\000"
	.text
	.align	2
	.global	gsdio_port_alloc
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_port_alloc, %function
gsdio_port_alloc:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	movt	r3, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	mov	r6, r1
	strd	r8, [sp, #16]
	mov	r7, r2
	mov	r8, r0
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r3, [r3, #8]
	cmp	r3, #0
	beq	.L12777
	mov	r0, r3
	movw	r1, #32976
	bl	kmem_cache_alloc
	subs	r4, r0, #0
	beq	.L12779
.L12775:
	mov	r5, #0
	str	r8, [r4]
	add	lr, r4, #20
	movw	r0, #:lower16:gsdio_rx_push
	movw	r1, #:lower16:gsdio_tx_pull
	str	r5, [r4, #4]
	ldr	r3, [r6]	@ unaligned
	movt	r0, #:upper16:gsdio_rx_push
	movw	r2, #:lower16:gsdio_ctrl_wq
	movw	ip, #:lower16:gsdio_open_work
	movt	ip, #:upper16:gsdio_open_work
	movt	r1, #:upper16:gsdio_tx_pull
	movt	r2, #:upper16:gsdio_ctrl_wq
	str	r3, [r4, #100]
	ldrh	r3, [r6, #4]	@ unaligned
	strh	r3, [r4, #104]	@ movhi
	ldrb	r10, [r6, #6]	@ zero_extendqisi2
	mov	r3, #2560
	str	lr, [r4, #20]
	add	r6, r4, #12
	str	lr, [r4, #24]
	add	lr, r4, #32
	str	r0, [r4, #40]
	add	r0, r4, #64
	str	r6, [r4, #12]
	str	lr, [r4, #32]
	str	lr, [r4, #36]
	add	lr, r4, #52
	str	r6, [r4, #16]
	str	r0, [r4, #64]
	str	lr, [r4, #52]
	str	lr, [r4, #56]
	add	lr, r4, #84
	str	r0, [r4, #68]
	add	r0, r4, #128
	str	r3, [r4, #28]
	str	r3, [r4, #60]
	str	r1, [r4, #72]
	mov	r1, r5
	str	r3, [r4, #80]
	str	lr, [r4, #84]
	str	lr, [r4, #88]
	str	r2, [r4, #92]
	mov	r2, r5
	strb	r10, [r4, #106]
	str	r3, [r4, #124]
	str	r0, [r4, #128]
	str	r0, [r4, #132]
	add	r0, r4, #140
	str	ip, [r4, #136]
	bl	init_timer_key
	mov	r2, #108
	movw	ip, #:lower16:delayed_work_timer_fn
	ldr	lr, .L12780
	movt	ip, #:upper16:delayed_work_timer_fn
	movw	r3, #:lower16:.LANCHOR0
	mul	r0, r2, r8
	movt	r3, #:upper16:.LANCHOR0
	movw	r1, #:lower16:gsdio_ch_probe
	movw	r2, #:lower16:gsdio_ch_remove
	movt	r1, #:upper16:gsdio_ch_probe
	str	ip, [r4, #156]
	movt	r2, #:upper16:gsdio_ch_remove
	add	ip, r4, #124
	add	r3, r3, r0
	add	r0, r0, lr
	str	ip, [r4, #160]
	str	r4, [r3, #2068]
	str	r7, [r4, #120]
	str	r1, [r3, #2072]
	str	r2, [r3, #2076]
	ldr	r2, [r7]
	str	r2, [r3, #2092]
	str	r5, [r3, #2100]
	bl	platform_driver_register
	mov	r0, r5
.L12774:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L12777:
	mov	r4, #16
	b	.L12775
.L12779:
	movw	r0, #:lower16:.LC681
	ldr	r1, .L12780+4
	movt	r0, #:upper16:.LC681
	bl	printk
	mvn	r0, #11
	b	.L12774
.L12781:
	.align	2
.L12780:
	.word	.LANCHOR0+2072
	.word	.LANCHOR5-3360
	.fnend
	.size	gsdio_port_alloc, .-gsdio_port_alloc
	.section	.rodata.str1.4
	.align	2
.LC682:
	.ascii	"<3>%s: failed to enable in ep w/ err:%d\012\000"
	.text
	.align	2
	.global	gsdio_connect
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_connect, %function
gsdio_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r2, #:lower16:.LANCHOR0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movt	r2, #:upper16:.LANCHOR0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r2, #2040]
	cmp	r1, r3
	bcs	.L12798
	cmp	r0, #0
	mov	r4, r0
	beq	.L12799
	mov	r3, #108
	mla	r1, r3, r1, r2
	ldr	r6, [r1, #2068]
	add	r5, r6, #4
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	movw	r3, #:lower16:gsdio_ctrl_notify_modem
	mov	r1, r0
	str	r4, [r6, #96]
	movt	r3, #:upper16:gsdio_ctrl_notify_modem
	mov	r0, r5
	str	r3, [r4, #132]
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, [r4, #80]
	ldr	r1, [r0, #28]
	ldrh	r3, [r1, #4]	@ unaligned
	cmp	r3, #0
	beq	.L12792
	ldr	r3, [r0, #8]
	ldr	r3, [r3]
	blx	r3
	subs	r5, r0, #0
	bne	.L12786
	ldr	r3, [r4, #80]
	str	r6, [r3]
	ldr	r0, [r4, #84]
	ldr	r1, [r0, #28]
	ldrh	r3, [r1, #4]	@ unaligned
	cmp	r3, #0
	beq	.L12793
	ldr	r3, [r0, #8]
	ldr	r3, [r3]
	blx	r3
	subs	r5, r0, #0
	bne	.L12788
	ldr	r3, [r4, #84]
	str	r6, [r3]
	ldr	r3, [r6, #108]
	cmp	r3, #0
	bne	.L12800
.L12782:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L12800:
	mov	r0, r6
	bl	gsdio_start_io
	ldr	r3, [r4, #128]
	cmp	r3, #0
	beq	.L12782
	mov	r0, r4
	ldr	r1, [r6, #172]
	blx	r3
	b	.L12782
.L12793:
	mvn	r5, #21
.L12788:
	movw	r0, #:lower16:.LC682
	mov	r2, r5
	ldr	r1, .L12801
	movt	r0, #:upper16:.LC682
	bl	printk
	ldr	r0, [r4, #80]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	mov	r3, #0
	str	r3, [r6, #96]
	ldr	r2, [r4, #80]
	str	r3, [r2]
	b	.L12782
.L12792:
	mvn	r5, #21
.L12786:
	movw	r0, #:lower16:.LC682
	ldr	r1, .L12801
	mov	r2, r5
	movt	r0, #:upper16:.LC682
	bl	printk
	mov	r3, #0
	str	r3, [r6, #96]
	b	.L12782
.L12799:
	movw	r0, #:lower16:.LC97
	ldr	r1, .L12801
	mvn	r5, #21
	movt	r0, #:upper16:.LC97
	bl	printk
	b	.L12782
.L12798:
	movw	r0, #:lower16:.LC96
	mov	r2, r1
	ldr	r1, .L12801
	movt	r0, #:upper16:.LC96
	mvn	r5, #21
	bl	printk
	b	.L12782
.L12802:
	.align	2
.L12801:
	.word	.LANCHOR5-3340
	.fnend
	.size	gsdio_connect, .-gsdio_connect
	.align	2
	.global	gsdio_disconnect
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_disconnect, %function
gsdio_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r2, #:lower16:.LANCHOR0
	movt	r2, #:upper16:.LANCHOR0
	ldr	r3, [r2, #2040]
	cmp	r1, r3
	bcs	.L12819
	cmp	r0, #0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	beq	.L12820
	mov	r3, #108
	mov	r6, #0
	ldr	r0, [r2, #2036]
	mla	r1, r3, r1, r2
	ldr	r4, [r1, #2068]
	add	r1, r4, #80
	add	r7, r4, #4
	str	r6, [r4, #176]
	bl	queue_work
	mov	r0, r7
	add	r8, r4, #12
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	mov	r0, r7
	str	r6, [r4, #96]
	str	r6, [r4, #180]
	str	r6, [r4, #184]
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, [r5, #84]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r5, #84]
	str	r6, [r3]
	ldr	r0, [r5, #80]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r5, #80]
	mov	r0, r7
	str	r6, [r3]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #12]
	mov	r6, r0
	ldr	fp, [r5, #84]
	cmp	r8, r3
	beq	.L12806
	mov	r10, #256
	mov	r9, #512
.L12807:
	ldm	r3, {r0, r2}
	mov	r1, r3
	str	r2, [r0, #4]
	str	r0, [r2]
	str	r10, [r3]
	str	r9, [r3, #4]
	ldr	r0, [r1, #-36]!
	str	r1, [sp]
	str	r1, [sp, #4]
	bl	kfree
	ldr	r3, [fp, #8]
	mov	r0, fp
	ldr	r1, [sp]
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, [r4, #12]
	cmp	r8, r3
	bne	.L12807
	ldr	fp, [r5, #84]
.L12806:
	ldr	r3, [r4, #20]
	add	r8, r4, #20
	cmp	r8, r3
	beq	.L12811
	mov	r9, #256
.L12808:
	ldrd	r0, [r3]
	mov	r2, #512
	mov	r10, r3
	str	r1, [r0, #4]
	str	r0, [r1]
	str	r9, [r3]
	str	r2, [r3, #4]
	ldr	r0, [r10, #-36]!
	bl	kfree
	ldr	r3, [fp, #8]
	mov	r0, fp
	mov	r1, r10
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, [r4, #20]
	cmp	r8, r3
	bne	.L12808
.L12811:
	ldr	r3, [r4, #52]
	add	fp, r4, #52
	ldr	r8, [r5, #80]
	cmp	fp, r3
	beq	.L12810
	mov	r10, #256
	mov	r9, #512
.L12809:
	ldm	r3, {r1, r2}
	mov	r5, r3
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r10, [r3]
	str	r9, [r3, #4]
	ldr	r0, [r5, #-36]!
	bl	kfree
	ldr	r3, [r8, #8]
	mov	r0, r8
	mov	r1, r5
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, [r4, #52]
	cmp	fp, r3
	bne	.L12809
.L12810:
	mov	r3, #0
	mov	r1, r6
	mov	r0, r7
	str	r3, [r4, #8]
	str	r3, [r4, #44]
	str	r3, [r4, #48]
	str	r3, [r4, #76]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L12819:
	movw	r0, #:lower16:.LC96
	mov	r2, r1
	ldr	r1, .L12821
	movt	r0, #:upper16:.LC96
	b	printk
.L12820:
	ldr	r1, .L12821
	movw	r0, #:lower16:.LC97
	movt	r0, #:upper16:.LC97
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	printk
.L12822:
	.align	2
.L12821:
	.word	.LANCHOR5-3324
	.fnend
	.size	gsdio_disconnect, .-gsdio_disconnect
	.section	.rodata.str1.4
	.align	2
.LC683:
	.ascii	"<3>%s: invalid number of ports count:%d max_ports:%"
	.ascii	"d\012\000"
	.align	2
.LC684:
	.ascii	"<3>%s: unable to create workqueue gsdio_wq\012\000"
	.align	2
.LC685:
	.ascii	"&sdio_ports[i].lock\000"
	.align	2
.LC686:
	.ascii	"<3>%s: sdio logical port allocation failed\012\000"
	.text
	.align	2
	.global	gsdio_setup
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_setup, %function
gsdio_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	sub	r3, r1, #1
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	cmp	r3, #1
	strd	r6, [sp, #8]
	mov	r6, r1
	strd	r8, [sp, #16]
	str	lr, [sp, #24]
	.pad #20
	sub	sp, sp, #20
	bhi	.L12835
	mov	r4, #0
	mvn	r2, #127
	mov	r1, #37
	mov	ip, #8
	movw	r0, #:lower16:.LC668
	mov	r3, r4
	str	r4, [sp]
	movt	r0, #:upper16:.LC668
	strb	r2, [sp, #9]
	mov	r2, #1
	strb	r1, [sp, #10]
	mov	r1, #10
	movw	r5, #:lower16:.LANCHOR0
	strb	r4, [sp, #11]
	movt	r5, #:upper16:.LANCHOR0
	strb	r4, [sp, #12]
	strb	ip, [sp, #13]
	strb	r4, [sp, #14]
	strb	r4, [sp, #15]
	bl	__alloc_workqueue_key
	cmp	r0, r4
	str	r0, [r5, #2036]
	beq	.L12836
	ldr	r9, .L12838
	movw	r1, #:lower16:.LC685
	ldr	r8, .L12838+4
	movt	r1, #:upper16:.LC685
	ldr	r7, .L12838+8
	mov	r2, r9
	mov	r0, r8
	bl	__mutex_init
	add	r1, sp, #9
	mov	r0, r4
	sub	r2, r7, #8
	bl	gsdio_port_alloc
	ldr	r3, [r5, #2040]
	subs	r4, r0, #0
	add	r2, r3, #1
	str	r2, [r5, #2040]
	bne	.L12827
	cmp	r6, #2
	bne	.L12823
	movw	r1, #:lower16:.LC685
	mov	r2, r9
	add	r0, r8, #108
	movt	r1, #:upper16:.LC685
	bl	__mutex_init
	add	r1, sp, #9
	add	r2, r7, #4
	mov	r0, #1
	bl	gsdio_port_alloc
	ldr	r3, [r5, #2040]
	cmp	r0, #0
	add	r2, r3, #1
	str	r2, [r5, #2040]
	bne	.L12837
.L12823:
	mov	r0, r4
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L12835:
	movw	r0, #:lower16:.LC683
	mov	r2, r1
	ldr	r1, .L12838+12
	movt	r0, #:upper16:.LC683
	mov	r3, #2
	mvn	r4, #21
	bl	printk
	b	.L12823
.L12837:
	mov	r4, r0
.L12827:
	movw	r0, #:lower16:.LC686
	ldr	r1, .L12838+12
	mov	r6, #0
	movt	r0, #:upper16:.LC686
	str	r3, [r5, #2040]
	bl	printk
.L12829:
	ldr	r3, [r5, #2040]
	cmp	r3, r6
	bhi	.L12830
	ldr	r0, [r5, #2036]
	bl	destroy_workqueue
	b	.L12823
.L12836:
	movw	r0, #:lower16:.LC684
	ldr	r1, .L12838+12
	mvn	r4, #11
	movt	r0, #:upper16:.LC684
	bl	printk
	b	.L12823
.L12830:
	mov	r0, r6
	add	r6, r6, #1
	bl	gsdio_port_free
	b	.L12829
.L12839:
	.align	2
.L12838:
	.word	.LANCHOR3-4036
	.word	.LANCHOR0+2044
	.word	.LANCHOR4-1040
	.word	.LANCHOR5-3304
	.fnend
	.size	gsdio_setup, .-gsdio_setup
	.section	.rodata.str1.4
	.align	2
.LC687:
	.ascii	"<3>%s: Invalid port no#%d\000"
	.text
	.align	2
	.global	gsmd_connect
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_connect, %function
gsmd_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	movw	r7, #:lower16:.LANCHOR0
	movt	r7, #:upper16:.LANCHOR0
	str	r8, [sp, #16]
	ldr	r3, [r7, #2904]
	str	lr, [sp, #20]
	cmp	r1, r3
	bcs	.L12851
	cmp	r0, #0
	mov	r5, r0
	beq	.L12852
	mov	r2, #108
	mla	r1, r2, r1, r7
	ldr	r6, [r1, #2932]
	add	r4, r6, #4
	mov	r0, r4
	bl	_raw_spin_lock_irqsave
	movw	r3, #:lower16:gsmd_notify_modem
	mov	r2, #0
	str	r5, [r6, #68]
	movt	r3, #:upper16:gsmd_notify_modem
	mov	r1, r0
	mov	r0, r4
	str	r3, [r5, #132]
	str	r2, [r6, #164]
	str	r2, [r6, #168]
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, [r5, #80]
	ldr	r1, [r0, #28]
	ldrh	r3, [r1, #4]	@ unaligned
	cmp	r3, #0
	beq	.L12848
	ldr	r3, [r0, #8]
	ldr	r3, [r3]
	blx	r3
	subs	r4, r0, #0
	bne	.L12844
	ldr	r3, [r5, #80]
	str	r6, [r3]
	ldr	r0, [r5, #84]
	ldr	r1, [r0, #28]
	ldrh	r3, [r1, #4]	@ unaligned
	cmp	r3, #0
	beq	.L12849
	ldr	r3, [r0, #8]
	ldr	r3, [r3]
	blx	r3
	subs	r4, r0, #0
	bne	.L12846
	ldr	r3, [r5, #84]
	add	r1, r6, #76
	mov	r2, r4
	ldr	r0, [r7, #2260]
	str	r6, [r3]
	bl	queue_delayed_work
.L12840:
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L12851:
	movw	r0, #:lower16:.LC687
	mov	r2, r1
	ldr	r1, .L12853
	movt	r0, #:upper16:.LC687
	mvn	r4, #21
	bl	printk
	b	.L12840
.L12849:
	mvn	r4, #21
.L12846:
	movw	r0, #:lower16:.LC197
	ldr	r1, .L12853
	movt	r0, #:upper16:.LC197
	ldr	r2, [r5, #84]
	bl	printk
	mov	r3, #0
	str	r3, [r6, #68]
	ldr	r2, [r5, #80]
	str	r3, [r2]
	b	.L12840
.L12848:
	mvn	r4, #21
.L12844:
	movw	r0, #:lower16:.LC196
	ldr	r1, .L12853
	movt	r0, #:upper16:.LC196
	ldr	r2, [r5, #80]
	bl	printk
	mov	r3, #0
	str	r3, [r6, #68]
	b	.L12840
.L12852:
	movw	r0, #:lower16:.LC97
	ldr	r1, .L12853
	mvn	r4, #21
	movt	r0, #:upper16:.LC97
	bl	printk
	b	.L12840
.L12854:
	.align	2
.L12853:
	.word	.LANCHOR5-3292
	.fnend
	.size	gsmd_connect, .-gsmd_connect
	.align	2
	.global	gsmd_disconnect
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_disconnect, %function
gsmd_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	movw	r6, #:lower16:.LANCHOR0
	movt	r6, #:upper16:.LANCHOR0
	strd	r8, [sp, #16]
	ldr	r3, [r6, #2904]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #20
	sub	sp, sp, #20
	cmp	r1, r3
	bcs	.L12873
	cmp	r0, #0
	mov	r5, r0
	beq	.L12874
	mov	r2, #108
	mov	r8, #0
	mla	r1, r2, r1, r6
	ldr	r4, [r1, #2932]
	add	r7, r4, #4
	add	r9, r4, #12
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	mov	r0, r7
	str	r8, [r4, #68]
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, [r5, #84]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r5, #84]
	str	r8, [r3]
	ldr	r0, [r5, #80]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r5, #80]
	mov	r0, r7
	str	r8, [r3]
	bl	_raw_spin_lock_irqsave
	ldr	r2, [r4, #12]
	str	r0, [sp, #4]
	ldr	r8, [r5, #84]
	cmp	r9, r2
	beq	.L12858
	mov	fp, #256
	mov	r10, #512
.L12859:
	ldr	ip, [r2]
	mov	r1, r2
	ldr	r0, [r2, #4]
	str	r0, [ip, #4]
	str	ip, [r0]
	str	fp, [r2]
	str	r10, [r2, #4]
	ldr	r0, [r1, #-36]!
	str	r1, [sp, #8]
	str	r1, [sp, #12]
	bl	kfree
	ldr	r2, [r8, #8]
	mov	r0, r8
	ldr	r1, [sp, #8]
	ldr	r2, [r2, #12]
	blx	r2
	ldr	r2, [r4, #12]
	cmp	r9, r2
	bne	.L12859
	ldr	r8, [r5, #84]
.L12858:
	ldr	r2, [r4, #20]
	add	fp, r4, #20
	cmp	fp, r2
	beq	.L12863
	mov	r10, #256
	mov	r9, #512
.L12860:
	ldr	ip, [r2]
	mov	r1, r2
	ldr	r0, [r2, #4]
	str	r0, [ip, #4]
	str	ip, [r0]
	str	r10, [r2]
	str	r9, [r2, #4]
	ldr	r0, [r1, #-36]!
	str	r1, [sp, #8]
	str	r1, [sp, #12]
	bl	kfree
	ldr	r2, [r8, #8]
	mov	r0, r8
	ldr	r1, [sp, #8]
	ldr	r2, [r2, #12]
	blx	r2
	ldr	r2, [r4, #20]
	cmp	fp, r2
	bne	.L12860
.L12863:
	ldr	r3, [r4, #44]
	add	fp, r4, #44
	ldr	r9, [r5, #80]
	cmp	fp, r3
	beq	.L12862
	mov	r10, #256
	mov	r8, #512
.L12861:
	ldrd	r0, [r3]
	mov	r5, r3
	str	r1, [r0, #4]
	str	r0, [r1]
	str	r10, [r3]
	str	r8, [r3, #4]
	ldr	r0, [r5, #-36]!
	bl	kfree
	ldr	r3, [r9, #8]
	mov	r0, r9
	mov	r1, r5
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, [r4, #44]
	cmp	fp, r3
	bne	.L12861
.L12862:
	mov	r5, #0
	mov	r0, r7
	ldr	r1, [sp, #4]
	str	r5, [r4, #8]
	bl	_raw_spin_unlock_irqrestore
	ldr	r1, [r4, #72]
	mov	r0, r5
	add	r1, r1, #8
	bl	_test_and_clear_bit
	cmp	r0, r5
	bne	.L12875
.L12865:
	ldr	r3, [r4, #72]
	ldr	r3, [r3]
	cmp	r3, #0
	beq	.L12855
	ldr	r0, [r6, #2260]
	add	r1, r4, #124
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	queue_work
.L12855:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L12875:
	ldr	r3, [r4, #72]
	mov	r1, r5
	mvn	r2, #0
	str	r5, [r4, #156]
	ldr	r0, [r3]
	bl	smd_tiocmset
	b	.L12865
.L12874:
	ldr	r1, .L12876
	movw	r0, #:lower16:.LC97
	movt	r0, #:upper16:.LC97
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	printk
.L12873:
	mov	r2, r1
	ldr	r1, .L12876
	movw	r0, #:lower16:.LC96
	movt	r0, #:upper16:.LC96
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	printk
.L12877:
	.align	2
.L12876:
	.word	.LANCHOR5-3276
	.fnend
	.size	gsmd_disconnect, .-gsmd_disconnect
	.section	.rodata.str1.4
	.align	2
.LC688:
	.ascii	"<3>%s: Un-supported transport:%s\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acm_set_alt, %function
acm_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldrb	r2, [r0, #136]	@ zero_extendqisi2
	ldr	r3, [r0, #20]
	cmp	r2, r1
	ldr	r5, [r3, #24]
	beq	.L12912
	ldrb	r3, [r0, #137]	@ zero_extendqisi2
	cmp	r3, r1
	bne	.L12884
	ldr	r2, [r0, #80]
	ldr	r3, [r2]
	cmp	r3, #0
	beq	.L12885
	ldrb	r3, [r0, #138]	@ zero_extendqisi2
	movw	r2, #:lower16:.LANCHOR0
	ldr	ip, [r0, #140]
	movt	r2, #:upper16:.LANCHOR0
	add	r3, r3, r3, lsl #1
	sub	lr, ip, #1
	add	r2, r2, r3, lsl #2
	cmp	lr, #9
	ldr	r1, [r2, #368]
	bls	.L12913
	movw	r2, #:lower16:.LC364
	movt	r2, #:upper16:.LC364
.L12886:
	movw	r0, #:lower16:.LC688
	ldr	r1, .L12918
	movt	r0, #:upper16:.LC688
	bl	printk
	ldr	r2, [r4, #80]
.L12885:
	ldr	r3, [r2, #28]
	cmp	r3, #0
	beq	.L12889
.L12917:
	ldr	r3, [r4, #84]
	ldr	r3, [r3, #28]
	cmp	r3, #0
	beq	.L12889
.L12890:
	mov	r1, r4
	ldr	r0, [r5]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L12893
	mov	r1, r4
	ldr	r0, [r5]
	ldr	r2, [r4, #84]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L12893
	ldrb	r3, [r4, #138]	@ zero_extendqisi2
	movw	r2, #:lower16:.LANCHOR0
	ldr	r0, [r4, #140]
	movt	r2, #:upper16:.LANCHOR0
	add	r3, r3, r3, lsl #1
	sub	ip, r0, #1
	add	r2, r2, r3, lsl #2
	cmp	ip, #9
	ldr	r1, [r2, #368]
	bls	.L12914
	movw	r2, #:lower16:.LC364
	movt	r2, #:upper16:.LC364
.L12894:
	movw	r0, #:lower16:.LC365
	ldr	r1, .L12918+4
	movt	r0, #:upper16:.LC365
	bl	printk
.L12878:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L12914:
	movw	r3, #:lower16:.LANCHOR2
	cmp	r0, #2
	movt	r3, #:upper16:.LANCHOR2
	add	r3, r3, ip, lsl #2
	ldr	r2, [r3, #2460]
	beq	.L12895
	cmp	r0, #3
	bne	.L12915
	uxtb	r1, r1
	mov	r0, r4
	bl	gsmd_connect
	b	.L12878
.L12915:
	cmp	r0, #1
	bne	.L12894
	uxtb	r1, r1
	mov	r0, r4
	bl	gserial_connect
	b	.L12878
.L12895:
	uxtb	r1, r1
	mov	r0, r4
	bl	gsdio_connect
	b	.L12878
.L12913:
	movw	r3, #:lower16:.LANCHOR2
	cmp	ip, #2
	movt	r3, #:upper16:.LANCHOR2
	add	r3, r3, lr, lsl #2
	ldr	r2, [r3, #2460]
	beq	.L12887
	cmp	ip, #3
	bne	.L12916
	uxtb	r1, r1
	bl	gsmd_disconnect
	ldr	r2, [r4, #80]
	ldr	r3, [r2, #28]
	cmp	r3, #0
	bne	.L12917
.L12889:
	mov	r1, r4
	ldr	r0, [r5]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L12893
	mov	r1, r4
	ldr	r0, [r5]
	ldr	r2, [r4, #84]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L12893
	ldr	r2, [r4, #80]
	b	.L12890
.L12916:
	cmp	ip, #1
	bne	.L12886
	bl	gserial_disconnect
	ldr	r2, [r4, #80]
	b	.L12885
.L12912:
	ldr	r2, [r0, #152]
	ldr	r3, [r2]
	cmp	r3, #0
	beq	.L12880
	ldr	r3, [r2, #8]
	mov	r0, r2
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [r4, #152]
.L12880:
	mov	r1, r4
	ldr	r0, [r5]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L12884
	ldr	r0, [r4, #152]
	ldr	r1, [r0, #28]
	ldrh	r3, [r1, #4]	@ unaligned
	cmp	r3, #0
	beq	.L12883
	ldr	r3, [r0, #8]
	ldr	r3, [r3]
	blx	r3
	ldr	r0, [r4, #152]
.L12883:
	str	r4, [r0]
	b	.L12878
.L12887:
	uxtb	r1, r1
	bl	gsdio_disconnect
	ldr	r2, [r4, #80]
	b	.L12885
.L12893:
	ldr	r2, [r4, #80]
	mov	r3, #0
	mvn	r5, #21
	str	r3, [r2, #28]
	ldr	r2, [r4, #84]
	str	r3, [r2, #28]
	b	.L12878
.L12884:
	mvn	r5, #21
	b	.L12878
.L12919:
	.align	2
.L12918:
	.word	.LANCHOR5-3260
	.word	.LANCHOR5-3240
	.fnend
	.size	acm_set_alt, .-acm_set_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acm_disable, %function
acm_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r2, #:lower16:.LANCHOR0
	mov	r4, r0
	str	lr, [sp, #4]
	ldrb	r3, [r0, #138]	@ zero_extendqisi2
	movt	r2, #:upper16:.LANCHOR0
	ldr	ip, [r0, #140]
	add	r3, r3, r3, lsl #1
	sub	lr, ip, #1
	add	r2, r2, r3, lsl #2
	cmp	lr, #9
	ldr	r1, [r2, #368]
	bls	.L12927
	movw	r2, #:lower16:.LC364
	movt	r2, #:upper16:.LC364
.L12921:
	movw	r0, #:lower16:.LC688
	ldr	r1, .L12929
	movt	r0, #:upper16:.LC688
	bl	printk
.L12924:
	ldr	r0, [r4, #152]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #152]
	mov	r2, #0
	str	r2, [r3]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L12927:
	movw	r3, #:lower16:.LANCHOR2
	cmp	ip, #2
	movt	r3, #:upper16:.LANCHOR2
	add	r3, r3, lr, lsl #2
	ldr	r2, [r3, #2460]
	beq	.L12922
	cmp	ip, #3
	bne	.L12928
	uxtb	r1, r1
	bl	gsmd_disconnect
	b	.L12924
.L12928:
	cmp	ip, #1
	bne	.L12921
	bl	gserial_disconnect
	b	.L12924
.L12922:
	uxtb	r1, r1
	bl	gsdio_disconnect
	b	.L12924
.L12930:
	.align	2
.L12929:
	.word	.LANCHOR5-3260
	.fnend
	.size	acm_disable, .-acm_disable
	.section	.rodata.str1.4
	.align	2
.LC689:
	.ascii	"<3>%s: Invalid num of ports count:%d gadget:%pK\012"
	.ascii	"\000"
	.align	2
.LC690:
	.ascii	"k_gsmd\000"
	.align	2
.LC691:
	.ascii	"<3>%s: Unable to create workqueue gsmd_wq\012\000"
	.align	2
.LC692:
	.ascii	"&smd_ports[i].lock\000"
	.text
	.align	2
	.global	gsmd_setup
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_setup, %function
gsmd_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	sub	r2, r1, #1
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	cmp	r2, #1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #36
	sub	sp, sp, #36
	str	r1, [sp, #12]
	bhi	.L12943
	mov	r6, #0
	movw	r0, #:lower16:.LC690
	mov	r3, r6
	movt	r0, #:upper16:.LC690
	mov	r2, #1
	mov	r1, #10
	str	r6, [sp]
	bl	__alloc_workqueue_key
	movw	r9, #:lower16:.LANCHOR0
	cmp	r0, r6
	movt	r9, #:upper16:.LANCHOR0
	str	r0, [r9, #2260]
	beq	.L12944
	ldr	r5, .L12946
	movw	fp, #:lower16:kmalloc_caches
	movw	r3, #:lower16:.LC692
	ldr	r10, .L12946+4
	movw	r2, #:lower16:gsmd_rx_push
	movw	r1, #:lower16:gsmd_tx_pull
	movt	r3, #:upper16:.LC692
	movt	r2, #:upper16:gsmd_rx_push
	movt	r1, #:upper16:gsmd_tx_pull
	movt	fp, #:upper16:kmalloc_caches
	str	r3, [sp, #16]
	str	r2, [sp, #20]
	str	r1, [sp, #24]
	str	r5, [sp, #28]
.L12937:
	ldr	r3, .L12946+8
	mov	r0, r5
	mov	r7, #0
	ldr	r1, [sp, #16]
	mov	r8, #2560
	mov	r4, #16
	sub	r2, r3, #4
	bl	__mutex_init
	ldr	r0, [fp, #8]
	movw	r1, #32976
	ldr	r3, [r9, #2904]
	cmp	r0, r7
	add	r3, r3, #1
	str	r3, [r9, #2904]
	beq	.L12935
	bl	kmem_cache_alloc
	subs	r4, r0, #0
	beq	.L12945
.L12935:
	add	ip, r4, #32
	add	r1, r4, #12
	str	r6, [r4]
	movw	r3, #:lower16:gsmd_connect_work
	add	lr, r4, #20
	str	r7, [r4, #4]
	movt	r3, #:upper16:gsmd_connect_work
	add	r2, r4, #44
	str	r1, [r4, #12]
	str	ip, [r4, #32]
	add	r0, r4, #80
	add	r6, r6, #1
	str	ip, [r4, #36]
	ldr	ip, [sp, #20]
	str	r1, [r4, #16]
	add	r1, r4, #56
	str	lr, [r4, #20]
	str	lr, [r4, #24]
	str	r8, [r4, #28]
	str	ip, [r4, #40]
	ldr	ip, [sp, #24]
	str	r2, [r4, #44]
	str	r2, [r4, #48]
	mov	r2, r7
	str	r8, [r4, #52]
	str	r1, [r4, #56]
	str	r1, [r4, #60]
	mov	r1, r7
	str	ip, [r4, #64]
	str	r10, [r4, #72]
	add	r10, r10, #12
	str	r8, [r4, #76]
	str	r0, [r4, #80]
	str	r0, [r4, #84]
	add	r0, r4, #92
	str	r3, [r4, #88]
	bl	init_timer_key
	movw	r1, #:lower16:delayed_work_timer_fn
	movw	r0, #:lower16:gsmd_disconnect_work
	str	r8, [r4, #124]
	movt	r1, #:upper16:delayed_work_timer_fn
	movw	r2, #:lower16:gsmd_ch_probe
	movw	r3, #:lower16:gsmd_ch_remove
	movt	r0, #:upper16:gsmd_disconnect_work
	movt	r2, #:upper16:gsmd_ch_probe
	movt	r3, #:upper16:gsmd_ch_remove
	str	r1, [r4, #108]
	add	ip, r4, #76
	add	r1, r4, #128
	str	ip, [r4, #112]
	str	r1, [r4, #128]
	str	r1, [r4, #132]
	str	r0, [r4, #136]
	add	r0, r5, #28
	str	r4, [r5, #24]
	strd	r2, [r5, #28]
	ldr	r3, [r4, #72]
	add	r5, r5, #108
	ldr	r3, [r3, #4]
	str	r3, [r5, #-60]
	str	r7, [r5, #-52]
	bl	platform_driver_register
	ldr	r3, [sp, #12]
	cmp	r6, r3
	bne	.L12937
	mov	r0, r7
.L12931:
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L12945:
	ldr	r3, [r9, #2904]
	movw	r0, #:lower16:.LC578
	mov	r2, r6
	ldr	r1, .L12946+12
	movt	r0, #:upper16:.LC578
	sub	r3, r3, #1
	str	r3, [r9, #2904]
	bl	printk
	ldr	r5, [sp, #28]
.L12936:
	ldr	r3, [r9, #2904]
	cmp	r3, r4
	bhi	.L12939
	ldr	r0, [r9, #2260]
	bl	destroy_workqueue
	mvn	r0, #11
	b	.L12931
.L12944:
	movw	r0, #:lower16:.LC691
	ldr	r1, .L12946+12
	movt	r0, #:upper16:.LC691
	bl	printk
	mvn	r0, #11
	b	.L12931
.L12943:
	mov	r3, r0
	movw	r0, #:lower16:.LC689
	ldr	r1, .L12946+12
	movt	r0, #:upper16:.LC689
	ldr	r2, [sp, #12]
	bl	printk
	mvn	r0, #21
	b	.L12931
.L12939:
	ldr	r0, [r5, #24]
	cmp	r0, #0
	bne	.L12938
	bl	kfree
.L12938:
	add	r4, r4, #1
	add	r5, r5, #108
	b	.L12936
.L12947:
	.align	2
.L12946:
	.word	.LANCHOR0+2908
	.word	.LANCHOR4-1024
	.word	.LANCHOR3-4032
	.word	.LANCHOR5-3220
	.fnend
	.size	gsmd_setup, .-gsmd_setup
	.align	2
	.global	gsmd_cleanup
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_cleanup, %function
gsmd_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	bx	lr
	.fnend
	.size	gsmd_cleanup, .-gsmd_cleanup
	.align	2
	.global	gbam_data_recv_cb
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_data_recv_cb, %function
gbam_data_recv_cb:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	subs	r5, r1, #0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	beq	.L12949
	add	r7, r0, #8
	mov	r4, r0
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #12]
	mov	r6, r0
	cmp	r3, #0
	beq	.L12953
	movw	r3, #:lower16:.LANCHOR1
	ldr	r2, [r4, #44]
	movt	r3, #:upper16:.LANCHOR1
	ldr	r3, [r3, #1380]
	cmp	r2, r3
	bhi	.L12958
	ldr	r3, [r4, #40]
	add	r2, r4, #36
	mov	r1, r0
	mov	r0, r7
	strd	r2, [r5]
	str	r5, [r3]
	ldr	r3, [r4, #44]
	str	r5, [r4, #40]
	add	r3, r3, #1
	str	r3, [r4, #44]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	gbam_write_data_tohost
.L12958:
	ldr	r3, [r4, #244]
	ldr	r0, .L12960
	add	r3, r3, #1
	str	r3, [r4, #244]
	bl	__printk_ratelimit
	cmp	r0, #0
	bne	.L12959
.L12953:
	mov	r0, r7
	mov	r1, r6
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	dev_kfree_skb_any
.L12949:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L12959:
	movw	r0, #:lower16:.LC363
	ldr	r1, .L12960
	movt	r0, #:upper16:.LC363
	ldr	r2, [r4, #244]
	bl	printk
	b	.L12953
.L12961:
	.align	2
.L12960:
	.word	.LANCHOR2+2440
	.fnend
	.size	gbam_data_recv_cb, .-gbam_data_recv_cb
	.align	2
	.global	gbam_data_write_done
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_data_write_done, %function
gbam_data_write_done:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	subs	r0, r1, #0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	beq	.L12962
	add	r5, r4, #4
	bl	dev_kfree_skb_any
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #240]
	mov	r1, r0
	mov	r0, r5
	sub	r3, r3, #1
	str	r3, [r4, #240]
	bl	_raw_spin_unlock_irqrestore
	movw	r3, #:lower16:.LANCHOR0
	add	r1, r4, #80
	ldrd	r4, [sp]
	movt	r3, #:upper16:.LANCHOR0
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	ldr	r0, [r3, #2796]
	b	queue_work
.L12962:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	gbam_data_write_done, .-gbam_data_write_done
	.section	.rodata.str1.4
	.align	2
.LC693:
	.ascii	"<3>%s: invalid bam portno#%d\012\000"
	.align	2
.LC694:
	.ascii	"<3>%s: usb_bam_client_ready failed\012\000"
	.text
	.align	2
	.global	gbam_disconnect
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_disconnect, %function
gbam_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r2, #5
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r2
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	mov	r8, r1
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	beq	.L12995
	sub	r3, r2, #6
	cmp	r3, #1
	bhi	.L12968
	movw	r3, #:lower16:.LANCHOR3
	movt	r3, #:upper16:.LANCHOR3
	ldr	r3, [r3, #-4036]
	cmp	r1, r3
	bge	.L12996
.L12968:
	cmp	r4, #0
	beq	.L12975
	movw	r6, #:lower16:.LANCHOR0
	movt	r6, #:upper16:.LANCHOR0
	add	r3, r6, r8, lsl #2
	ldr	r7, [r3, #3696]
	str	r4, [r7, #16]
.L12970:
	add	r10, r7, #4
	mov	r9, #0
	mov	r0, r10
	add	fp, r7, #8
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	mov	r0, fp
	str	r1, [sp, #4]
	bl	_raw_spin_lock
	mov	r0, fp
	str	r9, [r7, #12]
	str	r9, [r6, #2792]
	bl	_raw_spin_unlock
	mov	r0, r10
	ldr	r1, [sp, #4]
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, [r4, #80]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #76]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #76]
	bic	r2, r5, #2
	cmp	r2, #5
	str	r9, [r3]
	ldr	r3, [r4, #80]
	str	r9, [r3]
	beq	.L12997
	cmp	r5, #6
	cmpeq	r8, #0
	beq	.L12998
.L12965:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L12995:
	movw	r6, #:lower16:.LANCHOR0
	movt	r6, #:upper16:.LANCHOR0
	ldr	r3, [r6, #3124]
	cmp	r1, r3
	bge	.L12999
	cmp	r0, #0
	beq	.L12975
	mov	r3, #84
	mla	r3, r3, r8, r6
	ldr	r7, [r3, #3128]
	mov	r0, r7
	str	r4, [r7, #16]
	bl	gbam_free_buffers
	b	.L12970
.L12997:
	ldr	r0, [r6, #2796]
	add	r1, r7, #300
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	queue_work
.L12998:
	mov	r0, r9
	bl	usb_bam_client_ready
	cmp	r0, #0
	beq	.L12965
	ldr	r1, .L13000
	movw	r0, #:lower16:.LC694
	movt	r0, #:upper16:.LC694
.L12994:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	printk
.L12975:
	movw	r0, #:lower16:.LC569
	ldr	r1, .L13000
	movt	r0, #:upper16:.LC569
	b	.L12994
.L12996:
	mov	r2, r1
	ldr	r1, .L13000
	movw	r0, #:lower16:.LC388
	movt	r0, #:upper16:.LC388
.L12993:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	printk
.L12999:
	movw	r0, #:lower16:.LC693
	mov	r2, r1
	ldr	r1, .L13000
	movt	r0, #:upper16:.LC693
	b	.L12993
.L13001:
	.align	2
.L13000:
	.word	.LANCHOR5-3208
	.fnend
	.size	gbam_disconnect, .-gbam_disconnect
	.align	2
	.global	gbam_connect
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_connect, %function
gbam_connect:
	.fnstart
	@ args = 4, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	cmp	r2, #5
	strd	r6, [sp, #8]
	mov	r7, r2
	mov	r6, r0
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	ldrb	ip, [sp, #48]	@ zero_extendqisi2
	stm	sp, {r3, ip}
	beq	.L13034
	sub	r3, r2, #6
	cmp	r3, #1
	bhi	.L13006
	movw	r3, #:lower16:.LANCHOR3
	movt	r3, #:upper16:.LANCHOR3
	ldr	r3, [r3, #-4036]
	cmp	r1, r3
	bge	.L13033
.L13006:
	cmp	r6, #0
	beq	.L13016
	movw	r8, #:lower16:.LANCHOR0
	movt	r8, #:upper16:.LANCHOR0
	add	r1, r8, r1, lsl #2
	ldr	r4, [r1, #3696]
.L13008:
	ldr	r0, [r6, #76]
	ldr	r1, [r0, #28]
	ldrh	r3, [r1, #4]	@ unaligned
	cmp	r3, #0
	beq	.L13019
	ldr	r3, [r0, #8]
	ldr	r3, [r3]
	blx	r3
	subs	r5, r0, #0
	bne	.L13009
	ldr	r3, [r6, #76]
	str	r4, [r3]
	ldr	r0, [r6, #80]
	ldr	r1, [r0, #28]
	ldrh	r3, [r1, #4]	@ unaligned
	cmp	r3, #0
	beq	.L13020
	ldr	r3, [r0, #8]
	ldr	r3, [r3]
	blx	r3
	subs	r5, r0, #0
	bne	.L13011
	ldr	r1, [r6, #80]
	add	r9, r4, #4
	add	r10, r4, #8
	mov	r0, r9
	str	r4, [r1]
	bl	_raw_spin_lock_irqsave
	mov	fp, r0
	mov	r0, r10
	bl	_raw_spin_lock
	cmp	r7, #5
	mov	r0, r10
	str	r6, [r4, #12]
	beq	.L13035
	bl	_raw_spin_unlock
	mov	r1, fp
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore
	cmp	r7, #6
	bne	.L13015
	ldr	r3, [sp]
	str	r6, [r4, #16]
	strb	r3, [r4, #128]
	ldr	r3, [sp, #4]
	strb	r3, [r4, #129]
.L13014:
	add	r1, r4, #284
	str	r7, [r4, #132]
	ldr	r0, [r8, #2796]
	bl	queue_work
.L13002:
	mov	r0, r5
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L13015:
	cmp	r7, #7
	bne	.L13014
	ldr	r1, [sp]
	add	r2, r4, #120
	add	r3, r4, #124
	str	r6, [r4, #16]
	strb	r1, [r4, #136]
	ldr	r1, [sp, #4]
	strd	r2, [r4, #140]
	strb	r1, [r4, #137]
	b	.L13014
.L13034:
	movw	r8, #:lower16:.LANCHOR0
	movt	r8, #:upper16:.LANCHOR0
	ldr	r3, [r8, #3124]
	cmp	r1, r3
	bge	.L13033
	cmp	r0, #0
	beq	.L13016
	mov	r2, #84
	mla	r1, r2, r1, r8
	ldr	r4, [r1, #3128]
	b	.L13008
.L13035:
	str	r5, [r4, #240]
	str	r5, [r4, #244]
	str	r5, [r4, #248]
	str	r5, [r4, #260]
	str	r5, [r4, #264]
	str	r5, [r4, #268]
	str	r5, [r4, #272]
	str	r5, [r4, #276]
	str	r5, [r4, #280]
	bl	_raw_spin_unlock
	mov	r1, fp
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore
	b	.L13014
.L13033:
	movw	r0, #:lower16:.LC96
	mov	r2, r1
	ldr	r1, .L13036
	movt	r0, #:upper16:.LC96
	mvn	r5, #18
	bl	printk
	b	.L13002
.L13020:
	mvn	r5, #21
.L13011:
	movw	r0, #:lower16:.LC197
	ldr	r1, .L13036
	movt	r0, #:upper16:.LC197
	ldr	r2, [r6, #80]
	bl	printk
	ldr	r3, [r6, #76]
	mov	r2, #0
	str	r2, [r3]
	b	.L13002
.L13019:
	mvn	r5, #21
.L13009:
	movw	r0, #:lower16:.LC196
	ldr	r1, .L13036
	movt	r0, #:upper16:.LC196
	ldr	r2, [r6, #76]
	bl	printk
	b	.L13002
.L13016:
	movw	r0, #:lower16:.LC569
	ldr	r1, .L13036
	mvn	r5, #18
	movt	r0, #:upper16:.LC569
	bl	printk
	b	.L13002
.L13037:
	.align	2
.L13036:
	.word	.LANCHOR5-3192
	.fnend
	.size	gbam_connect, .-gbam_connect
	.section	.rodata.str1.4
	.align	2
.LC695:
	.ascii	"<3>%s: Invalid num of ports count:%d,%d\012\000"
	.align	2
.LC696:
	.ascii	"k_gbam\000"
	.align	2
.LC697:
	.ascii	"<3>%s: Unable to create workqueue gbam_wq\012\000"
	.text
	.align	2
	.global	gbam_setup
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_setup, %function
gbam_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	orrs	r2, r0, r1
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #20
	sub	sp, sp, #20
	str	r1, [sp, #8]
	beq	.L13039
	cmp	r1, #3
	cmpls	r0, #1
	mov	r3, r1
	movhi	r3, #1
	movls	r3, #0
	bhi	.L13039
	movw	r0, #:lower16:.LC696
	mov	r2, #1
	str	r3, [sp]
	movt	r0, #:upper16:.LC696
	mov	r1, #10
	bl	__alloc_workqueue_key
	movw	r4, #:lower16:.LANCHOR0
	cmp	r0, #0
	movt	r4, #:upper16:.LANCHOR0
	str	r0, [r4, #2796]
	beq	.L13042
	cmp	r5, #0
	beq	.L13044
	movw	r5, #:lower16:kmalloc_caches
	ldr	r3, [r4, #3124]
	movt	r5, #:upper16:kmalloc_caches
	ldr	r0, [r5, #36]
	add	r3, r3, #1
	cmp	r0, #0
	str	r3, [r4, #3124]
	beq	.L13056
	movw	r1, #32976
	bl	kmem_cache_alloc
	subs	r2, r0, #0
	beq	.L13066
.L13045:
	add	fp, r2, #304
	movw	r9, #:lower16:gbam_data_write_tobam
	ldr	r0, .L13069
	movt	r9, #:upper16:gbam_data_write_tobam
	mov	r1, #2560
	str	r2, [r2, #76]
	movw	r7, #:lower16:gbam_connect_work
	movw	r6, #:lower16:gbam_disconnect_work
	str	fp, [r2, #308]
	add	fp, r2, #28
	movw	r8, #:lower16:gbam_write_data_tohost_w
	movw	r5, #:lower16:gbam_data_ch_probe
	movw	lr, #:lower16:gbam_data_ch_remove
	str	fp, [r2, #28]
	movw	ip, #:lower16:.LC182
	mov	r3, #0
	str	r9, [r2, #92]
	add	r9, r2, #36
	add	r10, r2, #288
	str	fp, [r2, #32]
	add	fp, r2, #52
	movt	r7, #:upper16:gbam_connect_work
	str	r1, [r2, #80]
	movt	r6, #:upper16:gbam_disconnect_work
	movt	r8, #:upper16:gbam_write_data_tohost_w
	str	r9, [r2, #36]
	movt	r5, #:upper16:gbam_data_ch_probe
	movt	lr, #:upper16:gbam_data_ch_remove
	str	r9, [r2, #40]
	add	r9, r2, #60
	movt	ip, #:upper16:.LC182
	str	r1, [r2, #96]
	str	fp, [r2, #52]
	str	fp, [r2, #56]
	add	fp, r2, #84
	str	r1, [r2, #284]
	str	r1, [r2, #300]
	ldr	r1, [r2, #308]
	str	r3, [r2]
	str	r9, [r2, #60]
	str	r9, [r2, #64]
	mov	r9, #8
	str	fp, [r2, #84]
	str	fp, [r2, #88]
	add	fp, r2, #100
	str	r3, [r2, #4]
	str	r3, [r2, #8]
	str	r3, [r2, #44]
	str	r3, [r2, #48]
	str	r3, [r2, #68]
	str	r3, [r2, #72]
	str	fp, [r2, #100]
	str	fp, [r2, #104]
	str	r8, [r2, #108]
	str	r10, [r2, #288]
	str	r10, [r2, #292]
	str	r7, [r2, #296]
	str	r1, [r2, #304]
	str	r6, [r2, #312]
	str	r9, [r2, #24]
	str	r2, [r4, #3128]
	str	r5, [r4, #3132]
	str	lr, [r4, #3136]
	str	ip, [r4, #3152]
	str	r3, [r4, #3160]
	bl	platform_driver_register
.L13044:
	ldr	r3, [sp, #8]
	cmp	r3, #0
	beq	.L13052
	movw	r3, #:lower16:gbam2bam_suspend_work
	ldr	r8, .L13069+4
	movw	r5, #:lower16:kmalloc_caches
	movw	r7, #:lower16:.LANCHOR3
	movw	r10, #:lower16:gbam2bam_connect_work
	str	r4, [sp, #12]
	movw	r9, #:lower16:gbam2bam_disconnect_work
	movt	r3, #:upper16:gbam2bam_suspend_work
	movt	r5, #:upper16:kmalloc_caches
	movt	r7, #:upper16:.LANCHOR3
	movt	r10, #:upper16:gbam2bam_connect_work
	movt	r9, #:upper16:gbam2bam_disconnect_work
	mov	r6, #0
	mov	r4, r3
.L13051:
	ldr	r2, [r7, #-4036]
	movw	r1, #32976
	mov	r3, #16
	ldr	r0, [r5, #36]
	add	r2, r2, #1
	cmp	r0, #0
	str	r2, [r7, #-4036]
	beq	.L13049
	bl	kmem_cache_alloc
	subs	r3, r0, #0
	beq	.L13067
.L13049:
	ldr	r2, [sp, #8]
	mov	r0, #0
	movw	r1, #:lower16:gbam2bam_resume_work
	str	r6, [r3]
	add	r6, r6, #1
	add	fp, r3, #288
	add	lr, r3, #304
	add	ip, r3, #320
	str	r0, [r3, #4]
	movt	r1, #:upper16:gbam2bam_resume_work
	str	r0, [r3, #8]
	add	r0, r3, #336
	cmp	r6, r2
	mov	r2, #2560
	str	r3, [r3, #76]
	str	r2, [r3, #284]
	str	fp, [r3, #288]
	str	fp, [r3, #292]
	str	r10, [r3, #296]
	str	r2, [r3, #300]
	str	lr, [r3, #304]
	str	lr, [r3, #308]
	str	r9, [r3, #312]
	str	r2, [r3, #316]
	str	ip, [r3, #320]
	str	ip, [r3, #324]
	str	r4, [r3, #328]
	str	r2, [r3, #332]
	str	r0, [r3, #336]
	str	r0, [r3, #340]
	str	r1, [r3, #344]
	str	r3, [r8], #4
	bne	.L13051
.L13052:
	mov	r0, #0
.L13038:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L13056:
	mov	r2, #16
	b	.L13045
.L13066:
	ldr	r3, [r4, #3124]
	movw	r0, #:lower16:.LC578
	movw	r7, #:lower16:.LANCHOR3
	ldr	r1, .L13069+8
	movt	r0, #:upper16:.LC578
	movt	r7, #:upper16:.LANCHOR3
	sub	r3, r3, #1
	str	r3, [r4, #3124]
	bl	printk
.L13053:
	ldr	r3, [r4, #3124]
	cmp	r3, #0
	bgt	.L13068
.L13046:
	ldr	r6, .L13069+4
	mov	r5, #0
.L13054:
	ldr	r3, [r7, #-4036]
	cmp	r3, r5
	bgt	.L13055
	ldr	r0, [r4, #2796]
	bl	destroy_workqueue
	mvn	r0, #11
	b	.L13038
.L13067:
	ldr	r3, [r7, #-4036]
	movw	r0, #:lower16:.LC578
	mov	r2, r6
	ldr	r1, .L13069+8
	movt	r0, #:upper16:.LC578
	ldr	r4, [sp, #12]
	sub	r3, r3, #1
	str	r3, [r7, #-4036]
	bl	printk
	b	.L13053
.L13042:
	movw	r0, #:lower16:.LC697
	ldr	r1, .L13069+8
	movt	r0, #:upper16:.LC697
	bl	printk
	mvn	r0, #11
	b	.L13038
.L13039:
	movw	r0, #:lower16:.LC695
	ldr	r1, .L13069+8
	mov	r2, r5
	movt	r0, #:upper16:.LC695
	ldr	r3, [sp, #8]
	bl	printk
	mvn	r0, #21
	b	.L13038
.L13068:
	ldr	r0, [r4, #3128]
	cmp	r0, #0
	beq	.L13046
	bl	kfree
	ldr	r0, .L13069
	bl	platform_driver_unregister
	b	.L13046
.L13055:
	ldr	r0, [r6], #4
	add	r5, r5, #1
	bl	kfree
	b	.L13054
.L13070:
	.align	2
.L13069:
	.word	.LANCHOR0+3132
	.word	.LANCHOR0+3696
	.word	.LANCHOR5-3176
	.fnend
	.size	gbam_setup, .-gbam_setup
	.align	2
	.global	gbam_cleanup
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_cleanup, %function
gbam_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	bx	lr
	.fnend
	.size	gbam_cleanup, .-gbam_cleanup
	.align	2
	.global	gbam_suspend
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_suspend, %function
gbam_suspend:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	sub	r2, r2, #6
	cmp	r2, #1
	bls	.L13074
	bx	lr
.L13074:
	movw	r3, #:lower16:.LANCHOR0
	movt	r3, #:upper16:.LANCHOR0
	add	r1, r3, r1, lsl #2
	ldr	r0, [r3, #2796]
	ldr	r1, [r1, #3696]
	add	r1, r1, #316
	b	queue_work
	.fnend
	.size	gbam_suspend, .-gbam_suspend
	.align	2
	.global	gbam_resume
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_resume, %function
gbam_resume:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	sub	r2, r2, #6
	cmp	r2, #1
	bls	.L13077
	bx	lr
.L13077:
	movw	r3, #:lower16:.LANCHOR0
	movt	r3, #:upper16:.LANCHOR0
	add	r1, r3, r1, lsl #2
	ldr	r0, [r3, #2796]
	ldr	r1, [r1, #3696]
	add	r1, r1, #332
	b	queue_work
	.fnend
	.size	gbam_resume, .-gbam_resume
	.align	2
	.global	gsmd_ctrl_connect
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_ctrl_connect, %function
gsmd_ctrl_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	uxtb	r3, r1
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	cmp	r3, #5
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bhi	.L13079
	movw	r5, #:lower16:.LANCHOR0
	mov	r2, #84
	movt	r5, #:upper16:.LANCHOR0
	mla	r3, r2, r3, r5
	ldr	r3, [r3, #2288]
	cmp	r3, #0
	beq	.L13079
	cmp	r0, #0
	mov	r4, r0
	beq	.L13088
	mla	r1, r2, r1, r5
	ldr	r6, [r1, #2288]
	add	r7, r6, #108
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	movw	r2, #:lower16:grmnet_ctrl_smd_send_cpkt_tomodem
	movw	r3, #:lower16:gsmd_ctrl_send_cbits_tomodem
	str	r4, [r6, #104]
	movt	r2, #:upper16:grmnet_ctrl_smd_send_cpkt_tomodem
	movt	r3, #:upper16:gsmd_ctrl_send_cbits_tomodem
	mov	r1, r0
	mov	r0, r7
	strd	r2, [r4, #88]
	bl	_raw_spin_unlock_irqrestore
	add	r1, r6, #112
	mov	r2, #0
	ldr	r0, [r5, #2280]
	bl	queue_delayed_work
	mov	r0, #0
.L13078:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L13079:
	movw	r0, #:lower16:.LC568
	mov	r2, r1
	ldr	r1, .L13089
	movt	r0, #:upper16:.LC568
	bl	printk
	mvn	r0, #18
	b	.L13078
.L13088:
	movw	r0, #:lower16:.LC569
	ldr	r1, .L13089
	movt	r0, #:upper16:.LC569
	bl	printk
	mvn	r0, #18
	b	.L13078
.L13090:
	.align	2
.L13089:
	.word	.LANCHOR5-4036
	.fnend
	.size	gsmd_ctrl_connect, .-gsmd_ctrl_connect
	.align	2
	.global	gsmd_ctrl_disconnect
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_ctrl_disconnect, %function
gsmd_ctrl_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #5
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	bhi	.L13092
	movw	r8, #:lower16:.LANCHOR0
	mov	r3, #84
	movt	r8, #:upper16:.LANCHOR0
	mla	r3, r3, r1, r8
	ldr	r4, [r3, #2288]
	cmp	r4, #0
	beq	.L13092
	cmp	r0, #0
	mov	r6, r0
	beq	.L13107
	add	r10, r4, #108
	add	r5, r4, #40
	mov	r0, r10
	bl	_raw_spin_lock_irqsave
	mov	r2, #0
	mov	r9, r0
	str	r2, [r4, #104]
	str	r2, [r6, #88]
	str	r2, [r6, #92]
	ldr	r3, [r4, #40]
	str	r2, [r4, #88]
	cmp	r5, r3
	beq	.L13095
	mov	r7, #256
	mov	r6, #512
.L13096:
	ldm	r3, {r1, r2}
	mov	fp, r3
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r7, [r3]
	str	r6, [r3, #4]
	ldr	r0, [fp, #-8]!
	bl	kfree
	mov	r0, fp
	bl	kfree
	ldr	r3, [r4, #40]
	cmp	r3, r5
	bne	.L13096
.L13095:
	mov	r1, r9
	mov	r0, r10
	bl	_raw_spin_unlock_irqrestore
	add	r1, r4, #8
	mov	r0, #0
	bl	_test_and_clear_bit
	cmp	r0, #0
	bne	.L13108
.L13097:
	ldr	r0, [r8, #2280]
	add	r1, r4, #160
	mov	r2, #0
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	queue_delayed_work
.L13108:
	ldr	r0, [r4]
	ldr	r1, [r4, #88]
	orr	r2, r1, #4
	mvn	r2, r2
	bl	smd_tiocmset
	b	.L13097
.L13107:
	ldr	r1, .L13109
	movw	r0, #:lower16:.LC569
	movt	r0, #:upper16:.LC569
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	printk
.L13092:
	mov	r2, r1
	ldr	r1, .L13109
	movw	r0, #:lower16:.LC568
	movt	r0, #:upper16:.LC568
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	printk
.L13110:
	.align	2
.L13109:
	.word	.LANCHOR5-3164
	.fnend
	.size	gsmd_ctrl_disconnect, .-gsmd_ctrl_disconnect
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gps_disable, %function
gps_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	add	r7, r0, #124
	strd	r8, [sp, #16]
	add	r8, r0, #136
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r0, [r0, #128]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [r4, #128]
	mov	r3, #0
	mov	r0, r7
	str	r3, [r2]
	str	r3, [r4, #112]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #136]
	mov	r5, r0
	cmp	r8, r3
	beq	.L13112
	mov	r10, #256
	mov	r9, #512
.L13113:
	ldm	r3, {r1, r2}
	mov	r6, r3
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r10, [r3]
	str	r9, [r3, #4]
	ldr	r0, [r6, #-8]!
	bl	kfree
	mov	r0, r6
	bl	kfree
	ldr	r3, [r4, #136]
	cmp	r3, r8
	bne	.L13113
.L13112:
	mov	r3, #0
	mov	r1, r5
	mov	r0, r7
	str	r3, [r4, #144]
	bl	_raw_spin_unlock_irqrestore
	ldrb	r1, [r4, #104]	@ zero_extendqisi2
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	gsmd_ctrl_disconnect
	.fnend
	.size	gps_disable, .-gps_disable
	.section	.rodata.str1.4
	.align	2
.LC698:
	.ascii	"<3>%s: Invalid client:%d\012\000"
	.align	2
.LC699:
	.ascii	"<3>%s: Invalid num of ports count:%d\012\000"
	.text
	.align	2
	.global	gsmd_ctrl_setup
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_ctrl_setup, %function
gsmd_ctrl_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r0, #1
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	mov	r8, r0
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #20
	sub	sp, sp, #20
	str	r2, [sp, #12]
	bhi	.L13135
	sub	r3, r1, #1
	mov	r6, r1
	cmp	r3, #2
	bhi	.L13136
	movw	r9, #:lower16:.LANCHOR0
	movt	r9, #:upper16:.LANCHOR0
	ldrb	r3, [r9]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L13137
.L13120:
	add	r7, r8, r8, lsl #1
	add	r3, r3, #1
	add	r2, r7, r6
	strb	r3, [r9]
	cmp	r7, r2
	movcc	r4, #0
	bcs	.L13127
.L13126:
	add	r10, r4, r7
	mov	r5, r4
	mov	r0, r10
	add	r4, r4, #1
	bl	grmnet_ctrl_smd_port_alloc
	subs	fp, r0, #0
	bne	.L13138
	cmp	r6, r4
	bne	.L13126
.L13127:
	ldr	r3, [sp, #12]
	cmp	r3, #0
	moveq	fp, r3
	beq	.L13116
	mov	fp, #0
	strb	r7, [r3]
.L13116:
	mov	r0, fp
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L13137:
	movw	r0, #:lower16:.LC576
	mov	r2, #1
	str	r3, [sp]
	movt	r0, #:upper16:.LC576
	mov	r1, #10
	bl	__alloc_workqueue_key
	cmp	r0, #0
	str	r0, [r9, #2280]
	beq	.L13121
	ldrb	r3, [r9]	@ zero_extendqisi2
	b	.L13120
.L13121:
	movw	r0, #:lower16:.LC577
	ldr	r1, .L13139
	mvn	fp, #11
	movt	r0, #:upper16:.LC577
	bl	printk
	b	.L13116
.L13136:
	movw	r0, #:lower16:.LC699
	mov	r2, r1
	ldr	r1, .L13139
	movt	r0, #:upper16:.LC699
	mvn	fp, #21
	bl	printk
	b	.L13116
.L13135:
	movw	r0, #:lower16:.LC698
	ldr	r1, .L13139
	mov	r2, r8
	movt	r0, #:upper16:.LC698
	mvn	fp, #21
	bl	printk
	b	.L13116
.L13138:
	ldr	r4, .L13139+4
	movw	r0, #:lower16:.LC578
	mov	r2, r10
	ldr	r1, .L13139
	movt	r0, #:upper16:.LC578
	mov	r6, #0
	bl	printk
	mov	r3, #252
	mla	r4, r3, r8, r4
	add	r4, r4, #4
.L13125:
	cmp	r6, r5
	blt	.L13129
	ldrb	r3, [r9]	@ zero_extendqisi2
	sub	r3, r3, #1
	uxtb	r3, r3
	cmp	r3, #0
	strb	r3, [r9]
	bne	.L13116
	ldr	r0, [r9, #2280]
	bl	destroy_workqueue
	b	.L13116
.L13129:
	ldr	r0, [r4, #-4]
	cmp	r0, #0
	beq	.L13128
	bl	kfree
	mov	r0, r4
	bl	platform_driver_unregister
.L13128:
	add	r6, r6, #1
	add	r4, r4, #84
	b	.L13125
.L13140:
	.align	2
.L13139:
	.word	.LANCHOR5-3972
	.word	.LANCHOR0+2288
	.fnend
	.size	gsmd_ctrl_setup, .-gsmd_ctrl_setup
	.align	2
	.global	gqti_ctrl_connect
	.syntax unified
	.arm
	.fpu softvfp
	.type	gqti_ctrl_connect, %function
gqti_ctrl_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	subs	r5, r0, #0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	beq	.L13148
	movw	r3, #:lower16:.LANCHOR0
	movt	r3, #:upper16:.LANCHOR0
	ldr	r4, [r3, #4]
	add	r6, r4, #52
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	movw	r2, #:lower16:grmnet_ctrl_qti_send_cpkt_tomodem
	movw	r3, #:lower16:gqti_ctrl_notify_modem
	str	r5, [r4]
	movt	r2, #:upper16:grmnet_ctrl_qti_send_cpkt_tomodem
	movt	r3, #:upper16:gqti_ctrl_notify_modem
	mov	r1, r0
	mov	r0, r6
	strd	r2, [r5, #88]
	bl	_raw_spin_unlock_irqrestore
	mov	r2, #1
	add	r0, r4, #32
	mov	r3, #0
	mov	r1, #3
	str	r2, [r4, #8]
	bl	__wake_up
	cmp	r4, #0
	beq	.L13146
	ldr	r0, [r4]
	cmp	r0, #0
	beq	.L13141
	ldr	r4, [r0, #100]
	cmp	r4, #0
	beq	.L13146
	blx	r4
	mov	r0, #0
.L13141:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L13146:
	mov	r0, r4
	b	.L13141
.L13148:
	movw	r0, #:lower16:.LC569
	ldr	r1, .L13149
	movt	r0, #:upper16:.LC569
	bl	printk
	mvn	r0, #18
	b	.L13141
.L13150:
	.align	2
.L13149:
	.word	.LANCHOR5-3140
	.fnend
	.size	gqti_ctrl_connect, .-gqti_ctrl_connect
	.align	2
	.global	gqti_ctrl_disconnect
	.syntax unified
	.arm
	.fpu softvfp
	.type	gqti_ctrl_disconnect, %function
gqti_ctrl_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	subs	r4, r0, #0
	movt	r3, #:upper16:.LANCHOR0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r5, [r3, #4]
	beq	.L13174
	cmp	r5, #0
	beq	.L13153
	ldr	r0, [r5]
	cmp	r0, #0
	beq	.L13153
	ldr	r3, [r0, #96]
	cmp	r3, #0
	beq	.L13153
	blx	r3
.L13153:
	mov	r7, #0
	mov	r6, r5
	add	r9, r5, #52
	mov	r0, r9
	str	r7, [r5, #8]
	str	r7, [r5, #12]
	bl	_raw_spin_lock_irqsave
	str	r7, [r6], #44
	mov	r10, r0
	str	r7, [r4, #88]
	str	r7, [r4, #92]
	ldr	r3, [r5, #44]
	cmp	r6, r3
	beq	.L13154
	mov	r8, #256
	mov	r7, #512
.L13155:
	ldm	r3, {r1, r2}
	mov	r4, r3
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r8, [r3]
	str	r7, [r3, #4]
	ldr	r0, [r4, #-8]!
	bl	kfree
	mov	r0, r4
	bl	kfree
	ldr	r3, [r5, #44]
	cmp	r3, r6
	bne	.L13155
.L13154:
	mov	r1, r10
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r9
	bl	_raw_spin_lock_irqsave
	ldrb	r3, [r5, #4]	@ zero_extendqisi2
	mov	r4, r0
	cmp	r3, #0
	beq	.L13175
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L13157
	movw	r1, #32800
	bl	kmem_cache_alloc
	subs	r3, r0, #0
	beq	.L13176
	mov	r1, #16
	mov	r2, #0
	stm	r3, {r1, r2}
.L13158:
	ldr	r2, [r5, #48]
	add	ip, r3, #8
	mov	r1, r4
	mov	r0, r9
	str	ip, [r5, #48]
	str	r6, [r3, #8]
	str	r2, [r3, #12]
	str	ip, [r2]
	bl	_raw_spin_unlock_irqrestore
	add	r0, r5, #32
	mov	r3, #0
	ldrd	r4, [sp]
	mov	r2, #1
	mov	r1, #3
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	__wake_up
.L13157:
	mov	r2, #16
	mov	r3, r2
	str	r2, [r0, #16]
	str	r0, [r0, #20]
	b	.L13158
.L13176:
	mvn	r3, #11
	b	.L13158
.L13175:
	movw	r0, #:lower16:.LC471
	ldr	r1, .L13177
	mov	r2, r5
	movt	r0, #:upper16:.LC471
	bl	printk
	mov	r1, r4
	mov	r0, r9
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irqrestore
.L13174:
	movw	r0, #:lower16:.LC569
	ldr	r1, .L13177+4
	movt	r0, #:upper16:.LC569
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	printk
.L13178:
	.align	2
.L13177:
	.word	.LANCHOR2+3856
	.word	.LANCHOR5-3120
	.fnend
	.size	gqti_ctrl_disconnect, .-gqti_ctrl_disconnect
	.align	2
	.global	ghsic_ctrl_connect
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_ctrl_connect, %function
ghsic_ctrl_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r2, #:lower16:.LANCHOR0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	clz	r3, r0
	movt	r2, #:upper16:.LANCHOR0
	strd	r6, [sp, #8]
	lsr	r3, r3, #5
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	ip, [r2, #404]
	cmp	r1, ip
	orrhi	r3, r3, #1
	cmp	r3, #0
	bne	.L13186
	mov	r3, #104
	mla	r1, r3, r1, r2
	ldr	r4, [r1, #408]
	cmp	r4, #0
	beq	.L13187
	add	r7, r4, #4
	mov	r6, r0
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #48]
	mov	r1, r0
	cmp	r3, #0
	bne	.L13183
	movw	r3, #:lower16:ghsic_send_cbits_tomodem
	movt	r3, #:upper16:ghsic_send_cbits_tomodem
	str	r3, [r6, #132]
	ldr	r3, [r4, #48]
.L13183:
	cmp	r3, #1
	bne	.L13184
	ldr	r0, [r6, #84]
	movw	r2, #:lower16:ghsic_send_cpkt_tomodem
	movw	r3, #:lower16:ghsic_send_cbits_tomodem
	movt	r2, #:upper16:ghsic_send_cpkt_tomodem
	movt	r3, #:upper16:ghsic_send_cbits_tomodem
	str	r0, [r4, #52]
	strd	r2, [r6, #88]
.L13184:
	mov	r5, #0
	mov	r0, r7
	str	r6, [r4, #8]
	str	r5, [r4, #96]
	str	r5, [r4, #100]
	str	r5, [r4, #104]
	bl	_raw_spin_unlock_irqrestore
	add	r1, r4, #16
	ldr	r0, [r4, #12]
	bl	queue_work
	mov	r0, r5
.L13179:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L13187:
	movw	r0, #:lower16:.LC15
	ldr	r1, .L13188
	movt	r0, #:upper16:.LC15
	bl	printk
	mvn	r0, #18
	b	.L13179
.L13186:
	movw	r0, #:lower16:.LC96
	mov	r2, r1
	ldr	r1, .L13188
	movt	r0, #:upper16:.LC96
	bl	printk
	mvn	r0, #18
	b	.L13179
.L13189:
	.align	2
.L13188:
	.word	.LANCHOR5-3096
	.fnend
	.size	ghsic_ctrl_connect, .-ghsic_ctrl_connect
	.align	2
	.global	ghsic_ctrl_disconnect
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_ctrl_disconnect, %function
ghsic_ctrl_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r2, #104
	movt	r3, #:upper16:.LANCHOR0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	ip, [r3, #404]
	mla	r3, r2, r1, r3
	ldr	r4, [r3, #408]
	cmp	r1, ip
	bhi	.L13196
	clz	r3, r4
	cmp	r0, #0
	lsr	r3, r3, #5
	moveq	r5, #1
	mov	r6, r0
	movne	r5, r3
	cmp	r5, #0
	bne	.L13197
	ldr	r8, [r4, #48]
	add	r7, r4, #4
	mov	r0, r7
	cmp	r8, #0
	bne	.L13193
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	str	r8, [r6, #132]
.L13194:
	mov	r3, #0
	mov	r0, r7
	str	r3, [r4, #8]
	str	r3, [r4, #52]
	str	r3, [r4, #88]
	bl	_raw_spin_unlock_irqrestore
	add	r1, r4, #32
	ldrd	r6, [sp, #8]
	ldr	r0, [r4, #12]
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	queue_work
.L13193:
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	str	r5, [r6, #88]
	str	r5, [r6, #92]
	b	.L13194
.L13196:
	movw	r0, #:lower16:.LC96
	mov	r2, r1
	ldr	r1, .L13198
	movt	r0, #:upper16:.LC96
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	printk
.L13197:
	movw	r0, #:lower16:.LC569
	ldr	r1, .L13198
	movt	r0, #:upper16:.LC569
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	printk
.L13199:
	.align	2
.L13198:
	.word	.LANCHOR5-3076
	.fnend
	.size	ghsic_ctrl_disconnect, .-ghsic_ctrl_disconnect
	.section	.rodata.str1.4
	.align	2
.LC700:
	.ascii	"<3>%s: setting xport name for invalid port num %d\012"
	.ascii	"\000"
	.align	2
.LC701:
	.ascii	"_ctrl\000"
	.text
	.align	2
	.global	ghsic_ctrl_set_port_name
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_ctrl_set_port_name, %function
ghsic_ctrl_set_port_name:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r4, #:lower16:.LANCHOR3
	movt	r4, #:upper16:.LANCHOR3
	str	r6, [sp, #8]
	ldr	r3, [r4, #-4032]
	str	lr, [sp, #12]
	cmp	r3, #3
	bhi	.L13205
	cmp	r0, #0
	ldr	r5, .L13207
	beq	.L13206
	mov	ip, #104
	mov	r1, r0
	mov	r2, #20
	mla	r0, ip, r3, r5
	add	r0, r0, #84
	bl	strlcpy
.L13203:
	ldr	r0, [r4, #-4032]
	mov	r3, #104
	movw	r1, #:lower16:.LC701
	movt	r1, #:upper16:.LC701
	mov	r2, #20
	mla	r0, r3, r0, r5
	add	r0, r0, #84
	bl	strlcat
	ldr	r3, [r4, #-4032]
	ldr	r6, [sp, #8]
	add	r3, r3, #1
	str	r3, [r4, #-4032]
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L13206:
	mov	r0, #104
	mov	r2, #20
	mla	r0, r0, r3, r5
	add	r0, r0, #84
	bl	strlcpy
	b	.L13203
.L13205:
	movw	r0, #:lower16:.LC700
	ldr	r1, .L13207+4
	mov	r2, r3
	movt	r0, #:upper16:.LC700
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	printk
.L13208:
	.align	2
.L13207:
	.word	.LANCHOR0+408
	.word	.LANCHOR5-3052
	.fnend
	.size	ghsic_ctrl_set_port_name, .-ghsic_ctrl_set_port_name
	.section	.rodata.str1.4
	.align	2
.LC702:
	.ascii	"<3>%s: Unable to create workqueue:%s\012\000"
	.text
	.align	2
	.global	ghsic_ctrl_setup
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_ctrl_setup, %function
ghsic_ctrl_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	movw	r7, #:lower16:.LANCHOR0
	movt	r7, #:upper16:.LANCHOR0
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	mov	fp, r1
	str	lr, [sp, #32]
	ldr	r3, [r7, #404]
	.pad #44
	sub	sp, sp, #44
	add	r1, r3, r0
	cmp	r1, #4
	str	r3, [sp, #28]
	str	r3, [sp, #32]
	movle	r3, #0
	movgt	r3, #1
	cmp	r0, #0
	str	r1, [sp, #12]
	moveq	r3, #1
	cmp	r3, #0
	bne	.L13224
	ldr	r6, [sp, #28]
	cmp	r6, r1
	bcs	.L13209
	mov	r3, #104
	ldr	r2, .L13228
	movw	r1, #:lower16:ghsic_ctrl_connect_w
	movw	r0, #:lower16:gctrl_disconnect_w
	movw	ip, #:lower16:ghsic_ctrl_receive
	mul	r3, r3, r6
	movt	r1, #:upper16:ghsic_ctrl_connect_w
	movt	r0, #:upper16:gctrl_disconnect_w
	movt	ip, #:upper16:ghsic_ctrl_receive
	movw	r8, #:lower16:kmalloc_caches
	movt	r8, #:upper16:kmalloc_caches
	mov	r10, r7
	str	r1, [sp, #16]
	add	r5, r3, #84
	str	r0, [sp, #20]
	add	r5, r2, r5
	str	ip, [sp, #24]
	str	r3, [sp, #36]
	mov	r3, r6
	b	.L13216
.L13227:
	ldr	r3, [r10, #404]
.L13216:
	ldr	r0, [r8, #28]
	mov	r7, #0
	add	r3, r3, #1
	movw	r1, #32976
	mov	r4, #16
	str	r3, [r10, #404]
	cmp	r0, r7
	beq	.L13212
	bl	kmem_cache_alloc
	subs	r4, r0, #0
	beq	.L13225
.L13212:
	mov	r3, r7
	mov	r2, #1
	str	r7, [sp]
	mov	r1, #10
	mov	r0, r5
	bl	__alloc_workqueue_key
	mov	r2, r0
	movw	ip, #:lower16:ghsic_ctrl_probe
	cmp	r2, #0
	movw	r1, #:lower16:ghsic_ctrl_remove
	movw	r3, #:lower16:ghsic_ctrl_status
	add	r9, r4, #20
	str	r2, [r4, #12]
	movt	ip, #:upper16:ghsic_ctrl_probe
	movt	r1, #:upper16:ghsic_ctrl_remove
	sub	r0, r5, #80
	mov	lr, #2560
	movt	r3, #:upper16:ghsic_ctrl_status
	add	r2, r4, #36
	beq	.L13226
	cmp	fp, #0
	str	r6, [r4]
	add	r6, r6, #1
	str	r2, [r4, #36]
	str	r2, [r4, #40]
	ldr	r2, [sp, #20]
	str	r7, [r4, #4]
	ldr	r7, [sp, #16]
	streq	r3, [r4, #76]
	mov	r3, #0
	str	lr, [r4, #16]
	str	r9, [r4, #20]
	str	r2, [r4, #44]
	ldr	r2, [sp, #24]
	str	r9, [r4, #24]
	str	r7, [r4, #28]
	str	lr, [r4, #32]
	str	fp, [r4, #48]
	str	r4, [r4, #56]
	str	r5, [r4, #64]
	str	r2, [r4, #72]
	str	r4, [r5, #-84]
	str	ip, [r5, #-80]
	str	r1, [r5, #-76]
	str	r5, [r5, #-60]
	add	r5, r5, #104
	str	r3, [r5, #-156]
	bl	platform_driver_register
	ldr	r3, [sp, #12]
	cmp	r3, r6
	bhi	.L13227
.L13209:
	ldr	r0, [sp, #28]
	add	sp, sp, #44
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L13225:
	mov	r7, r10
.L13213:
	ldr	r3, [r7, #404]
	movw	r0, #:lower16:.LC578
	mov	r2, r6
	ldr	r1, .L13228
	movt	r0, #:upper16:.LC578
	ldr	ip, [sp, #36]
	sub	r3, r3, #1
	add	r4, r1, ip
	ldr	r1, .L13228+4
	str	r3, [r7, #404]
	bl	printk
	ldr	r5, [sp, #28]
.L13217:
	ldr	r3, [r7, #404]
	add	r6, r4, #104
	cmp	r3, r5
	bhi	.L13218
	mvn	r3, #11
	str	r3, [sp, #28]
	ldr	r3, [sp, #32]
	str	r3, [r7, #404]
	b	.L13209
.L13224:
	mov	r2, r0
	mvn	r3, #21
	ldr	r1, .L13228+4
	movw	r0, #:lower16:.LC699
	movt	r0, #:upper16:.LC699
	str	r3, [sp, #28]
	bl	printk
	b	.L13209
.L13226:
	movw	r0, #:lower16:.LC702
	ldr	r1, .L13228+8
	mov	r2, r5
	movt	r0, #:upper16:.LC702
	mov	r7, r10
	bl	printk
	b	.L13213
.L13218:
	ldr	r8, [r6, #-104]
	add	r5, r5, #1
	ldr	r0, [r8, #12]
	bl	destroy_workqueue
	mov	r0, r8
	bl	kfree
	add	r0, r4, #4
	mov	r4, r6
	bl	platform_driver_unregister
	b	.L13217
.L13229:
	.align	2
.L13228:
	.word	.LANCHOR0+408
	.word	.LANCHOR5-3024
	.word	.LANCHOR5-3004
	.fnend
	.size	ghsic_ctrl_setup, .-ghsic_ctrl_setup
	.align	2
	.global	ghsic_data_disconnect
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_data_disconnect, %function
ghsic_data_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r2, #:lower16:.LANCHOR0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r3, #104
	movt	r2, #:upper16:.LANCHOR0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	ip, [r2, #3276]
	mla	r2, r3, r1, r2
	ldr	r4, [r2, #3280]
	cmp	r1, ip
	bhi	.L13242
	clz	r3, r4
	cmp	r0, #0
	lsr	r3, r3, #5
	moveq	r5, #1
	movne	r5, r3
	cmp	r5, #0
	bne	.L13243
	mov	r0, r4
	bl	ghsic_data_free_buffers.part.0
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L13233
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #8]
	str	r5, [r3]
.L13233:
	ldr	r0, [r4, #12]
	cmp	r0, #0
	beq	.L13234
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #12]
	mov	r2, #0
	str	r2, [r3]
.L13234:
	mov	r5, #0
	add	r9, r4, #48
	mov	r0, r9
	add	r8, r4, #164
	str	r5, [r4, #4]
	add	r7, r4, #80
	bl	_raw_spin_lock_irqsave
	mov	r6, r0
	mov	r1, r8
	str	r5, [r4, #8]
	mov	r0, #2
	str	r5, [r4, #184]
	bl	_clear_bit
	mov	r1, r6
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	mov	r1, r8
	str	r5, [r4, #12]
	mov	r5, r0
	mov	r0, #1
	bl	_clear_bit
	mov	r1, r5
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	add	r1, r4, #104
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	ldr	r0, [r4, #84]
	ldrd	r4, [sp]
	add	sp, sp, #32
	b	queue_work
.L13242:
	movw	r0, #:lower16:.LC96
	mov	r2, r1
	ldr	r1, .L13244
	movt	r0, #:upper16:.LC96
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	printk
.L13243:
	movw	r0, #:lower16:.LC15
	ldr	r1, .L13244
	movt	r0, #:upper16:.LC15
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	printk
.L13245:
	.align	2
.L13244:
	.word	.LANCHOR5-2984
	.fnend
	.size	ghsic_data_disconnect, .-ghsic_data_disconnect
	.section	.rodata.str1.4
	.align	2
.LC703:
	.ascii	"<3>%s: usb_ep_enable failed eptype:IN ep:%p\000"
	.align	2
.LC704:
	.ascii	"<3>%s: usb_ep_enable failed eptype:OUT ep:%p\000"
	.text
	.align	2
	.global	ghsic_data_connect
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_data_connect, %function
ghsic_data_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r2, #104
	movt	r3, #:upper16:.LANCHOR0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	ip, [r3, #3276]
	mla	r3, r2, r1, r3
	ldr	r4, [r3, #3280]
	cmp	r1, ip
	bhi	.L13259
	cmp	r4, #0
	cmpne	r0, #0
	mov	r5, r0
	beq	.L13260
	ldr	r3, [r4, #16]
	add	r7, r4, #48
	add	r6, r4, #80
	mov	r0, r7
	cmp	r3, #0
	bne	.L13250
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #80]
	mov	r1, r0
	mov	r0, r7
	str	r3, [r4, #8]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #84]
	mov	r1, r0
	mov	r0, r6
	str	r3, [r4, #12]
	bl	_raw_spin_unlock_irqrestore
	movw	r3, #:lower16:.LANCHOR4
	movt	r3, #:upper16:.LANCHOR4
	ldr	r2, [r3, #-1000]
	ldr	r3, [r3, #-996]
	str	r2, [r4, #20]
	str	r3, [r4, #52]
	ldr	r3, [r5, #80]
	str	r4, [r3]
	ldr	r3, [r5, #84]
	str	r4, [r3]
.L13251:
	ldr	r0, [r4, #8]
	ldr	r1, [r0, #28]
	ldrh	r3, [r1, #4]	@ unaligned
	cmp	r3, #0
	beq	.L13256
	ldr	r3, [r0, #8]
	ldr	r3, [r3]
	blx	r3
	subs	r5, r0, #0
	bne	.L13252
	ldr	r0, [r4, #12]
	ldr	r1, [r0, #28]
	ldrh	r3, [r1, #4]	@ unaligned
	cmp	r3, #0
	beq	.L13257
	ldr	r3, [r0, #8]
	ldr	r3, [r3]
	blx	r3
	subs	r5, r0, #0
	bne	.L13254
	mov	r3, #1
	mov	r0, r7
	str	r3, [r4, #4]
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	mov	r0, r7
	str	r5, [r4, #192]
	str	r5, [r4, #196]
	str	r5, [r4, #200]
	str	r5, [r4, #216]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	mov	r0, r6
	str	r5, [r4, #188]
	str	r5, [r4, #204]
	str	r5, [r4, #208]
	str	r5, [r4, #212]
	bl	_raw_spin_unlock_irqrestore
	add	r1, r4, #88
	ldr	r0, [r4, #84]
	bl	queue_work
.L13246:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L13250:
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #76]
	mov	r1, r0
	mov	r0, r7
	str	r3, [r4, #8]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #80]
	mov	r1, r0
	mov	r0, r6
	str	r3, [r4, #12]
	bl	_raw_spin_unlock_irqrestore
	movw	r3, #:lower16:.LANCHOR4
	movt	r3, #:upper16:.LANCHOR4
	ldr	r2, [r3, #-992]
	ldr	r3, [r3, #-988]
	str	r2, [r4, #20]
	str	r3, [r4, #52]
	ldr	r3, [r5, #76]
	str	r4, [r3]
	ldr	r3, [r5, #80]
	str	r4, [r3]
	b	.L13251
.L13259:
	movw	r0, #:lower16:.LC96
	mov	r2, r1
	ldr	r1, .L13261
	movt	r0, #:upper16:.LC96
	mvn	r5, #18
	bl	printk
	b	.L13246
.L13257:
	mvn	r5, #21
.L13254:
	movw	r0, #:lower16:.LC704
	ldr	r1, .L13261
	movt	r0, #:upper16:.LC704
	ldr	r2, [r4, #12]
	bl	printk
	ldr	r0, [r4, #8]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L13246
.L13256:
	mvn	r5, #21
.L13252:
	movw	r0, #:lower16:.LC703
	ldr	r1, .L13261
	movt	r0, #:upper16:.LC703
	ldr	r2, [r4, #8]
	bl	printk
	b	.L13246
.L13260:
	movw	r0, #:lower16:.LC15
	ldr	r1, .L13261
	mvn	r5, #18
	movt	r0, #:upper16:.LC15
	bl	printk
	b	.L13246
.L13262:
	.align	2
.L13261:
	.word	.LANCHOR5-2960
	.fnend
	.size	ghsic_data_connect, .-ghsic_data_connect
	.section	.rodata.str1.4
	.align	2
.LC705:
	.ascii	"_data\000"
	.text
	.align	2
	.global	ghsic_data_set_port_name
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_data_set_port_name, %function
ghsic_data_set_port_name:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r4, #:lower16:.LANCHOR3
	movt	r4, #:upper16:.LANCHOR3
	str	r6, [sp, #8]
	ldr	r3, [r4, #-4028]
	str	lr, [sp, #12]
	cmp	r3, #3
	bhi	.L13268
	cmp	r0, #0
	ldr	r5, .L13270
	beq	.L13269
	mov	ip, #104
	mov	r1, r0
	mov	r2, #20
	mla	r0, ip, r3, r5
	add	r0, r0, #84
	bl	strlcpy
.L13266:
	ldr	r0, [r4, #-4028]
	mov	r3, #104
	movw	r1, #:lower16:.LC705
	movt	r1, #:upper16:.LC705
	mov	r2, #20
	mla	r0, r3, r0, r5
	add	r0, r0, #84
	bl	strlcat
	ldr	r3, [r4, #-4028]
	ldr	r6, [sp, #8]
	add	r3, r3, #1
	str	r3, [r4, #-4028]
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L13269:
	mov	r0, #104
	mov	r2, #20
	mla	r0, r0, r3, r5
	add	r0, r0, #84
	bl	strlcpy
	b	.L13266
.L13268:
	movw	r0, #:lower16:.LC700
	ldr	r1, .L13270+4
	mov	r2, r3
	movt	r0, #:upper16:.LC700
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	printk
.L13271:
	.align	2
.L13270:
	.word	.LANCHOR0+3280
	.word	.LANCHOR5-2940
	.fnend
	.size	ghsic_data_set_port_name, .-ghsic_data_set_port_name
	.align	2
	.global	ghsic_data_setup
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_data_setup, %function
ghsic_data_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 48
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	r3, #:upper16:.LANCHOR0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #60
	sub	sp, sp, #60
	str	r3, [sp, #12]
	ldr	r3, [r3, #3276]
	str	r1, [sp, #24]
	add	r1, r3, r0
	cmp	r1, #4
	str	r3, [sp, #44]
	str	r3, [sp, #48]
	movle	r3, #0
	movgt	r3, #1
	cmp	r0, #0
	str	r1, [sp, #20]
	moveq	r3, #1
	cmp	r3, #0
	bne	.L13286
	ldr	r7, [sp, #44]
	cmp	r7, r1
	bcs	.L13272
	mov	r3, #104
	ldr	r1, .L13290
	movw	r2, #:lower16:kmalloc_caches
	movt	r2, #:upper16:kmalloc_caches
	movw	r0, #:lower16:ghsic_data_connect_w
	mul	r3, r3, r7
	movw	ip, #:lower16:ghsic_data_disconnect_w
	movw	lr, #:lower16:ghsic_data_write_tohost
	movt	r0, #:upper16:ghsic_data_connect_w
	movt	ip, #:upper16:ghsic_data_disconnect_w
	str	r2, [sp, #28]
	movt	lr, #:upper16:ghsic_data_write_tohost
	mov	r5, r7
	add	r2, r3, #84
	str	r0, [sp, #32]
	add	r8, r1, r2
	str	ip, [sp, #36]
	str	lr, [sp, #40]
	str	r3, [sp, #52]
	mov	r3, r7
	b	.L13278
.L13289:
	ldr	r3, [sp, #12]
	ldr	r3, [r3, #3276]
.L13278:
	ldr	r2, [sp, #28]
	mov	r4, #0
	add	r3, r3, #1
	movw	r1, #32976
	mov	r9, #16
	ldr	r0, [r2, #32]
	ldr	r2, [sp, #12]
	cmp	r0, r4
	str	r3, [r2, #3276]
	beq	.L13275
	bl	kmem_cache_alloc
	subs	r9, r0, #0
	beq	.L13287
.L13275:
	mov	r3, r4
	mov	r2, #1
	str	r4, [sp]
	mov	r1, #10
	mov	r0, r8
	bl	__alloc_workqueue_key
	movw	r2, #:lower16:ghsic_data_unthrottle_tx
	str	r0, [r9, #84]
	movw	r6, #:lower16:ghsic_data_write_tomdm
	movt	r2, #:upper16:ghsic_data_unthrottle_tx
	movw	lr, #:lower16:ghsic_data_receive
	movw	ip, #:lower16:ghsic_data_probe
	movw	r1, #:lower16:ghsic_data_remove
	str	r2, [sp, #16]
	ldr	r2, [r9, #84]
	movt	r6, #:upper16:ghsic_data_write_tomdm
	add	fp, r9, #24
	add	r7, r9, #56
	add	r10, r9, #32
	mov	r3, #2560
	movt	lr, #:upper16:ghsic_data_receive
	movt	ip, #:upper16:ghsic_data_probe
	cmp	r2, #0
	movt	r1, #:upper16:ghsic_data_remove
	sub	r0, r8, #80
	beq	.L13288
	str	r5, [r9]
	add	r5, r5, #1
	str	r7, [r9, #56]
	str	r7, [r9, #60]
	add	r7, r9, #64
	str	r3, [r9, #88]
	str	r3, [r9, #104]
	str	r7, [r9, #64]
	str	r7, [r9, #68]
	add	r7, r9, #92
	str	r3, [r9, #120]
	str	r3, [r9, #136]
	add	r3, r9, #140
	str	r7, [r9, #92]
	str	r7, [r9, #96]
	ldr	r7, [sp, #32]
	str	fp, [r9, #24]
	str	fp, [r9, #28]
	str	r10, [r9, #32]
	str	r10, [r9, #36]
	str	r7, [r9, #100]
	add	r7, r9, #108
	str	r4, [r9, #40]
	str	r4, [r9, #72]
	str	r7, [r9, #108]
	str	r7, [r9, #112]
	ldr	r7, [sp, #36]
	str	r4, [r9, #80]
	str	r4, [r9, #48]
	str	r4, [r9, #44]
	str	r4, [r9, #76]
	str	r7, [r9, #116]
	add	r7, r9, #124
	str	r7, [r9, #124]
	str	r7, [r9, #128]
	str	r6, [r9, #132]
	str	r3, [r9, #140]
	str	r3, [r9, #144]
	ldr	r3, [sp, #40]
	str	r3, [r9, #148]
	ldr	r3, [sp, #24]
	str	r9, [r9, #152]
	str	r8, [r9, #160]
	str	lr, [r9, #168]
	str	r3, [r9, #16]
	ldr	r3, [sp, #16]
	str	r3, [r9, #176]
	str	r9, [r8, #-84]
	str	ip, [r8, #-80]
	str	r1, [r8, #-76]
	str	r8, [r8, #-60]
	add	r8, r8, #104
	str	r4, [r8, #-156]
	bl	platform_driver_register
	ldr	r3, [sp, #20]
	cmp	r3, r5
	bhi	.L13289
.L13272:
	ldr	r0, [sp, #44]
	add	sp, sp, #60
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L13287:
	mov	r7, r5
.L13276:
	ldr	r8, [sp, #12]
	movw	r0, #:lower16:.LC578
	mov	r2, r7
	ldr	r1, .L13290
	movt	r0, #:upper16:.LC578
	ldr	lr, [sp, #52]
	ldr	r3, [r8, #3276]
	add	r4, r1, lr
	ldr	r1, .L13290+4
	sub	r3, r3, #1
	str	r3, [r8, #3276]
	bl	printk
	ldr	r5, [sp, #44]
.L13279:
	ldr	r3, [r8, #3276]
	add	r6, r4, #104
	cmp	r3, r5
	bhi	.L13280
	mvn	r3, #11
	ldr	r2, [sp, #48]
	str	r3, [sp, #44]
	ldr	r3, [sp, #12]
	str	r2, [r3, #3276]
	b	.L13272
.L13286:
	mov	r2, r0
	mvn	r3, #21
	ldr	r1, .L13290+4
	movw	r0, #:lower16:.LC699
	movt	r0, #:upper16:.LC699
	str	r3, [sp, #44]
	bl	printk
	b	.L13272
.L13288:
	movw	r0, #:lower16:.LC702
	ldr	r1, .L13290+8
	mov	r2, r8
	movt	r0, #:upper16:.LC702
	mov	r7, r5
	bl	printk
	mov	r0, r9
	bl	kfree
	b	.L13276
.L13280:
	ldr	r7, [r6, #-104]
	add	r5, r5, #1
	ldr	r0, [r7, #84]
	bl	destroy_workqueue
	mov	r0, r7
	bl	kfree
	add	r0, r4, #4
	mov	r4, r6
	bl	platform_driver_unregister
	b	.L13279
.L13291:
	.align	2
.L13290:
	.word	.LANCHOR0+3280
	.word	.LANCHOR5-2912
	.word	.LANCHOR5-2892
	.fnend
	.size	ghsic_data_setup, .-ghsic_data_setup
	.align	2
	.global	ghsuart_ctrl_connect
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_ctrl_connect, %function
ghsuart_ctrl_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r2, #:lower16:.LANCHOR0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	clz	r5, r0
	movt	r2, #:upper16:.LANCHOR0
	strd	r6, [sp, #8]
	lsr	r5, r5, #5
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r3, [r2, #2020]
	cmp	r1, r3
	orrhi	r5, r5, #1
	cmp	r5, #0
	bne	.L13300
	mov	r3, #84
	mla	r1, r3, r1, r2
	ldr	r4, [r1, #1852]
	cmp	r4, #0
	beq	.L13301
	add	r7, r4, #8
	mov	r6, r0
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	ip, [r6, #84]
	movw	r2, #:lower16:ghsuart_send_cpkt_tomodem
	movw	r3, #:lower16:ghsuart_send_cbits_tomodem
	movt	r2, #:upper16:ghsuart_send_cpkt_tomodem
	movt	r3, #:upper16:ghsuart_send_cbits_tomodem
	mov	r1, r0
	mov	r0, r7
	str	ip, [r4, #68]
	strd	r2, [r6, #88]
	str	r6, [r4, #12]
	str	r5, [r4, #96]
	str	r5, [r4, #100]
	str	r5, [r4, #104]
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, [r4, #88]
	tst	r0, #2
	ubfx	r0, r0, #1, #1
	bne	.L13302
.L13292:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L13302:
	add	r1, r4, #36
	ldr	r0, [r4, #32]
	bl	queue_work
	mov	r0, r5
	b	.L13292
.L13301:
	movw	r0, #:lower16:.LC15
	ldr	r1, .L13303
	movt	r0, #:upper16:.LC15
	bl	printk
	mvn	r0, #18
	b	.L13292
.L13300:
	movw	r0, #:lower16:.LC96
	mov	r2, r1
	ldr	r1, .L13303
	movt	r0, #:upper16:.LC96
	bl	printk
	mvn	r0, #18
	b	.L13292
.L13304:
	.align	2
.L13303:
	.word	.LANCHOR5-2868
	.fnend
	.size	ghsuart_ctrl_connect, .-ghsuart_ctrl_connect
	.align	2
	.global	ghsuart_ctrl_disconnect
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_ctrl_disconnect, %function
ghsuart_ctrl_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r2, #:lower16:.LANCHOR0
	movt	r2, #:upper16:.LANCHOR0
	ldr	r3, [r2, #2020]
	cmp	r1, r3
	bhi	.L13310
	mov	r3, #84
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	cmp	r0, #0
	strd	r6, [sp, #8]
	mov	r6, r0
	mla	r1, r3, r1, r2
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r5, [r1, #1852]
	clz	r4, r5
	lsr	r4, r4, #5
	moveq	r4, #1
	cmp	r4, #0
	bne	.L13311
	add	r7, r5, #8
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	mov	r0, r7
	str	r4, [r6, #88]
	str	r4, [r6, #92]
	str	r4, [r5, #12]
	str	r4, [r5, #68]
	str	r4, [r5, #92]
	bl	_raw_spin_unlock_irqrestore
	add	r1, r5, #52
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	ldr	r0, [r5, #32]
	ldrd	r4, [sp]
	add	sp, sp, #24
	b	queue_work
.L13310:
	movw	r0, #:lower16:.LC96
	mov	r2, r1
	ldr	r1, .L13312
	movt	r0, #:upper16:.LC96
	b	printk
.L13311:
	movw	r0, #:lower16:.LC569
	ldr	r1, .L13312
	movt	r0, #:upper16:.LC569
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	printk
.L13313:
	.align	2
.L13312:
	.word	.LANCHOR5-2844
	.fnend
	.size	ghsuart_ctrl_disconnect, .-ghsuart_ctrl_disconnect
	.section	.rodata.str1.4
	.align	2
.LC706:
	.ascii	"SMUX_RMNET_CTL_HSUART\000"
	.text
	.align	2
	.global	ghsuart_ctrl_setup
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_ctrl_setup, %function
ghsuart_ctrl_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	movw	r8, #:lower16:.LANCHOR0
	movt	r8, #:upper16:.LANCHOR0
	strd	r10, [sp, #24]
	ldr	r3, [r8, #2020]
	str	lr, [sp, #32]
	.pad #36
	sub	sp, sp, #36
	str	r1, [sp, #12]
	add	r9, r3, r0
	str	r3, [sp, #20]
	cmp	r9, #2
	str	r3, [sp, #24]
	movle	r3, #0
	movgt	r3, #1
	cmp	r0, #0
	moveq	r3, #1
	cmp	r3, #0
	bne	.L13327
	ldr	r7, [sp, #20]
	cmp	r7, r9
	bcs	.L13314
	mov	r3, #84
	ldr	r2, .L13330
	movw	r1, #:lower16:.LC706
	movt	r1, #:upper16:.LC706
	movw	r10, #:lower16:kmalloc_caches
	ldr	fp, .L13330+4
	mul	r0, r3, r7
	movt	r10, #:upper16:kmalloc_caches
	mov	r3, r7
	str	r1, [sp, #16]
	add	r5, r0, #4
	str	r0, [sp, #28]
	add	r5, r2, r5
	b	.L13320
.L13329:
	ldr	r3, [r8, #2020]
.L13320:
	ldr	r0, [r10, #28]
	mov	r6, #0
	add	r3, r3, #1
	movw	r1, #32976
	mov	r4, #16
	str	r3, [r8, #2020]
	cmp	r0, r6
	beq	.L13317
	bl	kmem_cache_alloc
	subs	r4, r0, #0
	beq	.L13324
.L13317:
	movw	r0, #:lower16:.LC706
	mov	r3, r6
	str	r6, [sp]
	mov	r2, #1
	mov	r1, #10
	movt	r0, #:upper16:.LC706
	bl	__alloc_workqueue_key
	mov	r3, r0
	movw	r1, #:lower16:.LC494
	cmp	r3, #0
	mov	r2, fp
	movt	r1, #:upper16:.LC494
	add	r0, r4, #20
	str	r3, [r4, #32]
	beq	.L13328
	ldr	r3, [sp, #12]
	str	r7, [r4]
	str	r3, [r4, #4]
	str	r6, [r4, #8]
	str	r6, [r4, #16]
	bl	__init_waitqueue_head
	movw	r3, #:lower16:ghsuart_ctrl_connect_w
	movw	r2, #:lower16:ghsuart_ctrl_disconnect_w
	str	r4, [r4, #72]
	movt	r3, #:upper16:ghsuart_ctrl_connect_w
	movw	r1, #:lower16:ghsuart_ctrl_receive
	mov	ip, #2560
	add	r0, r4, #56
	movt	r2, #:upper16:ghsuart_ctrl_disconnect_w
	movt	r1, #:upper16:ghsuart_ctrl_receive
	str	r3, [r4, #48]
	add	r3, r4, #40
	mov	lr, #42
	str	ip, [r4, #36]
	str	r3, [r4, #40]
	str	r3, [r4, #44]
	movw	r3, #:lower16:ghsuart_ctrl_remove
	movt	r3, #:upper16:ghsuart_ctrl_remove
	str	ip, [r4, #52]
	str	r0, [r4, #56]
	str	r0, [r4, #60]
	mov	r0, r5
	add	r5, r5, #84
	str	r2, [r4, #64]
	movw	r2, #:lower16:ghsuart_ctrl_probe
	str	lr, [r4, #76]
	movt	r2, #:upper16:ghsuart_ctrl_probe
	str	r1, [r4, #84]
	str	r4, [r5, #-88]
	str	r3, [r5, #-80]
	ldr	r3, [sp, #16]
	str	r2, [r5, #-84]
	str	r3, [r5, #-64]
	str	r6, [r5, #-56]
	bl	platform_driver_register
	cmp	r0, #0
	blt	.L13325
	add	r7, r7, #1
	cmp	r9, r7
	bhi	.L13329
.L13314:
	ldr	r0, [sp, #20]
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L13325:
	mov	r4, r0
.L13318:
	ldr	r3, [r8, #2020]
	movw	r0, #:lower16:.LC578
	mov	r2, r7
	ldr	r1, .L13330
	movt	r0, #:upper16:.LC578
	ldr	ip, [sp, #28]
	sub	r3, r3, #1
	add	r5, r1, ip
	ldr	r1, .L13330+8
	str	r3, [r8, #2020]
	bl	printk
	ldr	r6, [sp, #20]
.L13321:
	ldr	r3, [r8, #2020]
	add	r7, r5, #84
	cmp	r3, r6
	bhi	.L13322
	ldr	r3, [sp, #24]
	str	r4, [sp, #20]
	str	r3, [r8, #2020]
	b	.L13314
.L13324:
	mvn	r4, #11
	b	.L13318
.L13327:
	mov	r2, r0
	mvn	r3, #21
	ldr	r1, .L13330+8
	movw	r0, #:lower16:.LC699
	movt	r0, #:upper16:.LC699
	str	r3, [sp, #20]
	bl	printk
	b	.L13314
.L13328:
	movw	r2, #:lower16:.LC706
	movw	r0, #:lower16:.LC702
	ldr	r1, .L13330+12
	movt	r2, #:upper16:.LC706
	movt	r0, #:upper16:.LC702
	bl	printk
	mov	r0, r4
	mvn	r4, #11
	bl	kfree
	b	.L13318
.L13322:
	ldr	r9, [r7, #-84]
	add	r6, r6, #1
	ldr	r0, [r9, #32]
	bl	destroy_workqueue
	add	r0, r5, #4
	mov	r5, r7
	bl	platform_driver_unregister
	mov	r0, r9
	bl	kfree
	b	.L13321
.L13331:
	.align	2
.L13330:
	.word	.LANCHOR0+1852
	.word	.LANCHOR3-4072
	.word	.LANCHOR5-2820
	.word	.LANCHOR5-2800
	.fnend
	.size	ghsuart_ctrl_setup, .-ghsuart_ctrl_setup
	.align	2
	.global	event_string
	.syntax unified
	.arm
	.fpu softvfp
	.type	event_string, %function
event_string:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	cmp	r0, #8
	bhi	.L13334
	movw	r3, #:lower16:.LANCHOR5
	movt	r3, #:upper16:.LANCHOR5
	add	r0, r3, r0, lsl #2
	ldr	r0, [r0, #-2776]
	bx	lr
.L13334:
	movw	r0, #:lower16:.LC364
	movt	r0, #:upper16:.LC364
	bx	lr
	.fnend
	.size	event_string, .-event_string
	.align	2
	.global	ghsuart_data_disconnect
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_data_disconnect, %function
ghsuart_data_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r2, #84
	movt	r3, #:upper16:.LANCHOR0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	ip, [r3, #8]
	mla	r3, r2, r1, r3
	ldr	r4, [r3, #12]
	cmp	r1, ip
	bhi	.L13348
	clz	r3, r4
	cmp	r0, #0
	lsr	r3, r3, #5
	moveq	r5, #1
	mov	r6, r0
	movne	r5, r3
	cmp	r5, #0
	bne	.L13349
	mov	r0, r4
	bl	ghsuart_data_free_buffers.part.0
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L13338
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #8]
	str	r5, [r3]
.L13338:
	ldr	r0, [r4, #12]
	cmp	r0, #0
	beq	.L13339
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #12]
	mov	r2, #0
	str	r2, [r3]
.L13339:
	ldr	r5, [r4, #16]
	mov	r3, #0
	str	r3, [r4, #4]
	cmp	r5, r3
	beq	.L13350
.L13340:
	add	r8, r4, #72
	mov	r5, #0
	mov	r0, r8
	add	r7, r4, #184
	bl	_raw_spin_lock_irqsave
	mov	r6, r0
	mov	r1, r7
	str	r5, [r4, #8]
	mov	r0, #2
	str	r5, [r4, #192]
	bl	_clear_bit
	mov	r1, r6
	mov	r0, r8
	add	r6, r4, #104
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r1, r7
	str	r5, [r4, #12]
	mov	r5, r0
	mov	r0, #1
	bl	_clear_bit
	mov	r1, r5
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	add	r1, r4, #128
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	ldr	r0, [r4, #108]
	ldrd	r4, [sp]
	add	sp, sp, #24
	b	queue_work
.L13350:
	add	r7, r4, #20
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	mov	r0, r7
	str	r5, [r6, #132]
	str	r5, [r4, #24]
	str	r5, [r4, #196]
	bl	_raw_spin_unlock_irqrestore
	b	.L13340
.L13349:
	movw	r0, #:lower16:.LC15
	ldr	r1, .L13351
	movt	r0, #:upper16:.LC15
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	printk
.L13348:
	movw	r0, #:lower16:.LC96
	mov	r2, r1
	ldr	r1, .L13351
	movt	r0, #:upper16:.LC96
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	printk
.L13352:
	.align	2
.L13351:
	.word	.LANCHOR5-2740
	.fnend
	.size	ghsuart_data_disconnect, .-ghsuart_data_disconnect
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	frmnet_disable, %function
frmnet_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	add	r7, r0, #124
	strd	r8, [sp, #16]
	add	r8, r0, #136
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r0, [r0, #128]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [r4, #128]
	mov	r3, #0
	mov	r0, r7
	str	r3, [r2]
	str	r3, [r4, #112]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #136]
	mov	r5, r0
	cmp	r3, r8
	beq	.L13357
	mov	r10, #256
	mov	r9, #512
.L13354:
	ldm	r3, {r1, r2}
	mov	r6, r3
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r10, [r3]
	str	r9, [r3, #4]
	ldr	r0, [r6, #-8]!
	bl	kfree
	mov	r0, r6
	bl	kfree
	ldr	r3, [r4, #136]
	cmp	r3, r8
	bne	.L13354
.L13357:
	mov	r3, #0
	mov	r1, r5
	mov	r0, r7
	movw	r5, #:lower16:.LANCHOR0
	str	r3, [r4, #144]
	movt	r5, #:upper16:.LANCHOR0
	bl	_raw_spin_unlock_irqrestore
	ldrb	r0, [r4, #108]	@ zero_extendqisi2
	lsl	r3, r0, #1
	add	r2, r3, r0
	add	r2, r5, r2, lsl #3
	ldr	r6, [r2, #220]
	ldr	ip, [r2, #224]
	sub	r1, ip, #1
	cmp	r1, #9
	movwhi	r2, #:lower16:.LC364
	movthi	r2, #:upper16:.LC364
	bhi	.L13356
	movw	r2, #:lower16:.LANCHOR2
	movt	r2, #:upper16:.LANCHOR2
	add	r2, r2, r1, lsl #2
	ldr	r2, [r2, #2460]
.L13356:
	sub	lr, r6, #1
	cmp	lr, #9
	movwhi	r7, #:lower16:.LC364
	movthi	r7, #:upper16:.LC364
	bhi	.L13358
	movw	r1, #:lower16:.LANCHOR2
	movt	r1, #:upper16:.LANCHOR2
	add	r1, r1, lr, lsl #2
	ldr	r7, [r1, #2460]
.L13358:
	add	r1, r3, r0
	sub	ip, ip, #3
	add	r1, r5, r1, lsl #3
	ldr	r1, [r1, #232]
	cmp	ip, #7
	ldrls	pc, [pc, ip, asl #2]
	b	.L13359
.L13361:
	.word	.L13365
	.word	.L13364
	.word	.L13359
	.word	.L13359
	.word	.L13359
	.word	.L13363
	.word	.L13362
	.word	.L13360
.L13362:
	ldr	r3, [r5, #2020]
	cmp	r1, r3
	bhi	.L13379
	mov	r2, #84
	cmp	r4, #0
	mla	r1, r2, r1, r5
	ldr	r9, [r1, #1852]
	clz	r8, r9
	lsr	r8, r8, #5
	moveq	r8, #1
	cmp	r8, #0
	bne	.L13380
	add	r10, r9, #8
	mov	r0, r10
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	mov	r0, r10
	str	r8, [r4, #88]
	str	r8, [r4, #92]
	str	r8, [r9, #12]
	str	r8, [r9, #68]
	str	r8, [r9, #92]
	bl	_raw_spin_unlock_irqrestore
	add	r1, r9, #52
	ldr	r0, [r9, #32]
	bl	queue_work
	ldrb	r0, [r4, #108]	@ zero_extendqisi2
	lsl	r3, r0, #1
.L13360:
	add	r3, r3, r0
	add	r5, r5, r3, lsl #3
	sub	r2, r6, #5
	ldr	r1, [r5, #228]
	cmp	r2, #5
	ldrls	pc, [pc, r2, asl #2]
	b	.L13368
.L13370:
	.word	.L13373
	.word	.L13373
	.word	.L13373
	.word	.L13372
	.word	.L13371
	.word	.L13353
.L13373:
	mov	r2, r6
	mov	r0, r4
	ldrd	r4, [sp]
	uxtb	r1, r1
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	gbam_disconnect
.L13353:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L13371:
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	ghsuart_data_disconnect
.L13372:
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	ghsic_data_disconnect
.L13363:
	mov	r0, r4
	bl	ghsic_ctrl_disconnect
	ldrb	r0, [r4, #108]	@ zero_extendqisi2
	lsl	r3, r0, #1
	b	.L13360
.L13364:
	mov	r0, r4
	bl	gqti_ctrl_disconnect
	ldrb	r0, [r4, #108]	@ zero_extendqisi2
	lsl	r3, r0, #1
	b	.L13360
.L13365:
	mov	r0, r4
	uxtb	r1, r1
	bl	gsmd_ctrl_disconnect
	ldrb	r0, [r4, #108]	@ zero_extendqisi2
	lsl	r3, r0, #1
	b	.L13360
.L13379:
	movw	r0, #:lower16:.LC96
	mov	r2, r1
	ldr	r1, .L13381
	movt	r0, #:upper16:.LC96
	bl	printk
	ldrb	r0, [r4, #108]	@ zero_extendqisi2
	lsl	r3, r0, #1
	b	.L13360
.L13380:
	movw	r0, #:lower16:.LC569
	ldr	r1, .L13381
	movt	r0, #:upper16:.LC569
	bl	printk
	ldrb	r0, [r4, #108]	@ zero_extendqisi2
	lsl	r3, r0, #1
	b	.L13360
.L13368:
	movw	r0, #:lower16:.LC365
	mov	r2, r7
.L13378:
	ldr	r1, .L13381+4
	movt	r0, #:upper16:.LC365
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	printk
.L13359:
	movw	r0, #:lower16:.LC365
	b	.L13378
.L13382:
	.align	2
.L13381:
	.word	.LANCHOR5-2844
	.word	.LANCHOR5-2716
	.fnend
	.size	frmnet_disable, .-frmnet_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gser_disable, %function
gser_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r0, #140]
	sub	r3, r3, #1
	cmp	r3, #9
	bls	.L13398
	movw	r2, #:lower16:.LC364
	movt	r2, #:upper16:.LC364
.L13384:
	movw	r0, #:lower16:.LC688
	ldr	r1, .L13399
	movt	r0, #:upper16:.LC688
	bl	printk
.L13391:
	ldr	r0, [r4, #152]
	ldr	r3, [r0, #8]
	ldr	r2, [r3, #36]
	cmp	r2, #0
	beq	.L13392
	blx	r2
	ldr	r0, [r4, #152]
	ldr	r3, [r0, #8]
.L13392:
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [r4, #152]
	mov	r3, #0
	str	r3, [r2]
	strb	r3, [r4, #138]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L13398:
	ldrb	r0, [r0, #137]	@ zero_extendqisi2
	movw	r1, #:lower16:.LANCHOR0
	movw	r2, #:lower16:.LANCHOR2
	movt	r1, #:upper16:.LANCHOR0
	movt	r2, #:upper16:.LANCHOR2
	add	r2, r2, r3, lsl #2
	add	r0, r0, r0, lsl #1
	ldr	r2, [r2, #2460]
	add	r1, r1, r0, lsl #2
	ldr	r5, [r1, #332]
	cmp	r3, #8
	ldrls	pc, [pc, r3, asl #2]
	b	.L13384
.L13386:
	.word	.L13390
	.word	.L13389
	.word	.L13388
	.word	.L13384
	.word	.L13384
	.word	.L13384
	.word	.L13384
	.word	.L13387
	.word	.L13385
.L13385:
	mov	r1, r5
	mov	r0, r4
	bl	ghsuart_data_disconnect
	b	.L13391
.L13390:
	mov	r0, r4
	bl	gserial_disconnect
	b	.L13391
.L13389:
	uxtb	r1, r5
	mov	r0, r4
	bl	gsdio_disconnect
	b	.L13391
.L13388:
	uxtb	r1, r5
	mov	r0, r4
	bl	gsmd_disconnect
	b	.L13391
.L13387:
	mov	r1, r5
	mov	r0, r4
	bl	ghsic_ctrl_disconnect
	mov	r1, r5
	mov	r0, r4
	bl	ghsic_data_disconnect
	b	.L13391
.L13400:
	.align	2
.L13399:
	.word	.LANCHOR5-2692
	.fnend
	.size	gser_disable, .-gser_disable
	.align	2
	.global	ghsuart_data_connect
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_data_connect, %function
ghsuart_data_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r2, #84
	movt	r3, #:upper16:.LANCHOR0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	ip, [r3, #8]
	mla	r3, r2, r1, r3
	ldr	r4, [r3, #12]
	cmp	r1, ip
	bhi	.L13414
	cmp	r4, #0
	cmpne	r0, #0
	mov	r5, r0
	beq	.L13415
	ldr	r3, [r4, #16]
	add	r7, r4, #72
	add	r6, r4, #104
	mov	r0, r7
	cmp	r3, #0
	bne	.L13405
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #80]
	mov	r1, r0
	mov	r0, r7
	add	r8, r4, #20
	str	r3, [r4, #8]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #84]
	mov	r1, r0
	mov	r0, r6
	str	r3, [r4, #12]
	bl	_raw_spin_unlock_irqrestore
	movw	r3, #:lower16:.LANCHOR4
	mov	r0, r8
	movt	r3, #:upper16:.LANCHOR4
	ldr	r2, [r3, #-984]
	ldr	r3, [r3, #-980]
	str	r2, [r4, #44]
	str	r3, [r4, #76]
	ldr	r3, [r5, #80]
	str	r4, [r3]
	ldr	r3, [r5, #84]
	str	r4, [r3]
	bl	_raw_spin_lock_irqsave
	movw	r3, #:lower16:ghsuart_send_controlbits_tomodem
	mov	r1, r0
	movt	r3, #:upper16:ghsuart_send_controlbits_tomodem
	mov	r0, r8
	str	r3, [r5, #132]
	str	r5, [r4, #24]
	bl	_raw_spin_unlock_irqrestore
.L13406:
	ldr	r0, [r4, #8]
	ldr	r1, [r0, #28]
	ldrh	r3, [r1, #4]	@ unaligned
	cmp	r3, #0
	beq	.L13411
	ldr	r3, [r0, #8]
	ldr	r3, [r3]
	blx	r3
	subs	r5, r0, #0
	bne	.L13407
	ldr	r0, [r4, #12]
	ldr	r1, [r0, #28]
	ldrh	r3, [r1, #4]	@ unaligned
	cmp	r3, #0
	beq	.L13412
	ldr	r3, [r0, #8]
	ldr	r3, [r3]
	blx	r3
	subs	r5, r0, #0
	bne	.L13409
	mov	r3, #1
	mov	r0, r7
	str	r3, [r4, #4]
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	mov	r0, r7
	str	r5, [r4, #208]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	mov	r0, r6
	str	r5, [r4, #204]
	str	r5, [r4, #212]
	bl	_raw_spin_unlock_irqrestore
	add	r1, r4, #112
	ldr	r0, [r4, #108]
	bl	queue_work
.L13401:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L13405:
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #76]
	mov	r1, r0
	mov	r0, r7
	str	r3, [r4, #8]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #80]
	mov	r1, r0
	mov	r0, r6
	str	r3, [r4, #12]
	bl	_raw_spin_unlock_irqrestore
	movw	r3, #:lower16:.LANCHOR4
	movt	r3, #:upper16:.LANCHOR4
	ldr	r2, [r3, #-976]
	ldr	r3, [r3, #-972]
	str	r2, [r4, #44]
	str	r3, [r4, #76]
	ldr	r3, [r5, #76]
	str	r4, [r3]
	ldr	r3, [r5, #80]
	str	r4, [r3]
	b	.L13406
.L13414:
	movw	r0, #:lower16:.LC96
	mov	r2, r1
	ldr	r1, .L13416
	movt	r0, #:upper16:.LC96
	mvn	r5, #18
	bl	printk
	b	.L13401
.L13412:
	mvn	r5, #21
.L13409:
	movw	r0, #:lower16:.LC197
	ldr	r1, .L13416
	movt	r0, #:upper16:.LC197
	ldr	r2, [r4, #12]
	bl	printk
	ldr	r0, [r4, #8]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L13401
.L13411:
	mvn	r5, #21
.L13407:
	movw	r0, #:lower16:.LC196
	ldr	r1, .L13416
	movt	r0, #:upper16:.LC196
	ldr	r2, [r4, #8]
	bl	printk
	b	.L13401
.L13415:
	movw	r0, #:lower16:.LC15
	ldr	r1, .L13416
	mvn	r5, #18
	movt	r0, #:upper16:.LC15
	bl	printk
	b	.L13401
.L13417:
	.align	2
.L13416:
	.word	.LANCHOR5-2672
	.fnend
	.size	ghsuart_data_connect, .-ghsuart_data_connect
	.section	.rodata.str1.4
	.align	2
.LC707:
	.ascii	"<3>%s: ghsic_ctrl_connect failed: err:%d\012\000"
	.align	2
.LC708:
	.ascii	"<3>%s: ghsic_data_connect failed: err:%d\012\000"
	.align	2
.LC709:
	.ascii	"<3>%s: ghsuart_data_connect failed: err:%d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gser_set_alt, %function
gser_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r0, [r0, #152]
	ldr	r2, [r4, #20]
	ldr	r3, [r0]
	ldr	r7, [r2, #24]
	cmp	r3, #0
	beq	.L13419
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #152]
.L13419:
	ldr	r6, [r0, #28]
	cmp	r6, #0
	beq	.L13464
.L13420:
	ldrh	r3, [r6, #4]	@ unaligned
	cmp	r3, #0
	beq	.L13448
	ldr	r3, [r0, #8]
	mov	r1, r6
	ldr	r3, [r3]
	blx	r3
	subs	r5, r0, #0
	bne	.L13465
	ldr	r3, [r4, #152]
	str	r4, [r3]
	ldr	r2, [r4, #80]
	ldr	r3, [r2]
	cmp	r3, #0
	beq	.L13425
	ldr	r3, [r4, #140]
	sub	r3, r3, #1
	cmp	r3, #9
	bls	.L13466
	movw	r2, #:lower16:.LC364
	movt	r2, #:upper16:.LC364
.L13426:
	movw	r0, #:lower16:.LC688
	ldr	r1, .L13469
	movt	r0, #:upper16:.LC688
	bl	printk
	ldr	r2, [r4, #80]
.L13425:
	ldr	r3, [r2, #28]
	cmp	r3, #0
	beq	.L13433
	ldr	r3, [r4, #84]
	ldr	r3, [r3, #28]
	cmp	r3, #0
	beq	.L13433
.L13434:
	ldr	r3, [r4, #140]
	sub	r3, r3, #1
	cmp	r3, #9
	bls	.L13467
	movw	r2, #:lower16:.LC364
	movt	r2, #:upper16:.LC364
.L13437:
	movw	r0, #:lower16:.LC365
	ldr	r1, .L13469+4
	movt	r0, #:upper16:.LC365
	bl	printk
.L13444:
	mov	r3, #1
	strb	r3, [r4, #138]
.L13418:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L13467:
	ldrb	r0, [r4, #137]	@ zero_extendqisi2
	movw	r1, #:lower16:.LANCHOR0
	movw	r2, #:lower16:.LANCHOR2
	movt	r1, #:upper16:.LANCHOR0
	movt	r2, #:upper16:.LANCHOR2
	add	r2, r2, r3, lsl #2
	add	r0, r0, r0, lsl #1
	ldr	r2, [r2, #2460]
	add	r1, r1, r0, lsl #2
	ldr	r6, [r1, #332]
	cmp	r3, #8
	ldrls	pc, [pc, r3, asl #2]
	b	.L13437
.L13439:
	.word	.L13443
	.word	.L13442
	.word	.L13441
	.word	.L13437
	.word	.L13437
	.word	.L13437
	.word	.L13437
	.word	.L13440
	.word	.L13438
.L13466:
	ldrb	r0, [r4, #137]	@ zero_extendqisi2
	movw	r1, #:lower16:.LANCHOR0
	movw	r2, #:lower16:.LANCHOR2
	movt	r1, #:upper16:.LANCHOR0
	movt	r2, #:upper16:.LANCHOR2
	add	r2, r2, r3, lsl #2
	add	r0, r0, r0, lsl #1
	ldr	r2, [r2, #2460]
	add	r1, r1, r0, lsl #2
	ldr	r6, [r1, #332]
	cmp	r3, #8
	ldrls	pc, [pc, r3, asl #2]
	b	.L13426
.L13428:
	.word	.L13432
	.word	.L13431
	.word	.L13430
	.word	.L13426
	.word	.L13426
	.word	.L13426
	.word	.L13426
	.word	.L13429
	.word	.L13427
.L13433:
	mov	r1, r4
	ldr	r0, [r7]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L13436
	mov	r1, r4
	ldr	r0, [r7]
	ldr	r2, [r4, #84]
	bl	config_ep_by_speed
	cmp	r0, #0
	beq	.L13434
.L13436:
	ldr	r2, [r4, #80]
	mov	r3, #0
	mvn	r5, #21
	str	r3, [r2, #28]
	ldr	r2, [r4, #84]
	str	r3, [r2, #28]
	b	.L13418
.L13465:
	ldr	r0, [r4, #152]
.L13423:
	ldr	ip, [r7]
	movw	r1, #:lower16:.LC555
	mov	r3, r5
	movt	r1, #:upper16:.LC555
	ldr	r2, [r0, #4]
	add	r0, ip, #32
	bl	dev_err
	b	.L13418
.L13442:
	uxtb	r1, r6
	mov	r0, r4
	bl	gsdio_connect
	b	.L13444
.L13441:
	uxtb	r1, r6
	mov	r0, r4
	bl	gsmd_connect
	b	.L13444
.L13440:
	mov	r1, r6
	mov	r0, r4
	bl	ghsic_ctrl_connect
	subs	r2, r0, #0
	bne	.L13468
	mov	r1, r6
	mov	r0, r4
	bl	ghsic_data_connect
	subs	r2, r0, #0
	beq	.L13444
	movw	r0, #:lower16:.LC708
	ldr	r1, .L13469+4
	movt	r0, #:upper16:.LC708
	bl	printk
	mov	r1, r6
	mov	r0, r4
	bl	ghsic_ctrl_disconnect
	b	.L13444
.L13438:
	mov	r1, r6
	mov	r0, r4
	bl	ghsuart_data_connect
	subs	r2, r0, #0
	beq	.L13444
	movw	r0, #:lower16:.LC709
	ldr	r1, .L13469+4
	movt	r0, #:upper16:.LC709
	bl	printk
	b	.L13444
.L13443:
	uxtb	r1, r6
	mov	r0, r4
	bl	gserial_connect
	b	.L13444
.L13427:
	mov	r1, r6
	mov	r0, r4
	bl	ghsuart_data_disconnect
	ldr	r2, [r4, #80]
	b	.L13425
.L13429:
	mov	r1, r6
	mov	r0, r4
	bl	ghsic_ctrl_disconnect
	mov	r1, r6
	mov	r0, r4
	bl	ghsic_data_disconnect
	ldr	r2, [r4, #80]
	b	.L13425
.L13430:
	uxtb	r1, r6
	mov	r0, r4
	bl	gsmd_disconnect
	ldr	r2, [r4, #80]
	b	.L13425
.L13432:
	mov	r0, r4
	bl	gserial_disconnect
	ldr	r2, [r4, #80]
	b	.L13425
.L13431:
	uxtb	r1, r6
	mov	r0, r4
	bl	gsdio_disconnect
	ldr	r2, [r4, #80]
	b	.L13425
.L13464:
	mov	r2, r0
	mov	r1, r4
	ldr	r0, [r7]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L13421
	ldr	r0, [r4, #152]
	ldr	r6, [r0, #28]
	b	.L13420
.L13448:
	mvn	r5, #21
	b	.L13423
.L13421:
	ldr	r3, [r4, #152]
	mvn	r5, #21
	str	r6, [r3, #28]
	b	.L13418
.L13468:
	movw	r0, #:lower16:.LC707
	ldr	r1, .L13469+4
	movt	r0, #:upper16:.LC707
	bl	printk
	b	.L13444
.L13470:
	.align	2
.L13469:
	.word	.LANCHOR5-2692
	.word	.LANCHOR5-2648
	.fnend
	.size	gser_set_alt, .-gser_set_alt
	.section	.rodata.str1.4
	.align	2
.LC710:
	.ascii	"<3>%s: gsmd_ctrl_connect failed: err:%d\012\000"
	.align	2
.LC711:
	.ascii	"<3>%s: gqti_ctrl_connect failed: err:%d\012\000"
	.align	2
.LC712:
	.ascii	"<3>%s: ghsuart_ctrl_connect failed: err:%d\012\000"
	.align	2
.LC713:
	.ascii	"<3>%s: usb_bam_get_connection_idx failed\012\000"
	.align	2
.LC714:
	.ascii	"<3>%s: gbam_connect failed: err:%d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	frmnet_set_alt, %function
frmnet_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #20
	sub	sp, sp, #20
	ldr	r5, [r0, #120]
	ldr	r2, [r0, #128]
	ldr	r3, [r2]
	cmp	r3, #0
	beq	.L13472
	ldr	r3, [r2, #8]
	mov	r0, r2
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [r4, #128]
.L13472:
	mov	r1, r4
	ldr	r0, [r5]
	bl	config_ep_by_speed
	subs	r8, r0, #0
	ldr	r2, [r4, #128]
	bne	.L13561
	ldr	r1, [r2, #28]
	ldrh	r3, [r1, #4]	@ unaligned
	cmp	r3, #0
	beq	.L13517
	ldr	r3, [r2, #8]
	mov	r0, r2
	ldr	r3, [r3]
	blx	r3
	subs	r8, r0, #0
	ldrne	r2, [r4, #128]
	bne	.L13475
	ldr	r3, [r4, #128]
	str	r4, [r3]
	ldr	r2, [r4, #76]
	ldr	r3, [r2, #28]
	cmp	r3, #0
	beq	.L13477
	ldr	r3, [r4, #80]
	ldr	r3, [r3, #28]
	cmp	r3, #0
	beq	.L13477
.L13478:
	mov	r3, #1
	mov	r7, r4
	str	r3, [r4, #112]
	ldr	r5, [r7, #136]!
	cmp	r5, r7
	beq	.L13471
	add	r6, r4, #124
	mvn	r9, #94
	mov	r10, #256
	b	.L13516
.L13563:
	ldr	r2, [fp]
	cmp	r2, #0
	beq	.L13560
	ldr	r2, [r4, #144]
	add	r2, r2, #1
	cmp	r2, #1
	str	r2, [r4, #144]
	bne	.L13560
	ldr	ip, [fp]
	mov	r0, r6
	strb	r9, [ip]
	strb	r2, [ip, #1]
	strb	r3, [ip, #2]
	strb	r3, [ip, #3]
	ldrh	r2, [r4, #104]
	strh	r2, [ip, #4]	@ unaligned
	strb	r3, [ip, #6]
	strb	r3, [ip, #7]
	bl	_raw_spin_unlock_irqrestore
	ldrd	r0, [r4, #128]
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	bne	.L13562
	ldr	r5, [r5]
	cmp	r5, r7
	beq	.L13471
.L13516:
	mov	r0, r6
	ldr	fp, [r4, #132]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #112]
	mov	r1, r0
	cmp	fp, #0
	clz	r3, r3
	lsr	r3, r3, #5
	moveq	r3, #1
	cmp	r3, #0
	beq	.L13563
.L13560:
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
.L13564:
	ldr	r5, [r5]
	cmp	r5, r7
	bne	.L13516
.L13471:
	mov	r0, r8
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L13562:
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #136]
	mov	fp, r0
	cmp	r3, r7
	beq	.L13514
	ldr	r2, [r4, #144]
	cmp	r2, #0
	beq	.L13514
	sub	r2, r2, #1
	mov	ip, #512
	str	r2, [r4, #144]
	ldrd	r0, [r3]
	mov	r2, r3
	str	r1, [r0, #4]
	str	r0, [r1]
	stm	r3, {r10, ip}
	ldr	r0, [r2, #-8]!
	str	r2, [sp, #8]
	str	r2, [sp, #12]
	bl	kfree
	ldr	r2, [sp, #8]
	mov	r0, r2
	bl	kfree
.L13514:
	mov	r1, fp
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	b	.L13564
.L13477:
	mov	r1, r4
	ldr	r0, [r5]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L13480
	mov	r1, r4
	ldr	r0, [r5]
	ldr	r2, [r4, #80]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L13480
	ldrb	r0, [r4, #108]	@ zero_extendqisi2
	movw	r5, #:lower16:.LANCHOR0
	ldr	r2, [r4, #120]
	movt	r5, #:upper16:.LANCHOR0
	lsl	r3, r0, #1
	ldr	r10, [r2]
	add	r2, r3, r0
	add	r2, r5, r2, lsl #3
	ldrd	r6, [r2, #220]
	sub	r1, r7, #1
	cmp	r1, #9
	movwhi	r2, #:lower16:.LC364
	movthi	r2, #:upper16:.LC364
	bls	.L13565
.L13481:
	sub	ip, r6, #1
	cmp	ip, #9
	movwhi	r9, #:lower16:.LC364
	movthi	r9, #:upper16:.LC364
	bls	.L13566
.L13482:
	add	r1, r3, r0
	sub	ip, r7, #3
	add	r1, r5, r1, lsl #3
	ldr	r1, [r1, #232]
	cmp	ip, #7
	ldrls	pc, [pc, ip, asl #2]
	b	.L13483
.L13485:
	.word	.L13489
	.word	.L13488
	.word	.L13483
	.word	.L13483
	.word	.L13483
	.word	.L13487
	.word	.L13486
	.word	.L13484
.L13489:
	uxtb	r2, r1
	cmp	r2, #5
	bhi	.L13490
	mov	r3, #84
	mla	r2, r3, r2, r5
	ldr	r2, [r2, #2288]
	cmp	r2, #0
	beq	.L13490
	cmp	r4, #0
	beq	.L13567
	mla	r3, r3, r1, r5
	ldr	fp, [r3, #2288]
	add	r1, fp, #108
	mov	r0, r1
	str	r1, [sp, #8]
	bl	_raw_spin_lock_irqsave
	ldr	r1, [sp, #8]
	movw	r2, #:lower16:grmnet_ctrl_smd_send_cpkt_tomodem
	movw	r3, #:lower16:gsmd_ctrl_send_cbits_tomodem
	movt	r3, #:upper16:gsmd_ctrl_send_cbits_tomodem
	movt	r2, #:upper16:grmnet_ctrl_smd_send_cpkt_tomodem
	str	r4, [fp, #104]
	mov	ip, r0
	strd	r2, [r4, #88]
	mov	r0, r1
	mov	r1, ip
	bl	_raw_spin_unlock_irqrestore
	add	r1, fp, #112
	mov	r2, #0
	ldr	r0, [r5, #2280]
	bl	queue_delayed_work
	ldrb	r0, [r4, #108]	@ zero_extendqisi2
	lsl	r3, r0, #1
.L13484:
	add	r3, r3, r0
	add	r5, r5, r3, lsl #3
	sub	r2, r6, #5
	ldr	r5, [r5, #228]
	cmp	r2, #5
	ldrls	pc, [pc, r2, asl #2]
	b	.L13499
.L13500:
	.word	.L13520
	.word	.L13504
	.word	.L13503
	.word	.L13502
	.word	.L13501
	.word	.L13521
.L13561:
	mov	r0, #0
	movw	r1, #:lower16:.LC557
	movt	r1, #:upper16:.LC557
	mov	r3, r8
	str	r0, [r2, #28]
	ldr	r0, [r5]
	ldr	r2, [r4, #128]
	add	r0, r0, #32
	ldr	r2, [r2, #4]
	bl	dev_err
	b	.L13471
.L13566:
	movw	r1, #:lower16:.LANCHOR2
	movt	r1, #:upper16:.LANCHOR2
	add	r1, r1, ip, lsl #2
	ldr	r9, [r1, #2460]
	b	.L13482
.L13565:
	movw	r2, #:lower16:.LANCHOR2
	movt	r2, #:upper16:.LANCHOR2
	add	r2, r2, r1, lsl #2
	ldr	r2, [r2, #2460]
	b	.L13481
.L13501:
	mov	r1, r5
	mov	r0, r4
	bl	ghsuart_data_connect
	subs	r8, r0, #0
	beq	.L13478
	movw	r0, #:lower16:.LC709
	ldr	r1, .L13569
	mov	r2, r8
	movt	r0, #:upper16:.LC709
	bl	printk
	mov	r1, r5
	mov	r0, r4
	bl	ghsuart_ctrl_disconnect
	b	.L13478
.L13502:
	mov	r1, r5
	mov	r0, r4
	bl	ghsic_data_connect
	subs	r8, r0, #0
	beq	.L13478
	movw	r0, #:lower16:.LC708
	ldr	r1, .L13569
	mov	r2, r8
	movt	r0, #:upper16:.LC708
	bl	printk
	mov	r1, r5
	mov	r0, r4
	bl	ghsic_ctrl_disconnect
	b	.L13478
.L13503:
	mov	r3, r5
	mov	r2, #0
	ldr	r0, [r10, #28]
	mov	r1, #2
	bl	usb_bam_get_connection_idx
	mov	r6, r0
	mov	r3, r5
	ldr	r0, [r10, #28]
	mov	r2, #1
	mov	r1, #2
	bl	usb_bam_get_connection_idx
	orrs	r3, r0, r6
	bmi	.L13559
	uxtb	ip, r0
	uxtb	r5, r5
	uxtb	r3, r6
	mov	r1, r5
	mov	r2, #7
	str	ip, [sp]
	mov	r0, r4
	bl	gbam_connect
	subs	r6, r0, #0
	beq	.L13478
	movw	r0, #:lower16:.LC714
	ldr	r1, .L13569
	mov	r2, r6
	movt	r0, #:upper16:.LC714
	bl	printk
	cmp	r7, #4
	bne	.L13509
	mov	r0, r4
	mov	r8, r6
	bl	gqti_ctrl_disconnect
	b	.L13478
.L13504:
	mov	r2, #0
	mov	r3, r5
	ldr	r0, [r10, #28]
	mov	r1, r2
	bl	usb_bam_get_connection_idx
	mov	r7, r0
	mov	r3, r5
	ldr	r0, [r10, #28]
	mov	r2, #1
	mov	r1, #0
	bl	usb_bam_get_connection_idx
	orrs	r3, r0, r7
	bmi	.L13559
	uxtb	r3, r7
	uxtb	r2, r0
.L13505:
	str	r2, [sp]
	uxtb	r5, r5
	mov	r0, r4
	mov	r2, r6
	mov	r1, r5
	bl	gbam_connect
	subs	r8, r0, #0
	beq	.L13478
	movw	r0, #:lower16:.LC714
	ldr	r1, .L13569
	mov	r2, r8
	movt	r0, #:upper16:.LC714
	bl	printk
	mov	r1, r5
	mov	r0, r4
	bl	gsmd_ctrl_disconnect
	b	.L13478
.L13520:
	mov	r2, #0
	mov	r3, r2
	b	.L13505
.L13521:
	mov	r8, #0
	b	.L13478
.L13486:
	mov	r0, r4
	bl	ghsuart_ctrl_connect
	subs	r2, r0, #0
	bne	.L13498
.L13558:
	ldrb	r0, [r4, #108]	@ zero_extendqisi2
	lsl	r3, r0, #1
	b	.L13484
.L13487:
	mov	r0, r4
	bl	ghsic_ctrl_connect
	subs	r2, r0, #0
	beq	.L13558
	movw	r0, #:lower16:.LC707
	ldr	r1, .L13569
	mov	r8, r2
	movt	r0, #:upper16:.LC707
	bl	printk
	b	.L13478
.L13488:
	cmp	r4, #0
	beq	.L13568
	ldr	fp, [r5, #4]
	add	r1, fp, #52
	mov	r0, r1
	str	r1, [sp, #8]
	bl	_raw_spin_lock_irqsave
	ldr	r1, [sp, #8]
	movw	r2, #:lower16:grmnet_ctrl_qti_send_cpkt_tomodem
	movw	r3, #:lower16:gqti_ctrl_notify_modem
	movt	r2, #:upper16:grmnet_ctrl_qti_send_cpkt_tomodem
	movt	r3, #:upper16:gqti_ctrl_notify_modem
	str	r4, [fp]
	mov	ip, r0
	strd	r2, [r4, #88]
	mov	r0, r1
	mov	r1, ip
	bl	_raw_spin_unlock_irqrestore
	mov	r2, #1
	add	r0, fp, #32
	mov	r3, #0
	mov	r1, #3
	str	r2, [fp, #8]
	bl	__wake_up
	cmp	fp, #0
	beq	.L13558
	ldr	r0, [fp]
	cmp	r0, #0
	beq	.L13558
	ldr	r3, [r0, #100]
	cmp	r3, #0
	beq	.L13558
	blx	r3
	ldrb	r0, [r4, #108]	@ zero_extendqisi2
	lsl	r3, r0, #1
	b	.L13484
.L13480:
	ldr	r2, [r4, #76]
	mov	r3, #0
	mvn	r8, #21
	str	r3, [r2, #28]
	ldr	r2, [r4, #80]
	str	r3, [r2, #28]
	b	.L13471
.L13498:
	movw	r0, #:lower16:.LC712
	ldr	r1, .L13569
	mov	r8, r2
	movt	r0, #:upper16:.LC712
	bl	printk
	b	.L13478
.L13559:
	movw	r0, #:lower16:.LC713
	ldr	r1, .L13569
	mov	r8, #0
	movt	r0, #:upper16:.LC713
	bl	printk
	uxtb	r1, r5
	mov	r0, r4
	bl	gsmd_ctrl_disconnect
	b	.L13478
.L13509:
	mov	r1, r5
	mov	r0, r4
	mov	r8, r6
	bl	gsmd_ctrl_disconnect
	b	.L13478
.L13568:
	ldr	r5, .L13569+4
	movw	r0, #:lower16:.LC569
	mvn	r8, #18
	movt	r0, #:upper16:.LC569
	sub	r1, r5, #4
	bl	printk
	movw	r0, #:lower16:.LC711
	add	r1, r5, #520
	mov	r2, r8
	movt	r0, #:upper16:.LC711
	bl	printk
	b	.L13478
.L13483:
	movw	r0, #:lower16:.LC365
	ldr	r1, .L13569
	mvn	r8, #18
	movt	r0, #:upper16:.LC365
	bl	printk
	b	.L13478
.L13567:
	movw	r0, #:lower16:.LC569
	ldr	r1, .L13569+8
	movt	r0, #:upper16:.LC569
	bl	printk
.L13493:
	movw	r0, #:lower16:.LC710
	mvn	r2, #18
	ldr	r1, .L13569
	movt	r0, #:upper16:.LC710
	mov	r8, r2
	bl	printk
	b	.L13478
.L13490:
	movw	r0, #:lower16:.LC568
	mov	r2, r1
	ldr	r1, .L13569+8
	movt	r0, #:upper16:.LC568
	bl	printk
	b	.L13493
.L13517:
	mvn	r8, #21
.L13475:
	movw	r0, #:lower16:.LC565
	ldr	r1, .L13569+12
	mov	r3, r8
	movt	r0, #:upper16:.LC565
	ldr	r2, [r2, #4]
	bl	printk
	b	.L13471
.L13499:
	movw	r0, #:lower16:.LC365
	ldr	r1, .L13569
	mov	r2, r9
	movt	r0, #:upper16:.LC365
	mvn	r8, #18
	bl	printk
	b	.L13478
.L13570:
	.align	2
.L13569:
	.word	.LANCHOR5-2616
	.word	.LANCHOR5-3136
	.word	.LANCHOR5-4036
	.word	.LANCHOR5-2632
	.fnend
	.size	frmnet_set_alt, .-frmnet_set_alt
	.align	2
	.global	ghsuart_data_setup
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_data_setup, %function
ghsuart_data_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	movw	r9, #:lower16:.LANCHOR0
	movt	r9, #:upper16:.LANCHOR0
	strd	r10, [sp, #24]
	ldr	r3, [r9, #8]
	str	lr, [sp, #32]
	.pad #36
	sub	sp, sp, #36
	str	r1, [sp, #12]
	add	r1, r3, r0
	cmp	r1, #4
	str	r3, [sp, #20]
	str	r3, [sp, #24]
	movle	r3, #0
	movgt	r3, #1
	cmp	r0, #0
	str	r1, [sp, #8]
	moveq	r3, #1
	cmp	r3, #0
	bne	.L13586
	ldr	r3, [sp, #20]
	cmp	r3, r1
	bge	.L13571
	ldr	r2, [sp, #12]
	mov	r7, r3
	mov	r3, #84
	movw	r10, #:lower16:kmalloc_caches
	ldr	fp, .L13589
	mul	r1, r3, r7
	movt	r10, #:upper16:kmalloc_caches
	cmp	r2, #0
	ldr	r2, .L13589+4
	moveq	r3, #11
	movne	r3, #10
	add	r6, r1, #4
	str	r3, [sp, #16]
	mov	r3, r7
	add	r6, r2, r6
	str	r1, [sp, #28]
	b	.L13577
.L13588:
	ldr	r3, [r9, #8]
.L13577:
	ldr	r0, [r10, #32]
	mov	r5, #0
	add	r3, r3, #1
	movw	r1, #32976
	mov	r4, #16
	str	r3, [r9, #8]
	cmp	r0, r5
	beq	.L13574
	bl	kmem_cache_alloc
	subs	r4, r0, #0
	beq	.L13575
.L13574:
	ldr	r3, .L13589+8
	mov	r2, #1
	mov	r1, #10
	str	r5, [sp]
	ldr	r8, [r3, r7, lsl #2]
	mov	r3, r5
	mov	r0, r8
	bl	__alloc_workqueue_key
	mov	r3, r0
	movw	r1, #:lower16:.LC494
	cmp	r3, #0
	mov	r2, fp
	movt	r1, #:upper16:.LC494
	add	r0, r4, #32
	str	r3, [r4, #108]
	beq	.L13587
	str	r7, [r4]
	add	r7, r7, #1
	str	r5, [r4, #20]
	str	r5, [r4, #28]
	str	r5, [r4, #104]
	str	r5, [r4, #72]
	bl	__init_waitqueue_head
	movw	r0, #:lower16:ghsuart_data_write_tomdm
	movw	r3, #:lower16:ghsuart_data_disconnect_w
	ldr	r2, [sp, #12]
	movt	r0, #:upper16:ghsuart_data_write_tomdm
	movt	r3, #:upper16:ghsuart_data_disconnect_w
	movw	lr, #:lower16:ghsuart_data_connect_w
	movw	ip, #:lower16:ghsuart_data_write_tohost
	movt	lr, #:upper16:ghsuart_data_connect_w
	movw	r1, #:lower16:ghsuart_data_probe
	str	r0, [r4, #156]
	add	r0, r4, #132
	movt	ip, #:upper16:ghsuart_data_write_tohost
	str	r3, [r4, #140]
	mov	r3, #2560
	movt	r1, #:upper16:ghsuart_data_probe
	str	r2, [r4, #16]
	movw	r2, #:lower16:ghsuart_data_remove
	str	r0, [r4, #132]
	movt	r2, #:upper16:ghsuart_data_remove
	str	r0, [r4, #136]
	add	r0, r4, #148
	str	lr, [r4, #124]
	add	lr, r4, #116
	str	r3, [r4, #112]
	str	r3, [r4, #128]
	str	r3, [r4, #144]
	str	r3, [r4, #160]
	add	r3, r4, #80
	str	r0, [r4, #148]
	str	r0, [r4, #152]
	add	r0, r4, #48
	str	r0, [r4, #48]
	str	r0, [r4, #52]
	add	r0, r4, #56
	str	r3, [r4, #80]
	str	r3, [r4, #84]
	ldr	r3, [sp, #16]
	str	r0, [r4, #56]
	str	r0, [r4, #60]
	add	r0, r4, #88
	str	lr, [r4, #116]
	str	lr, [r4, #120]
	add	lr, r4, #164
	str	r5, [r4, #64]
	str	r5, [r4, #68]
	str	r0, [r4, #88]
	str	r0, [r4, #92]
	mov	r0, r6
	str	r5, [r4, #96]
	str	r5, [r4, #100]
	str	lr, [r4, #164]
	str	lr, [r4, #168]
	str	ip, [r4, #172]
	str	r4, [r4, #176]
	str	r3, [r4, #180]
	str	r4, [r6, #-4]
	stm	r6, {r1, r2}
	add	r6, r6, #84
	str	r8, [r6, #-64]
	str	r5, [r6, #-56]
	bl	platform_driver_register
	ldr	r3, [sp, #8]
	cmp	r3, r7
	bgt	.L13588
.L13571:
	ldr	r0, [sp, #20]
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L13586:
	mov	r2, r0
	mvn	r3, #21
	ldr	r1, .L13589+12
	movw	r0, #:lower16:.LC699
	movt	r0, #:upper16:.LC699
	str	r3, [sp, #20]
	bl	printk
	b	.L13571
.L13587:
	movw	r0, #:lower16:.LC702
	ldr	r1, .L13589+16
	mov	r2, r8
	movt	r0, #:upper16:.LC702
	bl	printk
	mov	r0, r4
	bl	kfree
.L13575:
	ldr	r3, [r9, #8]
	movw	r0, #:lower16:.LC578
	mov	r2, r7
	ldr	r1, .L13589+4
	movt	r0, #:upper16:.LC578
	ldr	ip, [sp, #28]
	sub	r3, r3, #1
	add	r4, r1, ip
	ldr	r1, .L13589+12
	str	r3, [r9, #8]
	bl	printk
	ldr	r5, [sp, #20]
.L13578:
	ldr	r3, [r9, #8]
	add	r6, r4, #84
	cmp	r3, r5
	bhi	.L13580
	mvn	r3, #11
	str	r3, [sp, #20]
	ldr	r3, [sp, #24]
	str	r3, [r9, #8]
	b	.L13571
.L13580:
	ldr	r7, [r6, #-84]
	add	r5, r5, #1
	ldr	r0, [r7, #108]
	bl	destroy_workqueue
	mov	r0, r7
	bl	kfree
	add	r0, r4, #4
	mov	r4, r6
	bl	platform_driver_unregister
	b	.L13578
.L13590:
	.align	2
.L13589:
	.word	.LANCHOR3-4072
	.word	.LANCHOR0+12
	.word	.LANCHOR5-2576
	.word	.LANCHOR5-2596
	.word	.LANCHOR5-2568
	.fnend
	.size	ghsuart_data_setup, .-ghsuart_data_setup
	.section	.rodata.str1.4
	.align	2
.LC715:
	.ascii	"<3>%s: Max-%d instances supported\012\000"
	.align	2
.LC716:
	.ascii	"<3>%s: Unable to allocate rmnet device\012\000"
	.align	2
.LC717:
	.ascii	"<3>%s: Un-supported transport: %u\012\000"
	.align	2
.LC718:
	.ascii	"<3>%s: rmnet: Cannot open ctrl port:'%s' data port:"
	.ascii	"'%s'\012\000"
	.align	2
.LC719:
	.ascii	"<3>%s: supporting ports#%u port_id:%u\000"
	.align	2
.LC720:
	.ascii	"rmnet%d\000"
	.align	2
.LC721:
	.ascii	"<3>%s: Could not bind rmnet%u config\012\000"
	.align	2
.LC722:
	.ascii	"<3>%s: rmnet: Cannot setup transports\000"
	.section	.rodata.cst4
	.align	2
.LC723:
	.word	__stack_chk_guard
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_function_bind_config, %function
rmnet_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 152
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	r3, #:lower16:.LC723
	movt	r3, #:upper16:.LC723
	strd	r6, [sp, #8]
	strd	r10, [sp, #24]
	movw	fp, #:lower16:.LANCHOR3
	movt	fp, #:upper16:.LANCHOR3
	strd	r8, [sp, #16]
	mov	r8, r1
	ldr	r9, [fp, #-4024]
	str	lr, [sp, #32]
	.pad #156
	sub	sp, sp, #156
	ldr	r3, [r3]
	str	r3, [sp, #148]
	mov	r3,#0
	cmp	r9, #0
	beq	.L13718
.L13592:
	ldr	r3, [fp, #-4020]
	cmp	r3, #0
	ble	.L13669
	ldr	r7, .L13734
	movw	r9, #:lower16:.LANCHOR4
	movw	r10, #:lower16:.LC720
	movt	r9, #:upper16:.LANCHOR4
	movt	r10, #:upper16:.LC720
	mov	r5, #0
	str	r9, [sp, #4]
	sub	r3, r7, #220
	str	r3, [sp, #8]
.L13667:
	ldr	r3, [sp, #8]
	ldr	r3, [r3, #216]
	cmp	r3, r5
	bls	.L13719
	ldr	r3, [sp, #4]
	ldrb	r3, [r3, #-968]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L13663
	ldr	r1, [r8, #24]
	ldrb	r3, [r1, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L13720
	add	r3, r3, #1
	ldr	r2, [sp, #4]
	uxtb	r3, r3
	strb	r3, [r2, #-968]
	strb	r3, [r1, #48]
.L13663:
	ldr	r4, [r7, #20]
	add	r9, r4, #124
	mov	r0, r9
	bl	_raw_spin_lock_irqsave
	ldr	ip, [r8, #24]
	mov	r6, r0
	mov	r2, r5
	mov	r1, r10
	mov	r0, #32
	str	ip, [r4, #120]
	bl	kasprintf
	mov	ip, r0
	mov	r1, r6
	mov	r0, r9
	str	ip, [r4]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r4]
	cmp	r3, #0
	beq	.L13721
	ldr	r3, .L13734+4
	movw	r1, #:lower16:frmnet_bind
	movw	lr, #:lower16:frmnet_unbind
	movw	ip, #:lower16:frmnet_set_alt
	movt	r1, #:upper16:frmnet_bind
	movt	lr, #:upper16:frmnet_unbind
	movt	ip, #:upper16:frmnet_set_alt
	movw	r6, #:lower16:frmnet_disable
	movw	r0, #:lower16:frmnet_resume
	str	r3, [r4, #4]
	movw	r3, #:lower16:frmnet_setup
	movt	r0, #:upper16:frmnet_resume
	movt	r3, #:upper16:frmnet_setup
	str	r1, [r4, #24]
	movw	r1, #:lower16:frmnet_suspend
	str	lr, [r4, #28]
	movw	lr, #:lower16:frmnet_send_cpkt_response
	movt	r1, #:upper16:frmnet_suspend
	str	ip, [r4, #32]
	movw	ip, #:lower16:frmnet_disconnect
	movt	lr, #:upper16:frmnet_send_cpkt_response
	str	r3, [r4, #44]
	movw	r3, #:lower16:frmnet_connect
	movt	ip, #:upper16:frmnet_disconnect
	movt	r3, #:upper16:frmnet_connect
	movt	r6, #:upper16:frmnet_disable
	str	r6, [r4, #40]
	str	r1, [r4, #48]
	mov	r1, r4
	str	r0, [r4, #52]
	mov	r0, r8
	str	lr, [r4, #84]
	str	ip, [r4, #96]
	str	r3, [r4, #100]
	bl	usb_add_function
	cmp	r0, #0
	bne	.L13722
	ldr	r3, [fp, #-4020]
	add	r5, r5, #1
	add	r7, r7, #24
	cmp	r3, r5
	bgt	.L13667
.L13669:
	mov	r6, #0
.L13591:
	movw	r3, #:lower16:.LC723
	movt	r3, #:upper16:.LC723
	ldr	r2, [r3]
	ldr	r3, [sp, #148]
	eors	r2, r3, r2
	bne	.L13723
	mov	r0, r6
	add	sp, sp, #156
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L13718:
	mov	r3, #1
	ldr	r1, .L13734+8
	mov	r2, #50
	add	r0, sp, #48
	movw	r7, #:lower16:.LANCHOR0
	str	r3, [fp, #-4024]
	movt	r7, #:upper16:.LANCHOR0
	movw	r6, #:lower16:.LC253
	bl	strlcpy
	add	r0, sp, #48
	movt	r6, #:upper16:.LC253
	bl	strim
	mov	r3, r0
	ldr	r1, .L13734+12
	mov	r2, #50
	add	r0, sp, #98
	str	r7, [sp, #8]
	str	r3, [sp, #40]
	movw	r3, #:lower16:kmalloc_caches
	mov	r4, r3
	bl	strlcpy
	mov	r3, r4
	add	r0, sp, #98
	movt	r3, #:upper16:kmalloc_caches
	str	r3, [sp, #16]
	bl	strim
	ldr	r3, .L13734+16
	str	r9, [sp, #4]
	str	r8, [sp, #12]
	str	r9, [sp, #24]
	str	r0, [sp, #44]
	add	r3, r3, #100
	str	r3, [sp, #28]
	b	.L13594
.L13626:
	mov	r1, r6
	add	r0, sp, #40
	bl	strsep
	mov	r4, r0
	mov	r1, r6
	add	r0, sp, #40
	bl	strsep
	cmp	r4, #0
	cmpne	r0, #0
	bne	.L13724
.L13594:
	ldr	r3, [sp, #40]
	cmp	r3, #0
	bne	.L13626
	ldr	r3, [sp, #8]
	ldr	r8, [sp, #12]
	ldr	r0, [r3, #300]
	ldr	r1, [r3, #304]
	orrs	r3, r0, r1
	beq	.L13631
	bl	gbam_setup
	subs	r6, r0, #0
	bne	.L13630
.L13631:
	ldr	r3, [sp, #8]
	ldr	r1, [r3, #292]
	cmp	r1, #0
	bne	.L13725
.L13629:
	ldr	r3, [sp, #8]
	ldr	r0, [r3, #312]
	cmp	r0, #0
	bne	.L13726
.L13633:
	ldr	r3, [sp, #8]
	ldr	r0, [r3, #308]
	cmp	r0, #0
	bne	.L13727
.L13639:
	ldr	r3, [sp, #8]
	ldr	r0, [r3, #320]
	cmp	r0, #0
	bne	.L13728
.L13645:
	ldr	r3, [sp, #8]
	ldr	r0, [r3, #316]
	cmp	r0, #0
	beq	.L13592
	mov	r1, #1
	bl	ghsuart_ctrl_setup
	subs	r6, r0, #0
	blt	.L13630
	ldr	r2, [sp, #8]
	ldr	r3, [r2, #216]
	cmp	r3, #0
	beq	.L13592
	ldr	r2, [r2, #224]
	cmp	r2, #9
	bne	.L13657
	ldr	r2, [sp, #8]
	str	r6, [r2, #232]
	add	r6, r6, #1
.L13657:
	cmp	r3, #1
	bls	.L13592
	ldr	r2, [sp, #8]
	ldr	r2, [r2, #248]
	cmp	r2, #9
	bne	.L13659
	ldr	r2, [sp, #8]
	str	r6, [r2, #256]
	add	r6, r6, #1
.L13659:
	cmp	r3, #2
	beq	.L13592
	ldr	r3, [sp, #8]
	ldr	r3, [r3, #272]
	cmp	r3, #9
	bne	.L13592
	ldr	r3, [sp, #8]
	str	r6, [r3, #280]
	b	.L13592
.L13724:
	ldr	r3, [sp, #44]
	mov	r5, r0
	cmp	r3, #0
	beq	.L13595
	mov	r1, r6
	add	r0, sp, #44
	bl	strsep
	str	r0, [sp, #4]
.L13595:
	ldr	r8, [r7, #216]
	cmp	r8, #2
	bhi	.L13729
	ldr	r3, [sp, #16]
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L13671
	movw	r1, #32976
	bl	kmem_cache_alloc
	subs	r2, r0, #0
	beq	.L13599
	ldr	r8, [r7, #216]
.L13598:
	lsl	r10, r8, #1
	add	ip, r2, #136
	strb	r8, [r2, #108]
	mov	r0, #0
	add	r1, r10, r8
	add	r9, r7, r1, lsl #3
	str	r0, [r2, #124]
	mov	r0, r4
	str	ip, [r2, #136]
	str	ip, [r2, #140]
	str	r8, [r9, #236]
	str	r2, [r9, #240]
	bl	str_to_xport
	mov	r2, r0
	mov	r0, r5
	str	r2, [r9, #224]
	str	r2, [sp, #20]
	bl	str_to_xport
	ldr	r3, [sp, #20]
	str	r0, [r9, #220]
	sub	ip, r3, #3
	cmp	ip, #7
	ldrls	pc, [pc, ip, asl #2]
	b	.L13600
.L13602:
	.word	.L13606
	.word	.L13605
	.word	.L13600
	.word	.L13600
	.word	.L13600
	.word	.L13604
	.word	.L13603
	.word	.L13601
.L13671:
	mov	r2, #16
	b	.L13598
.L13725:
	add	r2, sp, #39
	mov	r0, #0
	bl	gsmd_ctrl_setup
	subs	r6, r0, #0
	bne	.L13630
	ldr	r2, [sp, #8]
	ldr	r3, [r2, #216]
	cmp	r3, #0
	beq	.L13629
	ldr	r2, [r2, #240]
	ldrb	r1, [sp, #39]	@ zero_extendqisi2
	cmp	r2, #0
	beq	.L13634
	ldrb	r0, [r2, #108]	@ zero_extendqisi2
	add	r0, r1, r0
	strb	r0, [r2, #108]
.L13634:
	cmp	r3, #1
	bls	.L13629
	ldr	r2, [sp, #8]
	ldr	r2, [r2, #264]
	cmp	r2, #0
	beq	.L13636
	ldrb	r0, [r2, #108]	@ zero_extendqisi2
	add	r0, r1, r0
	strb	r0, [r2, #108]
.L13636:
	cmp	r3, #2
	beq	.L13629
	ldr	r3, [sp, #8]
	ldr	r3, [r3, #288]
	cmp	r3, #0
	beq	.L13629
	ldrb	r2, [r3, #108]	@ zero_extendqisi2
	add	r1, r1, r2
	strb	r1, [r3, #108]
	b	.L13629
.L13726:
	mov	r1, #1
	bl	ghsic_data_setup
	subs	r6, r0, #0
	blt	.L13630
	ldr	r2, [sp, #8]
	ldr	r3, [r2, #216]
	cmp	r3, #0
	beq	.L13633
	ldr	r2, [r2, #220]
	cmp	r2, #8
	bne	.L13640
	ldr	r2, [sp, #8]
	str	r6, [r2, #228]
	add	r6, r6, #1
.L13640:
	cmp	r3, #1
	bls	.L13633
	ldr	r2, [sp, #8]
	ldr	r2, [r2, #244]
	cmp	r2, #8
	bne	.L13642
	ldr	r2, [sp, #8]
	str	r6, [r2, #252]
	add	r6, r6, #1
.L13642:
	cmp	r3, #2
	beq	.L13633
	ldr	r3, [sp, #8]
	ldr	r3, [r3, #268]
	cmp	r3, #8
	bne	.L13633
	ldr	r3, [sp, #8]
	str	r6, [r3, #276]
	b	.L13633
.L13727:
	mov	r1, #1
	bl	ghsic_ctrl_setup
	subs	r6, r0, #0
	blt	.L13630
	ldr	r2, [sp, #8]
	ldr	r3, [r2, #216]
	cmp	r3, #0
	beq	.L13639
	ldr	r2, [r2, #224]
	cmp	r2, #8
	bne	.L13646
	ldr	r2, [sp, #8]
	str	r6, [r2, #232]
	add	r6, r6, #1
.L13646:
	cmp	r3, #1
	bls	.L13639
	ldr	r2, [sp, #8]
	ldr	r2, [r2, #248]
	cmp	r2, #8
	bne	.L13648
	ldr	r2, [sp, #8]
	str	r6, [r2, #256]
	add	r6, r6, #1
.L13648:
	cmp	r3, #2
	beq	.L13639
	ldr	r3, [sp, #8]
	ldr	r3, [r3, #272]
	cmp	r3, #8
	bne	.L13639
	ldr	r3, [sp, #8]
	str	r6, [r3, #280]
	b	.L13639
.L13604:
	ldr	ip, [fp, #-4032]
	cmp	ip, #3
	bhi	.L13730
	ldr	r3, [sp, #4]
	cmp	r3, #0
	beq	.L13731
	ldr	r9, .L13734+20
	mov	r0, #104
	mov	r1, r3
	mov	r2, #20
	mla	r0, r0, ip, r9
	add	r0, r0, #84
	bl	strlcpy
.L13610:
	ldr	r0, [fp, #-4032]
	mov	ip, #104
	movw	r1, #:lower16:.LC701
	mov	r2, #20
	movt	r1, #:upper16:.LC701
	mla	r0, ip, r0, r9
	add	r0, r0, #84
	bl	strlcat
	ldr	r2, [fp, #-4032]
	add	r2, r2, #1
	str	r2, [fp, #-4032]
.L13608:
	add	r2, r10, r8
	ldr	r1, [r7, #308]
	add	r2, r7, r2, lsl #3
	ldr	r0, [r2, #220]
	add	ip, r1, #1
	str	r1, [r2, #232]
	str	ip, [r7, #308]
.L13601:
	sub	r2, r0, #5
	cmp	r2, #5
	ldrls	pc, [pc, r2, asl #2]
	b	.L13612
.L13614:
	.word	.L13618
	.word	.L13617
	.word	.L13617
	.word	.L13616
	.word	.L13615
	.word	.L13613
.L13617:
	ldr	r2, [r7, #304]
	add	r3, r10, r8
	add	r3, r7, r3, lsl #3
	add	r1, r2, #1
	str	r2, [r3, #228]
	str	r1, [r7, #304]
.L13613:
	ldr	r3, [fp, #-4020]
	ldr	r2, [r7, #216]
	add	r3, r3, #1
	add	r2, r2, #1
	str	r3, [fp, #-4020]
	str	r2, [r7, #216]
	b	.L13594
.L13618:
	ldr	r2, [r7, #300]
	add	r3, r10, r8
	add	r3, r7, r3, lsl #3
	add	r1, r2, #1
	str	r2, [r3, #228]
	str	r1, [r7, #300]
	b	.L13613
.L13615:
	ldr	r2, [r7, #320]
	add	r3, r10, r8
	add	r3, r7, r3, lsl #3
	add	r1, r2, #1
	str	r2, [r3, #228]
	str	r1, [r7, #320]
	b	.L13613
.L13616:
	ldr	ip, [fp, #-4028]
	cmp	ip, #3
	bhi	.L13732
	ldr	r3, [sp, #4]
	cmp	r3, #0
	beq	.L13733
	ldr	r4, .L13734+24
	mov	r0, #104
	mov	r1, r3
	mov	r2, #20
	mla	r0, r0, ip, r4
	add	r0, r0, #84
	bl	strlcpy
.L13622:
	ldr	r0, [fp, #-4028]
	mov	ip, #104
	movw	r1, #:lower16:.LC705
	mov	r2, #20
	movt	r1, #:upper16:.LC705
	mla	r0, ip, r0, r4
	add	r0, r0, #84
	bl	strlcat
	ldr	r2, [fp, #-4028]
	add	r2, r2, #1
	str	r2, [fp, #-4028]
.L13620:
	ldr	r2, [r7, #312]
	add	r3, r10, r8
	add	r3, r7, r3, lsl #3
	add	r1, r2, #1
	str	r2, [r3, #228]
	str	r1, [r7, #312]
	b	.L13613
.L13603:
	ldr	r1, [r7, #316]
	add	r2, r10, r8
	add	r2, r7, r2, lsl #3
	add	ip, r1, #1
	str	r1, [r2, #232]
	str	ip, [r7, #316]
	b	.L13601
.L13605:
	ldr	r1, [r7, #296]
	add	r2, r10, r8
	add	r2, r7, r2, lsl #3
	add	ip, r1, #1
	str	r1, [r2, #232]
	str	ip, [r7, #296]
	b	.L13601
.L13606:
	ldr	r1, [r7, #292]
	add	r2, r10, r8
	add	r2, r7, r2, lsl #3
	add	ip, r1, #1
	str	r1, [r2, #232]
	str	ip, [r7, #292]
	b	.L13601
.L13728:
	mov	r1, #1
	bl	ghsuart_data_setup
	subs	r6, r0, #0
	blt	.L13630
	ldr	r2, [sp, #8]
	ldr	r3, [r2, #216]
	cmp	r3, #0
	beq	.L13645
	ldr	r2, [r2, #220]
	cmp	r2, #9
	bne	.L13652
	ldr	r2, [sp, #8]
	str	r6, [r2, #228]
	add	r6, r6, #1
.L13652:
	cmp	r3, #1
	bls	.L13645
	ldr	r2, [sp, #8]
	ldr	r2, [r2, #244]
	cmp	r2, #9
	bne	.L13654
	ldr	r2, [sp, #8]
	str	r6, [r2, #252]
	add	r6, r6, #1
.L13654:
	cmp	r3, #2
	beq	.L13645
	ldr	r3, [sp, #8]
	ldr	r3, [r3, #268]
	cmp	r3, #9
	bne	.L13645
	ldr	r3, [sp, #8]
	str	r6, [r3, #276]
	b	.L13645
.L13731:
	ldr	r9, .L13734+20
	mov	r0, #104
	mov	r2, #20
	mov	r1, r4
	mla	r0, r0, ip, r9
	add	r0, r0, #84
	bl	strlcpy
	b	.L13610
.L13733:
	ldr	r4, .L13734+24
	mov	r0, #104
	mov	r1, r5
	mov	r2, #20
	mla	r0, r0, ip, r4
	add	r0, r0, #84
	bl	strlcpy
	b	.L13622
.L13723:
	bl	__stack_chk_fail
.L13630:
	movw	r0, #:lower16:.LC722
	ldr	r1, .L13734+28
	movt	r0, #:upper16:.LC722
	bl	printk
	b	.L13591
.L13729:
	movw	r0, #:lower16:.LC715
	ldr	r1, .L13734+32
	mov	r2, #3
	movt	r0, #:upper16:.LC715
	mvn	r6, #21
	bl	printk
.L13597:
	movw	r0, #:lower16:.LC718
	ldr	r1, .L13734+28
	mov	r3, r5
	mov	r2, r4
	movt	r0, #:upper16:.LC718
	bl	printk
	b	.L13591
.L13719:
	movw	r0, #:lower16:.LC719
	mov	r2, r3
	ldr	r1, .L13734+36
	movt	r0, #:upper16:.LC719
	mov	r3, r5
	mvn	r6, #18
	bl	printk
	b	.L13662
.L13730:
	movw	r0, #:lower16:.LC700
	ldr	r1, .L13734+40
	mov	r2, ip
	movt	r0, #:upper16:.LC700
	bl	printk
	b	.L13608
.L13599:
	movw	r0, #:lower16:.LC716
	ldr	r1, .L13734+32
	mvn	r6, #11
	movt	r0, #:upper16:.LC716
	bl	printk
	b	.L13597
.L13721:
	movw	r0, #:lower16:.LC582
	ldr	r1, .L13734+36
	mvn	r6, #11
	movt	r0, #:upper16:.LC582
	bl	printk
.L13662:
.L13625:
	movw	r0, #:lower16:.LC721
	ldr	r1, .L13734+28
	mov	r2, r5
	movt	r0, #:upper16:.LC721
	bl	printk
	b	.L13591
.L13720:
	movw	r0, #:lower16:.LC580
	mvn	r2, #18
	ldr	r1, .L13734+36
	movt	r0, #:upper16:.LC580
	mov	r6, r2
	bl	printk
	b	.L13662
.L13722:
	mov	r6, r0
	movw	r0, #:lower16:.LC583
	ldr	r1, .L13734+36
	mov	r2, r6
	movt	r0, #:upper16:.LC583
	bl	printk
	ldr	r0, [r4]
	bl	kfree
	b	.L13662
.L13600:
	movw	r0, #:lower16:.LC717
	ldr	r1, .L13734+32
	mov	r2, r3
	movt	r0, #:upper16:.LC717
	ldr	r9, [sp, #24]
	bl	printk
.L13611:
	ldr	r6, .L13734
	ldr	r7, [sp, #8]
.L13623:
	ldr	r3, [r7, #216]
	add	r6, r6, #24
	cmp	r3, r9
	bhi	.L13624
	ldr	r2, [sp, #8]
	mov	r3, #0
	mvn	r6, #18
	str	r3, [r2, #216]
	str	r3, [r2, #292]
	str	r3, [r2, #296]
	str	r3, [r2, #300]
	str	r3, [r2, #308]
	str	r3, [r2, #312]
	str	r3, [r2, #316]
	str	r3, [r2, #320]
	b	.L13597
.L13732:
	movw	r0, #:lower16:.LC700
	mov	r2, ip
	ldr	r1, [sp, #28]
	movt	r0, #:upper16:.LC700
	bl	printk
	b	.L13620
.L13612:
	mov	r2, r0
	movw	r0, #:lower16:.LC717
	ldr	r1, .L13734+32
	movt	r0, #:upper16:.LC717
	ldr	r9, [sp, #24]
	bl	printk
	b	.L13611
.L13624:
	ldr	r0, [r6, #-4]
	add	r9, r9, #1
	bl	kfree
	b	.L13623
.L13735:
	.align	2
.L13734:
	.word	.LANCHOR0+220
	.word	.LANCHOR4-952
	.word	.LANCHOR0+1748
	.word	.LANCHOR0+1696
	.word	.LANCHOR5-3040
	.word	.LANCHOR0+408
	.word	.LANCHOR0+3280
	.word	.LANCHOR5-2524
	.word	.LANCHOR5-2544
	.word	.LANCHOR5-2496
	.word	.LANCHOR5-3052
	.fnend
	.size	rmnet_function_bind_config, .-rmnet_function_bind_config
	.section	.rodata.str1.4
	.align	2
.LC724:
	.ascii	"modem\000"
	.align	2
.LC725:
	.ascii	"nmea\000"
	.align	2
.LC726:
	.ascii	"modem2\000"
	.text
	.align	2
	.global	gser_bind_config
	.syntax unified
	.arm
	.fpu softvfp
	.type	gser_bind_config, %function
gser_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR4
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r0
	movt	r3, #:upper16:.LANCHOR4
	str	r6, [sp, #8]
	mov	r6, r1
	str	lr, [sp, #12]
	ldrb	r2, [r3, #-944]	@ zero_extendqisi2
	cmp	r2, #0
	bne	.L13737
	ldr	r1, [r0, #24]
	ldrb	r2, [r1, #48]	@ zero_extendqisi2
	cmp	r2, #253
	bhi	.L13747
	add	r2, r2, #1
	uxtb	r2, r2
	strb	r2, [r3, #-944]
	strb	r2, [r1, #48]
.L13737:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L13748
	movw	r1, #32976
	bl	kmem_cache_alloc
	subs	r4, r0, #0
	beq	.L13764
.L13739:
	add	r2, r6, r6, lsl #1
	movw	r3, #:lower16:.LANCHOR0
	ldr	lr, .L13767
	movt	r3, #:upper16:.LANCHOR0
	add	r3, r3, r2, lsl #2
	movw	r0, #:lower16:gser_bind
	movw	r1, #:lower16:gser_unbind
	movt	r1, #:upper16:gser_unbind
	movt	r0, #:upper16:gser_bind
	ldr	ip, [r3, #324]
	movw	r2, #:lower16:gser_set_alt
	movw	r3, #:lower16:gser_disable
	str	lr, [r4, #4]
	movt	r2, #:upper16:gser_set_alt
	movt	r3, #:upper16:gser_disable
	strd	r0, [r4, #24]
	cmp	r6, #0
	mov	r1, #0
	str	r2, [r4, #32]
	str	r3, [r4, #40]
	strb	r6, [r4, #137]
	str	ip, [r4, #140]
	str	r1, [r4, #148]
	beq	.L13765
	cmp	r6, #1
	movweq	r3, #:lower16:.LC725
	movwne	r3, #:lower16:.LC726
	movteq	r3, #:upper16:.LC725
	movtne	r3, #:upper16:.LC726
	str	r3, [r4]
.L13741:
	movw	r2, #:lower16:gser_setup
	movw	r0, #:lower16:gser_connect
	str	r5, [r4, #20]
	movw	r1, #:lower16:gser_get_dtr
	movw	r3, #:lower16:gser_get_rts
	movt	r2, #:upper16:gser_setup
	movt	r0, #:upper16:gser_connect
	movt	r1, #:upper16:gser_get_dtr
	movt	r3, #:upper16:gser_get_rts
	movw	ip, #:lower16:gser_send_carrier_detect
	str	r2, [r4, #44]
	movw	r2, #:lower16:gser_send_ring_indicator
	str	r1, [r4, #100]
	movw	r1, #:lower16:gser_send_modem_ctrl_bits
	movt	r2, #:upper16:gser_send_ring_indicator
	str	r3, [r4, #104]
	movw	r3, #:lower16:gser_disconnect
	movt	r1, #:upper16:gser_send_modem_ctrl_bits
	str	r0, [r4, #108]
	movw	r0, #:lower16:gser_send_break
	movt	r3, #:upper16:gser_disconnect
	movt	ip, #:upper16:gser_send_carrier_detect
	movt	r0, #:upper16:gser_send_break
	str	r3, [r4, #112]
	add	r3, r4, #64
	str	r0, [r4, #116]
	str	ip, [r4, #120]
	str	r2, [r4, #124]
	add	r2, r5, #36
	str	r1, [r4, #128]
	ldr	r1, [r5, #40]
	str	r3, [r5, #40]
	str	r2, [r4, #64]
	str	r1, [r4, #68]
	str	r3, [r1]
	ldr	r6, [r4, #24]
	cmp	r6, #0
	beq	.L13743
	mov	r1, r4
	mov	r0, r5
	blx	r6
	subs	r6, r0, #0
	bge	.L13743
	ldrd	r2, [r4, #64]
	mov	r0, #256
	mov	r1, #512
	mov	ip, #0
	str	r3, [r2, #4]
	str	r2, [r3]
	str	ip, [r4, #20]
	strd	r0, [r4, #64]
.L13743:
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L13744
	ldr	r2, [r4, #8]
	cmp	r2, #0
	beq	.L13744
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r5, #45]
.L13744:
	tst	r3, #2
	bne	.L13745
	ldr	r2, [r4, #12]
	cmp	r2, #0
	beq	.L13745
	ldrb	r2, [r5, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r5, #45]
.L13745:
	tst	r3, #1
	bne	.L13746
	ldr	r3, [r4, #16]
	cmp	r3, #0
	beq	.L13746
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r5, #45]
.L13746:
	cmp	r6, #0
	bne	.L13766
.L13736:
	mov	r0, r6
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L13765:
	movw	r3, #:lower16:.LC724
	movt	r3, #:upper16:.LC724
	str	r3, [r4]
	b	.L13741
.L13748:
	mov	r4, #16
	b	.L13739
.L13766:
	mov	r0, r4
	bl	kfree
	b	.L13736
.L13747:
	mvn	r6, #18
	b	.L13736
.L13764:
	mvn	r6, #11
	b	.L13736
.L13768:
	.align	2
.L13767:
	.word	.LANCHOR4-928
	.fnend
	.size	gser_bind_config, .-gser_bind_config
	.section	.rodata.str1.4
	.align	2
.LC727:
	.ascii	"<3>%s: Un-supported transport transport: %u\012\000"
	.align	2
.LC728:
	.ascii	"<3>%s: serial: Cannot open port '%s'\000"
	.align	2
.LC729:
	.ascii	"<3>%s: serial: Cannot setup transports\000"
	.align	2
.LC730:
	.ascii	"<3>%s: serial: bind_config failed for port %d\000"
	.section	.rodata.cst4
	.align	2
.LC731:
	.word	__stack_chk_guard
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	serial_function_bind_config, %function
serial_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 88
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	r3, #:lower16:.LC731
	strd	r6, [sp, #8]
	movw	r6, #:lower16:.LANCHOR3
	movt	r3, #:upper16:.LC731
	movt	r6, #:upper16:.LANCHOR3
	strd	r8, [sp, #16]
	mov	r7, r1
	ldr	r4, [r6, #-4016]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #92
	sub	sp, sp, #92
	ldr	r3, [r3]
	str	r3, [sp, #84]
	mov	r3,#0
	cmp	r4, #0
	mvnne	r4, #0
	beq	.L13846
.L13770:
	ldr	r3, [r6, #-4012]
	cmp	r3, #0
	movgt	r5, #0
	ble	.L13769
.L13810:
	uxtb	r1, r5
	mov	r0, r7
	bl	gser_bind_config
	cmp	r0, #0
	bne	.L13847
	ldr	r3, [r6, #-4012]
	add	r5, r5, #1
	cmp	r3, r5
	bgt	.L13810
.L13791:
	mov	r4, r0
.L13769:
	movw	r3, #:lower16:.LC731
	movt	r3, #:upper16:.LC731
	ldr	r2, [r3]
	ldr	r3, [sp, #84]
	eors	r2, r3, r2
	bne	.L13848
	mov	r0, r4
	add	sp, sp, #92
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L13846:
	mov	r3, #1
	ldr	r1, .L13856
	mov	r2, #32
	add	r0, sp, #20
	movw	r8, #:lower16:.LC253
	str	r3, [r6, #-4016]
	movw	r9, #:lower16:.LANCHOR0
	movt	r8, #:upper16:.LC253
	bl	strlcpy
	add	r0, sp, #20
	movt	r9, #:upper16:.LANCHOR0
	bl	strim
	mov	r3, r0
	ldr	r1, .L13856+4
	mov	r2, #32
	add	r0, sp, #52
	mov	r10, r4
	str	r3, [sp, #12]
	bl	strlcpy
	add	r0, sp, #52
	bl	strim
	ldr	r3, .L13856+8
	str	r0, [sp, #16]
	sub	r3, r3, #124
	str	r3, [sp, #4]
	b	.L13772
.L13792:
	mov	r1, r8
	add	r0, sp, #12
	bl	strsep
	cmp	r0, #0
	bne	.L13849
.L13772:
	ldr	r3, [sp, #12]
	cmp	r3, #0
	bne	.L13792
	ldr	r1, [r6, #-4008]
	cmp	r1, #0
	bne	.L13850
.L13793:
	ldr	r1, [r6, #-4004]
	cmp	r1, #0
	bne	.L13851
.L13794:
	ldr	r1, [r6, #-4000]
	cmp	r1, #0
	bne	.L13852
.L13795:
	ldr	r0, [r6, #-3996]
	cmp	r0, #0
	bne	.L13853
.L13796:
	ldr	r0, [r6, #-3992]
	cmp	r0, #0
	bne	.L13804
.L13805:
	cmp	r4, #0
	beq	.L13770
.L13815:
	mov	r3, r4
.L13797:
	movw	r0, #:lower16:.LC729
	ldr	r1, .L13856+12
	mov	r4, r3
	movt	r0, #:upper16:.LC729
	bl	printk
	b	.L13769
.L13849:
	ldr	r3, [sp, #16]
	mov	r5, r0
	cmp	r3, #0
	beq	.L13773
	mov	r1, r8
	add	r0, sp, #16
	bl	strsep
	mov	r10, r0
.L13773:
	ldr	fp, [r6, #-4012]
	cmp	fp, #2
	bgt	.L13774
	mov	r0, r5
	bl	str_to_xport
	lsl	r3, fp, #1
	sub	r1, r0, #1
	add	r2, r3, fp
	add	r2, r9, r2, lsl #2
	str	r0, [r2, #324]
	str	fp, [r2, #328]
	cmp	r1, #8
	ldrls	pc, [pc, r1, asl #2]
	b	.L13775
.L13777:
	.word	.L13781
	.word	.L13780
	.word	.L13779
	.word	.L13775
	.word	.L13775
	.word	.L13775
	.word	.L13775
	.word	.L13778
	.word	.L13776
.L13776:
	ldr	r3, [r6, #-3992]
	add	r3, r3, #1
	str	r3, [r6, #-3992]
.L13782:
	ldr	r3, [r6, #-3988]
	add	fp, fp, #1
	str	fp, [r6, #-4012]
	add	r3, r3, #1
	str	r3, [r6, #-3988]
	b	.L13772
.L13778:
	ldr	r3, [r6, #-4032]
	cmp	r3, #3
	bhi	.L13854
	ldr	fp, .L13856+16
	mov	r0, #104
	cmp	r10, #0
	moveq	r1, r5
	movne	r1, r10
	mov	r2, #20
	mla	r0, r0, r3, fp
	add	r0, r0, #84
	bl	strlcpy
	ldr	r0, [r6, #-4032]
	mov	r3, #104
	movw	r1, #:lower16:.LC701
	movt	r1, #:upper16:.LC701
	mov	r2, #20
	mla	r0, r3, r0, fp
	add	r0, r0, #84
	bl	strlcat
	ldr	r3, [r6, #-4032]
	add	r3, r3, #1
	str	r3, [r6, #-4032]
.L13784:
	ldr	r3, [r6, #-4028]
	cmp	r3, #3
	bhi	.L13855
	ldr	fp, .L13856+20
	mov	r0, #104
	cmp	r10, #0
	moveq	r1, r5
	moveq	r2, #20
	movne	r2, #20
	movne	r1, r10
	mla	r0, r0, r3, fp
	add	r0, r0, #84
	bl	strlcpy
	ldr	r0, [r6, #-4028]
	mov	r3, #104
	movw	r1, #:lower16:.LC705
	movt	r1, #:upper16:.LC705
	mov	r2, #20
	mla	r0, r3, r0, fp
	add	r0, r0, #84
	bl	strlcat
	ldr	r3, [r6, #-4028]
	add	r3, r3, #1
	str	r3, [r6, #-4028]
.L13788:
	ldr	fp, [r6, #-4012]
	ldr	r3, [r6, #-3996]
	add	r3, r3, #1
	str	r3, [r6, #-3996]
	b	.L13782
.L13779:
	ldr	r2, [r6, #-4000]
	add	r3, r3, fp
	add	r3, r9, r3, lsl #2
	add	r1, r2, #1
	str	r2, [r3, #332]
	str	r1, [r6, #-4000]
	b	.L13782
.L13780:
	ldr	r2, [r6, #-4004]
	add	r3, r3, fp
	add	r3, r9, r3, lsl #2
	add	r1, r2, #1
	str	r2, [r3, #332]
	str	r1, [r6, #-4004]
	b	.L13782
.L13781:
	ldr	r2, [r6, #-4008]
	add	r3, r3, fp
	add	r3, r9, r3, lsl #2
	add	r1, r2, #1
	str	r2, [r3, #332]
	str	r1, [r6, #-4008]
	b	.L13782
.L13853:
	mov	r1, #0
	bl	ghsic_data_setup
	subs	r3, r0, #0
	blt	.L13797
	ldr	r1, [r6, #-3988]
	cmp	r1, #0
	beq	.L13803
	movw	r2, #:lower16:.LANCHOR0
	movt	r2, #:upper16:.LANCHOR0
	ldr	r0, [r2, #324]
	cmp	r0, #8
	streq	r3, [r2, #332]
	addeq	r3, r3, #1
	cmp	r1, #1
	bls	.L13803
	ldr	r0, [r2, #336]
	cmp	r0, #8
	streq	r3, [r2, #344]
	addeq	r3, r3, #1
	cmp	r1, #2
	beq	.L13803
	ldr	r1, [r2, #348]
	cmp	r1, #8
	streq	r3, [r2, #356]
.L13803:
	mov	r1, #0
	ldr	r0, [r6, #-3996]
	bl	ghsic_ctrl_setup
	subs	r4, r0, #0
	bge	.L13796
	b	.L13815
.L13852:
	ldr	r3, [r7, #24]
	ldr	r0, [r3]
	bl	gsmd_setup
	mov	r4, r0
	b	.L13795
.L13851:
	ldr	r3, [r7, #24]
	ldr	r0, [r3]
	bl	gsdio_setup
	mov	r4, r0
	b	.L13794
.L13850:
	ldr	r3, [r7, #24]
	ldr	r0, [r3]
	bl	gserial_setup
	mov	r4, r0
	b	.L13793
.L13804:
	mov	r1, #0
	bl	ghsuart_data_setup
	subs	r3, r0, #0
	blt	.L13797
	ldr	r1, [r6, #-3988]
	cmp	r1, #0
	beq	.L13805
	movw	r2, #:lower16:.LANCHOR0
	movt	r2, #:upper16:.LANCHOR0
	ldr	r0, [r2, #324]
	cmp	r0, #9
	streq	r3, [r2, #332]
	addeq	r3, r3, #1
	cmp	r1, #1
	bls	.L13805
	ldr	r0, [r2, #336]
	cmp	r0, #9
	streq	r3, [r2, #344]
	addeq	r3, r3, #1
	cmp	r1, #2
	beq	.L13805
	ldr	r1, [r2, #348]
	cmp	r1, #9
	streq	r3, [r2, #356]
	b	.L13805
.L13848:
	bl	__stack_chk_fail
.L13847:
	mov	r4, r0
	movw	r0, #:lower16:.LC730
	ldr	r1, .L13856+12
	mov	r2, r5
	movt	r0, #:upper16:.LC730
	bl	printk
	b	.L13769
.L13855:
	movw	r0, #:lower16:.LC700
	ldr	r1, .L13856+24
	mov	r2, r3
	movt	r0, #:upper16:.LC700
	bl	printk
	b	.L13788
.L13854:
	movw	r0, #:lower16:.LC700
	mov	r2, r3
	ldr	r1, [sp, #4]
	movt	r0, #:upper16:.LC700
	bl	printk
	b	.L13784
.L13775:
	mov	r2, r0
	movw	r0, #:lower16:.LC727
	ldr	r1, .L13856+28
	movt	r0, #:upper16:.LC727
	bl	printk
.L13774:
	movw	r0, #:lower16:.LC728
	ldr	r1, .L13856+12
	mov	r2, r5
	movt	r0, #:upper16:.LC728
	mvn	r4, #18
	bl	printk
	b	.L13769
.L13857:
	.align	2
.L13856:
	.word	.LANCHOR0+2836
	.word	.LANCHOR0+1664
	.word	.LANCHOR5-2928
	.word	.LANCHOR5-2456
	.word	.LANCHOR0+408
	.word	.LANCHOR0+3280
	.word	.LANCHOR5-2940
	.word	.LANCHOR5-2476
	.fnend
	.size	serial_function_bind_config, .-serial_function_bind_config
	.section	.rodata.str1.4
	.align	2
.LC732:
	.ascii	"acm%u\000"
	.text
	.align	2
	.global	acm_bind_config
	.syntax unified
	.arm
	.fpu softvfp
	.type	acm_bind_config, %function
acm_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	ip, #:lower16:.LANCHOR4
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r0
	movt	ip, #:upper16:.LANCHOR4
	strd	r6, [sp, #8]
	mov	r6, r1
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrb	r3, [ip, #-920]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L13859
	ldr	r2, [r0, #24]
	ldrb	r3, [r2, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L13862
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r2, #48]
	ldr	r2, [r0, #24]
	strb	r3, [ip, #-3008]
	strb	r3, [ip, #-920]
	ldrb	r3, [r2, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L13862
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r2, #48]
	ldr	r2, [r0, #24]
	strb	r3, [ip, #-2988]
	strb	r3, [ip, #-912]
	ldrb	r3, [r2, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L13862
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [ip, #-3017]
	strb	r3, [ip, #-904]
	strb	r3, [r2, #48]
.L13859:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L13869
	movw	r1, #32976
	bl	kmem_cache_alloc
	subs	r4, r0, #0
	beq	.L13885
.L13863:
	add	r2, r6, r6, lsl #1
	movw	r3, #:lower16:.LANCHOR0
	strb	r6, [r4, #138]
	movt	r3, #:upper16:.LANCHOR0
	add	r3, r3, r2, lsl #2
	movw	r0, #:lower16:acm_disconnect
	movw	r1, #:lower16:acm_send_break
	ldr	lr, [r3, #360]
	movt	r0, #:upper16:acm_disconnect
	movt	r1, #:upper16:acm_send_break
	movw	ip, #:lower16:acm_connect
	movw	r3, #:lower16:acm_send_modem_ctrl_bits
	movt	ip, #:upper16:acm_connect
	mov	r7, #0
	movt	r3, #:upper16:acm_send_modem_ctrl_bits
	add	r2, r6, #1
	str	ip, [r4, #108]
	strd	r0, [r4, #112]
	movw	r1, #:lower16:.LC732
	mov	r0, #208
	movt	r1, #:upper16:.LC732
	str	r3, [r4, #128]
	str	lr, [r4, #140]
	str	r7, [r4, #148]
	bl	kasprintf
	cmp	r0, r7
	str	r0, [r4]
	beq	.L13886
	movw	r0, #:lower16:acm_bind
	ldr	ip, .L13890
	movw	r3, #:lower16:acm_unbind
	movt	r0, #:upper16:acm_bind
	movw	r2, #:lower16:acm_set_alt
	movw	r1, #:lower16:acm_setup
	movt	r3, #:upper16:acm_unbind
	movt	r2, #:upper16:acm_set_alt
	movt	r1, #:upper16:acm_setup
	str	r0, [r4, #24]
	movw	r0, #:lower16:acm_disable
	movt	r0, #:upper16:acm_disable
	str	ip, [r4, #4]
	str	r5, [r4, #20]
	str	r3, [r4, #28]
	add	r3, r4, #64
	str	r2, [r4, #32]
	add	r2, r5, #36
	str	r0, [r4, #40]
	str	r1, [r4, #44]
	ldr	r1, [r5, #40]
	str	r3, [r5, #40]
	str	r2, [r4, #64]
	str	r1, [r4, #68]
	str	r3, [r1]
	ldr	r6, [r4, #24]
	cmp	r6, #0
	beq	.L13865
	mov	r1, r4
	mov	r0, r5
	blx	r6
	subs	r6, r0, #0
	blt	.L13887
.L13865:
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L13866
.L13889:
	ldr	r2, [r4, #8]
	cmp	r2, #0
	beq	.L13866
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r5, #45]
.L13866:
	tst	r3, #2
	bne	.L13867
	ldr	r2, [r4, #12]
	cmp	r2, #0
	beq	.L13867
	ldrb	r2, [r5, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r5, #45]
.L13867:
	tst	r3, #1
	bne	.L13868
	ldr	r3, [r4, #16]
	cmp	r3, #0
	beq	.L13868
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r5, #45]
.L13868:
	cmp	r6, #0
	bne	.L13888
.L13858:
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L13887:
	ldrd	r2, [r4, #64]
	mov	r0, #256
	mov	r1, #512
	str	r3, [r2, #4]
	str	r2, [r3]
	str	r7, [r4, #20]
	strd	r0, [r4, #64]
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L13866
	b	.L13889
.L13869:
	mov	r4, #16
	b	.L13863
.L13888:
	mov	r0, r4
	bl	kfree
	b	.L13858
.L13862:
	mvn	r6, #18
	b	.L13858
.L13886:
	mov	r0, r4
	mvn	r6, #11
	bl	kfree
	b	.L13858
.L13885:
	mvn	r6, #11
	b	.L13858
.L13891:
	.align	2
.L13890:
	.word	.LANCHOR4-888
	.fnend
	.size	acm_bind_config, .-acm_bind_config
	.section	.rodata.str1.4
	.align	2
.LC733:
	.ascii	"<3>%s: acm: Cannot open port '%s'\000"
	.align	2
.LC734:
	.ascii	"<3>%s: acm: Cannot setup transports\000"
	.align	2
.LC735:
	.ascii	"<3>%s: acm: bind_config failed for port %d\000"
	.section	.rodata.cst4
	.align	2
.LC736:
	.word	__stack_chk_guard
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acm_function_bind_config, %function
acm_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 40
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	movw	r3, #:lower16:.LC736
	strd	r6, [sp, #8]
	movw	r6, #:lower16:.LANCHOR3
	movt	r3, #:upper16:.LC736
	movt	r6, #:upper16:.LANCHOR3
	strd	r8, [sp, #16]
	mov	r7, r1
	ldr	r5, [r6, #-3984]
	str	lr, [sp, #24]
	.pad #44
	sub	sp, sp, #44
	ldr	r3, [r3]
	str	r3, [sp, #36]
	mov	r3,#0
	cmp	r5, #0
	mvnne	r5, #0
	beq	.L13926
.L13893:
	ldr	r3, [r6, #-3980]
	cmp	r3, #0
	movgt	r4, #0
	ble	.L13892
.L13907:
	uxtb	r1, r4
	mov	r0, r7
	bl	acm_bind_config
	subs	r5, r0, #0
	bne	.L13927
	ldr	r3, [r6, #-3980]
	add	r4, r4, #1
	cmp	r3, r4
	bgt	.L13907
.L13902:
.L13892:
	movw	r3, #:lower16:.LC736
	movt	r3, #:upper16:.LC736
	ldr	r2, [r3]
	ldr	r3, [sp, #36]
	eors	r2, r3, r2
	bne	.L13928
	mov	r0, r5
	add	sp, sp, #44
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L13926:
	mov	r3, #1
	ldr	r1, .L13931
	mov	r2, #32
	add	r0, sp, #4
	movw	r8, #:lower16:.LC253
	str	r3, [r6, #-3984]
	movt	r8, #:upper16:.LC253
	bl	strlcpy
	add	r0, sp, #4
	bl	strim
	str	r0, [sp]
	b	.L13896
.L13903:
	mov	r1, r8
	mov	r0, sp
	bl	strsep
	subs	r4, r0, #0
	bne	.L13895
	ldr	r0, [sp]
.L13896:
	cmp	r0, #0
	bne	.L13903
	ldr	r1, [r6, #-3976]
	cmp	r1, #0
	bne	.L13904
	ldr	r1, [r6, #-3972]
	cmp	r1, #0
	bne	.L13905
	ldr	r1, [r6, #-3968]
	cmp	r1, #0
	beq	.L13893
.L13906:
	ldr	r3, [r7, #24]
	ldr	r0, [r3]
	bl	gsmd_setup
	mov	r3, r0
.L13909:
	cmp	r3, #0
	beq	.L13893
	movw	r0, #:lower16:.LC734
	ldr	r1, .L13931+4
	mov	r5, r3
	movt	r0, #:upper16:.LC734
	bl	printk
	b	.L13892
.L13895:
	ldr	r9, [r6, #-3980]
	cmp	r9, #2
	bgt	.L13897
	bl	str_to_xport
	add	r1, r9, r9, lsl #1
	movw	r3, #:lower16:.LANCHOR0
	movt	r3, #:upper16:.LANCHOR0
	add	r3, r3, r1, lsl #2
	cmp	r0, #2
	mov	r2, r0
	str	r0, [r3, #360]
	str	r9, [r3, #364]
	beq	.L13898
	cmp	r0, #3
	bne	.L13929
	ldr	r2, [r6, #-3968]
	add	r1, r2, #1
	str	r2, [r3, #368]
	str	r1, [r6, #-3968]
.L13901:
	ldr	r3, [r6, #-3964]
	add	r9, r9, #1
	ldr	r0, [sp]
	str	r9, [r6, #-3980]
	add	r3, r3, #1
	str	r3, [r6, #-3964]
	b	.L13896
.L13929:
	cmp	r0, #1
	beq	.L13930
	movw	r0, #:lower16:.LC727
	ldr	r1, .L13931+8
	movt	r0, #:upper16:.LC727
	bl	printk
.L13897:
	movw	r0, #:lower16:.LC733
	ldr	r1, .L13931+4
	mov	r2, r4
	movt	r0, #:upper16:.LC733
	mvn	r5, #18
	bl	printk
	b	.L13892
.L13904:
	ldr	r3, [r7, #24]
	ldr	r0, [r3]
	bl	gserial_setup
	ldr	r1, [r6, #-3972]
	mov	r3, r0
	cmp	r1, #0
	bne	.L13905
.L13908:
	ldr	r1, [r6, #-3968]
	cmp	r1, #0
	beq	.L13909
	b	.L13906
.L13905:
	ldr	r3, [r7, #24]
	ldr	r0, [r3]
	bl	gsdio_setup
	mov	r3, r0
	b	.L13908
.L13898:
	ldr	r2, [r6, #-3972]
	add	r1, r2, #1
	str	r2, [r3, #368]
	str	r1, [r6, #-3972]
	b	.L13901
.L13930:
	ldr	r2, [r6, #-3976]
	add	r1, r2, #1
	str	r2, [r3, #368]
	str	r1, [r6, #-3976]
	b	.L13901
.L13928:
	bl	__stack_chk_fail
.L13927:
	movw	r0, #:lower16:.LC735
	ldr	r1, .L13931+4
	mov	r2, r4
	movt	r0, #:upper16:.LC735
	bl	printk
	b	.L13892
.L13932:
	.align	2
.L13931:
	.word	.LANCHOR0+2804
	.word	.LANCHOR5-2412
	.word	.LANCHOR5-2428
	.fnend
	.size	acm_function_bind_config, .-acm_function_bind_config
	.align	2
	.global	adb_req_put
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_req_put, %function
adb_req_put:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r1
	mov	r4, r2
	str	r6, [sp, #8]
	add	r6, r0, #80
	mov	r0, r6
	str	lr, [sp, #12]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #4]
	add	r2, r4, #36
	mov	r1, r0
	mov	r0, r6
	str	r2, [r5, #4]
	str	r5, [r4, #36]
	str	r3, [r4, #40]
	str	r2, [r3]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock_irqrestore
	.fnend
	.size	adb_req_put, .-adb_req_put
	.align	2
	.global	adb_req_get
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_req_get, %function
adb_req_get:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	add	r4, r0, #80
	mov	r5, r1
	mov	r0, r4
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5]
	mov	r1, r0
	cmp	r5, r3
	moveq	r5, #0
	beq	.L13936
	ldm	r3, {r0, r2}
	mov	lr, #256
	mov	ip, #512
	sub	r5, r3, #36
	str	r2, [r0, #4]
	str	r0, [r2]
	str	lr, [r3]
	str	ip, [r3, #4]
.L13936:
	mov	r0, r4
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	adb_req_get, .-adb_req_get
	.section	.rodata.str1.4
	.align	2
.LC737:
	.ascii	"rndis\000"
	.section	.rodata.cst4
	.align	2
.LC738:
	.word	__stack_chk_guard
	.text
	.align	2
	.global	rndis_bind_config
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_bind_config, %function
rndis_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LC738
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	strd	r6, [sp, #8]
	subs	r6, r1, #0
	movt	r3, #:upper16:.LC738
	strd	r8, [sp, #16]
	str	lr, [sp, #24]
	.pad #36
	sub	sp, sp, #36
	ldr	r3, [r3]
	str	r3, [sp, #28]
	mov	r3,#0
	beq	.L13951
	movw	r8, #:lower16:.LANCHOR3
	mov	r7, r0
	movt	r8, #:upper16:.LANCHOR3
	ldrb	r4, [r8, #-4084]	@ zero_extendqisi2
	cmp	r4, #0
	bne	.L13941
	ldr	r9, .L13966
	movw	r1, #:lower16:.LC446
	mov	r2, r4
	movt	r1, #:upper16:.LC446
	add	r0, sp, #8
	bl	sprintf
	add	r0, sp, #8
	mov	r2, r4
	ldr	r3, .L13966+4
	mov	r1, #432
	str	r9, [sp]
	movw	r5, #:lower16:.LANCHOR0
	bl	proc_create_data
	cmp	r0, #0
	movt	r5, #:upper16:.LANCHOR0
	movw	r2, #3716
	mvneq	r5, #4
	bne	.L13963
.L13939:
	movw	r3, #:lower16:.LC738
	movt	r3, #:upper16:.LC738
	ldr	r2, [r3]
	ldr	r3, [sp, #28]
	eors	r2, r3, r2
	bne	.L13964
	mov	r0, r5
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L13963:
	add	r9, r9, #52
	mov	r3, #1
	strh	r4, [r5, r2]	@ movhi
	str	r4, [r5, #3720]
	strb	r3, [r8, #-4084]
	str	r3, [r5, #3732]
	str	r9, [r5, #3768]
	str	r9, [r5, #3772]
.L13941:
	movw	r5, #:lower16:.LANCHOR4
	movt	r5, #:upper16:.LANCHOR4
	ldrb	r3, [r5, #-880]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L13945
	ldr	r2, [r7, #24]
	ldrb	r3, [r2, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L13947
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r2, #48]
	ldr	r2, [r7, #24]
	strb	r3, [r5, #-2720]
	strb	r3, [r5, #-880]
	ldrb	r3, [r2, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L13947
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r2, #48]
	ldr	r2, [r7, #24]
	strb	r3, [r5, #-2700]
	strb	r3, [r5, #-872]
	ldrb	r3, [r2, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L13947
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r5, #-2729]
	strb	r3, [r5, #-864]
	strb	r3, [r2, #48]
.L13945:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L13952
	movw	r1, #32976
	bl	kmem_cache_alloc
	subs	r4, r0, #0
	beq	.L13965
.L13948:
	ldr	r2, [r6]	@ unaligned
	movw	r1, #:lower16:rndis_add_header
	movw	r3, #:lower16:rndis_rm_hdr
	ldr	lr, .L13966+8
	movt	r1, #:upper16:rndis_add_header
	movt	r3, #:upper16:rndis_rm_hdr
	mov	r0, r7
	str	r2, [r4, #142]	@ unaligned
	movw	r2, #:lower16:.LC737
	ldrh	ip, [r6, #4]	@ unaligned
	movt	r2, #:upper16:.LC737
	str	lr, [r4, #4]
	ldr	r6, [r5, #-2444]
	str	r1, [r4, #120]
	movw	r1, #:lower16:rndis_bind
	ldr	lr, [r5, #-848]
	movt	r1, #:upper16:rndis_bind
	str	r2, [r4]
	movw	r2, #:lower16:rndis_unbind
	movt	r2, #:upper16:rndis_unbind
	str	r1, [r4, #24]
	movw	r1, #:lower16:rndis_setup
	movt	r1, #:upper16:rndis_setup
	str	r2, [r4, #28]
	movw	r2, #:lower16:rndis_disable
	str	r3, [r4, #124]
	movw	r3, #:lower16:rndis_set_alt
	movt	r2, #:upper16:rndis_disable
	movt	r3, #:upper16:rndis_set_alt
	str	r3, [r4, #32]
	mov	r3, #0
	str	r1, [r4, #44]
	mov	r1, #44
	str	r2, [r4, #40]
	strh	r3, [r4, #90]	@ movhi
	str	r1, [r4, #92]
	mov	r1, r4
	str	r6, [r4, #108]
	str	lr, [r4, #112]
	strh	ip, [r4, #146]	@ unaligned
	str	r3, [r4, #148]
	str	r3, [r4, #152]
	bl	usb_add_function
	subs	r5, r0, #0
	beq	.L13939
	mov	r0, r4
	bl	kfree
.L13949:
	ldrb	r3, [r8, #-4084]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L13939
	mov	r4, #0
	movw	r1, #:lower16:.LC446
	mov	r2, r4
	movt	r1, #:upper16:.LC446
	add	r0, sp, #8
	strb	r4, [r8, #-4084]
	bl	sprintf
	add	r0, sp, #8
	mov	r1, r4
	bl	remove_proc_entry
	b	.L13939
.L13952:
	mov	r4, #16
	b	.L13948
.L13965:
	mvn	r5, #11
	b	.L13949
.L13947:
	mvn	r5, #18
	b	.L13939
.L13951:
	mvn	r5, #21
	b	.L13939
.L13964:
	bl	__stack_chk_fail
.L13967:
	.align	2
.L13966:
	.word	.LANCHOR0+3716
	.word	.LANCHOR5-2384
	.word	.LANCHOR4-844
	.fnend
	.size	rndis_bind_config, .-rndis_bind_config
	.section	.rodata.cst4
	.align	2
.LC739:
	.word	__stack_chk_guard
	.text
	.align	2
	.global	rndis_bind_config_vendor
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_bind_config_vendor, %function
rndis_bind_config_vendor:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	ip, #:lower16:.LC739
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	subs	r6, r1, #0
	movt	ip, #:upper16:.LC739
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #36
	sub	sp, sp, #36
	ldr	ip, [ip]
	str	ip, [sp, #28]
	mov	ip,#0
	beq	.L13980
	movw	r8, #:lower16:.LANCHOR3
	mov	r7, r0
	movt	r8, #:upper16:.LANCHOR3
	mov	r10, r2
	ldrb	r4, [r8, #-4084]	@ zero_extendqisi2
	mov	r9, r3
	cmp	r4, #0
	bne	.L13970
	ldr	fp, .L13995
	movw	r1, #:lower16:.LC446
	mov	r2, r4
	movt	r1, #:upper16:.LC446
	add	r0, sp, #8
	bl	sprintf
	add	r0, sp, #8
	mov	r2, r4
	ldr	r3, .L13995+4
	mov	r1, #432
	str	fp, [sp]
	movw	r5, #:lower16:.LANCHOR0
	bl	proc_create_data
	cmp	r0, #0
	movt	r5, #:upper16:.LANCHOR0
	movw	r2, #3716
	mvneq	r5, #4
	bne	.L13992
.L13968:
	movw	r3, #:lower16:.LC739
	movt	r3, #:upper16:.LC739
	ldr	r2, [r3]
	ldr	r3, [sp, #28]
	eors	r2, r3, r2
	bne	.L13993
	mov	r0, r5
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L13992:
	add	fp, fp, #52
	mov	r3, #1
	strh	r4, [r5, r2]	@ movhi
	str	r4, [r5, #3720]
	strb	r3, [r8, #-4084]
	str	r3, [r5, #3732]
	str	fp, [r5, #3768]
	str	fp, [r5, #3772]
.L13970:
	movw	r5, #:lower16:.LANCHOR4
	movt	r5, #:upper16:.LANCHOR4
	ldrb	r3, [r5, #-880]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L13974
	ldr	r2, [r7, #24]
	ldrb	r3, [r2, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L13976
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r2, #48]
	ldr	r2, [r7, #24]
	strb	r3, [r5, #-2720]
	strb	r3, [r5, #-880]
	ldrb	r3, [r2, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L13976
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r2, #48]
	ldr	r2, [r7, #24]
	strb	r3, [r5, #-2700]
	strb	r3, [r5, #-872]
	ldrb	r3, [r2, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L13976
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r5, #-2729]
	strb	r3, [r5, #-864]
	strb	r3, [r2, #48]
.L13974:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L13981
	movw	r1, #32976
	bl	kmem_cache_alloc
	subs	r4, r0, #0
	beq	.L13994
.L13977:
	ldr	r3, [r6]	@ unaligned
	movw	r2, #:lower16:rndis_add_header
	movw	r1, #:lower16:rndis_rm_hdr
	ldr	lr, .L13995+8
	movt	r2, #:upper16:rndis_add_header
	movt	r1, #:upper16:rndis_rm_hdr
	mov	r0, r7
	str	r3, [r4, #142]	@ unaligned
	movw	r3, #:lower16:.LC737
	ldrh	ip, [r6, #4]	@ unaligned
	movt	r3, #:upper16:.LC737
	str	lr, [r4, #4]
	ldr	lr, [r5, #-2444]
	str	r2, [r4, #120]
	movw	r2, #:lower16:rndis_bind
	ldr	r5, [r5, #-848]
	movt	r2, #:upper16:rndis_bind
	str	r3, [r4]
	movw	r3, #:lower16:rndis_unbind
	movt	r3, #:upper16:rndis_unbind
	str	r2, [r4, #24]
	movw	r2, #:lower16:rndis_setup
	movt	r2, #:upper16:rndis_setup
	str	r3, [r4, #28]
	movw	r3, #:lower16:rndis_disable
	str	r1, [r4, #124]
	movw	r1, #:lower16:rndis_set_alt
	movt	r3, #:upper16:rndis_disable
	movt	r1, #:upper16:rndis_set_alt
	str	r1, [r4, #32]
	mov	r1, #0
	str	r2, [r4, #44]
	mov	r2, #44
	str	r3, [r4, #40]
	strh	r1, [r4, #90]	@ movhi
	mov	r1, r4
	str	r2, [r4, #92]
	str	lr, [r4, #108]
	str	r5, [r4, #112]
	strh	ip, [r4, #146]	@ unaligned
	str	r10, [r4, #148]
	str	r9, [r4, #152]
	bl	usb_add_function
	subs	r5, r0, #0
	beq	.L13968
	mov	r0, r4
	bl	kfree
.L13978:
	ldrb	r3, [r8, #-4084]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L13968
	mov	r4, #0
	movw	r1, #:lower16:.LC446
	mov	r2, r4
	movt	r1, #:upper16:.LC446
	add	r0, sp, #8
	strb	r4, [r8, #-4084]
	bl	sprintf
	add	r0, sp, #8
	mov	r1, r4
	bl	remove_proc_entry
	b	.L13968
.L13981:
	mov	r4, #16
	b	.L13977
.L13994:
	mvn	r5, #11
	b	.L13978
.L13976:
	mvn	r5, #18
	b	.L13968
.L13980:
	mvn	r5, #21
	b	.L13968
.L13993:
	bl	__stack_chk_fail
.L13996:
	.align	2
.L13995:
	.word	.LANCHOR0+3716
	.word	.LANCHOR5-2384
	.word	.LANCHOR4-844
	.fnend
	.size	rndis_bind_config_vendor, .-rndis_bind_config_vendor
	.align	2
	.global	rndis_signal_connect
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_signal_connect, %function
rndis_signal_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	movw	r5, #:lower16:.LANCHOR0
	mov	r2, #0
	strd	r6, [sp, #8]
	ldr	r7, .L14004
	movt	r5, #:upper16:.LANCHOR0
	strd	r8, [sp, #16]
	lsl	r9, r0, #4
	str	r10, [sp, #24]
	sub	r4, r9, r0
	str	lr, [sp, #28]
	lsl	r4, r4, #2
	add	r3, r5, r4
	add	r8, r7, r4
	str	r2, [r3, #3732]
	ldr	r3, [r8, #4]
	cmp	r3, r2
	beq	.L14000
	movw	r3, #:lower16:kmalloc_caches
	mov	r6, r0
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, r2
	beq	.L14001
	mov	r1, #32
	bl	kmem_cache_alloc
	subs	r3, r0, #0
	beq	.L14002
	add	r2, r3, #20
.L13999:
	sub	r6, r9, r6
	mov	r1, #20
	str	r2, [r3, #8]
	add	r5, r5, r6, lsl #2
	mov	r6, #0
	str	r1, [r3, #12]
	add	r4, r4, #52
	str	r6, [r3, #16]
	ldr	r0, [r5, #3772]
	add	r4, r7, r4
	str	r3, [r5, #3772]
	mov	r2, #11
	mov	ip, #7
	str	r4, [r3]
	movt	r2, 16385
	str	r0, [r3, #4]
	str	r3, [r0]
	ldr	r3, [r3, #8]
	str	ip, [r3]
	stmib	r3, {r1, r2, r6}
	str	r6, [r3, #16]
	ldr	r3, [r8, #44]
	ldr	r0, [r8, #48]
	blx	r3
	mov	r0, r6
.L13997:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L14001:
	mov	r2, #36
	mov	r3, #16
	b	.L13999
.L14002:
	mvn	r0, #11
	b	.L13997
.L14000:
	movw	r0, #65012
	movt	r0, 65535
	b	.L13997
.L14005:
	.align	2
.L14004:
	.word	.LANCHOR0+3716
	.fnend
	.size	rndis_signal_connect, .-rndis_signal_connect
	.align	2
	.global	rndis_signal_disconnect
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_signal_disconnect, %function
rndis_signal_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	movw	r5, #:lower16:.LANCHOR0
	mov	r2, #1
	strd	r6, [sp, #8]
	ldr	r7, .L14013
	movt	r5, #:upper16:.LANCHOR0
	strd	r8, [sp, #16]
	lsl	r9, r0, #4
	str	r10, [sp, #24]
	sub	r4, r9, r0
	str	lr, [sp, #28]
	lsl	r4, r4, #2
	add	r3, r5, r4
	add	r8, r7, r4
	str	r2, [r3, #3732]
	ldr	r3, [r8, #4]
	cmp	r3, #0
	beq	.L14009
	movw	r3, #:lower16:kmalloc_caches
	mov	r6, r0
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L14010
	mov	r1, #32
	bl	kmem_cache_alloc
	subs	r3, r0, #0
	beq	.L14011
	add	r2, r3, #20
.L14008:
	sub	r6, r9, r6
	mov	r1, #20
	str	r2, [r3, #8]
	add	r5, r5, r6, lsl #2
	mov	r6, #0
	str	r1, [r3, #12]
	add	r4, r4, #52
	str	r6, [r3, #16]
	ldr	r0, [r5, #3772]
	add	r4, r7, r4
	str	r3, [r5, #3772]
	mov	r2, #12
	mov	ip, #7
	str	r4, [r3]
	movt	r2, 16385
	str	r0, [r3, #4]
	str	r3, [r0]
	ldr	r3, [r3, #8]
	str	ip, [r3]
	stmib	r3, {r1, r2, r6}
	str	r6, [r3, #16]
	ldr	r3, [r8, #44]
	ldr	r0, [r8, #48]
	blx	r3
	mov	r0, r6
.L14006:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L14010:
	mov	r2, #36
	mov	r3, #16
	b	.L14008
.L14011:
	mvn	r0, #11
	b	.L14006
.L14009:
	movw	r0, #65012
	movt	r0, 65535
	b	.L14006
.L14014:
	.align	2
.L14013:
	.word	.LANCHOR0+3716
	.fnend
	.size	rndis_signal_disconnect, .-rndis_signal_disconnect
	.align	2
	.global	rndis_uninit
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_uninit, %function
rndis_uninit:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r0, #0
	bxgt	lr
	rsb	r0, r0, r0, lsl #4
	movw	r3, #:lower16:.LANCHOR0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	movt	r3, #:upper16:.LANCHOR0
	strd	r6, [sp, #8]
	ldr	r1, .L14035
	lsl	r5, r0, #2
	strd	r8, [sp, #16]
	mov	r2, #0
	str	r10, [sp, #24]
	add	r3, r3, r5
	str	lr, [sp, #28]
	ldr	r0, [r3, #3768]
	add	r5, r5, r1
	mov	r10, r3
	str	r2, [r3, #3720]
	ldr	r4, [r0]
.L14017:
	cmp	r5, r0
	bne	.L14024
	b	.L14015
.L14022:
	cmp	r5, r4
	mov	r0, r4
	ldr	r4, [r4]
	beq	.L14015
.L14024:
	ldr	r3, [r0, #16]
	cmp	r3, #0
	bne	.L14022
	ldr	r7, [r0, #8]
	mov	r3, #1
	str	r3, [r0, #16]
	cmp	r7, #0
	beq	.L14015
	ldr	r0, [r10, #3768]
	cmp	r5, r0
	ldr	r4, [r0]
	beq	.L14015
	mov	r6, r4
	mov	r9, #256
	mov	r8, #512
	b	.L14020
.L14019:
	cmp	r5, r6
	mov	r0, r6
	ldr	r4, [r4]
	beq	.L14034
.L14025:
	mov	r6, r4
.L14020:
	cmp	r0, #0
	beq	.L14019
	ldr	r3, [r0, #8]
	cmp	r7, r3
	bne	.L14019
	ldr	r3, [r0, #4]
	str	r3, [r4, #4]
	str	r4, [r3]
	str	r9, [r0]
	str	r8, [r0, #4]
	bl	kfree
	cmp	r5, r6
	mov	r0, r6
	ldr	r4, [r4]
	bne	.L14025
.L14034:
	ldr	r0, [r10, #3768]
	ldr	r4, [r0]
	b	.L14017
.L14015:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L14036:
	.align	2
.L14035:
	.word	.LANCHOR0+3768
	.fnend
	.size	rndis_uninit, .-rndis_uninit
	.align	2
	.global	rndis_set_host_mac
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_set_host_mac, %function
rndis_set_host_mac:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	rsb	r0, r0, r0, lsl #4
	movw	r3, #:lower16:.LANCHOR0
	movt	r3, #:upper16:.LANCHOR0
	add	r3, r3, r0, lsl #2
	str	r1, [r3, #3736]
	bx	lr
	.fnend
	.size	rndis_set_host_mac, .-rndis_set_host_mac
	.section	.rodata.str1.4
	.align	2
.LC740:
	.ascii	"<4>%s: set unknown OID 0x%08X, size %d\012\000"
	.align	2
.LC741:
	.ascii	"<4>%s: unknown RNDIS message 0x%08X len %d\012\000"
	.text
	.align	2
	.global	rndis_msg_parser
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_msg_parser, %function
rndis_msg_parser:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	subs	r6, r1, #0
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	beq	.L14054
	cmp	r0, #0
	ldr	r2, [r6]	@ unaligned
	bne	.L14138
	sub	r3, r2, #2
	cmp	r3, #6
	ldrls	pc, [pc, r3, asl #2]
	b	.L14042
.L14044:
	.word	.L14049
	.word	.L14048
	.word	.L14047
	.word	.L14046
	.word	.L14045
	.word	.L14042
	.word	.L14043
.L14045:
	movw	r5, #:lower16:.LANCHOR0
	ldr	r3, .L14147
	mov	r10, #1
	movt	r5, #:upper16:.LANCHOR0
	ldr	r0, [r5, #3768]
	str	r3, [sp, #4]
	add	r6, r3, #52
	ldr	r4, [r0]
.L14050:
	cmp	r0, r6
	bne	.L14077
	b	.L14082
.L14080:
	cmp	r4, r6
	mov	r0, r4
	ldr	r4, [r4]
	beq	.L14082
.L14077:
	ldr	r3, [r0, #16]
	cmp	r3, #0
	bne	.L14080
	ldr	r8, [r0, #8]
	str	r10, [r0, #16]
	cmp	r8, #0
	beq	.L14082
	ldr	r0, [r5, #3768]
	cmp	r0, r6
	ldr	r4, [r0]
	beq	.L14082
	mov	r9, r4
	mov	r7, #256
	mov	fp, #512
	b	.L14076
.L14075:
	cmp	r9, r6
	mov	r0, r9
	ldr	r4, [r4]
	beq	.L14139
.L14094:
	mov	r9, r4
.L14076:
	cmp	r0, #0
	beq	.L14075
	ldr	r3, [r0, #8]
	cmp	r8, r3
	bne	.L14075
	ldr	r3, [r0, #4]
	str	r3, [r4, #4]
	str	r4, [r3]
	stm	r0, {r7, fp}
	bl	kfree
	cmp	r9, r6
	mov	r0, r9
	ldr	r4, [r4]
	bne	.L14094
.L14139:
	ldr	r0, [r5, #3768]
	ldr	r4, [r0]
	b	.L14050
.L14049:
	movw	r5, #:lower16:.LANCHOR0
	mov	r2, #1
	movt	r5, #:upper16:.LANCHOR0
	ldr	r3, [r5, #3744]
	str	r2, [r5, #3720]
	cmp	r3, #0
	beq	.L14138
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #28]
	cmp	r0, #0
	beq	.L14088
	mov	r1, #32
	bl	kmem_cache_alloc
	cmp	r0, #0
	beq	.L14054
	add	r3, r0, #20
.L14053:
	mov	r4, #0
	mov	r1, #52
	ldr	r2, .L14147+4
	str	r3, [r0, #8]
	mov	ip, #-2147483646
	str	r1, [r0, #12]
	str	r4, [r0, #16]
	ldr	r3, [r5, #3772]
	str	r0, [r5, #3772]
	strd	r2, [r0]
	mov	r2, #1
	str	r0, [r3]
	ldr	r3, [r0, #8]
	str	ip, [r3]
	str	r1, [r3, #4]
	ldr	r1, [r6, #8]
	str	r1, [r3, #8]
	str	r4, [r3, #12]
	str	r2, [r3, #16]
	str	r4, [r3, #20]
	str	r2, [r3, #24]
	str	r4, [r3, #28]
	ldrb	r2, [r5, #3752]	@ zero_extendqisi2
	ldr	r1, [r5, #3744]
	str	r2, [r3, #32]
	ldrb	r2, [r5, #3752]	@ zero_extendqisi2
	ldr	r1, [r1, #364]
	str	r4, [r3, #44]
	str	r4, [r3, #48]
	add	r1, r1, #80
	mul	r2, r2, r1
	str	r2, [r3, #36]
	ldrb	r2, [r5, #3753]	@ zero_extendqisi2
	str	r2, [r3, #40]
	ldr	r3, [r5, #3760]
	ldr	r0, [r5, #3764]
	blx	r3
	mov	r0, r4
	b	.L14038
.L14048:
	movw	r5, #:lower16:.LANCHOR0
	mov	r4, #0
	movt	r5, #:upper16:.LANCHOR0
	ldr	r0, [r5, #3744]
	str	r4, [r5, #3720]
	cmp	r0, r4
	beq	.L14038
	bl	netif_carrier_off
	ldr	r3, [r5, #3744]
	ldr	r5, [r3, #576]
	cmp	r5, r4
	beq	.L14140
	mov	r0, r4
	add	r1, r5, #80
	bl	_set_bit
	mov	r0, r4
.L14038:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L14047:
	movw	r5, #:lower16:.LANCHOR0
	movt	r5, #:upper16:.LANCHOR0
	ldr	r3, [r5, #3744]
	cmp	r3, #0
	beq	.L14138
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L14090
	mov	r1, #32
	bl	kmem_cache_alloc
	subs	r1, r0, #0
	beq	.L14054
	add	r2, r1, #20
.L14056:
	mov	r3, #136
	mov	r7, #0
	ldr	r0, .L14147+4
	strd	r2, [r1, #8]
	mov	r2, #-2147483644
	str	r7, [r1, #16]
	ldr	r3, [r5, #3772]
	str	r1, [r5, #3772]
	stm	r1, {r0, r3}
	str	r1, [r3]
	ldr	r4, [r1, #8]
	str	r2, [r4]
	ldr	r3, [r6, #8]
	str	r3, [r4, #8]
	ldr	r0, [r6, #12]
	bl	gen_ndis_query_resp.constprop.0
	cmp	r0, #0
	beq	.L14085
	mov	r0, #187
	mov	r3, #24
	movt	r0, 49152
	str	r3, [r4, #4]
	str	r7, [r4, #16]
	str	r7, [r4, #20]
.L14085:
	str	r0, [r4, #12]
	ldr	r3, [r5, #3760]
	ldr	r0, [r5, #3764]
	blx	r3
	mov	r0, #0
	b	.L14038
.L14046:
	movw	r5, #:lower16:.LANCHOR0
	ldr	r3, .L14147
	movt	r5, #:upper16:.LANCHOR0
	ldr	r0, [r5, #3768]
	str	r3, [sp, #4]
	add	r8, r3, #52
	ldr	r4, [r0]
.L14051:
	cmp	r0, r8
	bne	.L14060
	b	.L14065
.L14063:
	cmp	r4, r8
	mov	r0, r4
	ldr	r4, [r4]
	beq	.L14065
.L14060:
	ldr	r3, [r0, #16]
	cmp	r3, #0
	bne	.L14063
	ldr	r9, [r0, #8]
	mov	r3, #1
	str	r3, [r0, #16]
	cmp	r9, #0
	beq	.L14065
	ldr	r0, [r5, #3768]
	cmp	r0, r8
	ldr	r4, [r0]
	beq	.L14065
	mov	fp, r4
	mov	r10, #256
	mov	r7, #512
	b	.L14059
.L14058:
	cmp	fp, r8
	mov	r0, fp
	ldr	r4, [r4]
	beq	.L14141
.L14091:
	mov	fp, r4
.L14059:
	cmp	r0, #0
	beq	.L14058
	ldr	r1, [r0, #8]
	cmp	r9, r1
	bne	.L14058
	ldr	r1, [r0, #4]
	str	r1, [r4, #4]
	str	r4, [r1]
	str	r10, [r0]
	str	r7, [r0, #4]
	bl	kfree
	cmp	fp, r8
	mov	r0, fp
	ldr	r4, [r4]
	bne	.L14091
.L14141:
	ldr	r0, [r5, #3768]
	ldr	r4, [r0]
	b	.L14051
.L14065:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L14142
	mov	r1, #32
	bl	kmem_cache_alloc
	cmp	r0, #0
	beq	.L14054
	add	r3, r0, #20
.L14061:
	str	r3, [r0, #8]
	ldr	r3, [sp, #4]
	mov	r2, #16
	mov	r8, #0
	mov	ip, #-2147483643
	str	r2, [r0, #12]
	str	r8, [r0, #16]
	add	r7, r3, #52
	ldr	r3, [r5, #3772]
	str	r0, [r5, #3772]
	str	r7, [r0]
	str	r3, [r0, #4]
	str	r0, [r3]
	ldr	r4, [r0, #8]
	ldr	r3, [r6, #16]
	ldr	r1, [r6, #20]
	str	ip, [r4]
	str	r2, [r4, #4]
	ldr	r2, [r6, #8]
	str	r2, [r4, #8]
	ldr	r0, [r0, #8]
	ldr	r2, [r6, #12]
	cmp	r0, r8
	beq	.L14086
	movw	r0, #270
	movt	r0, 1
	cmp	r2, r0
	bne	.L14143
	add	r1, r6, r1
	ldr	r3, [r5, #3740]
	ldr	r2, [r1, #8]	@ unaligned
	strh	r2, [r3]	@ movhi
	ldr	r3, [r5, #3740]
	ldrh	r6, [r3]
	cmp	r6, #0
	beq	.L14069
	mov	r3, #2
	ldr	r0, [r5, #3744]
	str	r3, [r5, #3720]
	bl	netif_carrier_on
	ldr	r3, [r5, #3744]
	ldr	r2, [r3, #160]
	tst	r2, #1
	bne	.L14144
.L14067:
	mov	r3, #0
	str	r3, [r4, #12]
.L14073:
	ldr	r3, [r5, #3760]
	ldr	r0, [r5, #3764]
	blx	r3
	mov	r0, #0
	b	.L14038
.L14082:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L14145
	mov	r1, #32
	bl	kmem_cache_alloc
	cmp	r0, #0
	beq	.L14054
	add	r3, r0, #20
.L14078:
	str	r3, [r0, #8]
	ldr	r3, [sp, #4]
	mov	r2, #16
	mov	r4, #0
	mov	ip, #-2147483642
	str	r2, [r0, #12]
	mov	r1, #1
	str	r4, [r0, #16]
	add	r7, r3, #52
	ldr	r3, [r5, #3772]
	str	r0, [r5, #3772]
	str	r7, [r0]
	str	r3, [r0, #4]
	str	r0, [r3]
	ldr	r3, [r0, #8]
	str	ip, [r3]
	stmib	r3, {r2, r4}
	str	r1, [r3, #12]
	ldr	r3, [r5, #3760]
	ldr	r0, [r5, #3764]
	blx	r3
	mov	r0, r4
	b	.L14038
.L14142:
	mov	r3, #36
	mov	r0, #16
	b	.L14061
.L14145:
	mov	r3, #36
	mov	r0, #16
	b	.L14078
.L14143:
	movw	r1, #259
	movt	r1, 257
	cmp	r2, r1
	beq	.L14067
	movw	r0, #:lower16:.LC740
	ldr	r1, .L14147+8
	movt	r0, #:upper16:.LC740
	bl	printk
.L14086:
	mov	r3, #187
	movt	r3, 49152
	str	r3, [r4, #12]
	b	.L14073
.L14069:
	mov	r3, #1
	ldr	r0, [r5, #3744]
	str	r3, [r5, #3720]
	bl	netif_carrier_off
	ldr	r3, [r5, #3744]
	ldr	r1, [r3, #576]
	cmp	r1, #0
	beq	.L14146
	add	r1, r1, #80
	mov	r0, r6
	bl	_set_bit
	b	.L14067
.L14054:
	mvn	r0, #11
	b	.L14038
.L14043:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L14097
	mov	r1, #32
	bl	kmem_cache_alloc
	cmp	r0, #0
	beq	.L14054
	add	r2, r0, #20
.L14083:
	mov	r1, #16
	mov	r4, #0
	ldr	lr, .L14147+4
	movw	r3, #:lower16:.LANCHOR0
	str	r2, [r0, #8]
	mov	ip, #-2147483640
	movt	r3, #:upper16:.LANCHOR0
	str	r1, [r0, #12]
	str	r4, [r0, #16]
	ldr	r2, [r3, #3772]
	str	r0, [r3, #3772]
	str	lr, [r0]
	str	r2, [r0, #4]
	str	r0, [r2]
	ldr	r2, [r0, #8]
	str	ip, [r2]
	str	r1, [r2, #4]
	ldr	r1, [r6, #8]
	str	r1, [r2, #8]
	str	r4, [r2, #12]
	ldr	r2, [r3, #3760]
	ldr	r0, [r3, #3764]
	blx	r2
	mov	r0, r4
	b	.L14038
.L14090:
	mov	r2, #36
	mov	r1, #16
	b	.L14056
.L14088:
	mov	r3, #36
	mov	r0, #16
	b	.L14053
.L14144:
	ldr	r6, [r3, #576]
	mov	r0, r8
	add	r1, r6, #80
	bl	_test_and_clear_bit
	cmp	r0, #0
	beq	.L14067
	ldr	r0, [r6, #4]
	bl	__netif_schedule
	b	.L14067
.L14097:
	mov	r2, #36
	mov	r0, #16
	b	.L14083
.L14042:
	movw	r0, #:lower16:.LC741
	ldr	r3, [r6, #4]	@ unaligned
	ldr	r1, .L14147+12
	movt	r0, #:upper16:.LC741
	bl	printk
.L14138:
	movw	r0, #65012
	movt	r0, 65535
	b	.L14038
.L14140:
	movw	r0, #:lower16:.LC82
	movw	r1, #1847
	movt	r0, #:upper16:.LC82
	bl	warn_slowpath_null
	movw	r0, #:lower16:.LC83
	movt	r0, #:upper16:.LC83
	bl	printk
	mov	r0, r5
	b	.L14038
.L14146:
	movw	r0, #:lower16:.LC82
	movw	r1, #1847
	movt	r0, #:upper16:.LC82
	bl	warn_slowpath_null
	movw	r0, #:lower16:.LC83
	movt	r0, #:upper16:.LC83
	bl	printk
	b	.L14067
.L14148:
	.align	2
.L14147:
	.word	.LANCHOR0+3716
	.word	.LANCHOR0+3768
	.word	.LANCHOR5-2280
	.word	.LANCHOR5-2260
	.fnend
	.size	rndis_msg_parser, .-rndis_msg_parser
	.section	.rodata.str1.4
	.align	2
.LC742:
	.ascii	"RNDIS command error %d, %d/%d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_command_complete, %function
rndis_command_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r5, [r1, #32]
	.pad #8
	sub	sp, sp, #8
	ldr	r3, [r5, #20]
	cmp	r3, #0
	beq	.L14149
	ldr	r6, [r3, #24]
	cmp	r6, #0
	beq	.L14149
	ldrb	r0, [r5, #156]	@ zero_extendqisi2
	mov	r4, r1
	ldr	r1, [r1]
	bl	rndis_msg_parser
	subs	r2, r0, #0
	blt	.L14158
	ldr	r3, [r4]
	ldr	r2, [r3]
	cmp	r2, #2
	beq	.L14159
.L14149:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L14159:
	movw	r2, #:lower16:.LANCHOR4
	ldr	r3, [r3, #20]
	movt	r2, #:upper16:.LANCHOR4
	ldr	r2, [r2, #-848]
	cmp	r3, #2048
	movls	r3, #0
	movhi	r3, #1
	cmp	r2, #1
	strb	r3, [r5, #116]
	movls	r3, #0
	strbls	r3, [r5, #116]
	b	.L14149
.L14158:
	ldr	r0, [r6]
	movw	r1, #:lower16:.LC742
	ldr	ip, [r4, #4]
	movt	r1, #:upper16:.LC742
	ldr	r3, [r4, #48]
	add	r0, r0, #32
	str	ip, [sp]
	bl	dev_err
	ldr	r3, [r4]
	ldr	r2, [r3]
	cmp	r2, #2
	bne	.L14149
	b	.L14159
	.fnend
	.size	rndis_command_complete, .-rndis_command_complete
	.section	.rodata.str1.4
	.align	2
.LC743:
	.ascii	"<3>%s: RNDIS command error %d, %d/%d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_command_complete, %function
rndis_qc_command_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	mov	r4, r1
	str	lr, [sp, #8]
	ldr	r5, [r1, #32]
	.pad #12
	sub	sp, sp, #12
	ldr	r1, [r1]
	ldrb	r0, [r5, #136]	@ zero_extendqisi2
	bl	rndis_msg_parser
	subs	r2, r0, #0
	blt	.L14164
.L14161:
	ldr	r3, [r4]
	ldr	r2, [r3]
	cmp	r2, #2
	ldreq	r3, [r3, #20]
	streq	r3, [r5, #128]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	add	sp, sp, #8
	ldr	pc, [sp], #4
.L14164:
	ldr	ip, [r4, #4]
	movw	r0, #:lower16:.LC743
	ldr	r1, .L14165
	movt	r0, #:upper16:.LC743
	ldr	r3, [r4, #48]
	str	ip, [sp]
	bl	printk
	b	.L14161
.L14166:
	.align	2
.L14165:
	.word	.LANCHOR5-2240
	.fnend
	.size	rndis_qc_command_complete, .-rndis_qc_command_complete
	.align	2
	.global	rndis_register
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_register, %function
rndis_register:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	subs	r3, r0, #0
	beq	.L14169
	movw	r2, #:lower16:.LANCHOR0
	movt	r2, #:upper16:.LANCHOR0
	ldrb	r0, [r2, #3717]	@ zero_extendqisi2
	cmp	r0, #0
	bne	.L14170
	.save {lr}
	str	lr, [sp, #-4]!
	ldr	lr, .L14175
	mov	ip, #1
	strb	ip, [r2, #3717]
	str	r3, [r2, #3760]
	strh	ip, [lr, #36]	@ movhi
	str	r1, [r2, #3764]
	ldr	pc, [sp], #4
.L14170:
	mvn	r0, #18
	bx	lr
.L14169:
	mvn	r0, #21
	bx	lr
.L14176:
	.align	2
.L14175:
	.word	.LANCHOR0+3716
	.fnend
	.size	rndis_register, .-rndis_register
	.align	2
	.global	rndis_deregister
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_deregister, %function
rndis_deregister:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	cmp	r0, #0
	bgt	.L14177
	rsb	r0, r0, r0, lsl #4
	movw	r3, #:lower16:.LANCHOR0
	movt	r3, #:upper16:.LANCHOR0
	add	r0, r3, r0, lsl #2
	mov	r3, #0
	strb	r3, [r0, #3717]
.L14177:
	bx	lr
	.fnend
	.size	rndis_deregister, .-rndis_deregister
	.align	2
	.global	rndis_set_param_dev
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_set_param_dev, %function
rndis_set_param_dev:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	cmp	r1, #0
	beq	.L14181
	cmp	r0, #0
	bne	.L14182
	movw	ip, #:lower16:.LANCHOR0
	movt	ip, #:upper16:.LANCHOR0
	str	r0, [ip, #3252]
	str	r0, [ip, #3256]
	str	r2, [ip, #3740]
	str	r1, [ip, #3744]
	bx	lr
.L14182:
	mvn	r0, #0
	bx	lr
.L14181:
	mvn	r0, #21
	bx	lr
	.fnend
	.size	rndis_set_param_dev, .-rndis_set_param_dev
	.align	2
	.global	rndis_set_param_vendor
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_set_param_vendor, %function
rndis_set_param_vendor:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	clz	r3, r2
	cmp	r0, #0
	lsr	r3, r3, #5
	movne	r0, #1
	moveq	r0, r3
	cmp	r0, #0
	bne	.L14185
	movw	r3, #:lower16:.LANCHOR0
	movt	r3, #:upper16:.LANCHOR0
	str	r1, [r3, #3748]
	str	r2, [r3, #3756]
	bx	lr
.L14185:
	mvn	r0, #0
	bx	lr
	.fnend
	.size	rndis_set_param_vendor, .-rndis_set_param_vendor
	.align	2
	.global	rndis_set_param_medium
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_set_param_medium, %function
rndis_set_param_medium:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	cmp	r0, #0
	bne	.L14188
	movw	r3, #:lower16:.LANCHOR0
	movt	r3, #:upper16:.LANCHOR0
	str	r1, [r3, #3724]
	str	r2, [r3, #3728]
	bx	lr
.L14188:
	mvn	r0, #0
	bx	lr
	.fnend
	.size	rndis_set_param_medium, .-rndis_set_param_medium
	.align	2
	.global	rndis_set_max_pkt_xfer
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_set_max_pkt_xfer, %function
rndis_set_max_pkt_xfer:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	rsb	r0, r0, r0, lsl #4
	movw	r3, #:lower16:.LANCHOR0
	movt	r3, #:upper16:.LANCHOR0
	add	r3, r3, r0, lsl #2
	strb	r1, [r3, #3752]
	bx	lr
	.fnend
	.size	rndis_set_max_pkt_xfer, .-rndis_set_max_pkt_xfer
	.align	2
	.global	rndis_set_pkt_alignment_factor
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_set_pkt_alignment_factor, %function
rndis_set_pkt_alignment_factor:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	rsb	r0, r0, r0, lsl #4
	movw	r3, #:lower16:.LANCHOR0
	movt	r3, #:upper16:.LANCHOR0
	add	r3, r3, r0, lsl #2
	strb	r1, [r3, #3753]
	bx	lr
	.fnend
	.size	rndis_set_pkt_alignment_factor, .-rndis_set_pkt_alignment_factor
	.align	2
	.global	rndis_add_hdr
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_add_hdr, %function
rndis_add_hdr:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	subs	r5, r0, #0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	beq	.L14191
	mov	r1, #44
	bl	skb_push
	mov	r1, #44
	mov	r4, r0
	bl	__memzero
	mov	r3, #0
	mov	r2, #1
	mov	r1, #36
	strb	r2, [r4]
	strb	r3, [r4, #1]
	strb	r3, [r4, #2]
	strb	r3, [r4, #3]
	ldr	r2, [r5, #80]
	str	r2, [r4, #4]	@ unaligned
	strb	r1, [r4, #8]
	strb	r3, [r4, #9]
	strb	r3, [r4, #10]
	strb	r3, [r4, #11]
	ldr	r3, [r5, #80]
	sub	r3, r3, #44
	str	r3, [r4, #12]	@ unaligned
.L14191:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	rndis_add_hdr, .-rndis_add_hdr
	.align	2
	.global	rndis_free_response
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_free_response, %function
rndis_free_response:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	rsb	r0, r0, r0, lsl #4
	movw	r3, #:lower16:.LANCHOR0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	movt	r3, #:upper16:.LANCHOR0
	ldr	r2, .L14207
	lsl	r6, r0, #2
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	add	r3, r3, r6
	str	lr, [sp, #28]
	ldr	r0, [r3, #3768]
	add	r6, r6, r2
	cmp	r0, r6
	ldr	r4, [r0]
	beq	.L14197
	mov	r7, r1
	mov	r5, r4
	mov	r9, #256
	mov	r8, #512
	b	.L14198
.L14199:
	cmp	r6, r5
	mov	r0, r5
	ldr	r4, [r4]
	beq	.L14197
.L14202:
	mov	r5, r4
.L14198:
	cmp	r0, #0
	beq	.L14199
	ldr	r3, [r0, #8]
	cmp	r3, r7
	bne	.L14199
	ldr	r3, [r0, #4]
	str	r3, [r4, #4]
	str	r4, [r3]
	str	r9, [r0]
	str	r8, [r0, #4]
	bl	kfree
	cmp	r6, r5
	mov	r0, r5
	ldr	r4, [r4]
	bne	.L14202
.L14197:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L14208:
	.align	2
.L14207:
	.word	.LANCHOR0+3768
	.fnend
	.size	rndis_free_response, .-rndis_free_response
	.align	2
	.global	rndis_get_next_response
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_get_next_response, %function
rndis_get_next_response:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #0
	beq	.L14214
	rsb	r0, r0, r0, lsl #4
	ldr	r2, .L14220
	movw	r3, #:lower16:.LANCHOR0
	movt	r3, #:upper16:.LANCHOR0
	lsl	ip, r0, #2
	add	r3, r3, ip
	add	ip, ip, r2
	ldr	r2, [r3, #3768]
	cmp	r2, ip
	ldr	r3, [r2]
	beq	.L14214
	.save {lr}
	str	lr, [sp, #-4]!
	b	.L14212
.L14211:
	cmp	ip, r3
	mov	r2, r3
	ldr	r3, [r3]
	beq	.L14219
.L14212:
	ldr	lr, [r2, #16]
	cmp	lr, #0
	bne	.L14211
	ldr	r3, [r2, #12]
	mov	r0, #1
	str	r0, [r2, #16]
	str	r3, [r1]
	ldr	r0, [r2, #8]
	ldr	pc, [sp], #4
.L14219:
	mov	r0, #0
	ldr	pc, [sp], #4
.L14214:
	mov	r0, #0
	bx	lr
.L14221:
	.align	2
.L14220:
	.word	.LANCHOR0+3768
	.fnend
	.size	rndis_get_next_response, .-rndis_get_next_response
	.section	.rodata.cst4
	.align	2
.LC744:
	.word	__stack_chk_guard
	.text
	.align	2
	.global	rndis_init
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_init, %function
rndis_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	movw	r5, #:lower16:.LANCHOR3
	movw	r3, #:lower16:.LC744
	movt	r5, #:upper16:.LANCHOR3
	movt	r3, #:upper16:.LC744
	strd	r6, [sp, #8]
	ldrb	r4, [r5, #-4084]	@ zero_extendqisi2
	str	lr, [sp, #16]
	.pad #36
	sub	sp, sp, #36
	ldr	r3, [r3]
	str	r3, [sp, #28]
	mov	r3,#0
	cmp	r4, #0
	bne	.L14232
	ldr	r7, .L14235
	movw	r1, #:lower16:.LC446
	mov	r2, r4
	movt	r1, #:upper16:.LC446
	add	r0, sp, #8
	bl	sprintf
	add	r0, sp, #8
	mov	r2, r4
	ldr	r3, .L14235+4
	mov	r1, #432
	str	r7, [sp]
	movw	r6, #:lower16:.LANCHOR0
	bl	proc_create_data
	cmp	r0, #0
	movt	r6, #:upper16:.LANCHOR0
	movw	r2, #3716
	mvneq	r0, #4
	bne	.L14233
.L14222:
	movw	r3, #:lower16:.LC744
	movt	r3, #:upper16:.LC744
	ldr	r2, [r3]
	ldr	r3, [sp, #28]
	eors	r2, r3, r2
	bne	.L14234
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L14233:
	add	r7, r7, #52
	mov	r3, #1
	strh	r4, [r6, r2]	@ movhi
	mov	r0, r4
	str	r4, [r6, #3720]
	strb	r3, [r5, #-4084]
	str	r3, [r6, #3732]
	str	r7, [r6, #3768]
	str	r7, [r6, #3772]
	b	.L14222
.L14232:
	mov	r0, #0
	b	.L14222
.L14234:
	bl	__stack_chk_fail
.L14236:
	.align	2
.L14235:
	.word	.LANCHOR0+3716
	.word	.LANCHOR5-2384
	.fnend
	.size	rndis_init, .-rndis_init
	.section	.rodata.cst4
	.align	2
.LC745:
	.word	__stack_chk_guard
	.text
	.align	2
	.global	rndis_exit
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_exit, %function
rndis_exit:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR3
	movw	r2, #:lower16:.LC745
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movt	r2, #:upper16:.LC745
	movt	r3, #:upper16:.LANCHOR3
	str	lr, [sp, #4]
	.pad #24
	sub	sp, sp, #24
	ldr	r2, [r2]
	str	r2, [sp, #20]
	mov	r2,#0
	ldrb	r2, [r3, #-4084]	@ zero_extendqisi2
	cmp	r2, #0
	bne	.L14244
.L14237:
	movw	r3, #:lower16:.LC745
	movt	r3, #:upper16:.LC745
	ldr	r2, [r3]
	ldr	r3, [sp, #20]
	eors	r2, r3, r2
	bne	.L14245
	add	sp, sp, #24
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L14244:
	mov	r4, #0
	movw	r1, #:lower16:.LC446
	mov	r2, r4
	movt	r1, #:upper16:.LC446
	mov	r0, sp
	strb	r4, [r3, #-4084]
	bl	sprintf
	mov	r0, sp
	mov	r1, r4
	bl	remove_proc_entry
	b	.L14237
.L14245:
	bl	__stack_chk_fail
	.fnend
	.size	rndis_exit, .-rndis_exit
	.align	2
	.global	ecm_ipa_init
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_ipa_init, %function
ecm_ipa_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	ecm_ipa_init, .-ecm_ipa_init
	.align	2
	.global	ecm_qc_get_ipa_rx_cb
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_get_ipa_rx_cb, %function
ecm_qc_get_ipa_rx_cb:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR0
	movt	r3, #:upper16:.LANCHOR0
	ldr	r0, [r3, #3212]
	bx	lr
	.fnend
	.size	ecm_qc_get_ipa_rx_cb, .-ecm_qc_get_ipa_rx_cb
	.align	2
	.global	ecm_qc_get_ipa_tx_cb
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_get_ipa_tx_cb, %function
ecm_qc_get_ipa_tx_cb:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR0
	movt	r3, #:upper16:.LANCHOR0
	ldr	r0, [r3, #3216]
	bx	lr
	.fnend
	.size	ecm_qc_get_ipa_tx_cb, .-ecm_qc_get_ipa_tx_cb
	.align	2
	.global	ecm_qc_get_ipa_priv
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_get_ipa_priv, %function
ecm_qc_get_ipa_priv:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR0
	movt	r3, #:upper16:.LANCHOR0
	ldr	r0, [r3, #3232]
	bx	lr
	.fnend
	.size	ecm_qc_get_ipa_priv, .-ecm_qc_get_ipa_priv
	.section	.rodata.str1.4
	.align	2
.LC746:
	.ascii	"k_bam_data\000"
	.align	2
.LC747:
	.ascii	"<3>%s: Failed to create workqueue\012\000"
	.align	2
.LC748:
	.ascii	"<3>%s: bam_data_setup failed err: %d\012\000"
	.align	2
.LC749:
	.ascii	"<3>%s: bam setup failed\000"
	.align	2
.LC750:
	.ascii	"%02X%02X%02X%02X%02X%02X\000"
	.align	2
.LC751:
	.ascii	"cdc_ethernet\000"
	.align	2
.LC752:
	.ascii	"<3>%s: failed to add function\000"
	.text
	.align	2
	.global	ecm_qc_bind_config
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_bind_config, %function
ecm_qc_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	mov	r6, r0
	movw	r0, #:lower16:.LC267
	strd	r8, [sp, #16]
	movt	r0, #:upper16:.LC267
	mov	r8, r2
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r3, [r6, #24]
	.pad #24
	sub	sp, sp, #24
	ldr	r3, [r3]
	ldr	r4, [r3, #28]
	mov	r1, r4
	bl	strcmp
	cmp	r0, #0
	beq	.L14262
	movw	r0, #:lower16:.LC270
	mov	r1, r4
	movt	r0, #:upper16:.LC270
	bl	strcmp
	cmp	r5, #0
	cmpne	r0, #0
	beq	.L14262
	movw	r10, #:lower16:.LANCHOR0
	movt	r10, #:upper16:.LANCHOR0
	ldr	r3, [r10, #2268]
	cmp	r3, #0
	beq	.L14273
.L14252:
	movw	r9, #:lower16:.LANCHOR1
	movt	r9, #:upper16:.LANCHOR1
	ldrb	r3, [r9, #1468]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L14255
	ldr	r2, [r6, #24]
	ldrb	r3, [r2, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L14257
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r2, #48]
	ldr	r2, [r6, #24]
	strb	r3, [r9, #1468]
	strb	r3, [r9, #2628]
	ldrb	r3, [r2, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L14257
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r2, #48]
	ldr	r1, [r6, #24]
	strb	r3, [r9, #1484]
	strb	r3, [r9, #2660]
	ldrb	r3, [r1, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L14257
	add	r3, r3, #1
	movw	r2, #:lower16:.LANCHOR4
	uxtb	r3, r3
	movt	r2, #:upper16:.LANCHOR4
	strb	r3, [r2, #-833]
	strb	r3, [r1, #48]
	strb	r3, [r9, #1476]
.L14255:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L14263
	movw	r1, #32976
	bl	kmem_cache_alloc
	subs	r4, r0, #0
	beq	.L14274
.L14258:
	mov	r0, r8
	bl	str_to_xport
	cmp	r0, #7
	str	r0, [r4, #116]
	beq	.L14275
	ldrb	r3, [r5, #5]	@ zero_extendqisi2
	add	r7, r4, #120
	movw	r2, #:lower16:.LC750
	ldrb	r1, [r5, #2]	@ zero_extendqisi2
	movt	r2, #:upper16:.LC750
	mov	r0, r7
	ldrb	r8, [r5, #4]	@ zero_extendqisi2
	ldrb	lr, [r5, #3]	@ zero_extendqisi2
	str	r3, [sp, #16]
	ldrb	ip, [r5, #1]	@ zero_extendqisi2
	ldrb	r3, [r5]	@ zero_extendqisi2
	str	r8, [sp, #12]
	str	ip, [sp]
	stmib	sp, {r1, lr}
	mov	r1, #14
	bl	snprintf
.L14260:
	ldr	lr, .L14277
	movw	r3, #:lower16:.LC751
	movw	ip, #:lower16:ecm_qc_unbind
	movt	r3, #:upper16:.LC751
	movt	ip, #:upper16:ecm_qc_unbind
	str	r7, [r9, #1480]
	movw	r1, #:lower16:ecm_qc_bind
	movw	r2, #:lower16:ecm_qc_set_alt
	movt	r1, #:upper16:ecm_qc_bind
	movt	r2, #:upper16:ecm_qc_set_alt
	stm	r4, {r3, lr}
	movw	r3, #:lower16:ecm_qc_get_alt
	mov	r0, r6
	movt	r3, #:upper16:ecm_qc_get_alt
	str	r1, [r4, #24]
	movw	r1, #:lower16:ecm_qc_setup
	str	ip, [r4, #28]
	movw	ip, #:lower16:ecm_qc_disable
	movt	r1, #:upper16:ecm_qc_setup
	movt	ip, #:upper16:ecm_qc_disable
	str	r2, [r4, #32]
	movw	r2, #:lower16:ecm_qc_suspend
	str	r3, [r4, #36]
	movw	r3, #:lower16:ecm_qc_resume
	movt	r2, #:upper16:ecm_qc_suspend
	movt	r3, #:upper16:ecm_qc_resume
	str	ip, [r4, #40]
	mov	ip, #15
	str	r1, [r4, #44]
	mov	r1, r4
	str	r2, [r4, #48]
	str	r3, [r4, #52]
	strh	ip, [r4, #90]	@ movhi
	bl	usb_add_function
	subs	r7, r0, #0
	beq	.L14250
	movw	r0, #:lower16:.LC752
	ldr	r1, .L14277+4
	movt	r0, #:upper16:.LC752
	bl	printk
	mov	r3, #0
	mov	r0, r4
	str	r3, [r9, #1480]
	bl	kfree
	b	.L14250
.L14262:
	mvn	r7, #21
.L14250:
	mov	r0, r7
	add	sp, sp, #24
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L14263:
	mov	r4, #16
	b	.L14258
.L14275:
	movw	r5, #:lower16:.LANCHOR3
	ldr	r1, .L14277+8
	add	r7, r4, #120
	movt	r5, #:upper16:.LANCHOR3
	ldr	r0, [r5, #-3960]
	bl	get_qc_ether_addr
	ldr	r1, .L14277+12
	ldr	r0, [r5, #-3956]
	bl	get_qc_ether_addr
	ldrb	r3, [r10, #3225]	@ zero_extendqisi2
	movw	r2, #:lower16:.LC750
	mov	r0, r7
	ldrb	r8, [r10, #3224]	@ zero_extendqisi2
	movt	r2, #:upper16:.LC750
	mov	r1, #14
	ldrb	r5, [r10, #3223]	@ zero_extendqisi2
	ldrb	lr, [r10, #3222]	@ zero_extendqisi2
	ldrb	ip, [r10, #3221]	@ zero_extendqisi2
	str	r8, [sp, #12]
	str	r3, [sp, #16]
	ldrb	r3, [r10, #3220]	@ zero_extendqisi2
	stm	sp, {ip, lr}
	str	r5, [sp, #8]
	bl	snprintf
	b	.L14260
.L14273:
	movw	r0, #:lower16:.LC746
	mov	r2, #1
	str	r3, [sp]
	movt	r0, #:upper16:.LC746
	mov	r1, #10
	bl	__alloc_workqueue_key
	cmp	r0, #0
	str	r0, [r10, #2268]
	beq	.L14276
	bl	bam_data_setup.part.0
	subs	r7, r0, #0
	beq	.L14252
.L14272:
	movw	r0, #:lower16:.LC748
	ldr	r1, .L14277+16
	mov	r2, r7
	movt	r0, #:upper16:.LC748
	bl	printk
	movw	r0, #:lower16:.LC749
	ldr	r1, .L14277+4
	movt	r0, #:upper16:.LC749
	bl	printk
	b	.L14250
.L14257:
	mvn	r7, #18
	b	.L14250
.L14274:
	mvn	r7, #11
	b	.L14250
.L14276:
	movw	r0, #:lower16:.LC747
	ldr	r1, .L14277+20
	mvn	r7, #11
	movt	r0, #:upper16:.LC747
	bl	printk
	b	.L14272
.L14278:
	.align	2
.L14277:
	.word	.LANCHOR4-820
	.word	.LANCHOR5-2192
	.word	.LANCHOR0+3226
	.word	.LANCHOR0+3220
	.word	.LANCHOR5-2212
	.word	.LANCHOR2+2708
	.fnend
	.size	ecm_qc_bind_config, .-ecm_qc_bind_config
	.align	2
	.global	fmbim_free_req
	.syntax unified
	.arm
	.fpu softvfp
	.type	fmbim_free_req, %function
fmbim_free_req:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	subs	r4, r1, #0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	beq	.L14279
	mov	r5, r0
	ldr	r0, [r4]
	bl	kfree
	ldr	r3, [r5, #8]
	mov	r1, r4
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	ldr	r3, [r3, #12]
	bx	r3	@ indirect register sibling call
.L14279:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	fmbim_free_req, .-fmbim_free_req
	.section	.rodata.str1.4
	.align	2
.LC753:
	.ascii	"<3>%s: %s: teth_bridge_set_aggr_params failed\012\000"
	.section	.text.unlikely
	.align	2
	.global	mbim_configure_params
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_configure_params, %function
mbim_configure_params:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r2, .L14284
	movw	r0, #:lower16:.LC753
	push	{r4, lr}
	.save {r4, lr}
	movt	r0, #:upper16:.LC753
	mov	r1, r2
	bl	printk
	mvn	r0, #0
	pop	{r4, pc}
.L14285:
	.align	2
.L14284:
	.word	.LANCHOR5-2172
	.fnend
	.size	mbim_configure_params, .-mbim_configure_params
	.text
	.align	2
	.global	bam_data_disconnect
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam_data_disconnect, %function
bam_data_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r4, #:lower16:.LANCHOR0
	movt	r4, #:upper16:.LANCHOR0
	str	r6, [sp, #8]
	ldr	r3, [r4, #3712]
	str	lr, [sp, #12]
	cmp	r1, r3
	bge	.L14303
	cmp	r0, #0
	beq	.L14304
	add	r1, r4, r1, lsl #2
	ldr	r5, [r1, #2264]
	ldr	r3, [r5, #4]
	cmp	r3, #0
	beq	.L14289
	ldr	r2, [r3, #8]
	cmp	r2, #0
	beq	.L14289
	ldr	r2, [r2]
	cmp	r2, #0
	beq	.L14289
	ldr	r0, [r3, #12]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r5, #4]
	ldr	r0, [r3, #8]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [r5, #4]
	mov	r3, #0
	ldr	r2, [r2, #8]
	str	r3, [r2]
	ldr	r2, [r5, #4]
	ldr	r2, [r2, #12]
	str	r3, [r2]
	str	r3, [r5, #4]
.L14289:
	ldr	r3, [r5, #60]
	cmp	r3, #7
	beq	.L14305
	mov	r0, #0
	bl	usb_bam_client_ready
	cmp	r0, #0
	bne	.L14306
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L14305:
	add	r1, r5, #184
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	ldr	r0, [r4, #2268]
	ldrd	r4, [sp]
	add	sp, sp, #16
	b	queue_work
.L14306:
	ldr	r2, .L14307
	movw	r0, #:lower16:.LC390
	movt	r0, #:upper16:.LC390
	mov	r1, r2
.L14302:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	printk
.L14304:
	movw	r0, #:lower16:.LC389
	ldr	r1, .L14307
	movt	r0, #:upper16:.LC389
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	printk
.L14303:
	movw	r0, #:lower16:.LC388
	mov	r2, r1
	ldr	r1, .L14307
	movt	r0, #:upper16:.LC388
	b	.L14302
.L14308:
	.align	2
.L14307:
	.word	.LANCHOR2+2668
	.fnend
	.size	bam_data_disconnect, .-bam_data_disconnect
	.section	.rodata.str1.4
	.align	2
.LC754:
	.ascii	"<6>%s: SET DEVICE OFFLINE\000"
	.align	2
.LC755:
	.ascii	"<6>%s: dev:%pK port:%d. Do nothing.\012\000"
	.align	2
.LC756:
	.ascii	"<6>%s: mbim deactivated\012\000"
	.section	.text.unlikely
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_disable, %function
mbim_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, r7, r8, lr}
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	ldr	r6, .L14315
	mov	r5, #0
	movw	r0, #:lower16:.LC754
	movt	r0, #:upper16:.LC754
	sub	r1, r6, #4
	mov	r7, r6
	bl	printk
	mov	r0, r4
	str	r5, [r4, #80]
	strb	r5, [r4, #156]
	bl	mbim_clear_queues
	mov	r0, r4
	bl	mbim_reset_function_queue
	movw	r0, #:lower16:.LC755
	ldrb	r3, [r4, #128]	@ zero_extendqisi2
	mov	r2, r4
	add	r1, r6, #12
	movt	r0, #:upper16:.LC755
	bl	printk
	add	r0, r4, #132
	ldrb	r1, [r4, #128]	@ zero_extendqisi2
	bl	bam_data_disconnect
	ldr	r0, [r4, #148]
	ldr	r3, [r0]
	cmp	r3, r5
	beq	.L14310
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #148]
	str	r5, [r3]
.L14310:
	mov	r3, #0
	movw	r0, #:lower16:.LC756
	sub	r1, r7, #4
	movt	r0, #:upper16:.LC756
	str	r3, [r4, #160]
	pop	{r4, r5, r6, r7, r8, lr}
	b	printk
.L14316:
	.align	2
.L14315:
	.word	.LANCHOR5-2144
	.fnend
	.size	mbim_disable, .-mbim_disable
	.text
	.align	2
	.global	bam_data_connect
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam_data_connect, %function
bam_data_connect:
	.fnstart
	@ args = 8, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	movw	r7, #:lower16:.LANCHOR0
	movt	r7, #:upper16:.LANCHOR0
	strd	r8, [sp, #16]
	ldr	ip, [r7, #3712]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	ldrb	r10, [sp, #40]	@ zero_extendqisi2
	ldr	fp, [sp, #44]
	cmp	r1, ip
	bge	.L14329
	cmp	r0, #0
	mov	r6, r0
	beq	.L14330
	ldr	r0, [r0, #8]
	add	r1, r7, r1, lsl #2
	mov	r9, r3
	ldr	r4, [r1, #2264]
	ldr	r1, [r0, #28]
	ldrh	r3, [r1, #4]	@ unaligned
	cmp	r3, #0
	beq	.L14326
	ldr	r3, [r0, #8]
	mov	r8, r2
	ldr	r3, [r3]
	blx	r3
	subs	r5, r0, #0
	bne	.L14321
	ldr	r3, [r6, #8]
	str	r4, [r3]
	ldr	r0, [r6, #12]
	ldr	r1, [r0, #28]
	ldrh	r3, [r1, #4]	@ unaligned
	cmp	r3, #0
	beq	.L14327
	ldr	r3, [r0, #8]
	ldr	r3, [r3]
	blx	r3
	subs	r5, r0, #0
	bne	.L14323
	ldr	r3, [r6, #12]
	cmp	r8, #7
	str	r4, [r3]
	str	r6, [r4, #4]
	strb	r9, [r4, #52]
	strb	r10, [r4, #53]
	str	fp, [r4, #56]
	str	r8, [r4, #60]
	bne	.L14325
	add	r2, r4, #44
	add	r3, r4, #48
	strb	r9, [r4, #64]
	strb	r10, [r4, #65]
	strd	r2, [r4, #68]
.L14325:
	add	r1, r4, #168
	ldr	r0, [r7, #2268]
	bl	queue_work
.L14317:
	mov	r0, r5
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L14327:
	mvn	r5, #21
.L14323:
	movw	r0, #:lower16:.LC197
	ldr	r1, .L14331
	movt	r0, #:upper16:.LC197
	ldr	r2, [r6, #12]
	bl	printk
	ldr	r3, [r6, #8]
	mov	r2, #0
	str	r2, [r3]
	b	.L14317
.L14326:
	mvn	r5, #21
.L14321:
	movw	r0, #:lower16:.LC196
	ldr	r1, .L14331
	movt	r0, #:upper16:.LC196
	ldr	r2, [r6, #8]
	bl	printk
	b	.L14317
.L14330:
	movw	r0, #:lower16:.LC389
	ldr	r1, .L14331
	mvn	r5, #18
	movt	r0, #:upper16:.LC389
	bl	printk
	b	.L14317
.L14329:
	movw	r0, #:lower16:.LC96
	mov	r2, r1
	ldr	r1, .L14331
	movt	r0, #:upper16:.LC96
	mvn	r5, #18
	bl	printk
	b	.L14317
.L14332:
	.align	2
.L14331:
	.word	.LANCHOR2+2688
	.fnend
	.size	bam_data_connect, .-bam_data_connect
	.section	.rodata.str1.4
	.align	2
.LC757:
	.ascii	"<6>%s: CONTROL_INTERFACE\000"
	.align	2
.LC758:
	.ascii	"<6>%s: reset mbim control %d\012\000"
	.align	2
.LC759:
	.ascii	"<3>%s: Failed configuring notify ep %s: err %d\012\000"
	.align	2
.LC760:
	.ascii	"<6>%s: DATA_INTERFACE\000"
	.align	2
.LC761:
	.ascii	"<6>%s: reset mbim\012\000"
	.align	2
.LC762:
	.ascii	"<6>%s: Alt set 1, initialize ports\000"
	.align	2
.LC763:
	.ascii	"<6>%s: Choose endpoints\000"
	.align	2
.LC764:
	.ascii	"<3>%s: IN ep %s failed: %d\012\000"
	.align	2
.LC765:
	.ascii	"<6>%s: Set mbim port in_desc = 0x%pK\000"
	.align	2
.LC766:
	.ascii	"<3>%s: OUT ep %s failed: %d\012\000"
	.align	2
.LC767:
	.ascii	"<6>%s: Set mbim port out_desc = 0x%pK\000"
	.align	2
.LC768:
	.ascii	"<6>%s: dev:%pK portno:%d\012\000"
	.align	2
.LC769:
	.ascii	"<3>%s: bam_data_setup failed: err:%d\012\000"
	.align	2
.LC770:
	.ascii	"<6>%s: mbim bam connected\012\000"
	.align	2
.LC771:
	.ascii	"<6>%s: PORTS already SET\000"
	.align	2
.LC772:
	.ascii	"<6>%s: SET DEVICE ONLINE\000"
	.align	2
.LC773:
	.ascii	"<3>%s: ERROR: Illegal Interface\000"
	.section	.text.unlikely
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_set_alt, %function
mbim_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, r7, r8, lr}
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	ldrb	r5, [r0, #188]	@ zero_extendqisi2
	.pad #8
	sub	sp, sp, #8
	mov	r6, r2
	ldr	r8, [r0, #76]
	cmp	r5, r1
	bne	.L14334
	movw	r0, #:lower16:.LC757
	ldr	r1, .L14359
	movt	r0, #:upper16:.LC757
	bl	printk
	cmp	r6, #0
	bne	.L14335
	ldr	r3, [r4, #148]
	ldr	r3, [r3]
	cmp	r3, #0
	beq	.L14336
	movw	r0, #:lower16:.LC758
	ldr	r1, .L14359
	mov	r2, r5
	movt	r0, #:upper16:.LC758
	bl	printk
	ldr	r0, [r4, #148]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
.L14336:
	mov	r1, r4
	ldr	r0, [r8]
	ldr	r2, [r4, #148]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	ldr	r3, [r4, #148]
	beq	.L14337
	mov	r2, #0
	movw	r0, #:lower16:.LC759
	ldr	r1, .L14359
	movt	r0, #:upper16:.LC759
	str	r2, [r3, #28]
	ldr	r2, [r4, #148]
	mov	r3, r5
	ldr	r2, [r2, #4]
	bl	printk
	b	.L14333
.L14337:
	ldr	r1, [r3, #28]
	ldrh	r2, [r1, #4]	@ unaligned
	cmp	r2, #0
	beq	.L14349
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	beq	.L14358
	b	.L14339
.L14349:
	mvn	r5, #21
.L14339:
	ldr	r2, [r4, #148]
	movw	r0, #:lower16:.LC565
	mov	r3, r5
	ldr	r1, .L14359
	movt	r0, #:upper16:.LC565
	ldr	r2, [r2, #4]
	bl	printk
	b	.L14333
.L14358:
	ldr	r3, [r4, #148]
	str	r4, [r3]
	b	.L14341
.L14334:
	ldrb	r3, [r0, #189]	@ zero_extendqisi2
	cmp	r3, r1
	bne	.L14335
	movw	r0, #:lower16:.LC760
	ldr	r1, .L14359
	movt	r0, #:upper16:.LC760
	bl	printk
	cmp	r6, #1
	bhi	.L14335
	ldr	r3, [r4, #140]
	ldr	r3, [r3]
	cmp	r3, #0
	beq	.L14342
	movw	r0, #:lower16:.LC761
	ldr	r1, .L14359
	movt	r0, #:upper16:.LC761
	bl	printk
	ldr	r3, .L14359+4
	mov	r2, #16384
	mov	r1, #0
	str	r1, [r4, #80]
	str	r3, [r4, #192]
	str	r2, [r4, #216]
.L14342:
	cmp	r6, #1
	bne	.L14343
	movw	r0, #:lower16:.LC762
	ldr	r1, .L14359
	movt	r0, #:upper16:.LC762
	bl	printk
	ldr	r3, [r4, #140]
	ldr	r7, [r3, #28]
	cmp	r7, #0
	bne	.L14344
	movw	r0, #:lower16:.LC763
	ldr	r1, .L14359
	movt	r0, #:upper16:.LC763
	bl	printk
	mov	r1, r4
	ldr	r0, [r8]
	ldr	r2, [r4, #140]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	ldr	r3, [r4, #140]
	beq	.L14345
	str	r7, [r3, #28]
	ldr	r2, [r4, #140]
	movw	r0, #:lower16:.LC764
	ldr	r1, .L14359
	mov	r3, r5
	movt	r0, #:upper16:.LC764
	ldr	r2, [r2, #4]
	bl	printk
	b	.L14333
.L14345:
	movw	r0, #:lower16:.LC765
	ldr	r1, .L14359
	movt	r0, #:upper16:.LC765
	ldr	r2, [r3, #28]
	bl	printk
	mov	r1, r4
	ldr	r0, [r8]
	ldr	r2, [r4, #144]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	ldr	r3, [r4, #144]
	beq	.L14346
	str	r7, [r3, #28]
	ldr	r2, [r4, #144]
	movw	r0, #:lower16:.LC766
	ldr	r1, .L14359
	mov	r3, r5
	movt	r0, #:upper16:.LC766
	ldr	r2, [r2, #4]
	bl	printk
	b	.L14333
.L14346:
	movw	r0, #:lower16:.LC767
	ldr	r1, .L14359
	movt	r0, #:upper16:.LC767
	ldr	r2, [r3, #28]
	bl	printk
	ldr	lr, [r4, #76]
	movw	r0, #:lower16:.LC768
	mov	r2, r4
	ldr	ip, [r4, #124]
	movt	r0, #:upper16:.LC768
	ldrb	r3, [r4, #128]	@ zero_extendqisi2
	ldr	r1, .L14359+8
	ldr	r7, [lr]
	cmp	ip, #7
	moveq	r8, #2
	movne	r8, #0
	bl	printk
	mov	r2, r5
	ldrb	r3, [r4, #128]	@ zero_extendqisi2
	mov	r1, r8
	ldr	r0, [r7, #28]
	bl	usb_bam_get_connection_idx
	mov	r5, r0
	ldrb	r3, [r4, #128]	@ zero_extendqisi2
	mov	r1, r8
	mov	r2, r6
	ldr	r0, [r7, #28]
	bl	usb_bam_get_connection_idx
	uxtb	ip, r0
	ldrb	r1, [r4, #128]	@ zero_extendqisi2
	uxtb	r3, r5
	str	r6, [sp, #4]
	ldr	r2, [r4, #124]
	add	r0, r4, #132
	str	ip, [sp]
	bl	bam_data_connect
	subs	r2, r0, #0
	beq	.L14348
	movw	r0, #:lower16:.LC769
	ldr	r1, .L14359+8
	movt	r0, #:upper16:.LC769
	bl	printk
	b	.L14343
.L14348:
	movw	r0, #:lower16:.LC770
	ldr	r1, .L14359+8
	movt	r0, #:upper16:.LC770
	bl	printk
	b	.L14343
.L14344:
	movw	r0, #:lower16:.LC771
	ldr	r1, .L14359
	movt	r0, #:upper16:.LC771
	bl	printk
.L14343:
	add	r5, r4, #196
	strb	r6, [r4, #190]
	mov	r0, r5
	bl	_raw_spin_lock
	mov	r3, #3
	mov	r0, r5
	strb	r3, [r4, #156]
	bl	_raw_spin_unlock
.L14341:
	mov	r6, #1
	movw	r0, #:lower16:.LC772
	ldr	r1, .L14359
	mov	r5, #0
	movt	r0, #:upper16:.LC772
	str	r6, [r4, #80]
	bl	printk
	mov	r2, r6
	mov	r3, r5
	add	r0, r4, #100
	mov	r1, #3
	bl	__wake_up
	mov	r2, r6
	add	r0, r4, #112
	mov	r3, r5
	mov	r1, #3
	bl	__wake_up
	b	.L14333
.L14335:
	movw	r0, #:lower16:.LC773
	ldr	r1, .L14359
	mvn	r5, #21
	movt	r0, #:upper16:.LC773
	bl	printk
.L14333:
	mov	r0, r5
	add	sp, sp, #8
	@ sp needed
	pop	{r4, r5, r6, r7, r8, pc}
.L14360:
	.align	2
.L14359:
	.word	.LANCHOR5-2112
	.word	.LANCHOR1+1752
	.word	.LANCHOR5-2096
	.fnend
	.size	mbim_set_alt, .-mbim_set_alt
	.text
	.align	2
	.global	bam_data_destroy
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam_data_destroy, %function
bam_data_destroy:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r4, #:lower16:.LANCHOR0
	movt	r4, #:upper16:.LANCHOR0
	str	r6, [sp, #8]
	add	r5, r4, r0, lsl #2
	str	lr, [sp, #12]
	ldr	r0, [r5, #2264]
	bl	kfree
	ldr	r0, [r4, #2268]
	mov	r3, #0
	str	r3, [r5, #2264]
	cmp	r0, r3
	beq	.L14362
	bl	destroy_workqueue
.L14362:
	mov	r0, #0
	ldr	r6, [sp, #8]
	str	r0, [r4, #2268]
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	bam_data_destroy, .-bam_data_destroy
	.align	2
	.global	bam_data_setup
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam_data_setup, %function
bam_data_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r0, #1
	mov	r2, r0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	.pad #8
	sub	sp, sp, #8
	bne	.L14373
	movw	r4, #:lower16:.LANCHOR0
	movt	r4, #:upper16:.LANCHOR0
	ldr	r3, [r4, #2268]
	cmp	r3, #0
	movne	r0, #0
	beq	.L14374
.L14367:
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L14374:
	movw	r0, #:lower16:.LC746
	mov	r1, #10
	str	r3, [sp]
	movt	r0, #:upper16:.LC746
	bl	__alloc_workqueue_key
	cmp	r0, #0
	str	r0, [r4, #2268]
	beq	.L14375
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	bam_data_setup.part.0
.L14375:
	movw	r0, #:lower16:.LC747
	ldr	r1, .L14376
	movt	r0, #:upper16:.LC747
	bl	printk
	mvn	r0, #11
	b	.L14367
.L14373:
	movw	r0, #:lower16:.LC699
	ldr	r1, .L14376
	movt	r0, #:upper16:.LC699
	bl	printk
	mvn	r0, #21
	b	.L14367
.L14377:
	.align	2
.L14376:
	.word	.LANCHOR2+2708
	.fnend
	.size	bam_data_setup, .-bam_data_setup
	.section	.rodata.str1.4
	.align	2
.LC774:
	.ascii	"<6>%s: port number %u\000"
	.align	2
.LC775:
	.ascii	"<3>%s: Can not add port %u. Max ports = %d\000"
	.align	2
.LC776:
	.ascii	"<6>%s: no_ports:%d\012\000"
	.align	2
.LC777:
	.ascii	"<6>%s: mbim struct not allocated\000"
	.align	2
.LC778:
	.ascii	"usb_mbim\000"
	.align	2
.LC779:
	.ascii	"<6>%s: Exit status %d\000"
	.section	.text.unlikely
	.align	2
	.global	mbim_bind_config
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_bind_config, %function
mbim_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	ldr	r10, .L14389
	movw	r0, #:lower16:.LC774
	movw	r8, #:lower16:.LANCHOR0
	mov	r4, r1
	.pad #4
	sub	sp, sp, #4
	mov	r7, r2
	movt	r0, #:upper16:.LC774
	mov	r2, r1
	movt	r8, #:upper16:.LANCHOR0
	mov	r1, r10
	bl	printk
	ldr	r9, [r8, #3248]
	cmp	r9, r4
	bhi	.L14379
	movw	r0, #:lower16:.LC775
	mov	r2, r4
	mov	r3, r9
	mov	r1, r10
	movt	r0, #:upper16:.LC775
	mvn	r4, #18
	bl	printk
	b	.L14378
.L14379:
	add	fp, r10, #20
	movw	r0, #:lower16:.LC776
	mov	r1, fp
	mov	r2, r9
	movt	r0, #:upper16:.LC776
	bl	printk
	mov	r0, r9
	bl	bam_data_setup
	subs	r4, r0, #0
	beq	.L14381
	movw	r0, #:lower16:.LC748
	mov	r1, fp
	mov	r2, r4
	movt	r0, #:upper16:.LC748
	bl	printk
	movw	r0, #:lower16:.LC749
	mov	r1, r10
	movt	r0, #:upper16:.LC749
	bl	printk
	b	.L14378
.L14381:
	movw	r0, #:lower16:.LC386
	mov	r1, fp
	mov	r2, r9
	movt	r0, #:upper16:.LC386
	bl	printk
	movw	r1, #:lower16:.LANCHOR4
	add	r6, r10, #12
	movt	r1, #:upper16:.LANCHOR4
	ldrb	r3, [r1, #-812]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L14382
	ldr	r0, [r5, #24]
	ldrb	r3, [r0, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bls	.L14383
.L14384:
	mvn	r4, #18
	b	.L14378
.L14383:
	add	r3, r3, #1
	movw	r2, #:lower16:.LANCHOR1
	uxtb	r3, r3
	movt	r2, #:upper16:.LANCHOR1
	strb	r3, [r0, #48]
	ldr	r0, [r5, #24]
	strb	r3, [r1, #-812]
	strb	r3, [r2, #2920]
	ldrb	r3, [r0, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L14384
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r1, #-804]
	strb	r3, [r0, #48]
	strb	r3, [r2, #2940]
	strb	r3, [r2, #2952]
.L14382:
	ldr	r4, [r8, #3240]
	cmp	r4, #0
	bne	.L14385
	movw	r0, #:lower16:.LC777
	sub	r1, r6, #12
	movt	r0, #:upper16:.LC777
	mvn	r4, #11
	bl	printk
	b	.L14378
.L14385:
	ldr	ip, .L14389+4
	movw	r2, #:lower16:.LC778
	movw	r3, #:lower16:mbim_bind
	movt	r2, #:upper16:.LC778
	movt	r3, #:upper16:mbim_bind
	ldr	r8, [r5, #24]
	movw	r1, #:lower16:mbim_unbind
	ldr	lr, .L14389+8
	mov	r0, r7
	movt	r1, #:upper16:mbim_unbind
	movw	r7, #:lower16:.LANCHOR1
	stm	r4, {r2, ip}
	movw	r2, #:lower16:mbim_set_alt
	movw	ip, #:lower16:mbim_disable
	str	r3, [r4, #24]
	movw	r3, #:lower16:mbim_get_alt
	movt	r2, #:upper16:mbim_set_alt
	movt	r3, #:upper16:mbim_get_alt
	str	r1, [r4, #28]
	movw	r1, #:lower16:mbim_setup
	movt	r1, #:upper16:mbim_setup
	movt	ip, #:upper16:mbim_disable
	strd	r2, [r4, #32]
	movw	r2, #:lower16:mbim_suspend
	movw	r3, #:lower16:mbim_resume
	movt	r3, #:upper16:mbim_resume
	movt	r2, #:upper16:mbim_suspend
	str	ip, [r4, #40]
	str	r1, [r4, #44]
	mov	r1, #16384
	movt	r7, #:upper16:.LANCHOR1
	strd	r2, [r4, #48]
	mov	r2, #0
	str	r8, [r4, #76]
	str	r2, [r4, #80]
	str	lr, [r4, #192]
	str	r1, [r4, #216]
	bl	str_to_xport
	cmp	r0, #7
	str	r0, [r4, #124]
	movne	r3, #6
	strne	r3, [r4, #124]
	bne	.L14387
	mov	r3, #8192
	mov	r2, #16
	mov	r1, #1
	str	r3, [r7, #140]
	strh	r1, [r7, #144]	@ movhi
	str	r3, [r7, #152]
	strh	r2, [r7, #162]	@ movhi
.L14387:
	add	r2, r4, #200
	add	r3, r4, #208
	mov	r1, r4
	mov	r0, r5
	str	r2, [r4, #200]
	strd	r2, [r4, #204]
	str	r3, [r4, #212]
	bl	usb_add_function
	mov	r4, r0
	movw	r0, #:lower16:.LC779
	sub	r1, r6, #12
	mov	r2, r4
	movt	r0, #:upper16:.LC779
	bl	printk
.L14378:
	mov	r0, r4
	add	sp, sp, #4
	@ sp needed
	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
.L14390:
	.align	2
.L14389:
	.word	.LANCHOR5-2076
	.word	.LANCHOR4-788
	.word	.LANCHOR1+1752
	.fnend
	.size	mbim_bind_config, .-mbim_bind_config
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_function_bind_config, %function
mbim_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r0, .L14393
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r1
	str	lr, [sp, #4]
	bl	strim
	mov	r2, r0
	mov	r1, #0
	ldr	lr, [sp, #4]
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #8
	b	mbim_bind_config
.L14394:
	.align	2
.L14393:
	.word	.LANCHOR0+1800
	.fnend
	.size	mbim_function_bind_config, .-mbim_function_bind_config
	.align	2
	.global	bam_data_suspend
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam_data_suspend, %function
bam_data_suspend:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR0
	movt	r3, #:upper16:.LANCHOR0
	add	r2, r3, r0, lsl #2
	ldr	r0, [r3, #2268]
	ldr	r1, [r2, #2264]
	add	r1, r1, #200
	b	queue_work
	.fnend
	.size	bam_data_suspend, .-bam_data_suspend
	.align	2
	.global	bam_data_resume
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam_data_resume, %function
bam_data_resume:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR0
	movt	r3, #:upper16:.LANCHOR0
	add	r2, r3, r0, lsl #2
	ldr	r0, [r3, #2268]
	ldr	r1, [r2, #2264]
	add	r1, r1, #216
	b	queue_work
	.fnend
	.size	bam_data_resume, .-bam_data_resume
	.align	2
	.global	ecm_bind_config
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_bind_config, %function
ecm_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	mov	r6, r0
	movw	r0, #:lower16:.LC267
	strd	r8, [sp, #16]
	movt	r0, #:upper16:.LC267
	str	lr, [sp, #24]
	ldr	r8, [r6, #24]
	.pad #28
	sub	sp, sp, #28
	ldr	r3, [r8]
	ldr	r5, [r3, #28]
	mov	r1, r5
	bl	strcmp
	cmp	r0, #0
	beq	.L14404
	movw	r0, #:lower16:.LC270
	mov	r1, r5
	movt	r0, #:upper16:.LC270
	bl	strcmp
	cmp	r0, #0
	cmpne	r4, #0
	beq	.L14404
	movw	r7, #:lower16:.LANCHOR1
	movt	r7, #:upper16:.LANCHOR1
	ldrb	r3, [r7, #1712]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L14399
	ldrb	r3, [r8, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L14401
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r8, #48]
	ldr	r2, [r6, #24]
	strb	r3, [r7, #1712]
	strb	r3, [r7, #3248]
	ldrb	r3, [r2, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L14401
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r2, #48]
	ldr	r1, [r6, #24]
	strb	r3, [r7, #1728]
	strb	r3, [r7, #3280]
	ldrb	r3, [r1, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L14401
	add	r3, r3, #1
	movw	r2, #:lower16:.LANCHOR4
	uxtb	r3, r3
	movt	r2, #:upper16:.LANCHOR4
	strb	r3, [r1, #48]
	ldr	r1, [r6, #24]
	strb	r3, [r2, #-777]
	strb	r3, [r7, #1720]
	ldrb	r3, [r1, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L14401
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r1, #48]
	strb	r3, [r7, #1736]
	strb	r3, [r7, #3239]
.L14399:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L14405
	movw	r1, #32976
	bl	kmem_cache_alloc
	subs	r5, r0, #0
	beq	.L14411
.L14402:
	ldrb	r3, [r4, #5]	@ zero_extendqisi2
	add	r8, r5, #142
	movw	r2, #:lower16:.LC750
	ldrb	lr, [r4, #3]	@ zero_extendqisi2
	movt	r2, #:upper16:.LC750
	mov	r0, r8
	ldrb	r1, [r4, #2]	@ zero_extendqisi2
	ldrb	r9, [r4, #4]	@ zero_extendqisi2
	str	r3, [sp, #16]
	ldrb	ip, [r4, #1]	@ zero_extendqisi2
	ldrb	r3, [r4]	@ zero_extendqisi2
	ldr	r4, .L14412
	str	ip, [sp]
	stmib	sp, {r1, lr}
	mov	r1, #14
	str	r9, [sp, #12]
	bl	snprintf
	movw	r3, #:lower16:.LC751
	movw	r0, #:lower16:ecm_bind
	str	r8, [r7, #1724]
	movt	r3, #:upper16:.LC751
	movw	lr, #:lower16:ecm_unbind
	movw	r1, #:lower16:ecm_set_alt
	movw	ip, #:lower16:ecm_get_alt
	movw	r2, #:lower16:ecm_disable
	stm	r5, {r3, r4}
	movw	r3, #:lower16:ecm_setup
	movt	r0, #:upper16:ecm_bind
	movt	lr, #:upper16:ecm_unbind
	movt	r1, #:upper16:ecm_set_alt
	movt	ip, #:upper16:ecm_get_alt
	movt	r2, #:upper16:ecm_disable
	movt	r3, #:upper16:ecm_setup
	str	r0, [r5, #24]
	mov	r4, #15
	mov	r0, r6
	str	lr, [r5, #28]
	str	r1, [r5, #32]
	mov	r1, r5
	str	ip, [r5, #36]
	str	r2, [r5, #40]
	str	r3, [r5, #44]
	strh	r4, [r5, #90]	@ movhi
	bl	usb_add_function
	subs	r4, r0, #0
	beq	.L14397
	mov	r3, #0
	mov	r0, r5
	str	r3, [r7, #1724]
	bl	kfree
	b	.L14397
.L14404:
	mvn	r4, #21
.L14397:
	mov	r0, r4
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L14405:
	mov	r5, #16
	b	.L14402
.L14401:
	mvn	r4, #18
	b	.L14397
.L14411:
	mvn	r4, #11
	b	.L14397
.L14413:
	.align	2
.L14412:
	.word	.LANCHOR4-764
	.fnend
	.size	ecm_bind_config, .-ecm_bind_config
	.section	.rodata.cst4
	.align	2
.LC780:
	.word	__stack_chk_guard
	.text
	.align	2
	.global	rndis_qc_bind_config
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_bind_config, %function
rndis_qc_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LC780
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	strd	r6, [sp, #8]
	subs	r6, r1, #0
	movt	r3, #:upper16:.LC780
	strd	r8, [sp, #16]
	str	lr, [sp, #24]
	.pad #36
	sub	sp, sp, #36
	ldr	r3, [r3]
	str	r3, [sp, #28]
	mov	r3,#0
	beq	.L14432
	movw	r8, #:lower16:.LANCHOR3
	mov	r9, r0
	movt	r8, #:upper16:.LANCHOR3
	ldrb	r4, [r8, #-4084]	@ zero_extendqisi2
	cmp	r4, #0
	movwne	r5, #:lower16:.LANCHOR0
	movtne	r5, #:upper16:.LANCHOR0
	bne	.L14416
	ldr	r7, .L14451
	movw	r1, #:lower16:.LC446
	mov	r2, r4
	movt	r1, #:upper16:.LC446
	add	r0, sp, #8
	bl	sprintf
	add	r0, sp, #8
	mov	r2, r4
	ldr	r3, .L14451+4
	mov	r1, #432
	str	r7, [sp]
	movw	r5, #:lower16:.LANCHOR0
	bl	proc_create_data
	cmp	r0, #0
	movt	r5, #:upper16:.LANCHOR0
	movw	r2, #3716
	mvneq	r7, #4
	bne	.L14446
.L14414:
	movw	r3, #:lower16:.LC780
	movt	r3, #:upper16:.LC780
	ldr	r2, [r3]
	ldr	r3, [sp, #28]
	eors	r2, r3, r2
	bne	.L14447
	mov	r0, r7
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L14446:
	add	r7, r7, #52
	mov	r3, #1
	strh	r4, [r5, r2]	@ movhi
	str	r4, [r5, #3720]
	strb	r3, [r8, #-4084]
	str	r3, [r5, #3732]
	str	r7, [r5, #3768]
	str	r7, [r5, #3772]
.L14416:
	ldr	r3, [r5, #2268]
	cmp	r3, #0
	beq	.L14448
.L14429:
	movw	r3, #:lower16:.LANCHOR4
	movt	r3, #:upper16:.LANCHOR4
	ldrb	r2, [r3, #-756]	@ zero_extendqisi2
	cmp	r2, #0
	bne	.L14424
	ldr	r1, [r9, #24]
	ldrb	r2, [r1, #48]	@ zero_extendqisi2
	cmp	r2, #253
	bhi	.L14426
	add	r2, r2, #1
	uxtb	r2, r2
	strb	r2, [r1, #48]
	ldr	r1, [r9, #24]
	strb	r2, [r3, #-2424]
	strb	r2, [r3, #-756]
	ldrb	r2, [r1, #48]	@ zero_extendqisi2
	cmp	r2, #253
	bhi	.L14426
	add	r2, r2, #1
	uxtb	r2, r2
	strb	r2, [r1, #48]
	ldr	r1, [r9, #24]
	strb	r2, [r3, #-2404]
	strb	r2, [r3, #-748]
	ldrb	r2, [r1, #48]	@ zero_extendqisi2
	cmp	r2, #253
	bhi	.L14426
	add	r2, r2, #1
	uxtb	r2, r2
	strb	r2, [r3, #-2433]
	strb	r2, [r3, #-740]
	strb	r2, [r1, #48]
.L14424:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L14433
	movw	r1, #32976
	bl	kmem_cache_alloc
	subs	r4, r0, #0
	beq	.L14449
.L14427:
	ldr	r2, [r6]	@ unaligned
	movw	r3, #:lower16:.LC737
	movw	ip, #:lower16:rndis_qc_add_header
	ldr	r7, .L14451+8
	movw	r1, #:lower16:rndis_qc_bind
	movt	r3, #:upper16:.LC737
	movt	ip, #:upper16:rndis_qc_add_header
	movt	r1, #:upper16:rndis_qc_bind
	mov	r0, r9
	str	r2, [r4, #114]	@ unaligned
	ldrh	lr, [r6, #4]	@ unaligned
	movw	r2, #:lower16:rndis_qc_rm_hdr
	stm	r4, {r3, r7}
	movw	r3, #:lower16:rndis_qc_unbind
	movt	r2, #:upper16:rndis_qc_rm_hdr
	str	r1, [r4, #24]
	movw	r1, #:lower16:rndis_qc_setup
	movt	r3, #:upper16:rndis_qc_unbind
	movt	r1, #:upper16:rndis_qc_setup
	str	r4, [r5, #832]
	str	ip, [r4, #96]
	movw	ip, #:lower16:rndis_qc_set_alt
	movt	ip, #:upper16:rndis_qc_set_alt
	str	r3, [r4, #28]
	movw	r3, #:lower16:rndis_qc_disable
	movt	r3, #:upper16:rndis_qc_disable
	str	ip, [r4, #32]
	movw	ip, #:lower16:rndis_qc_suspend
	str	r1, [r4, #44]
	movw	r1, #:lower16:rndis_qc_resume
	movt	ip, #:upper16:rndis_qc_suspend
	movt	r1, #:upper16:rndis_qc_resume
	str	r3, [r4, #40]
	mov	r3, #0
	str	ip, [r4, #48]
	mov	ip, #1
	str	r1, [r4, #52]
	mov	r1, #44
	strh	r3, [r4, #90]	@ movhi
	str	r1, [r4, #92]
	mov	r1, r4
	str	r2, [r4, #100]
	strh	lr, [r4, #118]	@ unaligned
	str	r3, [r4, #120]
	strb	ip, [r4, #124]
	str	r3, [r4, #132]
	bl	usb_add_function
	subs	r7, r0, #0
	beq	.L14414
	mov	r0, r4
	bl	kfree
.L14428:
	ldrb	r3, [r8, #-4084]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L14414
	mov	r4, #0
	movw	r1, #:lower16:.LC446
	mov	r2, r4
	movt	r1, #:upper16:.LC446
	add	r0, sp, #8
	strb	r4, [r8, #-4084]
	bl	sprintf
	add	r0, sp, #8
	mov	r1, r4
	bl	remove_proc_entry
	b	.L14414
.L14433:
	mov	r4, #16
	b	.L14427
.L14448:
	movw	r0, #:lower16:.LC746
	mov	r2, #1
	str	r3, [sp]
	movt	r0, #:upper16:.LC746
	mov	r1, #10
	bl	__alloc_workqueue_key
	cmp	r0, #0
	str	r0, [r5, #2268]
	beq	.L14450
	bl	bam_data_setup.part.0
	subs	r7, r0, #0
	beq	.L14429
	b	.L14422
.L14449:
	mvn	r7, #11
	b	.L14428
.L14426:
	mvn	r7, #18
	b	.L14414
.L14432:
	mvn	r7, #21
	b	.L14414
.L14447:
	bl	__stack_chk_fail
.L14450:
	movw	r0, #:lower16:.LC747
	ldr	r1, .L14451+12
	mvn	r7, #11
	movt	r0, #:upper16:.LC747
	bl	printk
.L14422:
	movw	r0, #:lower16:.LC748
	ldr	r1, .L14451+16
	mov	r2, r7
	movt	r0, #:upper16:.LC748
	bl	printk
	movw	r0, #:lower16:.LC749
	ldr	r1, .L14451+20
	movt	r0, #:upper16:.LC749
	bl	printk
	b	.L14414
.L14452:
	.align	2
.L14451:
	.word	.LANCHOR0+3716
	.word	.LANCHOR5-2384
	.word	.LANCHOR4-724
	.word	.LANCHOR2+2708
	.word	.LANCHOR5-2040
	.word	.LANCHOR5-2020
	.fnend
	.size	rndis_qc_bind_config, .-rndis_qc_bind_config
	.section	.rodata.cst4
	.align	2
.LC781:
	.word	__stack_chk_guard
	.text
	.align	2
	.global	rndis_qc_bind_config_vendor
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_bind_config_vendor, %function
rndis_qc_bind_config_vendor:
	.fnstart
	@ args = 4, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	ip, #:lower16:.LC781
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	subs	r6, r1, #0
	movt	ip, #:upper16:.LC781
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #44
	sub	sp, sp, #44
	ldr	ip, [ip]
	str	ip, [sp, #36]
	mov	ip,#0
	ldrb	r9, [sp, #80]	@ zero_extendqisi2
	str	r2, [sp, #12]
	beq	.L14472
	movw	r8, #:lower16:.LANCHOR3
	mov	r7, r0
	movt	r8, #:upper16:.LANCHOR3
	mov	fp, r3
	ldrb	r10, [r8, #-4084]	@ zero_extendqisi2
	cmp	r10, #0
	movwne	r5, #:lower16:.LANCHOR0
	movtne	r5, #:upper16:.LANCHOR0
	bne	.L14455
	ldr	r4, .L14491
	movw	r1, #:lower16:.LC446
	mov	r2, r10
	movt	r1, #:upper16:.LC446
	add	r0, sp, #16
	bl	sprintf
	add	r0, sp, #16
	ldr	r3, .L14491+4
	mov	r1, #432
	mov	r2, r10
	str	r4, [sp]
	movw	r5, #:lower16:.LANCHOR0
	bl	proc_create_data
	cmp	r0, #0
	movt	r5, #:upper16:.LANCHOR0
	movw	r1, #3716
	mvneq	r3, #4
	bne	.L14486
.L14453:
	movw	r2, #:lower16:.LC781
	movt	r2, #:upper16:.LC781
	ldr	r1, [r2]
	ldr	r2, [sp, #36]
	eors	r1, r2, r1
	bne	.L14487
	mov	r0, r3
	add	sp, sp, #44
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L14486:
	add	r4, r4, #52
	mov	r3, #1
	strh	r10, [r5, r1]	@ movhi
	str	r10, [r5, #3720]
	strb	r3, [r8, #-4084]
	str	r3, [r5, #3732]
	str	r4, [r5, #3768]
	str	r4, [r5, #3772]
.L14455:
	ldr	r3, [r5, #2268]
	cmp	r3, #0
	beq	.L14488
.L14469:
	movw	r3, #:lower16:.LANCHOR4
	movt	r3, #:upper16:.LANCHOR4
	ldrb	r2, [r3, #-756]	@ zero_extendqisi2
	cmp	r2, #0
	bne	.L14463
	ldr	r1, [r7, #24]
	ldrb	r2, [r1, #48]	@ zero_extendqisi2
	cmp	r2, #253
	bhi	.L14465
	add	r2, r2, #1
	uxtb	r2, r2
	strb	r2, [r1, #48]
	ldr	r1, [r7, #24]
	strb	r2, [r3, #-2424]
	strb	r2, [r3, #-756]
	ldrb	r2, [r1, #48]	@ zero_extendqisi2
	cmp	r2, #253
	bhi	.L14465
	add	r2, r2, #1
	uxtb	r2, r2
	strb	r2, [r1, #48]
	ldr	r1, [r7, #24]
	strb	r2, [r3, #-2404]
	strb	r2, [r3, #-748]
	ldrb	r2, [r1, #48]	@ zero_extendqisi2
	cmp	r2, #253
	bhi	.L14465
	add	r2, r2, #1
	uxtb	r2, r2
	strb	r2, [r3, #-2433]
	strb	r2, [r3, #-740]
	strb	r2, [r1, #48]
.L14463:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L14473
	movw	r1, #32976
	bl	kmem_cache_alloc
	subs	r4, r0, #0
	beq	.L14489
.L14466:
	ldr	r2, [r6]	@ unaligned
	movw	r3, #:lower16:.LC737
	movw	r1, #:lower16:rndis_qc_add_header
	ldr	lr, .L14491+8
	movt	r3, #:upper16:.LC737
	movt	r1, #:upper16:rndis_qc_add_header
	cmp	r9, #0
	mov	r0, r7
	moveq	r9, #15
	str	r2, [r4, #114]	@ unaligned
	ldrh	ip, [r6, #4]	@ unaligned
	movw	r2, #:lower16:rndis_qc_rm_hdr
	stm	r4, {r3, lr}
	movw	r3, #:lower16:rndis_qc_bind
	movt	r2, #:upper16:rndis_qc_rm_hdr
	movt	r3, #:upper16:rndis_qc_bind
	str	r4, [r5, #832]
	strb	r9, [r4, #124]
	str	r3, [r4, #24]
	movw	r3, #:lower16:rndis_qc_setup
	movt	r3, #:upper16:rndis_qc_setup
	str	r1, [r4, #96]
	movw	r1, #:lower16:rndis_qc_unbind
	str	r2, [r4, #100]
	movw	r2, #:lower16:rndis_qc_set_alt
	movt	r1, #:upper16:rndis_qc_unbind
	movt	r2, #:upper16:rndis_qc_set_alt
	str	r1, [r4, #28]
	movw	r1, #:lower16:rndis_qc_disable
	str	r3, [r4, #44]
	movw	r3, #:lower16:rndis_qc_resume
	movt	r1, #:upper16:rndis_qc_disable
	movt	r3, #:upper16:rndis_qc_resume
	str	r2, [r4, #32]
	movw	r2, #:lower16:rndis_qc_suspend
	movt	r2, #:upper16:rndis_qc_suspend
	str	r1, [r4, #40]
	mov	r1, #0
	str	fp, [r4, #132]
	str	r3, [r4, #52]
	ldr	r3, [sp, #12]
	str	r2, [r4, #48]
	mov	r2, #44
	strh	r1, [r4, #90]	@ movhi
	mov	r1, r4
	str	r2, [r4, #92]
	strh	ip, [r4, #118]	@ unaligned
	str	r3, [r4, #120]
	bl	usb_add_function
	subs	r3, r0, #0
	beq	.L14453
	mov	r0, r4
	str	r3, [sp, #12]
	bl	kfree
	ldr	r3, [sp, #12]
.L14467:
	ldrb	r2, [r8, #-4084]	@ zero_extendqisi2
	cmp	r2, #0
	beq	.L14453
	mov	r4, #0
	movw	r1, #:lower16:.LC446
	str	r3, [sp, #12]
	mov	r2, r4
	movt	r1, #:upper16:.LC446
	add	r0, sp, #16
	strb	r4, [r8, #-4084]
	bl	sprintf
	add	r0, sp, #16
	mov	r1, r4
	bl	remove_proc_entry
	ldr	r3, [sp, #12]
	b	.L14453
.L14473:
	mov	r4, #16
	b	.L14466
.L14488:
	movw	r0, #:lower16:.LC746
	mov	r2, #1
	str	r3, [sp]
	movt	r0, #:upper16:.LC746
	mov	r1, #10
	bl	__alloc_workqueue_key
	cmp	r0, #0
	str	r0, [r5, #2268]
	beq	.L14490
	bl	bam_data_setup.part.0
	subs	r3, r0, #0
	beq	.L14469
	movw	r0, #:lower16:.LC748
	mov	r2, r3
	ldr	r1, .L14491+12
	movt	r0, #:upper16:.LC748
	str	r3, [sp, #12]
	bl	printk
	ldr	r3, [sp, #12]
.L14460:
	movw	r0, #:lower16:.LC749
	ldr	r1, .L14491+16
	str	r3, [sp, #12]
	movt	r0, #:upper16:.LC749
	bl	printk
	ldr	r3, [sp, #12]
	b	.L14453
.L14489:
	mvn	r3, #11
	b	.L14467
.L14465:
	mvn	r3, #18
	b	.L14453
.L14472:
	mvn	r3, #21
	b	.L14453
.L14487:
	bl	__stack_chk_fail
.L14490:
	mvn	r3, #11
	movw	r0, #:lower16:.LC747
	ldr	r1, .L14491+20
	movt	r0, #:upper16:.LC747
	str	r3, [sp, #12]
	bl	printk
	movw	r0, #:lower16:.LC748
	ldr	r1, .L14491+12
	mvn	r2, #11
	movt	r0, #:upper16:.LC748
	bl	printk
	ldr	r3, [sp, #12]
	b	.L14460
.L14492:
	.align	2
.L14491:
	.word	.LANCHOR0+3716
	.word	.LANCHOR5-2384
	.word	.LANCHOR4-724
	.word	.LANCHOR5-2040
	.word	.LANCHOR5-2020
	.word	.LANCHOR2+2708
	.fnend
	.size	rndis_qc_bind_config_vendor, .-rndis_qc_bind_config_vendor
	.section	.rodata.str1.4
	.align	2
.LC782:
	.ascii	"%s%%d\000"
	.align	2
.LC783:
	.ascii	"self\000"
	.align	2
.LC784:
	.ascii	"using random %s ethernet address\012\000"
	.align	2
.LC785:
	.ascii	"host\000"
	.align	2
.LC786:
	.ascii	"<6>%s: MAC %pM\012\000"
	.align	2
.LC787:
	.ascii	"<6>%s: HOST MAC %pM\012\000"
	.text
	.align	2
	.global	gether_setup_name
	.syntax unified
	.arm
	.fpu softvfp
	.type	gether_setup_name, %function
gether_setup_name:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	movw	r6, #:lower16:.LANCHOR3
	movt	r6, #:upper16:.LANCHOR3
	strd	r8, [sp, #16]
	ldr	r7, [r6, #-4088]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	cmp	r7, #0
	bne	.L14500
	mov	r10, r2
	mov	r2, #1
	mov	r9, r0
	mov	r8, r1
	mov	r0, #132
	mov	r1, r2
	bl	alloc_etherdev_mqs
	subs	r4, r0, #0
	beq	.L14501
	add	r5, r4, #1216
	movw	r2, #:lower16:eth_work
	str	r7, [r4, #1216]
	add	lr, r5, #20
	movt	r2, #:upper16:eth_work
	str	r4, [r4, #1224]
	movw	ip, #:lower16:process_rx_w
	add	r1, r5, #108
	str	r7, [r4, #1232]
	str	lr, [r4, #1236]
	movt	ip, #:upper16:process_rx_w
	add	fp, r5, #92
	str	lr, [r4, #1240]
	add	lr, r5, #28
	mov	r3, r10
	str	r7, [r4, #1276]
	str	lr, [r4, #1244]
	str	lr, [r4, #1248]
	mov	lr, #2560
	str	r7, [r4, #1280]
	add	r7, r5, #52
	str	r2, [r4, #1316]
	movw	r2, #:lower16:.LC782
	movt	r2, #:upper16:.LC782
	str	r7, [r4, #1268]
	str	r7, [r4, #1272]
	add	r7, r9, #32
	str	lr, [r4, #1304]
	str	fp, [r4, #1308]
	str	fp, [r4, #1312]
	str	lr, [r4, #1320]
	str	r1, [r4, #1324]
	str	r1, [r4, #1328]
	mov	r1, #16
	str	ip, [r4, #1332]
	bl	snprintf
	ldr	r0, [r6, #-3952]
	ldr	r1, [r4, #492]
	bl	get_ether_addr
	cmp	r0, #0
	bne	.L14495
.L14496:
	add	r10, r5, #125
	ldr	r0, [r6, #-3948]
	mov	r1, r10
	bl	get_ether_addr
	cmp	r0, #0
	bne	.L14509
.L14497:
	cmp	r8, #0
	beq	.L14498
	ldr	r3, [r10]	@ unaligned
	str	r3, [r8]	@ unaligned
	ldrh	r3, [r10, #4]	@ unaligned
	strh	r3, [r8, #4]	@ unaligned
.L14498:
	ldr	r3, .L14510
	mov	r0, r4
	ldr	r1, .L14510+4
	add	r2, r3, #136
	str	r3, [r4, #336]
	str	r2, [r4, #340]
	str	r7, [r4, #688]
	str	r1, [r4, #736]
	str	r9, [r4, #1228]
	bl	register_netdev
	subs	r7, r0, #0
	bge	.L14499
	mov	r0, r4
	bl	free_netdev
.L14493:
	mov	r0, r7
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L14495:
	movw	r2, #:lower16:.LC783
	movw	r1, #:lower16:.LC784
	mov	r0, r7
	movt	r2, #:upper16:.LC783
	movt	r1, #:upper16:.LC784
	bl	dev_warn
	b	.L14496
.L14509:
	movw	r2, #:lower16:.LC785
	movw	r1, #:lower16:.LC784
	movt	r2, #:upper16:.LC785
	movt	r1, #:upper16:.LC784
	mov	r0, r7
	bl	dev_warn
	b	.L14497
.L14500:
	mvn	r7, #15
	b	.L14493
.L14501:
	mvn	r7, #11
	b	.L14493
.L14499:
	movw	r0, #:lower16:.LC786
	ldr	r2, [r4, #492]
	movt	r0, #:upper16:.LC786
	ldr	r1, [r4, #1224]
	bl	printk
	movw	r0, #:lower16:.LC787
	mov	r2, r10
	ldr	r1, [r4, #1224]
	movt	r0, #:upper16:.LC787
	bl	printk
	mov	r0, r4
	str	r5, [r6, #-4088]
	bl	netif_carrier_off
	b	.L14493
.L14511:
	.align	2
.L14510:
	.word	.LANCHOR5-1992
	.word	.LANCHOR4-716
	.fnend
	.size	gether_setup_name, .-gether_setup_name
	.section	.rodata.str1.4
	.align	2
.LC788:
	.ascii	"usb\000"
	.text
	.align	2
	.global	gether_setup
	.syntax unified
	.arm
	.fpu softvfp
	.type	gether_setup, %function
gether_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r2, #:lower16:.LC788
	movt	r2, #:upper16:.LC788
	b	gether_setup_name
	.fnend
	.size	gether_setup, .-gether_setup
	.section	.rodata.str1.4
	.align	2
.LC789:
	.ascii	"<3>%s: %s: rndis_pdata\012\000"
	.align	2
.LC790:
	.ascii	"<6>%s: %s MAC: %02X:%02X:%02X:%02X:%02X:%02X\012\000"
	.align	2
.LC791:
	.ascii	"<3>%s: %s: gether_setup failed\012\000"
	.section	.text.unlikely
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_function_bind_config, %function
rndis_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, r7, lr}
	.save {r4, r5, r6, r7, lr}
	.pad #28
	sub	sp, sp, #28
	ldr	r4, [r0, #4]
	ldr	r6, .L14524
	cmp	r4, #0
	bne	.L14514
	sub	r2, r6, #12
	movw	r0, #:lower16:.LC789
	mov	r1, r2
	movt	r0, #:upper16:.LC789
	mvn	r5, #0
	bl	printk
	b	.L14513
.L14514:
	ldrb	ip, [r4, #5]	@ zero_extendqisi2
	sub	r2, r6, #12
	movw	r0, #:lower16:.LC790
	ldrb	r3, [r4]	@ zero_extendqisi2
	mov	r7, r1
	movt	r0, #:upper16:.LC790
	mov	r1, r2
	str	ip, [sp, #16]
	ldrb	ip, [r4, #4]	@ zero_extendqisi2
	str	ip, [sp, #12]
	ldrb	ip, [r4, #3]	@ zero_extendqisi2
	str	ip, [sp, #8]
	ldrb	ip, [r4, #2]	@ zero_extendqisi2
	str	ip, [sp, #4]
	ldrb	ip, [r4, #1]	@ zero_extendqisi2
	str	ip, [sp]
	bl	printk
	ldrb	r2, [r4]	@ zero_extendqisi2
	ldr	r3, [r7, #24]
	cmp	r2, #0
	movw	r2, #:lower16:.LC737
	movne	r1, #0
	moveq	r1, r4
	ldr	r0, [r3]
	movt	r2, #:upper16:.LC737
	bl	gether_setup_name
	cmp	r0, #0
	mov	r5, r0
	beq	.L14518
	sub	r2, r6, #12
	movw	r0, #:lower16:.LC791
	mov	r1, r2
	movt	r0, #:upper16:.LC791
	bl	printk
	b	.L14513
.L14518:
	ldrb	r3, [r4, #269]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L14519
	movw	r3, #:lower16:.LANCHOR4
	mov	r0, #3
	movt	r3, #:upper16:.LANCHOR4
	mvn	ip, #31
	sub	r2, r3, #2720
	sub	r1, r3, #2736
	strb	r0, [r3, #-2730]
	movw	r0, #769
	strb	ip, [r3, #-2723]
	mov	r3, #480
	strh	r0, [r2, #-2]	@ movhi
	strh	r3, [r1, #4]	@ movhi
.L14519:
	ldr	r2, [r4, #8]
	mov	r0, r7
	add	r3, r4, #13
	mov	r1, r4
	add	sp, sp, #28
	@ sp needed
	pop	{r4, r5, r6, r7, lr}
	b	rndis_bind_config_vendor
.L14513:
	mov	r0, r5
	add	sp, sp, #28
	@ sp needed
	pop	{r4, r5, r6, r7, pc}
.L14525:
	.align	2
.L14524:
	.word	.LANCHOR5-1680
	.fnend
	.size	rndis_function_bind_config, .-rndis_function_bind_config
	.text
	.align	2
	.global	gether_cleanup
	.syntax unified
	.arm
	.fpu softvfp
	.type	gether_cleanup, %function
gether_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r4, #:lower16:.LANCHOR3
	movt	r4, #:upper16:.LANCHOR3
	str	lr, [sp, #4]
	ldr	r3, [r4, #-4088]
	cmp	r3, #0
	beq	.L14526
	ldr	r0, [r3, #8]
	bl	unregister_netdev
	ldr	r0, [r4, #-4088]
	add	r0, r0, #88
	bl	flush_work
	ldr	r3, [r4, #-4088]
	ldr	r0, [r3, #8]
	bl	free_netdev
	mov	r3, #0
	str	r3, [r4, #-4088]
.L14526:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	gether_cleanup, .-gether_cleanup
	.section	.rodata.str1.4
	.align	2
.LC792:
	.ascii	"<3>%s: %s: ecm_pdata\012\000"
	.align	2
.LC793:
	.ascii	"ecm\000"
	.align	2
.LC794:
	.ascii	"<3>%s: %s: ecm_bind_config failed\012\000"
	.section	.text.unlikely
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_function_bind_config, %function
ecm_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, lr}
	.save {r4, r5, r6, lr}
	.pad #24
	sub	sp, sp, #24
	ldr	r5, [r0, #4]
	cmp	r5, #0
	bne	.L14533
	ldr	r2, .L14540
	movw	r0, #:lower16:.LC792
	mvn	r4, #21
	movt	r0, #:upper16:.LC792
	mov	r1, r2
	bl	printk
	b	.L14532
.L14533:
	mov	r6, r1
	ldrb	r1, [r5, #5]	@ zero_extendqisi2
	movw	r0, #:lower16:.LC790
	ldrb	r3, [r5]	@ zero_extendqisi2
	movt	r0, #:upper16:.LC790
	ldr	r2, .L14540
	str	r1, [sp, #16]
	ldrb	ip, [r5, #4]	@ zero_extendqisi2
	mov	r1, r2
	str	ip, [sp, #12]
	ldrb	ip, [r5, #3]	@ zero_extendqisi2
	str	ip, [sp, #8]
	ldrb	ip, [r5, #2]	@ zero_extendqisi2
	str	ip, [sp, #4]
	ldrb	ip, [r5, #1]	@ zero_extendqisi2
	str	ip, [sp]
	bl	printk
	ldr	r3, [r6, #24]
	movw	r2, #:lower16:.LC793
	mov	r1, r5
	movt	r2, #:upper16:.LC793
	ldr	r0, [r3]
	bl	gether_setup_name
	subs	r4, r0, #0
	beq	.L14535
	ldr	r2, .L14540
	movw	r0, #:lower16:.LC791
	movt	r0, #:upper16:.LC791
	mov	r1, r2
	bl	printk
	b	.L14532
.L14535:
	mov	r1, r5
	mov	r0, r6
	bl	ecm_bind_config
	subs	r4, r0, #0
	beq	.L14532
	ldr	r2, .L14540
	movw	r0, #:lower16:.LC794
	movt	r0, #:upper16:.LC794
	mov	r1, r2
	bl	printk
	bl	gether_cleanup
.L14532:
	mov	r0, r4
	add	sp, sp, #24
	@ sp needed
	pop	{r4, r5, r6, pc}
.L14541:
	.align	2
.L14540:
	.word	.LANCHOR5-1664
	.fnend
	.size	ecm_function_bind_config, .-ecm_function_bind_config
	.section	.rodata.str1.4
	.align	2
.LC795:
	.ascii	"<3>%s: RNDIS header memory allocation failed.\012\000"
	.text
	.align	2
	.global	gether_connect
	.syntax unified
	.arm
	.fpu softvfp
	.type	gether_connect, %function
gether_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR3
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:.LANCHOR3
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r6, [r3, #-4088]
	cmp	r6, #0
	mvneq	r4, #21
	beq	.L14542
	movw	r3, #:lower16:kmalloc_caches
	mov	r5, r0
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	moveq	r3, #16
	streq	r3, [r5, #136]
	beq	.L14545
	movw	r1, #32800
	bl	kmem_cache_alloc
	cmp	r0, #0
	str	r0, [r5, #136]
	beq	.L14575
.L14545:
	ldr	r3, [r5, #80]
	str	r6, [r3]
	ldr	r0, [r5, #80]
	ldr	r1, [r0, #28]
	ldrh	r3, [r1, #4]	@ unaligned
	cmp	r3, #0
	beq	.L14560
	ldr	r3, [r0, #8]
	ldr	r3, [r3]
	blx	r3
	subs	r4, r0, #0
	bne	.L14547
	ldr	r3, [r5, #84]
	str	r6, [r3]
	ldr	r0, [r5, #84]
	ldr	r1, [r0, #28]
	ldrh	r3, [r1, #4]	@ unaligned
	cmp	r3, #0
	beq	.L14576
	ldr	r3, [r0, #8]
	ldr	r3, [r3]
	blx	r3
	subs	r4, r0, #0
	bne	.L14550
	ldr	r3, [r6, #12]
	ldr	r2, [r3, #20]
	cmp	r2, #2
	bls	.L14562
	ldr	r3, [r3, #16]
	sub	r3, r3, #3
	bics	r3, r3, #2
	bne	.L14562
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r7, [r3, #648]
	lsl	r7, r7, #1
.L14551:
	add	r8, r6, #16
	mov	r0, r8
	bl	_raw_spin_lock
	mov	r2, r7
	add	r0, r6, #20
	ldr	r1, [r5, #80]
	bl	prealloc
	subs	r4, r0, #0
	blt	.L14552
	mov	r2, r7
	add	r0, r6, #28
	ldr	r1, [r5, #84]
	bl	prealloc
	mov	r4, r0
	mov	r0, r8
	bl	_raw_spin_unlock
	cmp	r4, #0
	bne	.L14553
	ldrb	r3, [r5, #88]	@ zero_extendqisi2
	mov	r0, r6
	strb	r3, [r6, #124]
	ldr	r3, [r5, #92]
	str	r3, [r6, #68]
	ldr	r3, [r5, #124]
	str	r3, [r6, #84]
	ldr	r3, [r5, #120]
	str	r3, [r6, #80]
	ldr	r3, [r5, #108]
	str	r3, [r6, #72]
	ldr	r3, [r5, #112]
	str	r3, [r6, #76]
	bl	_raw_spin_lock
	str	r5, [r6, #4]
	str	r4, [r6, #40]
	str	r4, [r6, #44]
	str	r4, [r6, #48]
	str	r6, [r5, #76]
	ldr	r3, [r6, #8]
	ldr	r3, [r3, #160]
	tst	r3, #1
	beq	.L14554
	ldr	r3, [r5, #128]
	cmp	r3, #0
	beq	.L14555
.L14573:
	mov	r0, r5
	blx	r3
.L14555:
	mov	r0, r6
	bl	_raw_spin_unlock
	ldr	r0, [r6, #8]
	bl	netif_carrier_on
	ldr	r4, [r6, #8]
	ldr	r3, [r4, #160]
	tst	r3, #1
	bne	.L14577
.L14542:
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L14552:
	mov	r0, r8
	bl	_raw_spin_unlock
.L14553:
	ldr	r0, [r5, #84]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
.L14550:
	ldr	r0, [r5, #80]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	cmp	r4, #0
	blt	.L14547
.L14574:
	ldr	r4, [r6, #8]
	b	.L14542
.L14576:
	ldr	r0, [r5, #80]
	mvn	r4, #21
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
.L14547:
.L14546:
	ldr	r0, [r5, #136]
	bl	kfree
	b	.L14542
.L14562:
	mov	r7, #2
	b	.L14551
.L14554:
	ldr	r3, [r5, #132]
	cmp	r3, #0
	bne	.L14573
	b	.L14555
.L14577:
	mov	r1, #32
	mov	r0, r6
	bl	rx_fill
	ldr	r3, [r6, #8]
	mov	r0, #0
	str	r0, [r6, #36]
	ldr	r4, [r3, #576]
	add	r1, r4, #80
	bl	_test_and_clear_bit
	cmp	r0, #0
	beq	.L14574
	ldr	r0, [r4, #4]
	bl	__netif_schedule
	ldr	r4, [r6, #8]
	b	.L14542
.L14560:
	mvn	r4, #21
	b	.L14547
.L14575:
	movw	r0, #:lower16:.LC795
	ldr	r1, .L14578
	mvn	r4, #11
	movt	r0, #:upper16:.LC795
	bl	printk
	b	.L14542
.L14579:
	.align	2
.L14578:
	.word	.LANCHOR5-1636
	.fnend
	.size	gether_connect, .-gether_connect
	.align	2
	.global	gether_disconnect
	.syntax unified
	.arm
	.fpu softvfp
	.type	gether_disconnect, %function
gether_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r5, [r0, #76]
	.pad #4
	sub	sp, sp, #4
	cmp	r5, #0
	beq	.L14580
	ldr	r3, [r5, #8]
	mov	r6, r0
	ldr	r1, [r3, #576]
	cmp	r1, #0
	beq	.L14600
	add	r1, r1, #80
	mov	r0, #0
	bl	_set_bit
.L14591:
	ldr	r0, [r5, #8]
	add	r7, r5, #16
	add	r8, r5, #20
	bl	netif_carrier_off
	ldr	r0, [r6, #80]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	mov	r0, r7
	bl	_raw_spin_lock
	ldr	r4, [r5, #20]
	cmp	r4, r8
	beq	.L14583
	mov	r10, #256
	mov	r9, #512
	b	.L14586
.L14584:
	ldr	r0, [r6, #80]
.L14599:
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	mov	r0, r7
	bl	_raw_spin_lock
	ldr	r4, [r5, #20]
	cmp	r4, r8
	beq	.L14583
.L14586:
	ldrd	r2, [r4]
	mov	r0, r7
	sub	fp, r4, #36
	str	r3, [r2, #4]
	str	r2, [r3]
	str	r10, [r4]
	str	r9, [r4, #4]
	bl	_raw_spin_unlock
	ldrb	r3, [r6, #116]	@ zero_extendqisi2
	mov	r1, fp
	cmp	r3, #0
	beq	.L14584
	ldr	r0, [r4, #-36]
	bl	kfree
	mov	r3, #0
	mov	r1, fp
	str	r3, [r4, #-36]
	ldr	r0, [r6, #80]
	b	.L14599
.L14583:
	mov	r4, #0
	ldr	r0, [r6, #136]
	add	r8, r5, #28
	bl	kfree
	mov	r0, r7
	str	r4, [r6, #136]
	bl	_raw_spin_unlock
	ldr	r3, [r6, #80]
	str	r4, [r3]
	ldr	r3, [r6, #80]
	str	r4, [r3, #28]
	ldr	r0, [r6, #84]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	mov	r0, r7
	bl	_raw_spin_lock
	ldr	r4, [r5, #28]
	cmp	r8, r4
	beq	.L14587
	mov	r10, #256
	mov	r9, #512
.L14588:
	ldrd	r2, [r4]
	mov	r0, r7
	str	r3, [r2, #4]
	str	r2, [r3]
	str	r10, [r4]
	str	r9, [r4, #4]
	bl	_raw_spin_unlock
	ldr	r0, [r6, #84]
	sub	r1, r4, #36
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	mov	r0, r7
	bl	_raw_spin_lock
	ldr	r4, [r5, #28]
	cmp	r4, r8
	bne	.L14588
.L14587:
	mov	r0, r7
	add	r7, r5, #64
	bl	_raw_spin_unlock
	mov	r0, r7
	add	r4, r5, #52
	bl	_raw_spin_lock
	ldr	r3, [r5, #52]
	cmp	r4, r3
	beq	.L14589
	mov	r8, #0
	mov	r9, #0
	b	.L14590
.L14601:
	ldr	r2, [r5, #60]
	sub	r2, r2, #1
	str	r2, [r5, #60]
	ldm	r3, {r1, r2}
	strd	r8, [r3]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any
	ldr	r3, [r5, #52]
	cmp	r4, r3
	beq	.L14589
.L14590:
	subs	r0, r3, #0
	bne	.L14601
.L14589:
	mov	r0, r7
	mov	r4, #0
	bl	_raw_spin_unlock
	ldr	r3, [r6, #84]
	mov	r0, r5
	str	r4, [r3]
	ldr	r3, [r6, #84]
	str	r4, [r3, #28]
	str	r4, [r5, #68]
	str	r4, [r5, #80]
	str	r4, [r5, #84]
	bl	_raw_spin_lock
	mov	r0, r5
	str	r4, [r5, #4]
	str	r4, [r6, #76]
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock
.L14580:
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L14600:
	movw	r0, #:lower16:.LC82
	movw	r1, #1847
	movt	r0, #:upper16:.LC82
	bl	warn_slowpath_null
	movw	r0, #:lower16:.LC83
	movt	r0, #:upper16:.LC83
	bl	printk
	b	.L14591
	.fnend
	.size	gether_disconnect, .-gether_disconnect
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_disable, %function
rndis_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r0, #160]
	ldr	r3, [r3]
	cmp	r3, #0
	bxeq	lr
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	mov	r6, r0
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r5, [r0, #156]
	.pad #4
	sub	sp, sp, #4
	cmp	r5, #0
	bgt	.L14609
	rsb	r5, r5, r5, lsl #4
	movw	r3, #:lower16:.LANCHOR0
	ldr	r1, .L14626
	movt	r3, #:upper16:.LANCHOR0
	lsl	r5, r5, #2
	mov	r2, #0
	add	r3, r3, r5
	add	r5, r5, r1
	ldr	r0, [r3, #3768]
	mov	r8, r3
	str	r2, [r3, #3720]
	ldr	r4, [r0]
.L14605:
	cmp	r5, r0
	bne	.L14612
	b	.L14609
.L14610:
	cmp	r5, r4
	mov	r0, r4
	ldr	r4, [r4]
	beq	.L14609
.L14612:
	ldr	r3, [r0, #16]
	cmp	r3, #0
	bne	.L14610
	ldr	fp, [r0, #8]
	mov	r3, #1
	str	r3, [r0, #16]
	cmp	fp, #0
	beq	.L14609
	ldr	r0, [r8, #3768]
	cmp	r5, r0
	ldr	r4, [r0]
	beq	.L14609
	mov	r7, r4
	mov	r10, #256
	mov	r9, #512
	b	.L14608
.L14607:
	cmp	r5, r7
	mov	r0, r7
	ldr	r4, [r4]
	beq	.L14625
.L14613:
	mov	r7, r4
.L14608:
	cmp	r0, #0
	beq	.L14607
	ldr	r3, [r0, #8]
	cmp	fp, r3
	bne	.L14607
	ldr	r3, [r0, #4]
	str	r3, [r4, #4]
	str	r4, [r3]
	str	r10, [r0]
	str	r9, [r0, #4]
	bl	kfree
	cmp	r5, r7
	mov	r0, r7
	ldr	r4, [r4]
	bne	.L14613
.L14625:
	ldr	r0, [r8, #3768]
	ldr	r4, [r0]
	b	.L14605
.L14609:
	mov	r0, r6
	bl	gether_disconnect
	ldr	r0, [r6, #160]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [r6, #160]
	mov	r3, #0
	str	r3, [r2]
	ldr	r2, [r6, #160]
	str	r3, [r2, #28]
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L14627:
	.align	2
.L14626:
	.word	.LANCHOR0+3768
	.fnend
	.size	rndis_disable, .-rndis_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_set_alt, %function
rndis_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldrb	r2, [r0, #140]	@ zero_extendqisi2
	ldr	r3, [r0, #20]
	cmp	r2, r1
	ldr	r5, [r3, #24]
	beq	.L14656
	ldrb	r3, [r0, #141]	@ zero_extendqisi2
	cmp	r3, r1
	bne	.L14635
	ldr	r2, [r0, #80]
	ldr	r3, [r2]
	cmp	r3, #0
	beq	.L14636
	bl	gether_disconnect
	ldr	r2, [r4, #80]
.L14636:
	ldr	r3, [r2, #28]
	cmp	r3, #0
	beq	.L14637
	ldr	r3, [r4, #84]
	ldr	r3, [r3, #28]
	cmp	r3, #0
	beq	.L14637
.L14638:
	mov	r5, #0
	mov	r0, r4
	strb	r5, [r4, #88]
	strh	r5, [r4, #90]	@ movhi
	bl	gether_connect
	cmn	r0, #4096
	mov	r1, r0
	bhi	.L14628
	ldrb	r2, [r4, #156]	@ zero_extendqisi2
	clz	r3, r1
	add	r4, r4, #90
	lsr	r3, r3, #5
	cmp	r2, #0
	movne	r3, #1
	cmp	r3, #0
	bne	.L14642
	movw	r2, #:lower16:.LANCHOR0
	mov	r0, r3
	movt	r2, #:upper16:.LANCHOR0
	str	r3, [r2, #3252]
	str	r3, [r2, #3256]
	str	r4, [r2, #3740]
	str	r1, [r2, #3744]
.L14628:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L14637:
	mov	r1, r4
	ldr	r0, [r5]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L14640
	mov	r1, r4
	ldr	r0, [r5]
	ldr	r2, [r4, #84]
	bl	config_ep_by_speed
	cmp	r0, #0
	beq	.L14638
.L14640:
	ldr	r2, [r4, #80]
	mov	r3, #0
	mvn	r0, #21
	str	r3, [r2, #28]
	ldr	r2, [r4, #84]
	str	r3, [r2, #28]
	b	.L14628
.L14656:
	ldr	r2, [r0, #160]
	ldr	r3, [r2]
	cmp	r3, #0
	beq	.L14630
	ldr	r3, [r2, #8]
	mov	r0, r2
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [r4, #160]
.L14630:
	ldr	r1, [r2, #28]
	cmp	r1, #0
	beq	.L14657
.L14631:
	ldrh	r3, [r1, #4]	@ unaligned
	cmp	r3, #0
	beq	.L14634
	ldr	r3, [r2, #8]
	mov	r0, r2
	ldr	r3, [r3]
	blx	r3
	ldr	r2, [r4, #160]
.L14634:
	mov	r0, #0
	str	r4, [r2]
	b	.L14628
.L14657:
	mov	r1, r4
	ldr	r0, [r5]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L14635
	ldr	r2, [r4, #160]
	ldr	r1, [r2, #28]
	b	.L14631
.L14635:
	mvn	r0, #21
	b	.L14628
.L14642:
	mov	r0, r5
	b	.L14628
	.fnend
	.size	rndis_set_alt, .-rndis_set_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_disable, %function
ecm_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r2, [r0, #80]
	ldr	r3, [r2]
	cmp	r3, #0
	beq	.L14659
	bl	gether_disconnect
.L14660:
	ldr	r0, [r4, #156]
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L14658
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [r4, #156]
	mov	r3, #0
	str	r3, [r2]
	ldr	r2, [r4, #156]
	str	r3, [r2, #28]
.L14658:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L14659:
	str	r3, [r2, #28]
	ldr	r2, [r0, #84]
	str	r3, [r2, #28]
	b	.L14660
	.fnend
	.size	ecm_disable, .-ecm_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_set_alt, %function
ecm_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	mov	r5, r2
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldrb	ip, [r0, #140]	@ zero_extendqisi2
	ldr	r3, [r0, #20]
	cmp	ip, r1
	ldr	r6, [r3, #24]
	beq	.L14695
	ldrb	r3, [r0, #141]	@ zero_extendqisi2
	cmp	r2, #1
	cmpls	r3, r1
	bne	.L14672
	ldr	r2, [r0, #80]
	ldr	r3, [r2]
	cmp	r3, #0
	beq	.L14674
	bl	gether_disconnect
	ldr	r2, [r4, #80]
.L14674:
	ldr	r3, [r2, #28]
	cmp	r3, #0
	beq	.L14675
	ldr	r3, [r4, #84]
	ldr	r3, [r3, #28]
	cmp	r3, #0
	beq	.L14675
.L14676:
	cmp	r5, #1
	beq	.L14696
.L14679:
	ldr	r6, [r4, #160]
	mov	r3, #1
	strb	r3, [r4, #164]
	cmp	r6, #0
	beq	.L14681
	ldr	r3, [r6]
	mov	r5, #0
	mov	r1, #8
	mov	ip, #2
	mvn	r0, #94
	mov	r2, #32
	strb	r5, [r3, #1]
	ldrb	lr, [r4, #165]	@ zero_extendqisi2
	strh	lr, [r3, #2]	@ unaligned
	strb	r5, [r3, #6]
	strb	r5, [r3, #7]
	str	r1, [r6, #4]
	mov	r1, r6
	strb	ip, [r4, #164]
	strb	r0, [r3]
	ldrb	r0, [r4, #140]	@ zero_extendqisi2
	strh	r0, [r3, #4]	@ unaligned
	ldr	r0, [r4, #156]
	str	r5, [r4, #160]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, r5
	blt	.L14697
.L14681:
	mov	r0, #0
.L14666:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L14696:
	ldr	r3, [r6]
	movw	r0, #:lower16:.LC274
	movt	r0, #:upper16:.LC274
	ldr	r1, [r3, #28]
	bl	strcmp
	subs	r3, r0, #0
	mov	r2, #15
	movne	r3, #1
	mov	r0, r4
	strb	r3, [r4, #88]
	strh	r2, [r4, #90]	@ movhi
	bl	gether_connect
	cmn	r0, #4096
	bls	.L14679
	b	.L14666
.L14675:
	mov	r1, r4
	ldr	r0, [r6]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L14678
	mov	r1, r4
	ldr	r0, [r6]
	ldr	r2, [r4, #84]
	bl	config_ep_by_speed
	cmp	r0, #0
	beq	.L14676
.L14678:
	ldr	r2, [r4, #80]
	mov	r3, #0
	mvn	r0, #21
	str	r3, [r2, #28]
	ldr	r2, [r4, #84]
	str	r3, [r2, #28]
	b	.L14666
.L14695:
	cmp	r2, #0
	bne	.L14672
	ldr	r2, [r0, #156]
	ldr	r3, [r2]
	cmp	r3, #0
	beq	.L14670
	ldr	r3, [r2, #8]
	mov	r0, r2
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [r4, #156]
.L14670:
	ldr	r1, [r2, #28]
	cmp	r1, #0
	beq	.L14698
.L14671:
	ldrh	r3, [r1, #4]	@ unaligned
	cmp	r3, #0
	beq	.L14673
	ldr	r3, [r2, #8]
	mov	r0, r2
	ldr	r3, [r3]
	blx	r3
	ldr	r2, [r4, #156]
.L14673:
	mov	r0, #0
	str	r4, [r2]
	b	.L14666
.L14697:
	mov	r0, r5
	str	r6, [r4, #160]
	b	.L14666
.L14698:
	mov	r1, r4
	ldr	r0, [r6]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L14672
	ldr	r2, [r4, #156]
	ldr	r1, [r2, #28]
	b	.L14671
.L14672:
	mvn	r0, #21
	b	.L14666
	.fnend
	.size	ecm_set_alt, .-ecm_set_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_disable, %function
ncm_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r3, [r0, #80]
	ldr	r3, [r3]
	cmp	r3, #0
	beq	.L14700
	bl	gether_disconnect
.L14700:
	ldr	r0, [r4, #156]
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L14699
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [r4, #156]
	mov	r3, #0
	str	r3, [r2]
	ldr	r2, [r4, #156]
	str	r3, [r2, #28]
.L14699:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	ncm_disable, .-ncm_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_set_alt, %function
ncm_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	mov	r5, r2
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrb	ip, [r0, #140]	@ zero_extendqisi2
	ldr	r3, [r0, #20]
	cmp	ip, r1
	ldr	r7, [r3, #24]
	beq	.L14742
	ldrb	r3, [r0, #141]	@ zero_extendqisi2
	cmp	r2, #1
	cmpls	r3, r1
	movne	r6, #1
	moveq	r6, #0
	bne	.L14715
	ldr	r3, [r0, #80]
	ldr	r3, [r3]
	cmp	r3, #0
	beq	.L14717
	bl	gether_disconnect
	movw	r3, #:lower16:.LANCHOR1
	mov	r1, #15
	movt	r3, #:upper16:.LANCHOR1
	ldr	r2, [r3, #28]
	add	r3, r3, #48
	strh	r1, [r4, #90]	@ movhi
	mov	r1, #2048
	str	r6, [r4, #92]
	strb	r6, [r4, #172]
	str	r3, [r4, #168]
	str	r2, [r4, #100]
	str	r1, [r4, #104]
.L14717:
	cmp	r5, #1
	bne	.L14718
	ldr	r2, [r4, #80]
	ldr	r3, [r2, #28]
	cmp	r3, #0
	beq	.L14719
	ldr	r3, [r4, #84]
	ldr	r3, [r3, #28]
	cmp	r3, #0
	beq	.L14719
.L14720:
	ldr	r3, [r7]
	movw	r0, #:lower16:.LC274
	movt	r0, #:upper16:.LC274
	ldr	r1, [r3, #28]
	bl	strcmp
	subs	r3, r0, #0
	mov	r2, #15
	movne	r3, #1
	mov	r0, r4
	strb	r3, [r4, #88]
	strh	r2, [r4, #90]	@ movhi
	bl	gether_connect
	cmn	r0, #4096
	bhi	.L14709
.L14718:
	add	r6, r4, #176
	mov	r0, r6
	bl	_raw_spin_lock
	ldr	r5, [r4, #160]
	mov	r3, #2
	strb	r3, [r4, #164]
	cmp	r5, #0
	beq	.L14724
	ldr	r1, [r4, #20]
	mov	r2, #0
	mov	lr, #42
	ldr	r3, [r5]
	mov	ip, #8
	mov	r0, #16
	ldr	r1, [r1, #24]
	strb	lr, [r3, #1]
	strb	r2, [r3, #2]
	strb	r2, [r3, #3]
	strb	ip, [r3, #6]
	strb	r2, [r3, #7]
	str	r0, [r5, #4]
	ldr	r2, [r1]
	ldr	r1, [r2, #20]
	cmp	r1, #2
	bls	.L14727
	ldr	r0, [r2, #16]
	mov	r1, #0
	mov	r2, #28672
	movt	r1, 6500
	movt	r2, 148
	cmp	r0, #3
	moveq	r2, r1
.L14725:
	ldr	r1, [r5]
	mvn	lr, #94
	mov	r7, #1
	mov	ip, #0
	mov	r0, r6
	str	r2, [r1, #8]
	str	r2, [r1, #12]
	strb	r7, [r4, #164]
	strb	lr, [r3]
	ldrb	r2, [r4, #140]	@ zero_extendqisi2
	strh	r2, [r3, #4]	@ unaligned
	str	ip, [r4, #160]
	bl	_raw_spin_unlock
	ldr	r0, [r4, #156]
	mov	r2, #32
	mov	r1, r5
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	mov	r7, r0
	mov	r0, r6
	bl	_raw_spin_lock
	cmp	r7, #0
	strlt	r5, [r4, #160]
.L14724:
	mov	r0, r6
	bl	_raw_spin_unlock
	mov	r0, #0
.L14709:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L14742:
	cmp	r2, #0
	bne	.L14715
	ldr	r2, [r0, #156]
	ldr	r3, [r2]
	cmp	r3, #0
	beq	.L14713
	ldr	r3, [r2, #8]
	mov	r0, r2
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [r4, #156]
.L14713:
	ldr	r1, [r2, #28]
	cmp	r1, #0
	beq	.L14743
.L14714:
	ldrh	r3, [r1, #4]	@ unaligned
	cmp	r3, #0
	beq	.L14716
	ldr	r3, [r2, #8]
	mov	r0, r2
	ldr	r3, [r3]
	blx	r3
	ldr	r2, [r4, #156]
.L14716:
	mov	r0, #0
	str	r4, [r2]
	b	.L14709
.L14719:
	mov	r1, r4
	ldr	r0, [r7]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L14722
	mov	r1, r4
	ldr	r0, [r7]
	ldr	r2, [r4, #84]
	bl	config_ep_by_speed
	cmp	r0, #0
	beq	.L14720
.L14722:
	ldr	r2, [r4, #80]
	mov	r3, #0
	mvn	r0, #21
	str	r3, [r2, #28]
	ldr	r2, [r4, #84]
	str	r3, [r2, #28]
	b	.L14709
.L14727:
	mov	r2, #28672
	movt	r2, 148
	b	.L14725
.L14743:
	mov	r1, r4
	ldr	r0, [r7]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L14715
	ldr	r2, [r4, #156]
	ldr	r1, [r2, #28]
	b	.L14714
.L14715:
	mvn	r0, #21
	b	.L14709
	.fnend
	.size	ncm_set_alt, .-ncm_set_alt
	.align	2
	.global	gether_qc_get_macs
	.syntax unified
	.arm
	.fpu softvfp
	.type	gether_qc_get_macs, %function
gether_qc_get_macs:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r4, #:lower16:.LANCHOR3
	mov	r5, r1
	movt	r4, #:upper16:.LANCHOR3
	mov	r1, r0
	str	r6, [sp, #8]
	ldr	r0, [r4, #-3960]
	str	lr, [sp, #12]
	bl	get_qc_ether_addr
	mov	r1, r5
	ldr	r0, [r4, #-3956]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	get_qc_ether_addr
	.fnend
	.size	gether_qc_get_macs, .-gether_qc_get_macs
	.align	2
	.global	gether_qc_setup_name
	.syntax unified
	.arm
	.fpu softvfp
	.type	gether_qc_setup_name, %function
gether_qc_setup_name:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	mov	r6, r0
	mov	r0, #28
	strd	r8, [sp, #16]
	mov	r8, r2
	mov	r2, #1
	mov	r1, r2
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	bl	alloc_etherdev_mqs
	subs	r4, r0, #0
	beq	.L14753
	mov	r1, #0
	movw	r2, #:lower16:.LC782
	movw	r7, #:lower16:.LANCHOR3
	mov	r3, r8
	movt	r2, #:upper16:.LC782
	movt	r7, #:upper16:.LANCHOR3
	str	r1, [r4, #1216]
	mov	r1, #16
	str	r4, [r4, #1224]
	add	r9, r6, #32
	bl	snprintf
	ldr	r0, [r7, #-3960]
	ldr	r1, [r4, #492]
	bl	get_qc_ether_addr
	cmp	r0, #0
	bne	.L14748
.L14749:
	add	r8, r4, #1232
	ldr	r0, [r7, #-3956]
	add	r8, r8, #5
	mov	r1, r8
	bl	get_qc_ether_addr
	cmp	r0, #0
	bne	.L14761
.L14750:
	cmp	r5, #0
	beq	.L14751
	ldr	r3, [r8]	@ unaligned
	str	r3, [r5]	@ unaligned
	ldrh	r3, [r8, #4]	@ unaligned
	strh	r3, [r5, #4]	@ unaligned
.L14751:
	ldr	r3, .L14762
	mov	r0, r4
	sub	r2, r3, #4
	add	r3, r3, #132
	str	r2, [r4, #336]
	str	r3, [r4, #340]
	bl	netif_carrier_off
	ldr	r3, .L14762+4
	mov	r0, r4
	str	r9, [r4, #688]
	str	r3, [r4, #736]
	str	r6, [r4, #1228]
	bl	register_netdev
	subs	r5, r0, #0
	bge	.L14752
	mov	r0, r4
	bl	free_netdev
.L14746:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L14748:
	movw	r2, #:lower16:.LC783
	movw	r1, #:lower16:.LC784
	mov	r0, r9
	movt	r2, #:upper16:.LC783
	movt	r1, #:upper16:.LC784
	bl	dev_warn
	b	.L14749
.L14761:
	movw	r2, #:lower16:.LC785
	movw	r1, #:lower16:.LC784
	movt	r2, #:upper16:.LC785
	movt	r1, #:upper16:.LC784
	mov	r0, r9
	bl	dev_warn
	b	.L14750
.L14753:
	mvn	r5, #11
	b	.L14746
.L14752:
	movw	r0, #:lower16:.LC786
	ldr	r2, [r4, #492]
	movt	r0, #:upper16:.LC786
	ldr	r1, [r4, #1224]
	bl	printk
	movw	r0, #:lower16:.LC787
	mov	r2, r8
	ldr	r1, [r4, #1224]
	movt	r0, #:upper16:.LC787
	bl	printk
	b	.L14746
.L14763:
	.align	2
.L14762:
	.word	.LANCHOR5-1616
	.word	.LANCHOR4-692
	.fnend
	.size	gether_qc_setup_name, .-gether_qc_setup_name
	.align	2
	.global	gether_qc_setup
	.syntax unified
	.arm
	.fpu softvfp
	.type	gether_qc_setup, %function
gether_qc_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r2, #:lower16:.LC788
	movt	r2, #:upper16:.LC788
	b	gether_qc_setup_name
	.fnend
	.size	gether_qc_setup, .-gether_qc_setup
	.section	.text.unlikely
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_function_bind_config, %function
rndis_qc_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, r7, lr}
	.save {r4, r5, r6, r7, lr}
	.pad #28
	sub	sp, sp, #28
	ldr	r4, [r0, #4]
	ldr	r6, .L14774
	cmp	r4, #0
	bne	.L14766
	sub	r2, r6, #8
	movw	r0, #:lower16:.LC789
	mov	r1, r2
	movt	r0, #:upper16:.LC789
	mvn	r5, #21
	bl	printk
	b	.L14765
.L14766:
	ldrb	ip, [r4, #5]	@ zero_extendqisi2
	sub	r6, r6, #8
	movw	r0, #:lower16:.LC790
	ldrb	r3, [r4]	@ zero_extendqisi2
	mov	r7, r1
	mov	r2, r6
	mov	r1, r6
	movt	r0, #:upper16:.LC790
	str	ip, [sp, #16]
	ldrb	ip, [r4, #4]	@ zero_extendqisi2
	str	ip, [sp, #12]
	ldrb	ip, [r4, #3]	@ zero_extendqisi2
	str	ip, [sp, #8]
	ldrb	ip, [r4, #2]	@ zero_extendqisi2
	str	ip, [sp, #4]
	ldrb	ip, [r4, #1]	@ zero_extendqisi2
	str	ip, [sp]
	bl	printk
	ldr	r3, [r7, #24]
	movw	r2, #:lower16:.LC737
	mov	r1, r4
	movt	r2, #:upper16:.LC737
	ldr	r0, [r3]
	bl	gether_qc_setup_name
	subs	r5, r0, #0
	beq	.L14768
	movw	r0, #:lower16:.LC791
	mov	r2, r6
	mov	r1, r6
	movt	r0, #:upper16:.LC791
	bl	printk
	b	.L14765
.L14768:
	ldrb	r3, [r4, #269]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L14769
	movw	r3, #:lower16:.LANCHOR4
	mov	r1, #3
	movt	r3, #:upper16:.LANCHOR4
	mvn	ip, #31
	sub	r2, r3, #2432
	mov	r0, #480
	strb	r1, [r3, #-2434]
	movw	r1, #769
	strb	ip, [r3, #-2427]
	strh	r0, [r2, #-4]	@ movhi
	strh	r1, [r2, #6]	@ movhi
.L14769:
	ldrb	r2, [r4, #12]	@ zero_extendqisi2
	mov	r0, r7
	add	r3, r4, #13
	mov	r1, r4
	str	r2, [sp]
	ldr	r2, [r4, #8]
	bl	rndis_qc_bind_config_vendor
	mov	r5, r0
.L14765:
	mov	r0, r5
	add	sp, sp, #28
	@ sp needed
	pop	{r4, r5, r6, r7, pc}
.L14775:
	.align	2
.L14774:
	.word	.LANCHOR5-1312
	.fnend
	.size	rndis_qc_function_bind_config, .-rndis_qc_function_bind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_function_bind_config, %function
ecm_qc_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, r7, r8, lr}
	.save {r4, r5, r6, r7, r8, lr}
	.pad #24
	sub	sp, sp, #24
	ldr	r4, [r0, #4]
	ldr	r5, .L14787
	cmp	r4, #0
	bne	.L14777
	sub	r2, r5, #8
	movw	r0, #:lower16:.LC792
	mov	r1, r2
	movt	r0, #:upper16:.LC792
	mvn	r6, #21
	bl	printk
	b	.L14776
.L14777:
	ldrb	ip, [r4, #5]	@ zero_extendqisi2
	sub	r5, r5, #8
	movw	r0, #:lower16:.LC790
	ldrb	r3, [r4]	@ zero_extendqisi2
	mov	r2, r5
	mov	r8, r1
	movt	r0, #:upper16:.LC790
	mov	r1, r5
	str	ip, [sp, #16]
	ldrb	ip, [r4, #4]	@ zero_extendqisi2
	str	ip, [sp, #12]
	ldrb	ip, [r4, #3]	@ zero_extendqisi2
	str	ip, [sp, #8]
	ldrb	ip, [r4, #2]	@ zero_extendqisi2
	str	ip, [sp, #4]
	ldrb	ip, [r4, #1]	@ zero_extendqisi2
	str	ip, [sp]
	bl	printk
	ldr	r0, .L14787+4
	bl	strim
	mov	r7, r0
	movw	r0, #:lower16:.LC358
	movt	r0, #:upper16:.LC358
	mov	r1, r7
	bl	strcmp
	cmp	r0, #0
	beq	.L14779
	ldr	r3, [r8, #24]
	movw	r2, #:lower16:.LC793
	mov	r1, r4
	movt	r2, #:upper16:.LC793
	ldr	r0, [r3]
	bl	gether_qc_setup_name
	subs	r6, r0, #0
	beq	.L14779
	movw	r0, #:lower16:.LC791
	mov	r2, r5
	mov	r1, r5
	movt	r0, #:upper16:.LC791
	bl	printk
	b	.L14776
.L14779:
	mov	r2, r7
	mov	r1, r4
	mov	r0, r8
	add	sp, sp, #24
	@ sp needed
	pop	{r4, r5, r6, r7, r8, lr}
	b	ecm_qc_bind_config
.L14776:
	mov	r0, r6
	add	sp, sp, #24
	@ sp needed
	pop	{r4, r5, r6, r7, r8, pc}
.L14788:
	.align	2
.L14787:
	.word	.LANCHOR5-1280
	.word	.LANCHOR0+1612
	.fnend
	.size	ecm_qc_function_bind_config, .-ecm_qc_function_bind_config
	.text
	.align	2
	.global	gether_qc_cleanup_name
	.syntax unified
	.arm
	.fpu softvfp
	.type	gether_qc_cleanup_name, %function
gether_qc_cleanup_name:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	mov	r1, r0
	movw	r0, #:lower16:init_net
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movt	r0, #:upper16:init_net
	str	lr, [sp, #4]
	bl	dev_get_by_name
	subs	r4, r0, #0
	beq	.L14789
	.syntax divided
@ 17 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/irqflags.h" 1
		mrs	ip, cpsr	@ arch_local_irq_save
	cpsid	i
@ 0 "" 2
@ 40 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/percpu.h" 1
	mrc p15, 0, r1, c13, c0, 4
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r3, [r4, #640]
	ldr	r2, [r3, r1]
	sub	r2, r2, #1
	str	r2, [r3, r1]
	.syntax divided
@ 142 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/irqflags.h" 1
		msr	cpsr_c, ip	@ local_irq_restore
@ 0 "" 2
	.arm
	.syntax unified
	bl	unregister_netdev
	mov	r0, r4
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	free_netdev
.L14789:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	gether_qc_cleanup_name, .-gether_qc_cleanup_name
	.align	2
	.global	gether_qc_connect_name
	.syntax unified
	.arm
	.fpu softvfp
	.type	gether_qc_connect_name, %function
gether_qc_connect_name:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r0
	movw	r0, #:lower16:init_net
	movt	r0, #:upper16:init_net
	strd	r6, [sp, #8]
	mov	r6, r2
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	dev_get_by_name
	subs	r4, r0, #0
	beq	.L14795
	.syntax divided
@ 17 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/irqflags.h" 1
		mrs	r0, cpsr	@ arch_local_irq_save
	cpsid	i
@ 0 "" 2
@ 40 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/percpu.h" 1
	mrc p15, 0, r2, c13, c0, 4
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r3, [r4, #640]
	ldr	r1, [r3, r2]
	sub	r1, r1, #1
	str	r1, [r3, r2]
	.syntax divided
@ 142 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/irqflags.h" 1
		msr	cpsr_c, r0	@ local_irq_restore
@ 0 "" 2
	.arm
	.syntax unified
	adds	r7, r4, #1216
	beq	.L14795
	ldrb	r3, [r5, #88]	@ zero_extendqisi2
	mov	r0, r7
	strb	r3, [r4, #1236]
	ldr	r3, [r5, #92]
	str	r3, [r4, #1232]
	bl	_raw_spin_lock
	str	r5, [r4, #1220]
	str	r7, [r5, #76]
	ldr	r3, [r4, #1224]
	ldr	r3, [r3, #160]
	tst	r3, #1
	beq	.L14796
	ldr	r3, [r5, #104]
	cmp	r3, #0
	beq	.L14797
.L14814:
	mov	r0, r5
	blx	r3
.L14797:
	mov	r0, r7
	bl	_raw_spin_unlock
	cmp	r6, #0
	ldr	r0, [r4, #1224]
	bne	.L14798
.L14792:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L14796:
	ldr	r3, [r5, #108]
	cmp	r3, #0
	bne	.L14814
	b	.L14797
.L14795:
	mvn	r0, #21
	b	.L14792
.L14798:
	bl	netif_carrier_on
	ldr	r0, [r4, #1224]
	ldr	r3, [r0, #160]
	tst	r3, #1
	beq	.L14792
	ldr	r5, [r0, #576]
	mov	r0, #0
	add	r1, r5, #80
	bl	_test_and_clear_bit
	cmp	r0, #0
	bne	.L14800
.L14815:
	ldr	r0, [r4, #1224]
	b	.L14792
.L14800:
	ldr	r0, [r5, #4]
	bl	__netif_schedule
	b	.L14815
	.fnend
	.size	gether_qc_connect_name, .-gether_qc_connect_name
	.align	2
	.global	gether_qc_disconnect_name
	.syntax unified
	.arm
	.fpu softvfp
	.type	gether_qc_disconnect_name, %function
gether_qc_disconnect_name:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r0
	movw	r0, #:lower16:init_net
	movt	r0, #:upper16:init_net
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	dev_get_by_name
	subs	r4, r0, #0
	beq	.L14816
	.syntax divided
@ 17 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/irqflags.h" 1
		mrs	r0, cpsr	@ arch_local_irq_save
	cpsid	i
@ 0 "" 2
@ 40 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/percpu.h" 1
	mrc p15, 0, r1, c13, c0, 4
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r3, [r4, #640]
	ldr	r2, [r3, r1]
	sub	r2, r2, #1
	str	r2, [r3, r1]
	.syntax divided
@ 142 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/irqflags.h" 1
		msr	cpsr_c, r0	@ local_irq_restore
@ 0 "" 2
	.arm
	.syntax unified
	adds	r6, r4, #1216
	beq	.L14816
	ldr	r3, [r4, #1224]
	ldr	r1, [r3, #576]
	cmp	r1, #0
	beq	.L14826
	add	r1, r1, #80
	mov	r0, #0
	bl	_set_bit
.L14821:
	ldr	r0, [r4, #1224]
	bl	netif_carrier_off
	mov	r0, r6
	bl	_raw_spin_lock
	mov	r3, #0
	mov	r0, r6
	str	r3, [r4, #1220]
	str	r3, [r5, #76]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock
.L14816:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L14826:
	movw	r0, #:lower16:.LC82
	movw	r1, #1847
	movt	r0, #:upper16:.LC82
	bl	warn_slowpath_null
	movw	r0, #:lower16:.LC83
	movt	r0, #:upper16:.LC83
	bl	printk
	b	.L14821
	.fnend
	.size	gether_qc_disconnect_name, .-gether_qc_disconnect_name
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_disable, %function
ecm_qc_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r3, [r0, #80]
	ldr	r3, [r3]
	cmp	r3, #0
	beq	.L14829
	add	r0, r0, #148
	bl	bam_data_disconnect.constprop.0
	ldr	r3, [r4, #116]
	cmp	r3, #7
	bne	.L14839
.L14829:
	ldr	r0, [r4, #136]
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L14827
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [r4, #136]
	mov	r3, #0
	str	r3, [r2]
	ldr	r2, [r4, #136]
	str	r3, [r2, #28]
.L14827:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L14839:
	movw	r1, #:lower16:.LC457
	mov	r0, r4
	movt	r1, #:upper16:.LC457
	bl	gether_qc_disconnect_name
	b	.L14829
	.fnend
	.size	ecm_qc_disable, .-ecm_qc_disable
	.section	.rodata.str1.4
	.align	2
.LC796:
	.ascii	"<3>%s: bam_data_connect failed: err:%d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_set_alt, %function
ecm_qc_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	mov	r4, r0
	mov	r5, r2
	strd	r6, [sp, #8]
	str	lr, [sp, #16]
	ldrb	r0, [r0, #112]	@ zero_extendqisi2
	.pad #12
	sub	sp, sp, #12
	ldr	r3, [r4, #20]
	cmp	r0, r1
	ldr	r6, [r3, #24]
	beq	.L14881
	ldrb	r3, [r4, #113]	@ zero_extendqisi2
	cmp	r2, #1
	cmpls	r3, r1
	bne	.L14880
	ldr	r2, [r4, #80]
	ldr	r3, [r2]
	cmp	r3, #0
	beq	.L14848
	add	r0, r4, #148
	bl	bam_data_disconnect.constprop.0
	ldr	r3, [r4, #116]
	cmp	r3, #7
	bne	.L14849
	ldr	r2, [r4, #80]
.L14848:
	ldr	r3, [r2, #28]
	cmp	r3, #0
	beq	.L14850
	ldr	r3, [r4, #84]
	ldr	r3, [r3, #28]
	cmp	r3, #0
	beq	.L14850
.L14851:
	cmp	r5, #1
	bne	.L14879
	ldr	r3, [r6]
	movw	r0, #:lower16:.LC274
	movt	r0, #:upper16:.LC274
	ldr	r1, [r3, #28]
	bl	strcmp
	ldr	r3, [r4, #116]
	subs	r0, r0, #0
	mov	r2, #15
	movne	r0, #1
	strb	r0, [r4, #88]
	cmp	r3, #7
	strh	r2, [r4, #90]	@ movhi
	beq	.L14856
	movw	r1, #:lower16:.LC457
	mov	r2, r5
	movt	r1, #:upper16:.LC457
	mov	r0, r4
	bl	gether_qc_connect_name
	cmn	r0, #4096
	bhi	.L14840
	ldr	r2, [r4, #20]
	ldr	r3, [r4, #116]
	ldr	r2, [r2, #24]
	cmp	r3, #7
	moveq	r7, #2
	movne	r7, #0
	ldr	r6, [r2]
.L14858:
	ldr	ip, [r4, #80]
	mov	r3, #0
	mov	r1, r7
	ldr	r0, [r4, #84]
	str	r2, [r4, #148]
	mov	r2, r3
	str	r4, [r4, #152]
	str	ip, [r4, #156]
	str	r0, [r4, #160]
	ldr	r0, [r6, #28]
	bl	usb_bam_get_connection_idx
	mov	r5, r0
	mov	r1, r7
	ldr	r0, [r6, #28]
	mov	r3, #0
	mov	r2, #1
	bl	usb_bam_get_connection_idx
	mov	ip, #0
	uxtb	r3, r0
	ldr	r1, [r4, #116]
	uxtb	r2, r5
	add	r0, r4, #148
	str	ip, [sp]
	bl	bam_data_connect.constprop.0
	subs	r3, r0, #0
	bne	.L14882
	ldr	r6, [r4, #140]
	movw	r2, #257
	strh	r2, [r4, #144]	@ movhi
	cmp	r6, #0
	beq	.L14860
	ldr	r0, [r6]
	mov	lr, #8
	mov	r1, #2
	mvn	ip, #94
	mov	r2, #32
	strb	r3, [r0, #1]
	ldrb	r5, [r4, #145]	@ zero_extendqisi2
	strh	r5, [r0, #2]	@ unaligned
	strb	r3, [r0, #6]
	strb	r3, [r0, #7]
	str	lr, [r6, #4]
	strb	r1, [r4, #144]
	mov	r1, r6
	strb	ip, [r0]
	ldrb	ip, [r4, #112]	@ zero_extendqisi2
	strh	ip, [r0, #4]	@ unaligned
	ldr	r0, [r4, #136]
	str	r3, [r4, #140]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	bge	.L14879
	mov	r3, #1
	str	r6, [r4, #140]
	strb	r3, [r4, #144]
	b	.L14862
.L14879:
	ldr	r6, [r4, #140]
	mov	r3, #1
	strb	r3, [r4, #144]
	cmp	r6, #0
	beq	.L14863
.L14862:
	ldr	r3, [r6]
	mov	r5, #0
	mov	r1, #8
	mov	ip, #2
	mvn	r0, #94
	mov	r2, #32
	strb	r5, [r3, #1]
	ldrb	lr, [r4, #145]	@ zero_extendqisi2
	strh	lr, [r3, #2]	@ unaligned
	strb	r5, [r3, #6]
	strb	r5, [r3, #7]
	str	r1, [r6, #4]
	mov	r1, r6
	strb	ip, [r4, #144]
	strb	r0, [r3]
	ldrb	r0, [r4, #112]	@ zero_extendqisi2
	strh	r0, [r3, #4]	@ unaligned
	ldr	r0, [r4, #136]
	str	r5, [r4, #140]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, r5
	movlt	r0, r5
	strlt	r6, [r4, #140]
	blt	.L14840
.L14863:
	mov	r0, #0
.L14840:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L14850:
	mov	r1, r4
	ldr	r0, [r6]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L14853
	mov	r1, r4
	ldr	r0, [r6]
	ldr	r2, [r4, #84]
	bl	config_ep_by_speed
	cmp	r0, #0
	beq	.L14851
.L14853:
	ldr	r2, [r4, #80]
	mov	r3, #0
	mvn	r0, #21
	str	r3, [r2, #28]
	ldr	r2, [r4, #84]
	str	r3, [r2, #28]
	b	.L14840
.L14881:
	cmp	r2, #0
	bne	.L14880
	ldr	r2, [r4, #136]
	ldr	r3, [r2]
	cmp	r3, #0
	beq	.L14844
	ldr	r3, [r2, #8]
	mov	r0, r2
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [r4, #136]
.L14844:
	ldr	r1, [r2, #28]
	cmp	r1, #0
	beq	.L14883
.L14845:
	ldrh	r3, [r1, #4]	@ unaligned
	cmp	r3, #0
	beq	.L14847
	ldr	r3, [r2, #8]
	mov	r0, r2
	ldr	r3, [r3]
	blx	r3
	ldr	r2, [r4, #136]
.L14847:
	mov	r0, #0
	str	r4, [r2]
	b	.L14840
.L14849:
	movw	r1, #:lower16:.LC457
	mov	r0, r4
	movt	r1, #:upper16:.LC457
	bl	gether_qc_disconnect_name
	ldr	r2, [r4, #80]
	b	.L14848
.L14856:
	ldr	r3, [r4, #20]
	mov	r7, #2
	ldr	r2, [r3, #24]
	ldr	r6, [r2]
	b	.L14858
.L14883:
	mov	r1, r4
	ldr	r0, [r6]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L14880
	ldr	r2, [r4, #136]
	ldr	r1, [r2, #28]
	b	.L14845
.L14860:
	mov	r3, #1
	strb	r3, [r4, #144]
	b	.L14863
.L14882:
	movw	r0, #:lower16:.LC796
	ldr	r1, .L14884
	mov	r2, r3
	movt	r0, #:upper16:.LC796
	bl	printk
.L14880:
	mvn	r0, #21
	b	.L14840
.L14885:
	.align	2
.L14884:
	.word	.LANCHOR5-1260
	.fnend
	.size	ecm_qc_set_alt, .-ecm_qc_set_alt
	.section	.rodata.str1.4
	.align	2
.LC797:
	.ascii	"<6>%s: rndis deactivated\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_disable, %function
rndis_qc_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r0, #148]
	ldr	r3, [r3]
	cmp	r3, #0
	bxeq	lr
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r0
	movw	r0, #:lower16:.LC797
	ldr	r1, .L14908
	movt	r0, #:upper16:.LC797
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	bl	printk
	ldr	r2, [r4, #136]
	cmp	r2, #0
	ble	.L14888
.L14896:
	add	r0, r4, #160
	bl	bam_data_disconnect.constprop.0
	movw	r1, #:lower16:.LC443
	mov	r0, r4
	movt	r1, #:upper16:.LC443
	bl	gether_qc_disconnect_name
	ldr	r0, [r4, #148]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #148]
	mov	r2, #0
	str	r2, [r3]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L14888:
	mov	r5, #60
	ldr	r0, .L14908+4
	movw	r3, #:lower16:.LANCHOR0
	movt	r3, #:upper16:.LANCHOR0
	mov	r1, #0
	mul	r5, r5, r2
	add	r3, r3, r5
	add	r5, r5, r0
	add	r6, r3, #3760
	add	r6, r6, #8
	str	r1, [r3, #3720]
.L14889:
	ldr	r3, [r6]
	ldr	r2, [r3]
.L14893:
	cmp	r3, r5
	beq	.L14896
	ldr	r1, [r3, #16]
	cmp	r1, #0
	bne	.L14894
	ldr	r8, [r3, #8]
	mov	r2, #1
	str	r2, [r3, #16]
	cmp	r8, #0
	beq	.L14896
	ldr	r0, [r6]
	mov	r10, #256
	mov	r9, #512
	ldr	r7, [r0]
.L14890:
	cmp	r5, r0
	beq	.L14889
	cmp	r0, #0
	beq	.L14891
	ldr	r3, [r0, #8]
	cmp	r8, r3
	bne	.L14891
	ldrd	r2, [r0]
	str	r3, [r2, #4]
	str	r2, [r3]
	str	r10, [r0]
	str	r9, [r0, #4]
	bl	kfree
.L14891:
	mov	r0, r7
	ldr	r7, [r7]
	b	.L14890
.L14894:
	mov	r3, r2
	ldr	r2, [r2]
	b	.L14893
.L14909:
	.align	2
.L14908:
	.word	.LANCHOR5-1240
	.word	.LANCHOR0+3768
	.fnend
	.size	rndis_qc_disable, .-rndis_qc_disable
	.section	.rodata.str1.4
	.align	2
.LC798:
	.ascii	"<6>%s: rndis bam connected\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_set_alt, %function
rndis_qc_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldrb	r2, [r0, #112]	@ zero_extendqisi2
	.pad #8
	sub	sp, sp, #8
	ldr	r3, [r0, #20]
	cmp	r2, r1
	ldr	r5, [r3, #24]
	beq	.L14937
	ldrb	r3, [r0, #113]	@ zero_extendqisi2
	cmp	r3, r1
	bne	.L14917
	ldr	r0, [r0, #80]
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L14918
	add	r0, r4, #160
	bl	bam_data_disconnect.constprop.0
	movw	r1, #:lower16:.LC443
	mov	r0, r4
	movt	r1, #:upper16:.LC443
	bl	gether_qc_disconnect_name
	ldr	r0, [r4, #80]
.L14918:
	ldr	r3, [r0, #28]
	cmp	r3, #0
	beq	.L14919
	ldr	ip, [r4, #84]
	ldr	r3, [ip, #28]
	cmp	r3, #0
	beq	.L14919
.L14920:
	ldr	r1, [r4, #20]
	mov	r5, #0
	mov	r3, r5
	mov	r2, r5
	strb	r5, [r4, #88]
	strh	r5, [r4, #90]	@ movhi
	ldr	lr, [r1, #24]
	mov	r1, r5
	ldr	r6, [lr]
	str	lr, [r4, #160]
	str	r4, [r4, #164]
	str	r0, [r4, #168]
	str	ip, [r4, #172]
	ldr	r0, [r6, #28]
	bl	usb_bam_get_connection_idx
	mov	r3, r5
	mov	r1, r5
	mov	r2, #1
	mov	r5, r0
	ldr	r0, [r6, #28]
	bl	usb_bam_get_connection_idx
	mov	r1, #2
	uxtb	r2, r5
	uxtb	r3, r0
	add	r0, r4, #160
	str	r1, [sp]
	mov	r1, #6
	bl	bam_data_connect.constprop.0
	subs	r5, r0, #0
	beq	.L14922
	movw	r0, #:lower16:.LC796
	mov	r2, r5
	ldr	r1, .L14939
	movt	r0, #:upper16:.LC796
	mvn	r5, #21
	bl	printk
	b	.L14910
.L14919:
	mov	r2, r0
	mov	r1, r4
	ldr	r0, [r5]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L14921
	mov	r1, r4
	ldr	r0, [r5]
	ldr	r2, [r4, #84]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L14921
	ldr	r0, [r4, #80]
	ldr	ip, [r4, #84]
	b	.L14920
.L14937:
	ldr	r0, [r0, #148]
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L14912
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #148]
.L14912:
	ldr	r1, [r0, #28]
	cmp	r1, #0
	beq	.L14938
.L14913:
	ldrh	r3, [r1, #4]	@ unaligned
	cmp	r3, #0
	beq	.L14916
	ldr	r3, [r0, #8]
	ldr	r3, [r3]
	blx	r3
	ldr	r0, [r4, #148]
.L14916:
	mov	r5, #0
	str	r4, [r0]
.L14910:
	mov	r0, r5
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L14938:
	mov	r2, r0
	mov	r1, r4
	ldr	r0, [r5]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L14917
	ldr	r0, [r4, #148]
	ldr	r1, [r0, #28]
	b	.L14913
.L14917:
	mvn	r5, #21
	b	.L14910
.L14921:
	ldr	r2, [r4, #80]
	mov	r3, #0
	mvn	r5, #21
	str	r3, [r2, #28]
	ldr	r2, [r4, #84]
	str	r3, [r2, #28]
	b	.L14910
.L14922:
	movw	r0, #:lower16:.LC798
	ldr	r1, .L14939
	movt	r0, #:upper16:.LC798
	bl	printk
	movw	r1, #:lower16:.LC443
	mov	r2, r5
	movt	r1, #:upper16:.LC443
	mov	r0, r4
	bl	gether_qc_connect_name
	cmn	r0, #4096
	movhi	r5, r0
	bhi	.L14910
	ldrb	r1, [r4, #136]	@ zero_extendqisi2
	clz	r3, r0
	lsr	r3, r3, #5
	cmp	r1, #0
	movne	r3, #1
	cmp	r3, #0
	bne	.L14910
	movw	r3, #:lower16:.LANCHOR0
	add	r4, r4, #90
	movt	r3, #:upper16:.LANCHOR0
	str	r5, [r3, #3252]
	str	r5, [r3, #3256]
	str	r4, [r3, #3740]
	str	r0, [r3, #3744]
	b	.L14910
.L14940:
	.align	2
.L14939:
	.word	.LANCHOR5-1220
	.fnend
	.size	rndis_qc_set_alt, .-rndis_qc_set_alt
	.align	2
	.global	pcm_buffer_size
	.syntax unified
	.arm
	.fpu softvfp
	.type	pcm_buffer_size, %function
pcm_buffer_size:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r0, [r0, #380]
	bx	lr
	.fnend
	.size	pcm_buffer_size, .-pcm_buffer_size
	.align	2
	.global	pcm_period_size
	.syntax unified
	.arm
	.fpu softvfp
	.type	pcm_period_size, %function
pcm_period_size:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r0, [r0, #332]
	bx	lr
	.fnend
	.size	pcm_period_size, .-pcm_period_size
	.align	2
	.global	u_audio_clear
	.syntax unified
	.arm
	.fpu softvfp
	.type	u_audio_clear, %function
u_audio_clear:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR0
	mov	r2, #0
	movt	r3, #:upper16:.LANCHOR0
	strb	r2, [r3, #184]
	bx	lr
	.fnend
	.size	u_audio_clear, .-u_audio_clear
	.section	.rodata.str1.4
	.align	2
.LC799:
	.ascii	"<3>%s: unable to open sound control device file: %s"
	.ascii	"\012\000"
	.align	2
.LC800:
	.ascii	"<3>%s: No such PCM playback device: %s\012\000"
	.align	2
.LC801:
	.ascii	"<3>%s: Setting playback HW params failed: err %d\000"
	.align	2
.LC802:
	.ascii	"<3>%s: No such PCM capture device: %s\012\000"
	.align	2
.LC803:
	.ascii	"<3>%s: Setting capture HW params failed: err %d\000"
	.align	2
.LC804:
	.ascii	"<3>%s: Failed to open snd devices\012\000"
	.text
	.align	2
	.global	gaudio_setup
	.syntax unified
	.arm
	.fpu softvfp
	.type	gaudio_setup, %function
gaudio_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	subs	r4, r0, #0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	beq	.L14975
	movw	r6, #:lower16:.LANCHOR4
	mov	r2, #0
	movt	r6, #:upper16:.LANCHOR4
	mov	r1, #2
	ldr	r0, [r6, #-668]
	bl	filp_open
	cmn	r0, #4096
	mov	r5, r0
	str	r0, [r4, #84]
	bhi	.L14976
	mov	r2, #0
	mov	r1, #1
	str	r4, [r4, #80]
	ldr	r0, [r6, #-664]
	bl	filp_open
	cmn	r0, #4096
	str	r0, [r4, #112]
	bhi	.L14977
	movw	r7, #:lower16:kmalloc_caches
	ldr	r2, [r0, #132]
	mov	r3, #2
	movt	r7, #:upper16:kmalloc_caches
	mov	ip, #3
	ldr	r0, [r7, #40]
	ldr	r1, [r2]
	mov	r2, #8000
	str	r4, [r4, #108]
	cmp	r0, #0
	str	r1, [r4, #116]
	str	ip, [r4, #120]
	str	r3, [r4, #124]
	str	r3, [r4, #128]
	str	r2, [r4, #132]
	beq	.L14963
	movw	r1, #32976
	bl	kmem_cache_alloc
	subs	r5, r0, #0
	beq	.L14978
.L14951:
	mov	r0, r5
	bl	_snd_pcm_hw_params_any
	mov	r0, r5
	ldr	r1, [r4, #120]
	bl	_snd_pcm_hw_param_set.constprop.0
	mov	r0, r5
	ldr	r1, [r4, #124]
	bl	_snd_pcm_hw_param_set.constprop.1
	mov	r0, r5
	ldr	r1, [r4, #128]
	bl	_snd_pcm_hw_param_set.constprop.2
	mov	r0, r5
	ldr	r1, [r4, #132]
	bl	_snd_pcm_hw_param_set.constprop.3
	ldr	r3, [r5, #4]
	cmp	r3, #0
	bne	.L14964
	ldr	r3, [r5, #8]
	cmp	r3, #0
	movne	r2, #32
	bne	.L14952
.L14953:
	str	r3, [r4, #120]
	ldr	r3, [r5, #36]
	cmp	r3, #0
	bne	.L14966
	ldr	r3, [r5, #40]
	cmp	r3, #0
	movne	r2, #32
	bne	.L14954
.L14955:
	str	r3, [r4, #124]
	ldr	r3, [r5, #284]
	mov	r0, r5
	str	r3, [r4, #128]
	ldr	r3, [r5, #296]
	str	r3, [r4, #132]
	bl	kfree
	mov	r2, #0
	ldr	r0, [r6, #-660]
	mov	r1, r2
	bl	filp_open
	cmn	r0, #4096
	str	r0, [r4, #140]
	bhi	.L14979
	ldr	r2, [r0, #132]
	mov	lr, #3
	mov	ip, #2
	ldr	r0, [r7, #40]
	mov	r1, #1
	mov	r3, #8000
	ldr	r2, [r2]
	str	r4, [r4, #136]
	cmp	r0, #0
	str	r2, [r4, #144]
	str	lr, [r4, #148]
	str	ip, [r4, #152]
	str	r1, [r4, #156]
	str	r3, [r4, #160]
	beq	.L14968
	movw	r1, #32976
	bl	kmem_cache_alloc
	subs	r5, r0, #0
	beq	.L14980
.L14957:
	mov	r0, r5
	bl	_snd_pcm_hw_params_any
	mov	r0, r5
	ldr	r1, [r4, #148]
	bl	_snd_pcm_hw_param_set.constprop.0
	mov	r0, r5
	ldr	r1, [r4, #152]
	bl	_snd_pcm_hw_param_set.constprop.1
	mov	r0, r5
	ldr	r1, [r4, #156]
	bl	_snd_pcm_hw_param_set.constprop.2
	mov	r0, r5
	ldr	r1, [r4, #160]
	bl	_snd_pcm_hw_param_set.constprop.3
	ldr	r3, [r5, #4]
	cmp	r3, #0
	bne	.L14969
	ldr	r3, [r5, #8]
	cmp	r3, #0
	movne	r2, #32
	bne	.L14958
.L14959:
	str	r3, [r4, #148]
	ldr	r3, [r5, #36]
	cmp	r3, #0
	bne	.L14971
	ldr	r3, [r5, #40]
	cmp	r3, #0
	movne	r2, #32
	bne	.L14960
.L14961:
	str	r3, [r4, #152]
	ldr	r3, [r5, #284]
	mov	r0, r5
	str	r3, [r4, #156]
	ldr	r3, [r5, #296]
	str	r3, [r4, #160]
	bl	kfree
.L14949:
	movw	r3, #:lower16:.LANCHOR0
	movt	r3, #:upper16:.LANCHOR0
	ldr	r5, [r3, #3708]
	cmp	r5, #0
	movne	r5, #0
	streq	r4, [r3, #3708]
.L14944:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L14963:
	mov	r5, #16
	b	.L14951
.L14968:
	mov	r5, #16
	b	.L14957
.L14971:
	mov	r2, #0
.L14960:
	add	r1, r2, #31
	rsb	r2, r3, #0
	and	r3, r3, r2
	.syntax divided
@ 268 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/bitops.h" 1
	clz	r3, r3
@ 0 "" 2
	.arm
	.syntax unified
	sub	r3, r1, r3
	b	.L14961
.L14964:
	mov	r2, #0
.L14952:
	add	r1, r2, #31
	rsb	r2, r3, #0
	and	r3, r3, r2
	.syntax divided
@ 268 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/bitops.h" 1
	clz	r3, r3
@ 0 "" 2
	.arm
	.syntax unified
	sub	r3, r1, r3
	b	.L14953
.L14966:
	mov	r2, #0
.L14954:
	add	r1, r2, #31
	rsb	r2, r3, #0
	and	r3, r3, r2
	.syntax divided
@ 268 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/bitops.h" 1
	clz	r3, r3
@ 0 "" 2
	.arm
	.syntax unified
	sub	r3, r1, r3
	b	.L14955
.L14969:
	mov	r2, #0
.L14958:
	add	r1, r2, #31
	rsb	r2, r3, #0
	and	r3, r3, r2
	.syntax divided
@ 268 "/run/media/tfonda/HDD/android/bacon/android_kernel_oppo_msm8974/arch/arm/include/asm/bitops.h" 1
	clz	r3, r3
@ 0 "" 2
	.arm
	.syntax unified
	sub	r3, r1, r3
	b	.L14959
.L14980:
	movw	r0, #:lower16:.LC803
	mvn	r2, #11
	ldr	r1, .L14981
	movt	r0, #:upper16:.LC803
	mov	r5, r2
	bl	printk
.L14946:
	movw	r0, #:lower16:.LC804
	ldr	r1, .L14981+4
	movt	r0, #:upper16:.LC804
	bl	printk
	b	.L14944
.L14975:
	ldr	r2, .L14981
	movw	r0, #:lower16:.LC368
	mvn	r5, #18
	movt	r0, #:upper16:.LC368
	mov	r1, r2
	bl	printk
	b	.L14946
.L14979:
	movw	r0, #:lower16:.LC802
	ldr	r1, .L14981
	mvn	r5, #21
	movt	r0, #:upper16:.LC802
	ldr	r2, [r6, #-660]
	bl	printk
	mov	r3, #0
	str	r3, [r4, #136]
	str	r3, [r4, #140]
	str	r3, [r4, #144]
	b	.L14946
.L14978:
	movw	r0, #:lower16:.LC801
	mvn	r2, #11
	ldr	r1, .L14981
	movt	r0, #:upper16:.LC801
	mov	r5, r2
	bl	printk
	b	.L14946
.L14977:
	movw	r0, #:lower16:.LC800
	ldr	r1, .L14981
	mvn	r5, #21
	movt	r0, #:upper16:.LC800
	ldr	r2, [r6, #-664]
	bl	printk
	mov	r3, #0
	str	r3, [r4, #112]
	b	.L14946
.L14976:
	movw	r0, #:lower16:.LC799
	ldr	r1, .L14981
	movt	r0, #:upper16:.LC799
	ldr	r2, [r6, #-668]
	bl	printk
	mov	r3, #0
	cmp	r5, #0
	str	r3, [r4, #84]
	beq	.L14949
	b	.L14946
.L14982:
	.align	2
.L14981:
	.word	.LANCHOR5-1196
	.word	.LANCHOR5-1176
	.fnend
	.size	gaudio_setup, .-gaudio_setup
	.align	2
	.global	gaudio_cleanup
	.syntax unified
	.arm
	.fpu softvfp
	.type	gaudio_cleanup, %function
gaudio_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r4, #:lower16:.LANCHOR0
	movt	r4, #:upper16:.LANCHOR0
	str	r6, [sp, #8]
	ldr	r5, [r4, #3708]
	str	lr, [sp, #12]
	cmp	r5, #0
	beq	.L14983
	ldr	r0, [r5, #84]
	cmp	r0, #0
	beq	.L14985
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #12]
	ldr	r1, [r3, #716]
	bl	filp_close
.L14985:
	ldr	r0, [r5, #112]
	cmp	r0, #0
	beq	.L14986
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #12]
	ldr	r1, [r3, #716]
	bl	filp_close
.L14986:
	ldr	r0, [r5, #140]
	cmp	r0, #0
	beq	.L14987
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #12]
	ldr	r1, [r3, #716]
	bl	filp_close
.L14987:
	mov	r3, #0
	str	r3, [r4, #3708]
.L14983:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	gaudio_cleanup, .-gaudio_cleanup
	.align	2
	.global	control_selector_init
	.syntax unified
	.arm
	.fpu softvfp
	.type	control_selector_init, %function
control_selector_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR4
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	movw	r2, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR4
	strd	r6, [sp, #8]
	add	r6, r0, #244
	sub	r4, r3, #592
	str	lr, [sp, #16]
	movt	r2, #:upper16:.LANCHOR1
	str	r6, [r3, #-656]
	add	ip, r2, #3696
	add	r1, r2, #3664
	str	r4, [r3, #-644]
	sub	r5, r3, #624
	sub	lr, r3, #656
	str	ip, [r2, #3664]
	movw	r7, #65472
	str	r4, [r3, #-548]
	sub	r4, r3, #548
	str	r6, [r3, #-620]
	sub	r6, r3, #648
	str	r5, [r0, #244]
	str	r4, [r3, #-648]
	str	r4, [r3, #-588]
	sub	r4, r3, #504
	str	lr, [r0, #248]
	str	r6, [r3, #-592]
	str	r4, [r3, #-612]
	str	r6, [r3, #-544]
	sub	r6, r3, #616
	str	r1, [r0, #252]
	str	r4, [r3, #-460]
	sub	r4, r3, #460
	str	ip, [r0, #256]
	str	r6, [r3, #-504]
	str	r4, [r3, #-616]
	str	r6, [r3, #-456]
	add	r6, r0, #252
	movw	r0, #58272
	str	r4, [r3, #-500]
	add	r4, ip, #8
	movw	ip, #65520
	str	r5, [r3, #-652]
	add	r5, r1, #8
	str	lr, [r3, #-624]
	sub	lr, r3, #416
	str	r7, [r3, #-528]
	str	r0, [r3, #-524]
	str	ip, [r3, #-520]
	str	r0, [r3, #-436]
	mov	r0, #48
	str	ip, [r3, #-432]
	sub	ip, r3, #372
	str	r0, [r3, #-516]
	str	r7, [r3, #-440]
	str	r0, [r3, #-428]
	mov	r0, #0
	str	r6, [r2, #3668]
	str	r5, [r3, #-416]
	str	r5, [r3, #-412]
	str	r4, [r3, #-372]
	str	r4, [r3, #-368]
	str	lr, [r2, #3672]
	str	lr, [r2, #3676]
	str	r6, [r2, #3696]
	str	r1, [r2, #3700]
	str	ip, [r2, #3704]
	str	ip, [r2, #3708]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
	.fnend
	.size	control_selector_init, .-control_selector_init
	.section	.rodata.str1.4
	.align	2
.LC805:
	.ascii	"audio\000"
	.align	2
.LC806:
	.ascii	"<3>%s: %s: Failed to add usb audio function, err = "
	.ascii	"%d\000"
	.text
	.align	2
	.global	audio_bind_config
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_bind_config, %function
audio_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r0
	movt	r3, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r0, [r3, #36]
	cmp	r0, #0
	beq	.L15011
	movw	r1, #32976
	bl	kmem_cache_alloc
	subs	r4, r0, #0
	beq	.L15029
.L15004:
	ldr	r0, .L15032
	movw	r1, #:lower16:.LC805
	movw	r3, #:lower16:f_audio_bind
	ldr	ip, [r5, #24]
	movt	r1, #:upper16:.LC805
	movw	r2, #:lower16:f_audio_unbind
	movt	r3, #:upper16:f_audio_bind
	movt	r2, #:upper16:f_audio_unbind
	add	lr, r4, #196
	ldr	r6, [ip]
	str	r1, [r4]
	movw	r1, #:lower16:f_audio_get_alt
	str	r0, [r4, #4]
	movw	r0, #:lower16:f_audio_set_alt
	movt	r1, #:upper16:f_audio_get_alt
	movt	r0, #:upper16:f_audio_set_alt
	str	r3, [r4, #24]
	movw	r3, #:lower16:f_audio_setup
	str	r2, [r4, #28]
	movw	r2, #:lower16:f_audio_disable
	mov	ip, #0
	movt	r3, #:upper16:f_audio_setup
	movt	r2, #:upper16:f_audio_disable
	strd	r0, [r4, #32]
	add	r1, r4, #228
	mov	r0, r4
	strd	r2, [r4, #40]
	str	r6, [r4, #76]
	str	ip, [r4, #172]
	str	lr, [r4, #196]
	str	lr, [r4, #200]
	str	ip, [r4, #204]
	str	r1, [r4, #228]
	str	r1, [r4, #232]
	bl	control_selector_init
	movw	r2, #:lower16:f_audio_playback_work
	movw	r3, #:lower16:f_audio_capture_work
	movt	r2, #:upper16:f_audio_playback_work
	mov	r1, #2560
	add	r0, r4, #184
	movt	r3, #:upper16:f_audio_capture_work
	str	r1, [r4, #180]
	str	r2, [r4, #192]
	add	r2, r4, #216
	str	r0, [r4, #184]
	str	r0, [r4, #188]
	mov	r0, r4
	str	r1, [r4, #212]
	str	r2, [r4, #216]
	str	r2, [r4, #220]
	str	r3, [r4, #224]
	bl	gaudio_setup
	subs	r6, r0, #0
	blt	.L15030
	mov	r0, r5
	mov	r1, r4
	bl	usb_add_function
	subs	r6, r0, #0
	bne	.L15031
.L15003:
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L15011:
	mov	r4, #16
	b	.L15004
.L15030:
	movw	r5, #:lower16:.LANCHOR0
	movt	r5, #:upper16:.LANCHOR0
	ldr	r7, [r5, #3708]
	cmp	r7, #0
	beq	.L15007
	ldr	r0, [r7, #84]
	cmp	r0, #0
	beq	.L15008
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #12]
	ldr	r1, [r3, #716]
	bl	filp_close
.L15008:
	ldr	r0, [r7, #112]
	cmp	r0, #0
	beq	.L15009
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #12]
	ldr	r1, [r3, #716]
	bl	filp_close
.L15009:
	ldr	r0, [r7, #140]
	cmp	r0, #0
	beq	.L15010
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #12]
	ldr	r1, [r3, #716]
	bl	filp_close
.L15010:
	mov	r3, #0
	str	r3, [r5, #3708]
.L15007:
	mov	r0, r4
	bl	kfree
	b	.L15003
.L15029:
	mvn	r6, #11
	b	.L15003
.L15031:
	ldr	r2, .L15032+4
	movw	r0, #:lower16:.LC806
	mov	r3, r6
	movt	r0, #:upper16:.LC806
	mov	r1, r2
	bl	printk
	b	.L15007
.L15033:
	.align	2
.L15032:
	.word	.LANCHOR4-328
	.word	.LANCHOR5-1160
	.fnend
	.size	audio_bind_config, .-audio_bind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_function_bind_config, %function
audio_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, r1
	b	audio_bind_config
	.fnend
	.size	audio_function_bind_config, .-audio_function_bind_config
	.section	.rodata.str1.4
	.align	2
.LC807:
	.ascii	"cdc_network\000"
	.text
	.align	2
	.global	ncm_bind_config
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_bind_config, %function
ncm_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	mov	r6, r0
	movw	r0, #:lower16:.LC267
	strd	r8, [sp, #16]
	movt	r0, #:upper16:.LC267
	str	lr, [sp, #24]
	ldr	r8, [r6, #24]
	.pad #28
	sub	sp, sp, #28
	ldr	r3, [r8]
	ldr	r4, [r3, #28]
	mov	r1, r4
	bl	strcmp
	cmp	r0, #0
	beq	.L15042
	movw	r0, #:lower16:.LC270
	mov	r1, r4
	movt	r0, #:upper16:.LC270
	bl	strcmp
	cmp	r0, #0
	cmpne	r5, #0
	beq	.L15042
	movw	r7, #:lower16:.LANCHOR1
	movt	r7, #:upper16:.LANCHOR1
	ldrb	r3, [r7, #1672]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L15037
	ldrb	r3, [r8, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L15039
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r8, #48]
	ldr	r2, [r6, #24]
	strb	r3, [r7, #1672]
	strb	r3, [r7, #3820]
	ldrb	r3, [r2, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L15039
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r2, #48]
	ldr	r1, [r6, #24]
	strb	r3, [r7, #1688]
	strb	r3, [r7, #3840]
	strb	r3, [r7, #3852]
	ldrb	r3, [r1, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L15039
	add	r3, r3, #1
	movw	r2, #:lower16:.LANCHOR4
	uxtb	r3, r3
	movt	r2, #:upper16:.LANCHOR4
	strb	r3, [r1, #48]
	ldr	r1, [r6, #24]
	strb	r3, [r2, #-317]
	strb	r3, [r7, #1680]
	ldrb	r3, [r1, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L15039
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r1, #48]
	strb	r3, [r7, #1696]
	strb	r3, [r7, #3811]
.L15037:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L15043
	movw	r1, #32976
	bl	kmem_cache_alloc
	subs	r4, r0, #0
	beq	.L15049
.L15040:
	ldrb	r3, [r5, #5]	@ zero_extendqisi2
	add	r8, r4, #142
	movw	r2, #:lower16:.LC750
	ldrb	r9, [r5, #4]	@ zero_extendqisi2
	movt	r2, #:upper16:.LC750
	mov	r0, r8
	ldrb	lr, [r5, #3]	@ zero_extendqisi2
	ldrb	r1, [r5, #2]	@ zero_extendqisi2
	str	r3, [sp, #16]
	ldrb	ip, [r5, #1]	@ zero_extendqisi2
	ldrb	r3, [r5]	@ zero_extendqisi2
	str	r9, [sp, #12]
	mov	r9, #0
	str	ip, [sp]
	stmib	sp, {r1, lr}
	mov	r1, #14
	bl	snprintf
	movw	r2, #:lower16:ncm_bind
	ldr	r1, .L15050
	movw	ip, #:lower16:ncm_set_alt
	movt	r2, #:upper16:ncm_bind
	movt	ip, #:upper16:ncm_set_alt
	ldr	r5, [r7, #28]
	ldr	lr, .L15050+4
	movw	r3, #:lower16:.LC807
	mov	r0, r6
	str	r2, [r4, #24]
	movw	r2, #:lower16:ncm_unbind
	movt	r3, #:upper16:.LC807
	movt	r2, #:upper16:ncm_unbind
	str	r8, [r7, #1684]
	str	r1, [r4, #168]
	movw	r1, #:lower16:ncm_get_alt
	str	ip, [r4, #32]
	movw	ip, #:lower16:ncm_disable
	movt	r1, #:upper16:ncm_get_alt
	movt	ip, #:upper16:ncm_disable
	stm	r4, {r3, lr}
	str	r2, [r4, #28]
	movw	r2, #:lower16:ncm_setup
	movt	r2, #:upper16:ncm_setup
	str	r1, [r4, #36]
	movw	r1, #:lower16:ncm_wrap_ntb
	str	ip, [r4, #40]
	mov	ip, #15
	movt	r1, #:upper16:ncm_wrap_ntb
	str	r2, [r4, #44]
	movw	r2, #:lower16:ncm_unwrap_ntb
	movt	r2, #:upper16:ncm_unwrap_ntb
	strh	ip, [r4, #90]	@ movhi
	mov	ip, #1
	str	r5, [r4, #100]
	mov	r5, #2048
	str	r9, [r4, #92]
	strb	ip, [r4, #96]
	str	r5, [r4, #104]
	str	r1, [r4, #120]
	mov	r1, r4
	str	r2, [r4, #124]
	strb	r9, [r4, #172]
	str	r9, [r4, #176]
	bl	usb_add_function
	subs	r5, r0, #0
	beq	.L15035
	mov	r0, r4
	str	r9, [r7, #1684]
	bl	kfree
	b	.L15035
.L15042:
	mvn	r5, #21
.L15035:
	mov	r0, r5
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L15043:
	mov	r4, #16
	b	.L15040
.L15039:
	mvn	r5, #18
	b	.L15035
.L15049:
	mvn	r5, #11
	b	.L15035
.L15051:
	.align	2
.L15050:
	.word	.LANCHOR1+48
	.word	.LANCHOR4-304
	.fnend
	.size	ncm_bind_config, .-ncm_bind_config
	.section	.rodata.str1.4
	.align	2
.LC808:
	.ascii	"<3>%s: %s: ncm config is null\012\000"
	.align	2
.LC809:
	.ascii	"ncm\000"
	.align	2
.LC810:
	.ascii	"<3>%s: %s: gether setup failed err:%d\012\000"
	.align	2
.LC811:
	.ascii	"<3>%s: %s: ncm bind config failed err:%d\000"
	.section	.text.unlikely
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_function_bind_config, %function
ncm_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, r7, lr}
	.save {r4, r5, r6, r7, lr}
	.pad #28
	sub	sp, sp, #28
	ldr	r6, [r0, #4]
	ldr	r5, .L15060
	cmp	r6, #0
	bne	.L15053
	sub	r2, r5, #4
	movw	r0, #:lower16:.LC808
	mov	r1, r2
	movt	r0, #:upper16:.LC808
	mvn	r4, #21
	bl	printk
	b	.L15052
.L15053:
	ldrb	ip, [r6, #5]	@ zero_extendqisi2
	sub	r5, r5, #4
	movw	r0, #:lower16:.LC790
	ldrb	r3, [r6]	@ zero_extendqisi2
	mov	r7, r1
	mov	r2, r5
	mov	r1, r5
	movt	r0, #:upper16:.LC790
	str	ip, [sp, #16]
	ldrb	ip, [r6, #4]	@ zero_extendqisi2
	str	ip, [sp, #12]
	ldrb	ip, [r6, #3]	@ zero_extendqisi2
	str	ip, [sp, #8]
	ldrb	ip, [r6, #2]	@ zero_extendqisi2
	str	ip, [sp, #4]
	ldrb	ip, [r6, #1]	@ zero_extendqisi2
	str	ip, [sp]
	bl	printk
	ldr	r3, [r7, #24]
	movw	r2, #:lower16:.LC809
	mov	r1, r6
	movt	r2, #:upper16:.LC809
	ldr	r0, [r3]
	bl	gether_setup_name
	subs	r4, r0, #0
	beq	.L15055
	movw	r0, #:lower16:.LC810
	mov	r3, r4
	mov	r2, r5
	mov	r1, r5
	movt	r0, #:upper16:.LC810
	bl	printk
	b	.L15052
.L15055:
	mov	r1, r6
	mov	r0, r7
	bl	ncm_bind_config
	subs	r4, r0, #0
	beq	.L15052
	movw	r0, #:lower16:.LC811
	mov	r3, r4
	mov	r2, r5
	mov	r1, r5
	movt	r0, #:upper16:.LC811
	bl	printk
	bl	gether_cleanup
.L15052:
	mov	r0, r4
	add	sp, sp, #28
	@ sp needed
	pop	{r4, r5, r6, r7, pc}
.L15061:
	.align	2
.L15060:
	.word	.LANCHOR5-1136
	.fnend
	.size	ncm_function_bind_config, .-ncm_function_bind_config
	.section	.rodata.str1.4
	.align	2
.LC812:
	.ascii	"SMUX_CONNECTED\000"
	.align	2
.LC813:
	.ascii	"SMUX_DISCONNECTED\000"
	.align	2
.LC814:
	.ascii	"SMUX_READ_DONE\000"
	.align	2
.LC815:
	.ascii	"SMUX_READ_FAIL\000"
	.align	2
.LC816:
	.ascii	"SMUX_WRITE_DONE\000"
	.align	2
.LC817:
	.ascii	"SMUX_WRITE_FAIL\000"
	.align	2
.LC818:
	.ascii	"SMUX_TIOCM_UPDATE\000"
	.align	2
.LC819:
	.ascii	"SMUX_LOW_WM_HIT\000"
	.align	2
.LC820:
	.ascii	"SMUX_HIGH_WM_HIT\000"
	.align	2
.LC821:
	.ascii	"RNDIS_UNINITIALIZED\000"
	.align	2
.LC822:
	.ascii	"RNDIS_INITIALIZED\000"
	.align	2
.LC823:
	.ascii	"RNDIS_DATA_INITIALIZED\000"
	.align	2
.LC824:
	.ascii	"NONE\000"
	.align	2
.LC825:
	.ascii	"remote_wakeup\000"
	.align	2
.LC826:
	.ascii	"state\000"
	.align	2
.LC827:
	.ascii	"pm_qos\000"
	.align	2
.LC828:
	.ascii	"enable\000"
	.align	2
.LC829:
	.ascii	"functions\000"
	.align	2
.LC830:
	.ascii	"iSerial\000"
	.align	2
.LC831:
	.ascii	"iProduct\000"
	.align	2
.LC832:
	.ascii	"iManufacturer\000"
	.align	2
.LC833:
	.ascii	"bDeviceProtocol\000"
	.align	2
.LC834:
	.ascii	"bDeviceSubClass\000"
	.align	2
.LC835:
	.ascii	"bDeviceClass\000"
	.align	2
.LC836:
	.ascii	"bcdDevice\000"
	.align	2
.LC837:
	.ascii	"idProduct\000"
	.align	2
.LC838:
	.ascii	"idVendor\000"
	.align	2
.LC839:
	.ascii	"midi\000"
	.align	2
.LC840:
	.ascii	"alsa\000"
	.align	2
.LC841:
	.ascii	"uasp\000"
	.align	2
.LC842:
	.ascii	"pcm\000"
	.align	2
.LC843:
	.ascii	"mass_storage\000"
	.align	2
.LC844:
	.ascii	"inquiry_string\000"
	.align	2
.LC845:
	.ascii	"rndis_qc\000"
	.align	2
.LC846:
	.ascii	"max_pkt_per_xfer\000"
	.align	2
.LC847:
	.ascii	"vendorID\000"
	.align	2
.LC848:
	.ascii	"ethaddr\000"
	.align	2
.LC849:
	.ascii	"wceis\000"
	.align	2
.LC850:
	.ascii	"manufacturer\000"
	.align	2
.LC851:
	.ascii	"ptp\000"
	.align	2
.LC852:
	.ascii	"serial\000"
	.align	2
.LC853:
	.ascii	"transport_names\000"
	.align	2
.LC854:
	.ascii	"transports\000"
	.align	2
.LC855:
	.ascii	"diag\000"
	.align	2
.LC856:
	.ascii	"clients\000"
	.align	2
.LC857:
	.ascii	"mbim_transports\000"
	.align	2
.LC858:
	.ascii	"ecm_qc\000"
	.align	2
.LC859:
	.ascii	"ecm_transports\000"
	.align	2
.LC860:
	.ascii	"ecm_ethaddr\000"
	.align	2
.LC861:
	.ascii	"ncm_ethaddr\000"
	.align	2
.LC862:
	.ascii	"rmnet_smd\000"
	.align	2
.LC863:
	.ascii	"acm\000"
	.align	2
.LC864:
	.ascii	"acm_transports\000"
	.align	2
.LC865:
	.ascii	"aliases\000"
	.global	diag_dload
	.align	2
.LC866:
	.ascii	"version\000"
	.align	2
.LC867:
	.ascii	"1.0\000"
	.align	2
.LC868:
	.ascii	"CDC Network Control Model (NCM)\000"
	.align	2
.LC869:
	.ascii	"CDC Network Data\000"
	.align	2
.LC870:
	.ascii	"CDC NCM\000"
	.align	2
.LC871:
	.ascii	"Microphone Iso-IN Endpoint Control\000"
	.align	2
.LC872:
	.ascii	"Microphone Sampling Frequency Control\000"
	.align	2
.LC873:
	.ascii	"Speaker Iso-out Endpoint Control\000"
	.align	2
.LC874:
	.ascii	"Speaker Sampling Frequency Control\000"
	.align	2
.LC875:
	.ascii	"Microphone Feature Unit Controls\000"
	.align	2
.LC876:
	.ascii	"Microphone Volume Control\000"
	.align	2
.LC877:
	.ascii	"Microphone Mute Control\000"
	.align	2
.LC878:
	.ascii	"Speaker Function Unit Controls\000"
	.align	2
.LC879:
	.ascii	"Speaker Volume Control\000"
	.align	2
.LC880:
	.ascii	"Speaker Mute Control\000"
	.global	speaker_output_terminal_desc
	.global	speaker_input_terminal_desc
	.global	uac1_ac_header_desc
	.global	uac1_ac_interface_desc
	.align	2
.LC881:
	.ascii	"/dev/snd/controlC0\000"
	.align	2
.LC882:
	.ascii	"/dev/snd/pcmC0D6c\000"
	.align	2
.LC883:
	.ascii	"/dev/snd/pcmC0D5p\000"
	.align	2
.LC884:
	.ascii	"gadget\000"
	.align	2
.LC885:
	.ascii	"android_rndis_qc\000"
	.global	_rndis_qc
	.align	2
.LC886:
	.ascii	"RNDIS Communications Control\000"
	.align	2
.LC887:
	.ascii	"RNDIS Ethernet Data\000"
	.align	2
.LC888:
	.ascii	"RNDIS\000"
	.align	2
.LC889:
	.ascii	"CDC Ethernet Control Model (ECM)\000"
	.align	2
.LC890:
	.ascii	"CDC Ethernet Data\000"
	.align	2
.LC891:
	.ascii	"CDC ECM\000"
	.global	bam2bam_data_ports
	.align	2
.LC892:
	.ascii	"android_mbim\000"
	.align	2
.LC893:
	.ascii	"MBIM Control\000"
	.align	2
.LC894:
	.ascii	"MBIM Data\000"
	.global	rndis_ul_max_xfer_size_rcvd
	.global	rndis_ul_max_pkt_per_xfer_rcvd
	.align	2
.LC895:
	.ascii	"USB accessory\000"
	.align	2
.LC896:
	.ascii	"usb_accessory\000"
	.align	2
.LC897:
	.ascii	"Android Accessory Interface\000"
	.global	mtp_ext_config_desc
	.align	2
.LC898:
	.ascii	"MTP\000"
	.global	mtp_tx_reqs
	.global	mtp_tx_req_len
	.global	mtp_rx_req_len
	.align	2
.LC899:
	.ascii	"ccid_ctrl\000"
	.align	2
.LC900:
	.ascii	"ccid_bulk\000"
	.align	2
.LC901:
	.ascii	"CDC Abstract Control Model (ACM)\000"
	.align	2
.LC902:
	.ascii	"CDC ACM Data\000"
	.align	2
.LC903:
	.ascii	"CDC Serial\000"
	.align	2
.LC904:
	.ascii	"Generic Serial\000"
	.global	ghsuart_data_stats_ops
	.global	ghsuart_data_tx_intr_thld
	.align	2
.LC905:
	.ascii	"SMUX_DUN_DATA_HSUART\000"
	.align	2
.LC906:
	.ascii	"SMUX_RMNET_DATA_HSUART\000"
	.global	ghsic_data_tx_intr_thld
	.align	2
.LC907:
	.ascii	"rmnet_ctrl\000"
	.global	online_clients
	.align	2
.LC908:
	.ascii	"DATA40_CNTL\000"
	.align	2
.LC909:
	.ascii	"DATA39_CNTL\000"
	.align	2
.LC910:
	.ascii	"DATA38_CNTL\000"
	.global	bam2bam_ports
	.global	smd_pi
	.align	2
.LC911:
	.ascii	"DS\000"
	.align	2
.LC912:
	.ascii	"UNUSED\000"
	.global	sport_info
	.align	2
.LC913:
	.ascii	"SDIO_DUN\000"
	.align	2
.LC914:
	.ascii	"SDIO_NMEA\000"
	.align	2
.LC915:
	.ascii	"cdrom\000"
	.align	2
.LC916:
	.ascii	"file\000"
	.align	2
.LC917:
	.ascii	"nofua\000"
	.align	2
.LC918:
	.ascii	"ro\000"
	.align	2
.LC919:
	.ascii	"functionfs\000"
	.align	2
.LC920:
	.ascii	"GPS\000"
	.align	2
.LC921:
	.ascii	"RmNet\000"
	.align	2
.LC922:
	.ascii	"rmnet_mux_ctrl\000"
	.align	2
.LC923:
	.ascii	"transport\000"
	.align	2
.LC924:
	.ascii	"QMI RmNet\000"
	.global	sdio_rx_fctrl_dis_thld
	.global	sdio_rx_fctrl_en_thld
	.global	sdio_tx_pkt_drop_thld
	.align	2
.LC925:
	.ascii	"QDSS DATA\000"
	.align	2
.LC926:
	.ascii	"QDSS CTRL\000"
	.align	2
.LC927:
	.ascii	"MIDI function\000"
	.align	2
.LC928:
	.ascii	"suspended\000"
	.section	.rodata
	.align	3
	.set	.LANCHOR2,. + 0
	.set	.LANCHOR5,. + 8184
	.type	__func__.39278, %object
	.size	__func__.39278, 24
__func__.39278:
	.ascii	"usb_rmnet_mux_ctrl_open\000"
	.type	__func__.48516, %object
	.size	__func__.48516, 14
__func__.48516:
	.ascii	"gsmd_start_rx\000"
	.space	2
	.type	__func__.49156, %object
	.size	__func__.49156, 21
__func__.49156:
	.ascii	"gbam_stop_endless_rx\000"
	.space	3
	.type	__func__.49162, %object
	.size	__func__.49162, 21
__func__.49162:
	.ascii	"gbam_stop_endless_tx\000"
	.space	3
	.type	__func__.50684, %object
	.size	__func__.50684, 24
__func__.50684:
	.ascii	"ghsic_send_cpkt_tomodem\000"
	.type	__func__.56235, %object
	.size	__func__.56235, 13
__func__.56235:
	.ascii	"ecm_qc_setup\000"
	.space	3
	.type	__func__.56552, %object
	.size	__func__.56552, 21
__func__.56552:
	.ascii	"mbim_ep0out_complete\000"
	.space	3
	.type	__func__.56813, %object
	.size	__func__.56813, 25
__func__.56813:
	.ascii	"bam_data_stop_endless_rx\000"
	.space	3
	.type	__func__.56819, %object
	.size	__func__.56819, 25
__func__.56819:
	.ascii	"bam_data_stop_endless_tx\000"
	.space	3
	.type	__func__.57197, %object
	.size	__func__.57197, 27
__func__.57197:
	.ascii	"rndis_qc_response_complete\000"
	.space	1
	.type	__func__.57189, %object
	.size	__func__.57189, 28
__func__.57189:
	.ascii	"rndis_qc_response_available\000"
	.type	__func__.60823, %object
	.size	__func__.60823, 21
__func__.60823:
	.ascii	"f_audio_buffer_alloc\000"
	.space	3
	.type	__func__.60993, %object
	.size	__func__.60993, 23
__func__.60993:
	.ascii	"audio_set_endpoint_req\000"
	.space	1
	.type	__func__.61069, %object
	.size	__func__.61069, 14
__func__.61069:
	.ascii	"f_audio_setup\000"
	.space	2
	.type	__func__.62475, %object
	.size	__func__.62475, 24
__func__.62475:
	.ascii	"android_enable_function\000"
	.type	__func__.57322, %object
	.size	__func__.57322, 21
__func__.57322:
	.ascii	"rndis_qc_release_dev\000"
	.space	3
	.type	__func__.57316, %object
	.size	__func__.57316, 18
__func__.57316:
	.ascii	"rndis_qc_open_dev\000"
	.space	2
	.type	__func__.40000, %object
	.size	__func__.40000, 10
__func__.40000:
	.ascii	"gps_setup\000"
	.space	2
	.type	__func__.39705, %object
	.size	__func__.39705, 23
__func__.39705:
	.ascii	"frmnet_notify_complete\000"
	.space	1
	.type	__func__.56603, %object
	.size	__func__.56603, 17
__func__.56603:
	.ascii	"mbim_ctrlrequest\000"
	.space	3
	.type	__func__.56715, %object
	.size	__func__.56715, 13
__func__.56715:
	.ascii	"mbim_release\000"
	.space	3
	.type	__func__.56707, %object
	.size	__func__.56707, 10
__func__.56707:
	.ascii	"mbim_open\000"
	.space	2
	.type	__func__.48360, %object
	.size	__func__.48360, 16
__func__.48360:
	.ascii	"gsdio_open_work\000"
	.type	__func__.45859, %object
	.size	__func__.45859, 19
__func__.45859:
	.ascii	"start_out_transfer\000"
	.space	1
	.type	__func__.51535, %object
	.size	__func__.51535, 26
__func__.51535:
	.ascii	"ghsuart_send_cpkt_tomodem\000"
	.space	2
	.type	__func__.57733, %object
	.size	__func__.57733, 12
__func__.57733:
	.ascii	"gether_init\000"
	.type	__func__.48268, %object
	.size	__func__.48268, 21
__func__.48268:
	.ascii	"gsdio_write_complete\000"
	.space	3
	.type	__func__.48336, %object
	.size	__func__.48336, 24
__func__.48336:
	.ascii	"gsdio_ctrl_notify_modem\000"
	.type	__func__.48592, %object
	.size	__func__.48592, 20
__func__.48592:
	.ascii	"gsmd_write_complete\000"
	.type	__func__.52004, %object
	.size	__func__.52004, 19
__func__.52004:
	.ascii	"ghsuart_data_probe\000"
	.space	1
	.type	__func__.56628, %object
	.size	__func__.56628, 13
__func__.56628:
	.ascii	"mbim_suspend\000"
	.space	3
	.type	__func__.56632, %object
	.size	__func__.56632, 12
__func__.56632:
	.ascii	"mbim_resume\000"
	.type	__func__.48538, %object
	.size	__func__.48538, 13
__func__.48538:
	.ascii	"gsmd_rx_push\000"
	.space	3
	.type	__func__.49513, %object
	.size	__func__.49513, 24
__func__.49513:
	.ascii	"grmnet_ctrl_smd_write_w\000"
	.type	__func__.48571, %object
	.size	__func__.48571, 13
__func__.48571:
	.ascii	"gsmd_tx_pull\000"
	.space	3
	.type	__func__.62963, %object
	.size	__func__.62963, 5
__func__.62963:
	.ascii	"init\000"
	.space	3
	.type	__func__.49485, %object
	.size	__func__.49485, 23
__func__.49485:
	.ascii	"grmnet_ctrl_smd_read_w\000"
	.space	1
	.type	__func__.56561, %object
	.size	__func__.56561, 19
__func__.56561:
	.ascii	"fmbim_cmd_complete\000"
	.space	1
	.type	__func__.53652, %object
	.size	__func__.53652, 16
__func__.53652:
	.ascii	"mtp_ctrlrequest\000"
	.type	__func__.39036, %object
	.size	__func__.39036, 27
__func__.39036:
	.ascii	"rmnet_mux_command_complete\000"
	.space	1
	.type	ctrl_names, %object
	.size	ctrl_names, 24
ctrl_names:
	.word	.LC908
	.word	.LC909
	.word	.LC910
	.word	.LC909
	.space	8
	.type	__func__.38254, %object
	.size	__func__.38254, 24
__func__.38254:
	.ascii	"rmnet_sdio_data_rx_work\000"
	.type	__func__.49023, %object
	.size	__func__.49023, 23
__func__.49023:
	.ascii	"gbam_write_data_tohost\000"
	.space	1
	.type	__func__.49090, %object
	.size	__func__.49090, 19
__func__.49090:
	.ascii	"gbam_epin_complete\000"
	.space	1
	.type	__func__.49582, %object
	.size	__func__.49582, 26
__func__.49582:
	.ascii	"grmnet_ctrl_smd_connect_w\000"
	.space	2
	.type	__func__.49136, %object
	.size	__func__.49136, 14
__func__.49136:
	.ascii	"gbam_start_rx\000"
	.space	2
	.type	__func__.49105, %object
	.size	__func__.49105, 20
__func__.49105:
	.ascii	"gbam_epout_complete\000"
	.type	__func__.57338, %object
	.size	__func__.57338, 15
__func__.57338:
	.ascii	"rndis_qc_ioctl\000"
	.space	1
	.type	__func__.56723, %object
	.size	__func__.56723, 11
__func__.56723:
	.ascii	"mbim_ioctl\000"
	.space	1
	.type	__func__.39301, %object
	.size	__func__.39301, 24
__func__.39301:
	.ascii	"usb_rmnet_mux_ctrl_read\000"
	.type	__func__.39324, %object
	.size	__func__.39324, 25
__func__.39324:
	.ascii	"usb_rmnet_mux_ctrl_write\000"
	.space	7
	.type	audio_hw_info, %object
	.size	audio_hw_info, 64
audio_hw_info:
	.word	65811
	.space	4
	.word	4
	.word	0
	.space	4
	.word	44100
	.word	44100
	.word	2
	.word	2
	.word	1048576
	.word	64
	.word	524288
	.word	2
	.word	1024
	.space	8
	.type	__func__.48383, %object
	.size	__func__.48383, 15
__func__.48383:
	.ascii	"gsdio_ch_probe\000"
	.space	1
	.type	__func__.50770, %object
	.size	__func__.50770, 18
__func__.50770:
	.ascii	"ghsic_ctrl_remove\000"
	.space	2
	.type	__func__.48654, %object
	.size	__func__.48654, 18
__func__.48654:
	.ascii	"gsmd_notify_modem\000"
	.space	2
	.type	__func__.49239, %object
	.size	__func__.49239, 18
__func__.49239:
	.ascii	"gbam_connect_work\000"
	.space	2
	.type	__func__.49180, %object
	.size	__func__.49180, 14
__func__.49180:
	.ascii	"gbam_start_io\000"
	.space	2
	.type	__func__.56848, %object
	.size	__func__.56848, 26
__func__.56848:
	.ascii	"bam2bam_data_connect_work\000"
	.space	2
	.type	__func__.56801, %object
	.size	__func__.56801, 26
__func__.56801:
	.ascii	"bam_data_start_endless_rx\000"
	.space	2
	.type	__func__.56807, %object
	.size	__func__.56807, 26
__func__.56807:
	.ascii	"bam_data_start_endless_tx\000"
	.space	2
	.type	__func__.49289, %object
	.size	__func__.49289, 19
__func__.49289:
	.ascii	"gbam_peer_reset_cb\000"
	.space	1
	.type	__func__.49144, %object
	.size	__func__.49144, 22
__func__.49144:
	.ascii	"gbam_start_endless_rx\000"
	.space	2
	.type	__func__.49150, %object
	.size	__func__.49150, 22
__func__.49150:
	.ascii	"gbam_start_endless_tx\000"
	.space	2
	.type	__func__.56826, %object
	.size	__func__.56826, 23
__func__.56826:
	.ascii	"bam_data_peer_reset_cb\000"
	.space	1
	.type	__func__.57353, %object
	.size	__func__.57353, 14
__func__.57353:
	.ascii	"rndis_qc_init\000"
	.space	2
	.type	__func__.39345, %object
	.size	__func__.39345, 27
__func__.39345:
	.ascii	"rmnet_mux_ctrl_device_init\000"
	.space	1
	.type	__func__.57358, %object
	.size	__func__.57358, 17
__func__.57358:
	.ascii	"rndis_qc_cleanup\000"
	.space	3
	.type	__func__.56751, %object
	.size	__func__.56751, 14
__func__.56751:
	.ascii	"fmbim_cleanup\000"
	.space	2
	.type	__func__.55926, %object
	.size	__func__.55926, 13
__func__.55926:
	.ascii	"rndis_rm_hdr\000"
	.space	3
	.type	CSWTCH.2407, %object
	.size	CSWTCH.2407, 12
CSWTCH.2407:
	.word	.LC821
	.word	.LC822
	.word	.LC823
	.type	__func__.62899, %object
	.size	__func__.62899, 21
__func__.62899:
	.ascii	"alloc_android_config\000"
	.space	3
	.type	__func__.62567, %object
	.size	__func__.62567, 16
__func__.62567:
	.ascii	"functions_store\000"
	.type	__func__.62404, %object
	.size	__func__.62404, 23
__func__.62404:
	.ascii	"android_init_functions\000"
	.space	1
	.type	longname, %object
	.size	longname, 15
longname:
	.ascii	"Gadget Android\000"
	.space	1
	.type	__func__.62801, %object
	.size	__func__.62801, 13
__func__.62801:
	.ascii	"android_bind\000"
	.space	3
	.type	__func__.61568, %object
	.size	__func__.61568, 13
__func__.61568:
	.ascii	"android_work\000"
	.space	3
	.type	__func__.62355, %object
	.size	__func__.62355, 25
__func__.62355:
	.ascii	"hid_function_bind_config\000"
	.space	3
	.type	__func__.56702, %object
	.size	__func__.56702, 11
__func__.56702:
	.ascii	"mbim_write\000"
	.space	1
	.type	__func__.56466, %object
	.size	__func__.56466, 25
__func__.56466:
	.ascii	"fmbim_send_cpkt_response\000"
	.space	3
	.type	__func__.56456, %object
	.size	__func__.56456, 30
__func__.56456:
	.ascii	"fmbim_ctrl_response_available\000"
	.space	2
	.type	__func__.61092, %object
	.size	__func__.61092, 16
__func__.61092:
	.ascii	"f_audio_set_alt\000"
	.type	__func__.48327, %object
	.size	__func__.48327, 14
__func__.48327:
	.ascii	"gsdio_ctrl_wq\000"
	.space	2
	.type	__func__.49845, %object
	.size	__func__.49845, 16
__func__.49845:
	.ascii	"rmnet_ctrl_poll\000"
	.type	__func__.50691, %object
	.size	__func__.50691, 25
__func__.50691:
	.ascii	"ghsic_send_cbits_tomodem\000"
	.space	3
	.type	__func__.51544, %object
	.size	__func__.51544, 27
__func__.51544:
	.ascii	"ghsuart_send_cbits_tomodem\000"
	.space	1
	.type	__func__.56905, %object
	.size	__func__.56905, 17
__func__.56905:
	.ascii	"bam_data_wake_cb\000"
	.space	3
	.type	__func__.39943, %object
	.size	__func__.39943, 12
__func__.39943:
	.ascii	"gps_connect\000"
	.type	__func__.39950, %object
	.size	__func__.39950, 15
__func__.39950:
	.ascii	"gps_disconnect\000"
	.space	1
	.type	__func__.39969, %object
	.size	__func__.39969, 17
__func__.39969:
	.ascii	"gps_cmd_complete\000"
	.space	3
	.type	__func__.39669, %object
	.size	__func__.39669, 15
__func__.39669:
	.ascii	"frmnet_connect\000"
	.space	1
	.type	__func__.39676, %object
	.size	__func__.39676, 18
__func__.39676:
	.ascii	"frmnet_disconnect\000"
	.space	2
	.type	__func__.39696, %object
	.size	__func__.39696, 20
__func__.39696:
	.ascii	"frmnet_cmd_complete\000"
	.type	__func__.50703, %object
	.size	__func__.50703, 21
__func__.50703:
	.ascii	"ghsic_ctrl_connect_w\000"
	.space	3
	.type	__func__.48258, %object
	.size	__func__.48258, 20
__func__.48258:
	.ascii	"gsdio_read_complete\000"
	.type	__func__.48586, %object
	.size	__func__.48586, 19
__func__.48586:
	.ascii	"gsmd_read_complete\000"
	.space	1
	.type	__func__.49542, %object
	.size	__func__.49542, 29
__func__.49542:
	.ascii	"gsmd_ctrl_send_cbits_tomodem\000"
	.space	3
	.type	__func__.51238, %object
	.size	__func__.51238, 18
__func__.51238:
	.ascii	"ghsic_data_remove\000"
	.space	2
	.type	__func__.51100, %object
	.size	__func__.51100, 23
__func__.51100:
	.ascii	"ghsic_data_write_tomdm\000"
	.space	1
	.type	__func__.51149, %object
	.size	__func__.51149, 20
__func__.51149:
	.ascii	"ghsic_data_start_rx\000"
	.type	__func__.51193, %object
	.size	__func__.51193, 21
__func__.51193:
	.ascii	"ghsic_data_connect_w\000"
	.space	3
	.type	__func__.52014, %object
	.size	__func__.52014, 20
__func__.52014:
	.ascii	"ghsuart_data_remove\000"
	.type	__func__.51834, %object
	.size	__func__.51834, 25
__func__.51834:
	.ascii	"ghsuart_data_write_tomdm\000"
	.space	3
	.type	__func__.51877, %object
	.size	__func__.51877, 22
__func__.51877:
	.ascii	"ghsuart_data_start_rx\000"
	.space	2
	.type	__func__.51819, %object
	.size	__func__.51819, 26
__func__.51819:
	.ascii	"ghsuart_data_write_tohost\000"
	.space	2
	.type	__func__.38362, %object
	.size	__func__.38362, 22
__func__.38362:
	.ascii	"rmnet_close_sdio_work\000"
	.space	2
	.type	__func__.51071, %object
	.size	__func__.51071, 24
__func__.51071:
	.ascii	"ghsic_data_write_tohost\000"
	.type	__func__.48637, %object
	.size	__func__.48637, 18
__func__.48637:
	.ascii	"gsmd_connect_work\000"
	.space	2
	.type	__func__.49226, %object
	.size	__func__.49226, 25
__func__.49226:
	.ascii	"gbam2bam_disconnect_work\000"
	.space	3
	.type	__func__.56835, %object
	.size	__func__.56835, 29
__func__.56835:
	.ascii	"bam2bam_data_disconnect_work\000"
	.space	3
	.type	__func__.51552, %object
	.size	__func__.51552, 23
__func__.51552:
	.ascii	"ghsuart_ctrl_connect_w\000"
	.space	1
	.type	__func__.51976, %object
	.size	__func__.51976, 23
__func__.51976:
	.ascii	"ghsuart_data_connect_w\000"
	.space	1
	.type	__func__.48293, %object
	.size	__func__.48293, 14
__func__.48293:
	.ascii	"gsdio_tx_pull\000"
	.space	2
	.type	__func__.48282, %object
	.size	__func__.48282, 19
__func__.48282:
	.ascii	"gsdio_read_pending\000"
	.space	1
	.type	__func__.49041, %object
	.size	__func__.49041, 18
__func__.49041:
	.ascii	"gbam_data_recv_cb\000"
	.space	2
	.type	CSWTCH.1608, %object
	.size	CSWTCH.1608, 40
CSWTCH.1608:
	.word	.LC352
	.word	.LC353
	.word	.LC354
	.word	.LC355
	.word	.LC356
	.word	.LC357
	.word	.LC358
	.word	.LC359
	.word	.LC360
	.word	.LC824
	.type	__func__.39621, %object
	.size	__func__.39621, 14
__func__.39621:
	.ascii	"frmnet_resume\000"
	.space	2
	.type	__func__.62430, %object
	.size	__func__.62430, 31
__func__.62430:
	.ascii	"android_bind_enabled_functions\000"
	.space	1
	.type	__func__.60617, %object
	.size	__func__.60617, 20
__func__.60617:
	.ascii	"gaudio_open_streams\000"
	.type	__func__.60590, %object
	.size	__func__.60590, 24
__func__.60590:
	.ascii	"playback_prepare_params\000"
	.type	__func__.60601, %object
	.size	__func__.60601, 23
__func__.60601:
	.ascii	"capture_prepare_params\000"
	.space	1
	.type	__func__.60882, %object
	.size	__func__.60882, 21
__func__.60882:
	.ascii	"f_audio_capture_work\000"
	.space	3
	.type	__func__.60647, %object
	.size	__func__.60647, 16
__func__.60647:
	.ascii	"u_audio_capture\000"
	.type	__func__.56736, %object
	.size	__func__.56736, 10
__func__.56736:
	.ascii	"mbim_init\000"
	.space	2
	.type	__func__.56868, %object
	.size	__func__.56868, 20
__func__.56868:
	.ascii	"bam_data_disconnect\000"
	.type	__func__.56880, %object
	.size	__func__.56880, 17
__func__.56880:
	.ascii	"bam_data_connect\000"
	.space	3
	.type	__func__.56892, %object
	.size	__func__.56892, 15
__func__.56892:
	.ascii	"bam_data_setup\000"
	.space	1
	.type	oid_supported_list, %object
	.size	oid_supported_list, 112
oid_supported_list:
	.word	65793
	.word	65794
	.word	65795
	.word	65796
	.word	65798
	.word	65799
	.word	65802
	.word	65803
	.word	65804
	.word	65805
	.word	65814
	.word	65806
	.word	65809
	.word	65812
	.word	66050
	.word	131329
	.word	131330
	.word	131331
	.word	131332
	.word	131333
	.word	16843009
	.word	16843010
	.word	16843011
	.word	16843013
	.word	16843012
	.word	16908545
	.word	16908546
	.word	16908547
	.type	__func__.55690, %object
	.size	__func__.55690, 20
__func__.55690:
	.ascii	"gen_ndis_query_resp\000"
	.type	__func__.53153, %object
	.size	__func__.53153, 22
__func__.53153:
	.ascii	"ccid_bulk_device_init\000"
	.space	2
	.type	__func__.53220, %object
	.size	__func__.53220, 11
__func__.53220:
	.ascii	"ccid_setup\000"
	.space	1
	.type	__func__.53209, %object
	.size	__func__.53209, 22
__func__.53209:
	.ascii	"ccid_ctrl_device_init\000"
	.space	2
	.type	__func__.52029, %object
	.size	__func__.52029, 33
__func__.52029:
	.ascii	"ghsuart_send_controlbits_tomodem\000"
	.space	3
	.type	__func__.48493, %object
	.size	__func__.48493, 15
__func__.48493:
	.ascii	"gsmd_alloc_req\000"
	.space	1
	.type	__func__.47339, %object
	.size	__func__.47339, 12
__func__.47339:
	.ascii	"gs_start_tx\000"
	.type	__func__.47401, %object
	.size	__func__.47401, 18
__func__.47401:
	.ascii	"gs_write_complete\000"
	.space	2
	.type	dirletter.46123, %object
	.size	dirletter.46123, 4
dirletter.46123:
	.ascii	"uoin"
	.type	__func__.39685, %object
	.size	__func__.39685, 26
__func__.39685:
	.ascii	"frmnet_send_cpkt_response\000"
	.space	2
	.type	__func__.49737, %object
	.size	__func__.49737, 34
__func__.49737:
	.ascii	"grmnet_ctrl_qti_send_cpkt_tomodem\000"
	.space	2
	.type	__func__.49528, %object
	.size	__func__.49528, 34
__func__.49528:
	.ascii	"grmnet_ctrl_smd_send_cpkt_tomodem\000"
	.space	2
	.type	__func__.39959, %object
	.size	__func__.39959, 23
__func__.39959:
	.ascii	"gps_send_cpkt_response\000"
	.space	1
	.type	__func__.38278, %object
	.size	__func__.38278, 26
__func__.38278:
	.ascii	"rmnet_sdio_complete_epout\000"
	.space	2
	.type	__func__.61581, %object
	.size	__func__.61581, 15
__func__.61581:
	.ascii	"android_enable\000"
	.space	1
	.type	__func__.52794, %object
	.size	__func__.52794, 9
__func__.52794:
	.ascii	"adb_open\000"
	.space	3
	.type	__func__.60862, %object
	.size	__func__.60862, 22
__func__.60862:
	.ascii	"f_audio_playback_work\000"
	.space	2
	.type	__func__.60633, %object
	.size	__func__.60633, 17
__func__.60633:
	.ascii	"u_audio_playback\000"
	.space	3
	.type	__func__.60872, %object
	.size	__func__.60872, 29
__func__.60872:
	.ascii	"f_audio_playback_ep_complete\000"
	.space	3
	.type	__func__.60894, %object
	.size	__func__.60894, 28
__func__.60894:
	.ascii	"f_audio_capture_ep_complete\000"
	.type	__func__.60911, %object
	.size	__func__.60911, 17
__func__.60911:
	.ascii	"f_audio_complete\000"
	.space	3
	.type	__func__.51230, %object
	.size	__func__.51230, 17
__func__.51230:
	.ascii	"ghsic_data_probe\000"
	.space	3
	.type	__func__.50758, %object
	.size	__func__.50758, 17
__func__.50758:
	.ascii	"ghsic_ctrl_probe\000"
	.space	3
	.type	ffs_sb_operations, %object
	.size	ffs_sb_operations, 108
ffs_sb_operations:
	.space	16
	.word	generic_delete_inode
	.space	24
	.word	simple_statfs
	.space	60
	.type	ffs_ep0_operations, %object
	.size	ffs_ep0_operations, 104
ffs_ep0_operations:
	.word	0
	.word	no_llseek
	.word	ffs_ep0_read
	.word	ffs_ep0_write
	.space	16
	.word	ffs_ep0_ioctl
	.space	8
	.word	ffs_ep0_open
	.space	4
	.word	ffs_ep0_release
	.space	48
	.type	__func__.45854, %object
	.size	__func__.45854, 18
__func__.45854:
	.ascii	"start_in_transfer\000"
	.space	2
	.type	ffs_epfile_operations, %object
	.size	ffs_epfile_operations, 104
ffs_epfile_operations:
	.word	0
	.word	no_llseek
	.word	ffs_epfile_read
	.word	ffs_epfile_write
	.space	16
	.word	ffs_epfile_ioctl
	.space	8
	.word	ffs_epfile_open
	.space	4
	.word	ffs_epfile_release
	.space	48
	.type	__func__.56666, %object
	.size	__func__.56666, 10
__func__.56666:
	.ascii	"mbim_read\000"
	.space	2
	.type	__func__.39606, %object
	.size	__func__.39606, 15
__func__.39606:
	.ascii	"frmnet_suspend\000"
	.space	1
	.type	__func__.56574, %object
	.size	__func__.56574, 11
__func__.56574:
	.ascii	"mbim_setup\000"
	.space	1
	.type	f_midi_cin_length, %object
	.size	f_midi_cin_length, 16
f_midi_cin_length:
	.ascii	"\000\000\002\003\003\001\002\003\003\003\003\003\002"
	.ascii	"\002\003\001"
	.type	__func__.39183, %object
	.size	__func__.39183, 16
__func__.39183:
	.ascii	"transport_store\000"
	.type	__func__.38200, %object
	.size	__func__.38200, 20
__func__.38200:
	.ascii	"rmnet_sdio_start_rx\000"
	.type	__func__.38423, %object
	.size	__func__.38423, 21
__func__.38423:
	.ascii	"rmnet_open_sdio_work\000"
	.space	3
	.type	__func__.57232, %object
	.size	__func__.57232, 15
__func__.57232:
	.ascii	"rndis_qc_setup\000"
	.space	1
	.type	__func__.56538, %object
	.size	__func__.56538, 21
__func__.56538:
	.ascii	"mbim_notify_complete\000"
	.space	3
	.type	__func__.56529, %object
	.size	__func__.56529, 15
__func__.56529:
	.ascii	"mbim_do_notify\000"
	.space	1
	.type	__func__.49725, %object
	.size	__func__.49725, 24
__func__.49725:
	.ascii	"rmnet_ctrl_queue_notify\000"
	.type	__func__.49253, %object
	.size	__func__.49253, 22
__func__.49253:
	.ascii	"gbam2bam_connect_work\000"
	.space	2
	.type	__func__.45832, %object
	.size	__func__.45832, 10
__func__.45832:
	.ascii	"fsg_setup\000"
	.space	2
	.type	__func__.53130, %object
	.size	__func__.53130, 16
__func__.53130:
	.ascii	"ccid_bulk_write\000"
	.type	__func__.54914, %object
	.size	__func__.54914, 16
__func__.54914:
	.ascii	"acc_ctrlrequest\000"
	.type	__func__.53100, %object
	.size	__func__.53100, 15
__func__.53100:
	.ascii	"ccid_bulk_read\000"
	.space	1
	.type	__func__.24541, %object
	.size	__func__.24541, 11
__func__.24541:
	.ascii	"set_config\000"
	.space	1
	.type	__func__.24759, %object
	.size	__func__.24759, 16
__func__.24759:
	.ascii	"composite_setup\000"
	.type	__func__.56291, %object
	.size	__func__.56291, 12
__func__.56291:
	.ascii	"ecm_qc_bind\000"
	.type	__func__.56641, %object
	.size	__func__.56641, 10
__func__.56641:
	.ascii	"mbim_bind\000"
	.space	2
	.type	__func__.61124, %object
	.size	__func__.61124, 13
__func__.61124:
	.ascii	"f_audio_bind\000"
	.space	3
	.type	__func__.53067, %object
	.size	__func__.53067, 19
__func__.53067:
	.ascii	"ccid_function_bind\000"
	.space	1
	.type	__func__.39758, %object
	.size	__func__.39758, 12
__func__.39758:
	.ascii	"frmnet_bind\000"
	.type	__func__.40024, %object
	.size	__func__.40024, 9
__func__.40024:
	.ascii	"gps_bind\000"
	.space	3
	.type	__func__.57283, %object
	.size	__func__.57283, 14
__func__.57283:
	.ascii	"rndis_qc_bind\000"
	.space	2
	.type	__func__.38434, %object
	.size	__func__.38434, 19
__func__.38434:
	.ascii	"rmnet_sdio_set_alt\000"
	.space	1
	.type	__func__.53043, %object
	.size	__func__.53043, 22
__func__.53043:
	.ascii	"ccid_function_set_alt\000"
	.space	2
	.type	__func__.39918, %object
	.size	__func__.39918, 12
__func__.39918:
	.ascii	"gps_set_alt\000"
	.type	__func__.49593, %object
	.size	__func__.49593, 18
__func__.49593:
	.ascii	"gsmd_ctrl_connect\000"
	.space	2
	.type	__func__.40046, %object
	.size	__func__.40046, 14
__func__.40046:
	.ascii	"gps_init_port\000"
	.space	2
	.type	__func__.61821, %object
	.size	__func__.61821, 25
__func__.61821:
	.ascii	"gps_function_bind_config\000"
	.space	3
	.type	__func__.49677, %object
	.size	__func__.49677, 16
__func__.49677:
	.ascii	"gsmd_ctrl_setup\000"
	.type	__func__.40035, %object
	.size	__func__.40035, 16
__func__.40035:
	.ascii	"gps_bind_config\000"
	.type	__func__.61998, %object
	.size	__func__.61998, 26
__func__.61998:
	.ascii	"qdss_function_bind_config\000"
	.space	2
	.type	__func__.24602, %object
	.size	__func__.24602, 18
__func__.24602:
	.ascii	"usb_remove_config\000"
	.space	2
	.type	__func__.62612, %object
	.size	__func__.62612, 13
__func__.62612:
	.ascii	"enable_store\000"
	.space	3
	.type	__func__.52801, %object
	.size	__func__.52801, 12
__func__.52801:
	.ascii	"adb_release\000"
	.type	__func__.61701, %object
	.size	__func__.61701, 20
__func__.61701:
	.ascii	"adb_closed_callback\000"
	.type	__func__.61658, %object
	.size	__func__.61658, 27
__func__.61658:
	.ascii	"functionfs_closed_callback\000"
	.space	1
	.type	__func__.44884, %object
	.size	__func__.44884, 13
__func__.44884:
	.ascii	"ffs_data_put\000"
	.space	3
	.type	__func__.62929, %object
	.size	__func__.62929, 14
__func__.62929:
	.ascii	"android_probe\000"
	.space	2
	.type	__func__.24873, %object
	.size	__func__.24873, 29
__func__.24873:
	.ascii	"usb_composite_setup_continue\000"
	.space	3
	.type	__func__.46273, %object
	.size	__func__.46273, 17
__func__.46273:
	.ascii	"handle_exception\000"
	.space	3
	.type	__func__.46203, %object
	.size	__func__.46203, 17
__func__.46203:
	.ascii	"get_next_command\000"
	.space	3
	.type	__func__.46094, %object
	.size	__func__.46094, 13
__func__.46094:
	.ascii	"finish_reply\000"
	.space	3
	.type	__func__.26699, %object
	.size	__func__.26699, 14
__func__.26699:
	.ascii	"usb_diag_read\000"
	.space	2
	.type	__func__.26717, %object
	.size	__func__.26717, 15
__func__.26717:
	.ascii	"usb_diag_write\000"
	.space	1
	.type	__func__.61981, %object
	.size	__func__.61981, 26
__func__.61981:
	.ascii	"diag_function_bind_config\000"
	.space	2
	.type	__func__.31934, %object
	.size	__func__.31934, 25
__func__.31934:
	.ascii	"usb_qdss_disconnect_work\000"
	.space	3
	.type	gs_tty_ops, %object
	.size	gs_tty_ops, 124
gs_tty_ops:
	.space	12
	.word	gs_open
	.word	gs_close
	.space	8
	.word	gs_write
	.word	gs_put_char
	.word	gs_flush_chars
	.word	gs_write_room
	.word	gs_chars_in_buffer
	.space	16
	.word	gs_unthrottle
	.space	12
	.word	gs_break_ctl
	.space	16
	.word	gs_tiocmget
	.word	gs_tiocmset
	.space	16
	.type	__func__.47581, %object
	.size	__func__.47581, 14
__func__.47581:
	.ascii	"gserial_setup\000"
	.space	2
	.type	__func__.48181, %object
	.size	__func__.48181, 16
__func__.48181:
	.ascii	"gsdio_alloc_req\000"
	.type	__func__.48597, %object
	.size	__func__.48597, 14
__func__.48597:
	.ascii	"gsmd_start_io\000"
	.space	2
	.type	__func__.48213, %object
	.size	__func__.48213, 15
__func__.48213:
	.ascii	"gsdio_start_rx\000"
	.space	1
	.type	__func__.48240, %object
	.size	__func__.48240, 14
__func__.48240:
	.ascii	"gsdio_rx_push\000"
	.space	2
	.type	__func__.48230, %object
	.size	__func__.48230, 12
__func__.48230:
	.ascii	"gsdio_write\000"
	.type	__func__.48311, %object
	.size	__func__.48311, 15
__func__.48311:
	.ascii	"gsdio_start_io\000"
	.space	1
	.type	__func__.48320, %object
	.size	__func__.48320, 16
__func__.48320:
	.ascii	"gsdio_port_free\000"
	.type	__func__.48394, %object
	.size	__func__.48394, 17
__func__.48394:
	.ascii	"gsdio_port_alloc\000"
	.space	3
	.type	__func__.48407, %object
	.size	__func__.48407, 14
__func__.48407:
	.ascii	"gsdio_connect\000"
	.space	2
	.type	__func__.48417, %object
	.size	__func__.48417, 17
__func__.48417:
	.ascii	"gsdio_disconnect\000"
	.space	3
	.type	__func__.48434, %object
	.size	__func__.48434, 12
__func__.48434:
	.ascii	"gsdio_setup\000"
	.type	__func__.48663, %object
	.size	__func__.48663, 13
__func__.48663:
	.ascii	"gsmd_connect\000"
	.space	3
	.type	__func__.48673, %object
	.size	__func__.48673, 16
__func__.48673:
	.ascii	"gsmd_disconnect\000"
	.type	__func__.52479, %object
	.size	__func__.52479, 20
__func__.52479:
	.ascii	"acm_port_disconnect\000"
	.type	__func__.52469, %object
	.size	__func__.52469, 17
__func__.52469:
	.ascii	"acm_port_connect\000"
	.space	3
	.type	__func__.48730, %object
	.size	__func__.48730, 11
__func__.48730:
	.ascii	"gsmd_setup\000"
	.space	1
	.type	__func__.49369, %object
	.size	__func__.49369, 16
__func__.49369:
	.ascii	"gbam_disconnect\000"
	.type	__func__.49384, %object
	.size	__func__.49384, 13
__func__.49384:
	.ascii	"gbam_connect\000"
	.space	3
	.type	__func__.49394, %object
	.size	__func__.49394, 11
__func__.49394:
	.ascii	"gbam_setup\000"
	.space	1
	.type	__func__.49614, %object
	.size	__func__.49614, 21
__func__.49614:
	.ascii	"gsmd_ctrl_disconnect\000"
	.space	3
	.type	__func__.49752, %object
	.size	__func__.49752, 18
__func__.49752:
	.ascii	"gqti_ctrl_connect\000"
	.space	2
	.type	__func__.49762, %object
	.size	__func__.49762, 21
__func__.49762:
	.ascii	"gqti_ctrl_disconnect\000"
	.space	3
	.type	__func__.50715, %object
	.size	__func__.50715, 19
__func__.50715:
	.ascii	"ghsic_ctrl_connect\000"
	.space	1
	.type	__func__.50733, %object
	.size	__func__.50733, 22
__func__.50733:
	.ascii	"ghsic_ctrl_disconnect\000"
	.space	2
	.type	__func__.50796, %object
	.size	__func__.50796, 25
__func__.50796:
	.ascii	"ghsic_ctrl_set_port_name\000"
	.space	3
	.type	__func__.50805, %object
	.size	__func__.50805, 17
__func__.50805:
	.ascii	"ghsic_ctrl_setup\000"
	.space	3
	.type	__func__.50787, %object
	.size	__func__.50787, 17
__func__.50787:
	.ascii	"gctrl_port_alloc\000"
	.space	3
	.type	__func__.51264, %object
	.size	__func__.51264, 22
__func__.51264:
	.ascii	"ghsic_data_disconnect\000"
	.space	2
	.type	__func__.51280, %object
	.size	__func__.51280, 19
__func__.51280:
	.ascii	"ghsic_data_connect\000"
	.space	1
	.type	__func__.51318, %object
	.size	__func__.51318, 25
__func__.51318:
	.ascii	"ghsic_data_set_port_name\000"
	.space	3
	.type	__func__.51327, %object
	.size	__func__.51327, 17
__func__.51327:
	.ascii	"ghsic_data_setup\000"
	.space	3
	.type	__func__.51251, %object
	.size	__func__.51251, 22
__func__.51251:
	.ascii	"ghsic_data_port_alloc\000"
	.space	2
	.type	__func__.51560, %object
	.size	__func__.51560, 21
__func__.51560:
	.ascii	"ghsuart_ctrl_connect\000"
	.space	3
	.type	__func__.51577, %object
	.size	__func__.51577, 24
__func__.51577:
	.ascii	"ghsuart_ctrl_disconnect\000"
	.type	__func__.51625, %object
	.size	__func__.51625, 19
__func__.51625:
	.ascii	"ghsuart_ctrl_setup\000"
	.space	1
	.type	__func__.51613, %object
	.size	__func__.51613, 24
__func__.51613:
	.ascii	"ghsuart_ctrl_port_alloc\000"
	.type	CSWTCH.2782, %object
	.size	CSWTCH.2782, 36
CSWTCH.2782:
	.word	.LC812
	.word	.LC813
	.word	.LC814
	.word	.LC815
	.word	.LC816
	.word	.LC817
	.word	.LC818
	.word	.LC819
	.word	.LC820
	.type	__func__.52052, %object
	.size	__func__.52052, 24
__func__.52052:
	.ascii	"ghsuart_data_disconnect\000"
	.type	__func__.39564, %object
	.size	__func__.39564, 23
__func__.39564:
	.ascii	"gport_rmnet_disconnect\000"
	.space	1
	.type	__func__.52261, %object
	.size	__func__.52261, 17
__func__.52261:
	.ascii	"gport_disconnect\000"
	.space	3
	.type	__func__.52071, %object
	.size	__func__.52071, 21
__func__.52071:
	.ascii	"ghsuart_data_connect\000"
	.space	3
	.type	__func__.52249, %object
	.size	__func__.52249, 14
__func__.52249:
	.ascii	"gport_connect\000"
	.space	2
	.type	__func__.39644, %object
	.size	__func__.39644, 15
__func__.39644:
	.ascii	"frmnet_set_alt\000"
	.space	1
	.type	__func__.39542, %object
	.size	__func__.39542, 20
__func__.39542:
	.ascii	"gport_rmnet_connect\000"
	.type	__func__.52153, %object
	.size	__func__.52153, 19
__func__.52153:
	.ascii	"ghsuart_data_setup\000"
	.space	1
	.type	ghsuart_data_names, %object
	.size	ghsuart_data_names, 8
ghsuart_data_names:
	.word	.LC905
	.word	.LC906
	.type	__func__.52037, %object
	.size	__func__.52037, 24
__func__.52037:
	.ascii	"ghsuart_data_port_alloc\000"
	.type	__func__.39791, %object
	.size	__func__.39791, 17
__func__.39791:
	.ascii	"frmnet_init_port\000"
	.space	3
	.type	__func__.61778, %object
	.size	__func__.61778, 27
__func__.61778:
	.ascii	"rmnet_function_bind_config\000"
	.space	1
	.type	__func__.39771, %object
	.size	__func__.39771, 19
__func__.39771:
	.ascii	"frmnet_bind_config\000"
	.space	1
	.type	__func__.52420, %object
	.size	__func__.52420, 18
__func__.52420:
	.ascii	"gserial_init_port\000"
	.space	2
	.type	__func__.62040, %object
	.size	__func__.62040, 28
__func__.62040:
	.ascii	"serial_function_bind_config\000"
	.type	__func__.52630, %object
	.size	__func__.52630, 14
__func__.52630:
	.ascii	"acm_init_port\000"
	.space	2
	.type	__func__.61726, %object
	.size	__func__.61726, 25
__func__.61726:
	.ascii	"acm_function_bind_config\000"
	.space	3
	.type	rndis_proc_fops, %object
	.size	rndis_proc_fops, 104
rndis_proc_fops:
	.word	0
	.word	seq_lseek
	.word	seq_read
	.word	rndis_proc_write
	.space	28
	.word	rndis_proc_open
	.space	4
	.word	single_release
	.space	48
	.type	__func__.55739, %object
	.size	__func__.55739, 18
__func__.55739:
	.ascii	"gen_ndis_set_resp\000"
	.space	2
	.type	__func__.55824, %object
	.size	__func__.55824, 17
__func__.55824:
	.ascii	"rndis_msg_parser\000"
	.space	3
	.type	__func__.57211, %object
	.size	__func__.57211, 26
__func__.57211:
	.ascii	"rndis_qc_command_complete\000"
	.space	2
	.type	__func__.56180, %object
	.size	__func__.56180, 17
__func__.56180:
	.ascii	"ecm_qc_bam_setup\000"
	.space	3
	.type	__func__.56305, %object
	.size	__func__.56305, 19
__func__.56305:
	.ascii	"ecm_qc_bind_config\000"
	.space	1
	.type	__func__.56480, %object
	.size	__func__.56480, 22
__func__.56480:
	.ascii	"mbim_configure_params\000"
	.space	2
	.type	__func__.56624, %object
	.size	__func__.56624, 13
__func__.56624:
	.ascii	"mbim_disable\000"
	.space	3
	.type	__func__.56493, %object
	.size	__func__.56493, 20
__func__.56493:
	.ascii	"mbim_bam_disconnect\000"
	.type	__func__.56613, %object
	.size	__func__.56613, 13
__func__.56613:
	.ascii	"mbim_set_alt\000"
	.space	3
	.type	__func__.56489, %object
	.size	__func__.56489, 17
__func__.56489:
	.ascii	"mbim_bam_connect\000"
	.space	3
	.type	__func__.56655, %object
	.size	__func__.56655, 17
__func__.56655:
	.ascii	"mbim_bind_config\000"
	.space	3
	.type	__func__.56474, %object
	.size	__func__.56474, 15
__func__.56474:
	.ascii	"mbim_bam_setup\000"
	.space	1
	.type	__func__.57157, %object
	.size	__func__.57157, 19
__func__.57157:
	.ascii	"rndis_qc_bam_setup\000"
	.space	1
	.type	__func__.57310, %object
	.size	__func__.57310, 28
__func__.57310:
	.ascii	"rndis_qc_bind_config_vendor\000"
	.type	eth_netdev_ops, %object
	.size	eth_netdev_ops, 136
eth_netdev_ops:
	.space	8
	.word	eth_open
	.word	eth_stop
	.word	eth_start_xmit
	.space	12
	.word	eth_mac_addr
	.word	eth_validate_addr
	.space	8
	.word	ueth_change_mtu
	.space	84
	.type	ops, %object
	.size	ops, 164
ops:
	.space	8
	.word	eth_get_drvinfo
	.space	28
	.word	ethtool_op_get_link
	.space	120
	.type	__func__.62116, %object
	.size	__func__.62116, 27
__func__.62116:
	.ascii	"rndis_function_bind_config\000"
	.space	1
	.type	__func__.62224, %object
	.size	__func__.62224, 25
__func__.62224:
	.ascii	"ecm_function_bind_config\000"
	.space	3
	.type	__func__.57707, %object
	.size	__func__.57707, 15
__func__.57707:
	.ascii	"gether_connect\000"
	.space	1
	.type	eth_qc_netdev_ops, %object
	.size	eth_qc_netdev_ops, 136
eth_qc_netdev_ops:
	.space	8
	.word	eth_qc_open
	.word	eth_qc_stop
	.word	eth_qc_start_xmit
	.space	12
	.word	eth_mac_addr
	.word	eth_validate_addr
	.space	8
	.word	ueth_qc_change_mtu
	.space	84
	.type	qc_ethtool_ops, %object
	.size	qc_ethtool_ops, 164
qc_ethtool_ops:
	.space	8
	.word	eth_qc_get_drvinfo
	.space	28
	.word	ethtool_op_get_link
	.space	120
	.type	__func__.62123, %object
	.size	__func__.62123, 30
__func__.62123:
	.ascii	"rndis_qc_function_bind_config\000"
	.space	2
	.type	__func__.61878, %object
	.size	__func__.61878, 28
__func__.61878:
	.ascii	"ecm_qc_function_bind_config\000"
	.type	__func__.56190, %object
	.size	__func__.56190, 19
__func__.56190:
	.ascii	"ecm_qc_bam_connect\000"
	.space	1
	.type	__func__.57251, %object
	.size	__func__.57251, 17
__func__.57251:
	.ascii	"rndis_qc_disable\000"
	.space	3
	.type	__func__.57166, %object
	.size	__func__.57166, 21
__func__.57166:
	.ascii	"rndis_qc_bam_connect\000"
	.space	3
	.type	__func__.60671, %object
	.size	__func__.60671, 20
__func__.60671:
	.ascii	"gaudio_open_snd_dev\000"
	.type	__func__.60682, %object
	.size	__func__.60682, 13
__func__.60682:
	.ascii	"gaudio_setup\000"
	.space	3
	.type	__func__.61153, %object
	.size	__func__.61153, 18
__func__.61153:
	.ascii	"audio_bind_config\000"
	.space	2
	.type	__func__.61838, %object
	.size	__func__.61838, 25
__func__.61838:
	.ascii	"ncm_function_bind_config\000"
	.space	3
	.type	__param_str_audio_capture_buf_size, %object
	.size	__param_str_audio_capture_buf_size, 31
__param_str_audio_capture_buf_size:
	.ascii	"android.audio_capture_buf_size\000"
	.space	1
	.type	__param_str_req_capture_count, %object
	.size	__param_str_req_capture_count, 26
__param_str_req_capture_count:
	.ascii	"android.req_capture_count\000"
	.space	2
	.type	__param_str_req_capture_buf_size, %object
	.size	__param_str_req_capture_buf_size, 29
__param_str_req_capture_buf_size:
	.ascii	"android.req_capture_buf_size\000"
	.space	3
	.type	__param_str_audio_playback_buf_size, %object
	.size	__param_str_audio_playback_buf_size, 32
__param_str_audio_playback_buf_size:
	.ascii	"android.audio_playback_buf_size\000"
	.type	__param_str_req_playback_count, %object
	.size	__param_str_req_playback_count, 27
__param_str_req_playback_count:
	.ascii	"android.req_playback_count\000"
	.space	1
	.type	__param_str_req_playback_buf_size, %object
	.size	__param_str_req_playback_buf_size, 30
__param_str_req_playback_buf_size:
	.ascii	"android.req_playback_buf_size\000"
	.space	2
	.type	__param_str_fn_cntl, %object
	.size	__param_str_fn_cntl, 16
__param_str_fn_cntl:
	.ascii	"android.fn_cntl\000"
	.type	__param_str_fn_cap, %object
	.size	__param_str_fn_cap, 15
__param_str_fn_cap:
	.ascii	"android.fn_cap\000"
	.space	1
	.type	__param_str_fn_play, %object
	.size	__param_str_fn_play, 16
__param_str_fn_play:
	.ascii	"android.fn_play\000"
	.type	__param_str_qc_host_addr, %object
	.size	__param_str_qc_host_addr, 21
__param_str_qc_host_addr:
	.ascii	"android.qc_host_addr\000"
	.space	3
	.type	__param_str_qc_dev_addr, %object
	.size	__param_str_qc_dev_addr, 20
__param_str_qc_dev_addr:
	.ascii	"android.qc_dev_addr\000"
	.type	__param_str_host_addr, %object
	.size	__param_str_host_addr, 18
__param_str_host_addr:
	.ascii	"android.host_addr\000"
	.space	2
	.type	__param_str_dev_addr, %object
	.size	__param_str_dev_addr, 17
__param_str_dev_addr:
	.ascii	"android.dev_addr\000"
	.space	3
	.type	__param_str_qmult, %object
	.size	__param_str_qmult, 14
__param_str_qmult:
	.ascii	"android.qmult\000"
	.space	2
	.type	rndis_qc_fops, %object
	.size	rndis_qc_fops, 104
rndis_qc_fops:
	.word	0
	.space	28
	.word	rndis_qc_ioctl
	.space	8
	.word	rndis_qc_open_dev
	.space	4
	.word	rndis_qc_release_dev
	.space	48
	.type	mbim_fops, %object
	.size	mbim_fops, 104
mbim_fops:
	.word	0
	.space	4
	.word	mbim_read
	.word	mbim_write
	.space	16
	.word	mbim_ioctl
	.space	8
	.word	mbim_open
	.space	4
	.word	mbim_release
	.space	48
	.type	__param_str_rndis_ul_max_xfer_size_rcvd, %object
	.size	__param_str_rndis_ul_max_xfer_size_rcvd, 36
__param_str_rndis_ul_max_xfer_size_rcvd:
	.ascii	"android.rndis_ul_max_xfer_size_rcvd\000"
	.type	__param_str_rndis_ul_max_pkt_per_xfer_rcvd, %object
	.size	__param_str_rndis_ul_max_pkt_per_xfer_rcvd, 39
__param_str_rndis_ul_max_pkt_per_xfer_rcvd:
	.ascii	"android.rndis_ul_max_pkt_per_xfer_rcvd\000"
	.space	1
	.type	__param_str_rndis_ul_max_pkt_per_xfer, %object
	.size	__param_str_rndis_ul_max_pkt_per_xfer, 34
__param_str_rndis_ul_max_pkt_per_xfer:
	.ascii	"android.rndis_ul_max_pkt_per_xfer\000"
	.space	2
	.type	__param_str_rndis_dl_max_pkt_per_xfer, %object
	.size	__param_str_rndis_dl_max_pkt_per_xfer, 34
__param_str_rndis_dl_max_pkt_per_xfer:
	.ascii	"android.rndis_dl_max_pkt_per_xfer\000"
	.space	2
	.type	acc_hid_table, %object
	.size	acc_hid_table, 32
acc_hid_table:
	.short	3
	.space	2
	.word	-1
	.word	-1
	.space	4
	.space	16
	.type	acc_fops, %object
	.size	acc_fops, 104
acc_fops:
	.word	0
	.space	4
	.word	acc_read
	.word	acc_write
	.space	16
	.word	acc_ioctl
	.space	8
	.word	acc_open
	.space	4
	.word	acc_release
	.space	48
	.type	mtp_fops, %object
	.size	mtp_fops, 104
mtp_fops:
	.word	0
	.space	4
	.word	mtp_read
	.word	mtp_write
	.space	16
	.word	mtp_ioctl
	.space	8
	.word	mtp_open
	.space	4
	.word	mtp_release
	.space	48
	.type	mtp_shortname, %object
	.size	mtp_shortname, 8
mtp_shortname:
	.ascii	"mtp_usb\000"
	.type	__param_str_mtp_tx_reqs, %object
	.size	__param_str_mtp_tx_reqs, 20
__param_str_mtp_tx_reqs:
	.ascii	"android.mtp_tx_reqs\000"
	.type	__param_str_mtp_tx_req_len, %object
	.size	__param_str_mtp_tx_req_len, 23
__param_str_mtp_tx_req_len:
	.ascii	"android.mtp_tx_req_len\000"
	.space	1
	.type	__param_str_mtp_rx_req_len, %object
	.size	__param_str_mtp_rx_req_len, 23
__param_str_mtp_rx_req_len:
	.ascii	"android.mtp_rx_req_len\000"
	.space	1
	.type	ccid_ctrl_fops, %object
	.size	ccid_ctrl_fops, 104
ccid_ctrl_fops:
	.word	0
	.space	4
	.word	ccid_ctrl_read
	.space	20
	.word	ccid_ctrl_ioctl
	.space	8
	.word	ccid_ctrl_open
	.space	4
	.word	ccid_ctrl_release
	.space	48
	.type	ccid_bulk_fops, %object
	.size	ccid_bulk_fops, 104
ccid_bulk_fops:
	.word	0
	.space	4
	.word	ccid_bulk_read
	.word	ccid_bulk_write
	.space	28
	.word	ccid_bulk_open
	.space	4
	.word	ccid_bulk_release
	.space	48
	.type	adb_fops, %object
	.size	adb_fops, 104
adb_fops:
	.word	0
	.space	4
	.word	adb_read
	.word	adb_write
	.space	28
	.word	adb_open
	.space	4
	.word	adb_release
	.space	48
	.type	adb_shortname, %object
	.size	adb_shortname, 12
adb_shortname:
	.ascii	"android_adb\000"
	.type	ghsuart_data_stats_ops, %object
	.size	ghsuart_data_stats_ops, 104
ghsuart_data_stats_ops:
	.space	8
	.word	ghsuart_data_read_stats
	.word	ghsuart_data_reset_stats
	.space	88
	.type	__param_str_ghsuart_data_tx_intr_thld, %object
	.size	__param_str_ghsuart_data_tx_intr_thld, 34
__param_str_ghsuart_data_tx_intr_thld:
	.ascii	"android.ghsuart_data_tx_intr_thld\000"
	.space	2
	.type	__param_str_ghsuart_data_rx_req_size, %object
	.size	__param_str_ghsuart_data_rx_req_size, 33
__param_str_ghsuart_data_rx_req_size:
	.ascii	"android.ghsuart_data_rx_req_size\000"
	.space	3
	.type	__param_str_ghsuart_data_serial_rx_q_size, %object
	.size	__param_str_ghsuart_data_serial_rx_q_size, 38
__param_str_ghsuart_data_serial_rx_q_size:
	.ascii	"android.ghsuart_data_serial_rx_q_size\000"
	.space	2
	.type	__param_str_ghsuart_data_serial_tx_q_size, %object
	.size	__param_str_ghsuart_data_serial_tx_q_size, 38
__param_str_ghsuart_data_serial_tx_q_size:
	.ascii	"android.ghsuart_data_serial_tx_q_size\000"
	.space	2
	.type	__param_str_ghsuart_data_rmnet_rx_q_size, %object
	.size	__param_str_ghsuart_data_rmnet_rx_q_size, 37
__param_str_ghsuart_data_rmnet_rx_q_size:
	.ascii	"android.ghsuart_data_rmnet_rx_q_size\000"
	.space	3
	.type	__param_str_ghsuart_data_rmnet_tx_q_size, %object
	.size	__param_str_ghsuart_data_rmnet_tx_q_size, 37
__param_str_ghsuart_data_rmnet_tx_q_size:
	.ascii	"android.ghsuart_data_rmnet_tx_q_size\000"
	.space	3
	.type	__param_str_ghsic_data_pend_limit_with_bridge, %object
	.size	__param_str_ghsic_data_pend_limit_with_bridge, 42
__param_str_ghsic_data_pend_limit_with_bridge:
	.ascii	"android.ghsic_data_pend_limit_with_bridge\000"
	.space	2
	.type	__param_str_ghsic_data_fctrl_dis_thld, %object
	.size	__param_str_ghsic_data_fctrl_dis_thld, 34
__param_str_ghsic_data_fctrl_dis_thld:
	.ascii	"android.ghsic_data_fctrl_dis_thld\000"
	.space	2
	.type	__param_str_ghsic_data_fctrl_en_thld, %object
	.size	__param_str_ghsic_data_fctrl_en_thld, 33
__param_str_ghsic_data_fctrl_en_thld:
	.ascii	"android.ghsic_data_fctrl_en_thld\000"
	.space	3
	.type	__param_str_ghsic_data_fctrl_support, %object
	.size	__param_str_ghsic_data_fctrl_support, 33
__param_str_ghsic_data_fctrl_support:
	.ascii	"android.ghsic_data_fctrl_support\000"
	.space	3
	.type	__param_str_ghsic_data_tx_intr_thld, %object
	.size	__param_str_ghsic_data_tx_intr_thld, 32
__param_str_ghsic_data_tx_intr_thld:
	.ascii	"android.ghsic_data_tx_intr_thld\000"
	.type	__param_str_ghsic_data_rx_req_size, %object
	.size	__param_str_ghsic_data_rx_req_size, 31
__param_str_ghsic_data_rx_req_size:
	.ascii	"android.ghsic_data_rx_req_size\000"
	.space	1
	.type	__param_str_ghsic_data_serial_rx_q_size, %object
	.size	__param_str_ghsic_data_serial_rx_q_size, 36
__param_str_ghsic_data_serial_rx_q_size:
	.ascii	"android.ghsic_data_serial_rx_q_size\000"
	.type	__param_str_ghsic_data_serial_tx_q_size, %object
	.size	__param_str_ghsic_data_serial_tx_q_size, 36
__param_str_ghsic_data_serial_tx_q_size:
	.ascii	"android.ghsic_data_serial_tx_q_size\000"
	.type	__param_str_ghsic_data_rmnet_rx_q_size, %object
	.size	__param_str_ghsic_data_rmnet_rx_q_size, 35
__param_str_ghsic_data_rmnet_rx_q_size:
	.ascii	"android.ghsic_data_rmnet_rx_q_size\000"
	.space	1
	.type	__param_str_ghsic_data_rmnet_tx_q_size, %object
	.size	__param_str_ghsic_data_rmnet_tx_q_size, 35
__param_str_ghsic_data_rmnet_tx_q_size:
	.ascii	"android.ghsic_data_rmnet_tx_q_size\000"
	.space	1
	.type	rmnet_ctrl_fops, %object
	.size	rmnet_ctrl_fops, 104
rmnet_ctrl_fops:
	.word	0
	.space	4
	.word	rmnet_ctrl_read
	.word	rmnet_ctrl_write
	.space	12
	.word	rmnet_ctrl_poll
	.word	rmnet_ctrl_ioctl
	.space	8
	.word	rmnet_ctrl_open
	.space	4
	.word	rmnet_ctrl_release
	.space	48
	.type	__param_str_dl_intr_threshold, %object
	.size	__param_str_dl_intr_threshold, 26
__param_str_dl_intr_threshold:
	.ascii	"android.dl_intr_threshold\000"
	.space	2
	.type	__param_str_bam_mux_rx_req_size, %object
	.size	__param_str_bam_mux_rx_req_size, 28
__param_str_bam_mux_rx_req_size:
	.ascii	"android.bam_mux_rx_req_size\000"
	.type	__param_str_bam_mux_rx_q_size, %object
	.size	__param_str_bam_mux_rx_q_size, 26
__param_str_bam_mux_rx_q_size:
	.ascii	"android.bam_mux_rx_q_size\000"
	.space	2
	.type	__param_str_bam_mux_tx_q_size, %object
	.size	__param_str_bam_mux_tx_q_size, 26
__param_str_bam_mux_tx_q_size:
	.ascii	"android.bam_mux_tx_q_size\000"
	.space	2
	.type	__param_str_bam_mux_rx_fctrl_dis_thld, %object
	.size	__param_str_bam_mux_rx_fctrl_dis_thld, 34
__param_str_bam_mux_rx_fctrl_dis_thld:
	.ascii	"android.bam_mux_rx_fctrl_dis_thld\000"
	.space	2
	.type	__param_str_bam_mux_rx_fctrl_support, %object
	.size	__param_str_bam_mux_rx_fctrl_support, 33
__param_str_bam_mux_rx_fctrl_support:
	.ascii	"android.bam_mux_rx_fctrl_support\000"
	.space	3
	.type	__param_str_bam_mux_rx_fctrl_en_thld, %object
	.size	__param_str_bam_mux_rx_fctrl_en_thld, 33
__param_str_bam_mux_rx_fctrl_en_thld:
	.ascii	"android.bam_mux_rx_fctrl_en_thld\000"
	.space	3
	.type	__param_str_bam_mux_tx_pkt_drop_thld, %object
	.size	__param_str_bam_mux_tx_pkt_drop_thld, 33
__param_str_bam_mux_tx_pkt_drop_thld:
	.ascii	"android.bam_mux_tx_pkt_drop_thld\000"
	.space	3
	.type	__param_str_bam_pending_limit, %object
	.size	__param_str_bam_pending_limit, 26
__param_str_bam_pending_limit:
	.ascii	"android.bam_pending_limit\000"
	.space	2
	.type	fsg_string_interface, %object
	.size	fsg_string_interface, 13
fsg_string_interface:
	.ascii	"Mass Storage\000"
	.space	3
	.type	rmnet_mux_ctrl_fops, %object
	.size	rmnet_mux_ctrl_fops, 104
rmnet_mux_ctrl_fops:
	.word	0
	.space	4
	.word	usb_rmnet_mux_ctrl_read
	.word	usb_rmnet_mux_ctrl_write
	.space	16
	.word	usb_rmnet_mux_ctrl_ioctl
	.space	8
	.word	usb_rmnet_mux_ctrl_open
	.space	4
	.word	usb_rmnet_mux_ctrl_release
	.space	48
	.type	__param_str_mux_sdio_rx_fctrl_dis_thld, %object
	.size	__param_str_mux_sdio_rx_fctrl_dis_thld, 35
__param_str_mux_sdio_rx_fctrl_dis_thld:
	.ascii	"android.mux_sdio_rx_fctrl_dis_thld\000"
	.space	1
	.type	__param_str_mux_sdio_rx_fctrl_en_thld, %object
	.size	__param_str_mux_sdio_rx_fctrl_en_thld, 34
__param_str_mux_sdio_rx_fctrl_en_thld:
	.ascii	"android.mux_sdio_rx_fctrl_en_thld\000"
	.space	2
	.type	__param_str_mux_sdio_tx_pkt_drop_thld, %object
	.size	__param_str_mux_sdio_tx_pkt_drop_thld, 34
__param_str_mux_sdio_tx_pkt_drop_thld:
	.ascii	"android.mux_sdio_tx_pkt_drop_thld\000"
	.space	2
	.type	__param_str_rmnet_mux_smd_data_ch, %object
	.size	__param_str_rmnet_mux_smd_data_ch, 30
__param_str_rmnet_mux_smd_data_ch:
	.ascii	"android.rmnet_mux_smd_data_ch\000"
	.space	2
	.type	__param_str_rmnet_mux_sdio_data_ch, %object
	.size	__param_str_rmnet_mux_sdio_data_ch, 31
__param_str_rmnet_mux_sdio_data_ch:
	.ascii	"android.rmnet_mux_sdio_data_ch\000"
	.space	1
	.type	__param_str_rmnet_mux_sdio_ctl_ch, %object
	.size	__param_str_rmnet_mux_sdio_ctl_ch, 30
__param_str_rmnet_mux_sdio_ctl_ch:
	.ascii	"android.rmnet_mux_sdio_ctl_ch\000"
	.space	2
	.type	__param_str_sdio_rx_fctrl_dis_thld, %object
	.size	__param_str_sdio_rx_fctrl_dis_thld, 31
__param_str_sdio_rx_fctrl_dis_thld:
	.ascii	"android.sdio_rx_fctrl_dis_thld\000"
	.space	1
	.type	__param_str_sdio_rx_fctrl_en_thld, %object
	.size	__param_str_sdio_rx_fctrl_en_thld, 30
__param_str_sdio_rx_fctrl_en_thld:
	.ascii	"android.sdio_rx_fctrl_en_thld\000"
	.space	2
	.type	__param_str_sdio_tx_pkt_drop_thld, %object
	.size	__param_str_sdio_tx_pkt_drop_thld, 30
__param_str_sdio_tx_pkt_drop_thld:
	.ascii	"android.sdio_tx_pkt_drop_thld\000"
	.space	2
	.type	__param_str_rmnet_sdio_data_ch, %object
	.size	__param_str_rmnet_sdio_data_ch, 27
__param_str_rmnet_sdio_data_ch:
	.ascii	"android.rmnet_sdio_data_ch\000"
	.space	1
	.type	__param_str_rmnet_sdio_ctl_ch, %object
	.size	__param_str_rmnet_sdio_ctl_ch, 26
__param_str_rmnet_sdio_ctl_ch:
	.ascii	"android.rmnet_sdio_ctl_ch\000"
	.space	2
	.type	__param_str_rmnet_data_ch, %object
	.size	__param_str_rmnet_data_ch, 22
__param_str_rmnet_data_ch:
	.ascii	"android.rmnet_data_ch\000"
	.space	2
	.type	__param_str_rmnet_ctl_ch, %object
	.size	__param_str_rmnet_ctl_ch, 21
__param_str_rmnet_ctl_ch:
	.ascii	"android.rmnet_ctl_ch\000"
	.space	3
	.type	__param_str_iSerialNumber, %object
	.size	__param_str_iSerialNumber, 22
__param_str_iSerialNumber:
	.ascii	"android.iSerialNumber\000"
	.space	2
	.type	__param_str_iProduct, %object
	.size	__param_str_iProduct, 17
__param_str_iProduct:
	.ascii	"android.iProduct\000"
	.space	3
	.type	__param_str_iManufacturer, %object
	.size	__param_str_iManufacturer, 22
__param_str_iManufacturer:
	.ascii	"android.iManufacturer\000"
	.space	2
	.type	__param_str_bcdDevice, %object
	.size	__param_str_bcdDevice, 18
__param_str_bcdDevice:
	.ascii	"android.bcdDevice\000"
	.space	2
	.type	__param_str_idProduct, %object
	.size	__param_str_idProduct, 18
__param_str_idProduct:
	.ascii	"android.idProduct\000"
	.space	2
	.type	__param_str_idVendor, %object
	.size	__param_str_idVendor, 17
__param_str_idVendor:
	.ascii	"android.idVendor\000"
	.data
	.align	3
	.set	.LANCHOR1,. + 0
	.set	.LANCHOR4,. + 8184
	.type	uac1_ac_header_desc, %object
	.size	uac1_ac_header_desc, 10
uac1_ac_header_desc:
	.byte	10
	.byte	36
	.byte	1
	.2byte	256
	.2byte	52
	.byte	2
	.space	2
	.space	2
	.type	ntb_parameters, %object
	.size	ntb_parameters, 28
ntb_parameters:
	.short	28
	.short	3
	.word	2048
	.short	4
	.short	0
	.short	4
	.space	2
	.word	16384
	.short	4
	.short	0
	.short	4
	.space	2
	.type	usb_diag_ch_list, %object
	.size	usb_diag_ch_list, 8
usb_diag_ch_list:
	.word	usb_diag_ch_list
	.word	usb_diag_ch_list
	.type	ndp16_opts, %object
	.size	ndp16_opts, 44
ndp16_opts:
	.word	1213023054
	.word	810369870
	.word	12
	.word	8
	.word	4
	.word	1
	.word	1
	.word	1
	.word	0
	.word	0
	.word	1
	.type	ndp32_opts, %object
	.size	ndp32_opts, 44
ndp32_opts:
	.word	1751999342
	.word	812475246
	.word	16
	.word	16
	.word	8
	.word	2
	.word	2
	.word	2
	.word	1
	.word	2
	.word	2
	.type	mbim_ntb_parameters, %object
	.size	mbim_ntb_parameters, 28
mbim_ntb_parameters:
	.short	28
	.short	1
	.word	16384
	.short	4
	.short	0
	.short	4
	.space	2
	.word	4096
	.short	4
	.short	0
	.short	4
	.short	0
	.type	mbim_ext_config_desc, %object
	.size	mbim_ext_config_desc, 40
mbim_ext_config_desc:
	.word	40
	.short	256
	.short	4
	.byte	1
	.space	7
	.byte	0
	.byte	1
	.ascii	"ALTRCFG\000"
	.space	14
	.type	mbim_os_string, %object
	.size	mbim_os_string, 18
mbim_os_string:
	.ascii	"\022\003M\000S\000F\000T\0001\0000\0000\000\245\000"
	.space	2
	.type	device_desc, %object
	.size	device_desc, 18
device_desc:
	.byte	18
	.byte	1
	.short	512
	.byte	0
	.space	3
	.short	6353
	.short	1
	.short	-1
	.space	3
	.byte	1
	.space	2
	.type	ops.26157, %object
	.size	ops.26157, 12
ops.26157:
	.word	f_midi_snd_free
	.space	8
	.type	gmidi_in_ops, %object
	.size	gmidi_in_ops, 16
gmidi_in_ops:
	.word	f_midi_in_open
	.word	f_midi_in_close
	.word	f_midi_in_trigger
	.space	4
	.type	gmidi_out_ops, %object
	.size	gmidi_out_ops, 16
gmidi_out_ops:
	.word	f_midi_out_open
	.word	f_midi_out_close
	.word	f_midi_out_trigger
	.space	4
	.type	_rs.51536, %object
	.size	_rs.51536, 24
_rs.51536:
	.word	0
	.word	1500
	.word	10
	.space	12
	.type	usb_qdss_ch_list, %object
	.size	usb_qdss_ch_list, 8
usb_qdss_ch_list:
	.word	usb_qdss_ch_list
	.word	usb_qdss_ch_list
	.type	android_platform_driver, %object
	.size	android_platform_driver, 80
android_platform_driver:
	.word	android_probe
	.word	android_remove
	.space	12
	.word	.LC622
	.space	16
	.word	usb_android_dt_match
	.space	32
	.word	android_id_table
	.type	composite_driver, %object
	.size	composite_driver, 88
composite_driver:
	.space	8
	.word	composite_unbind
	.word	composite_setup
	.word	composite_disconnect
	.word	composite_suspend
	.word	composite_resume
	.space	8
	.word	0
	.space	44
	.space	4
	.type	rmnet_ctl_ch, %object
	.size	rmnet_ctl_ch, 4
rmnet_ctl_ch:
	.word	.LC483
	.type	rmnet_data_ch, %object
	.size	rmnet_data_ch, 4
rmnet_data_ch:
	.word	.LC483
	.type	mtp_os_string, %object
	.size	mtp_os_string, 18
mtp_os_string:
	.ascii	"\022\003M\000S\000F\000T\0001\0000\0000\000\001\000"
	.space	2
	.type	mtp_ext_config_desc, %object
	.size	mtp_ext_config_desc, 40
mtp_ext_config_desc:
	.word	40
	.short	256
	.short	4
	.byte	1
	.space	7
	.byte	0
	.byte	1
	.ascii	"MTP\000"
	.space	4
	.space	14
	.type	ccid_class_desc, %object
	.size	ccid_class_desc, 54
ccid_class_desc:
	.byte	54
	.byte	33
	.short	272
	.byte	0
	.byte	2
	.4byte	1
	.4byte	3580
	.4byte	3580
	.byte	0
	.4byte	9600
	.4byte	9600
	.byte	0
	.word	0
	.word	0
	.word	0
	.word	131198
	.word	512
	.byte	0
	.byte	0
	.short	0
	.byte	0
	.byte	1
	.space	2
	.type	_rs.39034, %object
	.size	_rs.39034, 24
_rs.39034:
	.word	0
	.word	1500
	.word	10
	.space	12
	.type	dl_intr_threshold, %object
	.size	dl_intr_threshold, 4
dl_intr_threshold:
	.word	20
	.type	ghsic_data_fctrl_support, %object
	.size	ghsic_data_fctrl_support, 4
ghsic_data_fctrl_support:
	.word	1
	.type	ghsic_data_fctrl_en_thld, %object
	.size	ghsic_data_fctrl_en_thld, 4
ghsic_data_fctrl_en_thld:
	.word	500
	.type	qmult, %object
	.size	qmult, 4
qmult:
	.word	10
	.type	mux_sdio_rx_fctrl_en_thld, %object
	.size	mux_sdio_rx_fctrl_en_thld, 4
mux_sdio_rx_fctrl_en_thld:
	.word	1000
	.type	bam_mux_rx_fctrl_support, %object
	.size	bam_mux_rx_fctrl_support, 4
bam_mux_rx_fctrl_support:
	.word	1
	.type	bam_mux_rx_fctrl_en_thld, %object
	.size	bam_mux_rx_fctrl_en_thld, 4
bam_mux_rx_fctrl_en_thld:
	.word	500
	.type	bam_mux_rx_req_size, %object
	.size	bam_mux_rx_req_size, 4
bam_mux_rx_req_size:
	.word	2048
	.type	mtp_rx_req_len, %object
	.size	mtp_rx_req_len, 4
mtp_rx_req_len:
	.word	16384
	.type	bam_pending_limit, %object
	.size	bam_pending_limit, 4
bam_pending_limit:
	.word	220
	.type	bam_mux_rx_fctrl_dis_thld, %object
	.size	bam_mux_rx_fctrl_dis_thld, 4
bam_mux_rx_fctrl_dis_thld:
	.word	300
	.type	bam_mux_rx_q_size, %object
	.size	bam_mux_rx_q_size, 4
bam_mux_rx_q_size:
	.word	16
	.type	bam_mux_tx_q_size, %object
	.size	bam_mux_tx_q_size, 4
bam_mux_tx_q_size:
	.word	200
	.type	rmnet_device, %object
	.size	rmnet_device, 36
rmnet_device:
	.word	255
	.word	.LC907
	.word	rmnet_ctrl_fops
	.space	24
	.type	acc_device, %object
	.size	acc_device, 36
acc_device:
	.word	255
	.word	.LC896
	.word	acc_fops
	.space	24
	.type	rndis_qc_device, %object
	.size	rndis_qc_device, 36
rndis_qc_device:
	.word	255
	.word	.LC885
	.word	rndis_qc_fops
	.space	24
	.type	mtp_device, %object
	.size	mtp_device, 36
mtp_device:
	.word	255
	.word	mtp_shortname
	.word	mtp_fops
	.space	24
	.type	adb_device, %object
	.size	adb_device, 36
adb_device:
	.word	255
	.word	adb_shortname
	.word	adb_fops
	.space	24
	.type	rmnet_mux_ctrl_dev, %object
	.size	rmnet_mux_ctrl_dev, 36
rmnet_mux_ctrl_dev:
	.word	255
	.word	.LC922
	.word	rmnet_mux_ctrl_fops
	.space	24
	.type	ccid_bulk_device, %object
	.size	ccid_bulk_device, 36
ccid_bulk_device:
	.word	255
	.word	.LC900
	.word	ccid_bulk_fops
	.space	24
	.type	ccid_ctrl_device, %object
	.size	ccid_ctrl_device, 36
ccid_ctrl_device:
	.word	255
	.word	.LC899
	.word	ccid_ctrl_fops
	.space	24
	.type	mbim_device, %object
	.size	mbim_device, 36
mbim_device:
	.word	255
	.word	.LC892
	.word	mbim_fops
	.space	24
	.type	strings_dev, %object
	.size	strings_dev, 32
strings_dev:
	.space	4
	.word	manufacturer_string
	.space	4
	.word	product_string
	.space	4
	.word	serial_string
	.space	8
	.type	last_vote.61547, %object
	.size	last_vote.61547, 4
last_vote.61547:
	.word	-1
	.type	ghid_device_android_keyboard, %object
	.size	ghid_device_android_keyboard, 69
ghid_device_android_keyboard:
	.byte	1
	.byte	1
	.short	8
	.short	63
	.byte	5
	.byte	1
	.byte	9
	.byte	6
	.byte	-95
	.byte	1
	.byte	5
	.byte	7
	.byte	25
	.byte	-32
	.byte	41
	.byte	-25
	.byte	21
	.byte	0
	.byte	37
	.byte	1
	.byte	117
	.byte	1
	.byte	-107
	.byte	8
	.byte	-127
	.byte	2
	.byte	-107
	.byte	1
	.byte	117
	.byte	8
	.byte	-127
	.byte	3
	.byte	-107
	.byte	5
	.byte	117
	.byte	1
	.byte	5
	.byte	8
	.byte	25
	.byte	1
	.byte	41
	.byte	5
	.byte	-111
	.byte	2
	.byte	-107
	.byte	1
	.byte	117
	.byte	3
	.byte	-111
	.byte	3
	.byte	-107
	.byte	6
	.byte	117
	.byte	8
	.byte	21
	.byte	0
	.byte	37
	.byte	101
	.byte	5
	.byte	7
	.byte	25
	.byte	0
	.byte	41
	.byte	101
	.byte	-127
	.byte	0
	.byte	-64
	.space	3
	.type	ghid_device_android_mouse, %object
	.size	ghid_device_android_mouse, 58
ghid_device_android_mouse:
	.byte	1
	.byte	2
	.short	4
	.short	52
	.byte	5
	.byte	1
	.byte	9
	.byte	2
	.byte	-95
	.byte	1
	.byte	9
	.byte	1
	.byte	-95
	.byte	0
	.byte	5
	.byte	9
	.byte	25
	.byte	1
	.byte	41
	.byte	5
	.byte	21
	.byte	0
	.byte	37
	.byte	1
	.byte	-107
	.byte	5
	.byte	117
	.byte	1
	.byte	-127
	.byte	2
	.byte	-107
	.byte	1
	.byte	117
	.byte	3
	.byte	-127
	.byte	1
	.byte	5
	.byte	1
	.byte	9
	.byte	48
	.byte	9
	.byte	49
	.byte	9
	.byte	56
	.byte	21
	.byte	-127
	.byte	37
	.byte	127
	.byte	117
	.byte	8
	.byte	-107
	.byte	3
	.byte	-127
	.byte	6
	.byte	-64
	.byte	-64
	.space	2
	.type	acc_hid_ll_driver, %object
	.size	acc_hid_ll_driver, 28
acc_hid_ll_driver:
	.word	acc_hid_start
	.word	acc_hid_stop
	.word	acc_hid_open
	.word	acc_hid_close
	.space	8
	.word	acc_hid_parse
	.type	ffs_fs_type, %object
	.size	ffs_fs_type, 36
ffs_fs_type:
	.word	.LC919
	.space	4
	.word	ffs_fs_mount
	.space	8
	.word	ffs_fs_kill_sb
	.word	0
	.space	8
	.type	req_capture_buf_size, %object
	.size	req_capture_buf_size, 4
req_capture_buf_size:
	.word	32
	.type	audio_playback_buf_size, %object
	.size	audio_playback_buf_size, 4
audio_playback_buf_size:
	.word	8192
	.type	req_playback_count, %object
	.size	req_playback_count, 4
req_playback_count:
	.word	48
	.type	req_playback_buf_size, %object
	.size	req_playback_buf_size, 4
req_playback_buf_size:
	.word	32
	.type	_rs.51105, %object
	.size	_rs.51105, 24
_rs.51105:
	.word	0
	.word	1500
	.word	10
	.space	12
	.type	ghsic_data_pend_limit_with_bridge, %object
	.size	ghsic_data_pend_limit_with_bridge, 4
ghsic_data_pend_limit_with_bridge:
	.word	500
	.type	ghsic_data_rx_req_size, %object
	.size	ghsic_data_rx_req_size, 4
ghsic_data_rx_req_size:
	.word	2048
	.type	_rs.51162, %object
	.size	_rs.51162, 24
_rs.51162:
	.word	0
	.word	1500
	.word	10
	.space	12
	.type	_rs.51836, %object
	.size	_rs.51836, 24
_rs.51836:
	.word	0
	.word	1500
	.word	10
	.space	12
	.type	ghsuart_data_rx_req_size, %object
	.size	ghsuart_data_rx_req_size, 4
ghsuart_data_rx_req_size:
	.word	2048
	.type	_rs.51887, %object
	.size	_rs.51887, 24
_rs.51887:
	.word	0
	.word	1500
	.word	10
	.space	12
	.type	ghsuart_data_tx_intr_thld, %object
	.size	ghsuart_data_tx_intr_thld, 4
ghsuart_data_tx_intr_thld:
	.word	1
	.type	ghsic_data_tx_intr_thld, %object
	.size	ghsic_data_tx_intr_thld, 4
ghsic_data_tx_intr_thld:
	.word	20
	.type	ghsic_data_fctrl_dis_thld, %object
	.size	ghsic_data_fctrl_dis_thld, 4
ghsic_data_fctrl_dis_thld:
	.word	300
	.type	bam_mux_tx_pkt_drop_thld, %object
	.size	bam_mux_tx_pkt_drop_thld, 4
bam_mux_tx_pkt_drop_thld:
	.word	1000
	.type	audio_capture_buf_size, %object
	.size	audio_capture_buf_size, 4
audio_capture_buf_size:
	.word	8192
	.type	sdio_rx_fctrl_en_thld, %object
	.size	sdio_rx_fctrl_en_thld, 4
sdio_rx_fctrl_en_thld:
	.word	1000
	.type	rl.52792, %object
	.size	rl.52792, 24
rl.52792:
	.word	0
	.word	3000
	.word	1
	.space	12
	.type	adb_function, %object
	.size	adb_function, 52
adb_function:
	.word	.LC500
	.space	20
	.word	adb_function_init
	.word	adb_function_cleanup
	.word	adb_android_function_enable
	.word	adb_android_function_disable
	.word	adb_function_bind_config
	.space	8
	.type	ecm_qc_string_defs, %object
	.size	ecm_qc_string_defs, 32
ecm_qc_string_defs:
	.space	4
	.word	.LC889
	.space	4
	.word	0
	.space	4
	.word	.LC890
	.space	8
	.type	dev_attr_suspended, %object
	.size	dev_attr_suspended, 16
dev_attr_suspended:
	.word	.LC928
	.short	292
	.space	2
	.word	composite_show_suspended
	.word	0
	.type	android_usb_attributes, %object
	.size	android_usb_attributes, 60
android_usb_attributes:
	.word	dev_attr_idVendor
	.word	dev_attr_idProduct
	.word	dev_attr_bcdDevice
	.word	dev_attr_bDeviceClass
	.word	dev_attr_bDeviceSubClass
	.word	dev_attr_bDeviceProtocol
	.word	dev_attr_iManufacturer
	.word	dev_attr_iProduct
	.word	dev_attr_iSerial
	.word	dev_attr_functions
	.word	dev_attr_enable
	.word	dev_attr_pm_qos
	.word	dev_attr_state
	.word	dev_attr_remote_wakeup
	.word	0
	.type	android_usb_driver, %object
	.size	android_usb_driver, 44
android_usb_driver:
	.word	.LC622
	.space	8
	.word	device_desc
	.word	dev_strings
	.word	5
	.space	4
	.word	android_usb_unbind
	.space	12
	.type	ffs_function, %object
	.size	ffs_function, 52
ffs_function:
	.word	.LC254
	.space	12
	.word	ffs_function_attributes
	.space	4
	.word	ffs_function_init
	.word	ffs_function_cleanup
	.word	ffs_function_enable
	.word	ffs_function_disable
	.word	ffs_function_bind_config
	.space	8
	.type	ncm_string_defs, %object
	.size	ncm_string_defs, 40
ncm_string_defs:
	.space	4
	.word	.LC868
	.space	4
	.word	0
	.space	4
	.word	.LC869
	.space	4
	.word	.LC870
	.space	8
	.type	ecm_string_defs, %object
	.size	ecm_string_defs, 40
ecm_string_defs:
	.space	4
	.word	.LC889
	.space	4
	.word	0
	.space	4
	.word	.LC890
	.space	4
	.word	.LC891
	.space	8
	.type	mbim_ndp16_opts, %object
	.size	mbim_ndp16_opts, 44
mbim_ndp16_opts:
	.word	1213023054
	.word	810369870
	.word	12
	.word	8
	.word	4
	.word	1
	.word	1
	.word	1
	.word	0
	.word	0
	.word	1
	.type	mbim_ndp32_opts, %object
	.size	mbim_ndp32_opts, 44
mbim_ndp32_opts:
	.word	1751999342
	.word	812475246
	.word	16
	.word	16
	.word	8
	.word	2
	.word	2
	.word	2
	.word	1
	.word	2
	.word	2
	.type	mtp_tx_req_len, %object
	.size	mtp_tx_req_len, 4
mtp_tx_req_len:
	.word	16384
	.type	acc_hid_driver, %object
	.size	acc_hid_driver, 132
acc_hid_driver:
	.word	.LC895
	.word	acc_hid_table
	.space	12
	.word	acc_hid_probe
	.space	108
	.type	dev_attr_cdrom, %object
	.size	dev_attr_cdrom, 16
dev_attr_cdrom:
	.word	.LC915
	.short	420
	.space	2
	.word	fsg_show_cdrom
	.word	fsg_store_cdrom
	.type	dev_attr_nofua, %object
	.size	dev_attr_nofua, 16
dev_attr_nofua:
	.word	.LC917
	.short	420
	.space	2
	.word	fsg_show_nofua
	.word	fsg_store_nofua
	.type	dev_attr_ro, %object
	.size	dev_attr_ro, 16
dev_attr_ro:
	.word	.LC918
	.short	420
	.space	2
	.word	fsg_show_ro
	.word	fsg_store_ro
	.type	dev_attr_file, %object
	.size	dev_attr_file, 16
dev_attr_file:
	.word	.LC916
	.short	420
	.space	2
	.word	fsg_show_file
	.word	fsg_store_file
	.type	fs_adb_descs, %object
	.size	fs_adb_descs, 16
fs_adb_descs:
	.word	adb_interface_desc
	.word	adb_fullspeed_in_desc
	.word	adb_fullspeed_out_desc
	.word	0
	.type	hs_adb_descs, %object
	.size	hs_adb_descs, 16
hs_adb_descs:
	.word	adb_interface_desc
	.word	adb_highspeed_in_desc
	.word	adb_highspeed_out_desc
	.word	0
	.type	ss_adb_descs, %object
	.size	ss_adb_descs, 24
ss_adb_descs:
	.word	adb_interface_desc
	.word	adb_superspeed_in_desc
	.word	adb_superspeed_in_comp_desc
	.word	adb_superspeed_out_desc
	.word	adb_superspeed_out_comp_desc
	.word	0
	.type	ccid_fs_descs, %object
	.size	ccid_fs_descs, 24
ccid_fs_descs:
	.word	ccid_interface_desc
	.word	ccid_class_desc
	.word	ccid_fs_notify_desc
	.word	ccid_fs_in_desc
	.word	ccid_fs_out_desc
	.word	0
	.type	ccid_hs_descs, %object
	.size	ccid_hs_descs, 24
ccid_hs_descs:
	.word	ccid_interface_desc
	.word	ccid_class_desc
	.word	ccid_hs_notify_desc
	.word	ccid_hs_in_desc
	.word	ccid_hs_out_desc
	.word	0
	.type	rmnet_mux_strings, %object
	.size	rmnet_mux_strings, 8
rmnet_mux_strings:
	.word	rmnet_mux_string_table
	.word	0
	.type	rmnet_mux_fs_function, %object
	.size	rmnet_mux_fs_function, 20
rmnet_mux_fs_function:
	.word	rmnet_mux_interface_desc
	.word	rmnet_mux_fs_notify_desc
	.word	rmnet_mux_fs_in_desc
	.word	rmnet_mux_fs_out_desc
	.word	0
	.type	rmnet_mux_hs_function, %object
	.size	rmnet_mux_hs_function, 20
rmnet_mux_hs_function:
	.word	rmnet_mux_interface_desc
	.word	rmnet_mux_hs_notify_desc
	.word	rmnet_mux_hs_in_desc
	.word	rmnet_mux_hs_out_desc
	.word	0
	.type	fsg_strings, %object
	.size	fsg_strings, 16
fsg_strings:
	.byte	0
	.space	3
	.word	fsg_string_interface
	.space	8
	.type	fsg_intf_desc, %object
	.size	fsg_intf_desc, 9
fsg_intf_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	2
	.byte	8
	.byte	6
	.byte	80
	.byte	0
	.space	3
	.type	fsg_strings_array, %object
	.size	fsg_strings_array, 8
fsg_strings_array:
	.word	fsg_stringtab
	.word	0
	.type	intf_desc, %object
	.size	intf_desc, 9
intf_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	2
	.byte	-1
	.byte	-1
	.byte	-1
	.space	1
	.space	3
	.type	fs_bulk_in_desc, %object
	.size	fs_bulk_in_desc, 9
fs_bulk_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	64
	.byte	0
	.space	2
	.space	3
	.type	fs_bulk_out_desc, %object
	.size	fs_bulk_out_desc, 9
fs_bulk_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	64
	.byte	0
	.space	2
	.space	3
	.type	fs_diag_desc, %object
	.size	fs_diag_desc, 16
fs_diag_desc:
	.word	intf_desc
	.word	fs_bulk_in_desc
	.word	fs_bulk_out_desc
	.word	0
	.type	hs_bulk_in_desc, %object
	.size	hs_bulk_in_desc, 9
hs_bulk_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.byte	0
	.space	2
	.space	3
	.type	hs_bulk_out_desc, %object
	.size	hs_bulk_out_desc, 9
hs_bulk_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.byte	0
	.space	2
	.space	3
	.type	hs_diag_desc, %object
	.size	hs_diag_desc, 16
hs_diag_desc:
	.word	intf_desc
	.word	hs_bulk_in_desc
	.word	hs_bulk_out_desc
	.word	0
	.type	ss_bulk_in_desc, %object
	.size	ss_bulk_in_desc, 9
ss_bulk_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	ss_bulk_out_desc, %object
	.size	ss_bulk_out_desc, 9
ss_bulk_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	ss_diag_desc, %object
	.size	ss_diag_desc, 24
ss_diag_desc:
	.word	intf_desc
	.word	ss_bulk_in_desc
	.word	ss_bulk_in_comp_desc
	.word	ss_bulk_out_desc
	.word	ss_bulk_out_comp_desc
	.word	0
	.type	rmnet_smd_interface_desc, %object
	.size	rmnet_smd_interface_desc, 9
rmnet_smd_interface_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	3
	.byte	-1
	.byte	-1
	.byte	-1
	.space	1
	.space	3
	.type	rmnet_smd_fs_in_desc, %object
	.size	rmnet_smd_fs_in_desc, 9
rmnet_smd_fs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	64
	.space	3
	.space	3
	.type	rmnet_smd_fs_out_desc, %object
	.size	rmnet_smd_fs_out_desc, 9
rmnet_smd_fs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	64
	.space	3
	.space	3
	.type	rmnet_smd_fs_notify_desc, %object
	.size	rmnet_smd_fs_notify_desc, 9
rmnet_smd_fs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	32
	.space	2
	.space	3
	.type	rmnet_smd_hs_in_desc, %object
	.size	rmnet_smd_hs_in_desc, 9
rmnet_smd_hs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	rmnet_smd_hs_out_desc, %object
	.size	rmnet_smd_hs_out_desc, 9
rmnet_smd_hs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	rmnet_smd_hs_notify_desc, %object
	.size	rmnet_smd_hs_notify_desc, 9
rmnet_smd_hs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	9
	.space	2
	.space	3
	.type	rmnet_sdio_interface_desc, %object
	.size	rmnet_sdio_interface_desc, 9
rmnet_sdio_interface_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	3
	.byte	-1
	.byte	-1
	.byte	-1
	.space	1
	.space	3
	.type	rmnet_sdio_fs_in_desc, %object
	.size	rmnet_sdio_fs_in_desc, 9
rmnet_sdio_fs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	64
	.space	3
	.space	3
	.type	rmnet_sdio_fs_out_desc, %object
	.size	rmnet_sdio_fs_out_desc, 9
rmnet_sdio_fs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	64
	.space	3
	.space	3
	.type	rmnet_sdio_fs_notify_desc, %object
	.size	rmnet_sdio_fs_notify_desc, 9
rmnet_sdio_fs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	32
	.space	2
	.space	3
	.type	rmnet_sdio_hs_in_desc, %object
	.size	rmnet_sdio_hs_in_desc, 9
rmnet_sdio_hs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	rmnet_sdio_hs_out_desc, %object
	.size	rmnet_sdio_hs_out_desc, 9
rmnet_sdio_hs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	rmnet_sdio_hs_notify_desc, %object
	.size	rmnet_sdio_hs_notify_desc, 9
rmnet_sdio_hs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	9
	.space	2
	.space	3
	.type	input_terminal_desc, %object
	.size	input_terminal_desc, 12
input_terminal_desc:
	.byte	12
	.byte	36
	.byte	2
	.byte	1
	.short	513
	.byte	0
	.space	1
	.short	3
	.space	2
	.type	as_type_i_desc, %object
	.size	as_type_i_desc, 11
as_type_i_desc:
	.byte	11
	.byte	36
	.byte	2
	.byte	1
	.space	1
	.byte	2
	.byte	16
	.byte	1
	.space	3
	.space	1
	.type	audio_source_ac_interface_desc, %object
	.size	audio_source_ac_interface_desc, 9
audio_source_ac_interface_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	0
	.byte	1
	.byte	1
	.space	2
	.space	3
	.type	as_interface_alt_0_desc, %object
	.size	as_interface_alt_0_desc, 9
as_interface_alt_0_desc:
	.byte	9
	.byte	4
	.space	1
	.byte	0
	.byte	0
	.byte	1
	.byte	2
	.space	2
	.space	3
	.type	as_interface_alt_1_desc, %object
	.size	as_interface_alt_1_desc, 9
as_interface_alt_1_desc:
	.byte	9
	.byte	4
	.space	1
	.byte	1
	.byte	1
	.byte	1
	.byte	2
	.space	2
	.space	3
	.type	fs_as_in_ep_desc, %object
	.size	fs_as_in_ep_desc, 9
fs_as_in_ep_desc:
	.byte	9
	.byte	5
	.byte	-128
	.byte	13
	.short	256
	.byte	1
	.space	2
	.space	3
	.type	hs_as_in_ep_desc, %object
	.size	hs_as_in_ep_desc, 9
hs_as_in_ep_desc:
	.byte	9
	.byte	5
	.byte	-128
	.byte	13
	.short	256
	.byte	4
	.space	2
	.space	3
	.type	ecm_qc_control_intf, %object
	.size	ecm_qc_control_intf, 9
ecm_qc_control_intf:
	.byte	9
	.byte	4
	.space	2
	.byte	1
	.byte	2
	.byte	6
	.byte	0
	.space	1
	.space	3
	.type	ecm_qc_union_desc, %object
	.size	ecm_qc_union_desc, 5
ecm_qc_union_desc:
	.byte	5
	.byte	36
	.byte	6
	.space	2
	.space	3
	.type	ecm_qc_data_nop_intf, %object
	.size	ecm_qc_data_nop_intf, 9
ecm_qc_data_nop_intf:
	.byte	9
	.byte	4
	.byte	1
	.byte	0
	.byte	0
	.byte	10
	.byte	0
	.byte	0
	.space	1
	.space	3
	.type	ecm_qc_data_intf, %object
	.size	ecm_qc_data_intf, 9
ecm_qc_data_intf:
	.byte	9
	.byte	4
	.byte	1
	.byte	1
	.byte	2
	.byte	10
	.byte	0
	.byte	0
	.space	1
	.space	3
	.type	ecm_qc_fs_in_desc, %object
	.size	ecm_qc_fs_in_desc, 9
ecm_qc_fs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	ecm_qc_fs_out_desc, %object
	.size	ecm_qc_fs_out_desc, 9
ecm_qc_fs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	ecm_qc_fs_notify_desc, %object
	.size	ecm_qc_fs_notify_desc, 9
ecm_qc_fs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	16
	.byte	32
	.space	2
	.space	3
	.type	ecm_qc_fs_function, %object
	.size	ecm_qc_fs_function, 40
ecm_qc_fs_function:
	.word	ecm_qc_control_intf
	.word	ecm_qc_header_desc
	.word	ecm_qc_union_desc
	.word	ecm_qc_desc
	.word	ecm_qc_fs_notify_desc
	.word	ecm_qc_data_nop_intf
	.word	ecm_qc_data_intf
	.word	ecm_qc_fs_in_desc
	.word	ecm_qc_fs_out_desc
	.word	0
	.type	ecm_qc_hs_in_desc, %object
	.size	ecm_qc_hs_in_desc, 9
ecm_qc_hs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	ecm_qc_hs_out_desc, %object
	.size	ecm_qc_hs_out_desc, 9
ecm_qc_hs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	ecm_qc_hs_notify_desc, %object
	.size	ecm_qc_hs_notify_desc, 9
ecm_qc_hs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	16
	.byte	9
	.space	2
	.space	3
	.type	ecm_qc_hs_function, %object
	.size	ecm_qc_hs_function, 40
ecm_qc_hs_function:
	.word	ecm_qc_control_intf
	.word	ecm_qc_header_desc
	.word	ecm_qc_union_desc
	.word	ecm_qc_desc
	.word	ecm_qc_hs_notify_desc
	.word	ecm_qc_data_nop_intf
	.word	ecm_qc_data_intf
	.word	ecm_qc_hs_in_desc
	.word	ecm_qc_hs_out_desc
	.word	0
	.type	ecm_qc_ss_in_desc, %object
	.size	ecm_qc_ss_in_desc, 9
ecm_qc_ss_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	ecm_qc_ss_out_desc, %object
	.size	ecm_qc_ss_out_desc, 9
ecm_qc_ss_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	ecm_qc_ss_notify_desc, %object
	.size	ecm_qc_ss_notify_desc, 9
ecm_qc_ss_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	16
	.byte	9
	.space	2
	.space	3
	.type	ecm_qc_ss_function, %object
	.size	ecm_qc_ss_function, 52
ecm_qc_ss_function:
	.word	ecm_qc_control_intf
	.word	ecm_qc_header_desc
	.word	ecm_qc_union_desc
	.word	ecm_qc_desc
	.word	ecm_qc_ss_notify_desc
	.word	ecm_qc_ss_notify_comp_desc
	.word	ecm_qc_data_nop_intf
	.word	ecm_qc_data_intf
	.word	ecm_qc_ss_in_desc
	.word	ecm_qc_ss_in_comp_desc
	.word	ecm_qc_ss_out_desc
	.word	ecm_qc_ss_out_comp_desc
	.word	0
	.type	mbim_iad_desc, %object
	.size	mbim_iad_desc, 8
mbim_iad_desc:
	.byte	8
	.byte	11
	.space	1
	.byte	2
	.byte	2
	.byte	14
	.byte	0
	.space	1
	.type	mbim_control_intf, %object
	.size	mbim_control_intf, 9
mbim_control_intf:
	.byte	9
	.byte	4
	.space	2
	.byte	1
	.byte	2
	.byte	14
	.byte	0
	.space	1
	.space	3
	.type	mbim_union_desc, %object
	.size	mbim_union_desc, 5
mbim_union_desc:
	.byte	5
	.byte	36
	.byte	6
	.space	2
	.space	3
	.type	mbim_data_nop_intf, %object
	.size	mbim_data_nop_intf, 9
mbim_data_nop_intf:
	.byte	9
	.byte	4
	.space	1
	.byte	0
	.byte	0
	.byte	10
	.byte	0
	.byte	2
	.space	1
	.space	3
	.type	mbim_data_intf, %object
	.size	mbim_data_intf, 9
mbim_data_intf:
	.byte	9
	.byte	4
	.space	1
	.byte	1
	.byte	2
	.byte	10
	.byte	0
	.byte	2
	.space	1
	.space	3
	.type	fs_mbim_in_desc, %object
	.size	fs_mbim_in_desc, 9
fs_mbim_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	fs_mbim_out_desc, %object
	.size	fs_mbim_out_desc, 9
fs_mbim_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	fs_mbim_notify_desc, %object
	.size	fs_mbim_notify_desc, 9
fs_mbim_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	64
	.byte	32
	.space	2
	.space	3
	.type	mbb_desc, %object
	.size	mbb_desc, 12
mbb_desc:
	.byte	12
	.byte	36
	.byte	27
	.2byte	256
	.2byte	4096
	.byte	32
	.byte	-128
	.2byte	4064
	.byte	32
	.type	mbim_fs_function, %object
	.size	mbim_fs_function, 48
mbim_fs_function:
	.word	mbim_iad_desc
	.word	mbim_control_intf
	.word	mbim_header_desc
	.word	mbim_union_desc
	.word	mbb_desc
	.word	ext_mbb_desc
	.word	fs_mbim_notify_desc
	.word	mbim_data_nop_intf
	.word	mbim_data_intf
	.word	fs_mbim_in_desc
	.word	fs_mbim_out_desc
	.word	0
	.type	hs_mbim_in_desc, %object
	.size	hs_mbim_in_desc, 9
hs_mbim_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	hs_mbim_out_desc, %object
	.size	hs_mbim_out_desc, 9
hs_mbim_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	hs_mbim_notify_desc, %object
	.size	hs_mbim_notify_desc, 9
hs_mbim_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	64
	.byte	9
	.space	2
	.space	3
	.type	mbim_hs_function, %object
	.size	mbim_hs_function, 48
mbim_hs_function:
	.word	mbim_iad_desc
	.word	mbim_control_intf
	.word	mbim_header_desc
	.word	mbim_union_desc
	.word	mbb_desc
	.word	ext_mbb_desc
	.word	hs_mbim_notify_desc
	.word	mbim_data_nop_intf
	.word	mbim_data_intf
	.word	hs_mbim_in_desc
	.word	hs_mbim_out_desc
	.word	0
	.type	ss_mbim_in_desc, %object
	.size	ss_mbim_in_desc, 9
ss_mbim_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	ss_mbim_out_desc, %object
	.size	ss_mbim_out_desc, 9
ss_mbim_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	ss_mbim_notify_desc, %object
	.size	ss_mbim_notify_desc, 9
ss_mbim_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	64
	.byte	9
	.space	2
	.space	3
	.type	mbim_ss_function, %object
	.size	mbim_ss_function, 60
mbim_ss_function:
	.word	mbim_iad_desc
	.word	mbim_control_intf
	.word	mbim_header_desc
	.word	mbim_union_desc
	.word	mbb_desc
	.word	ext_mbb_desc
	.word	ss_mbim_notify_desc
	.word	ss_mbim_notify_comp_desc
	.word	mbim_data_nop_intf
	.word	mbim_data_intf
	.word	ss_mbim_in_desc
	.word	ss_mbim_in_comp_desc
	.word	ss_mbim_out_desc
	.word	ss_mbim_out_comp_desc
	.word	0
	.type	ecm_iad_descriptor, %object
	.size	ecm_iad_descriptor, 8
ecm_iad_descriptor:
	.byte	8
	.byte	11
	.space	1
	.byte	2
	.byte	2
	.byte	6
	.byte	0
	.space	1
	.type	ecm_control_intf, %object
	.size	ecm_control_intf, 9
ecm_control_intf:
	.byte	9
	.byte	4
	.space	2
	.byte	1
	.byte	2
	.byte	6
	.byte	0
	.space	1
	.space	3
	.type	ecm_union_desc, %object
	.size	ecm_union_desc, 5
ecm_union_desc:
	.byte	5
	.byte	36
	.byte	6
	.space	2
	.space	3
	.type	ecm_data_nop_intf, %object
	.size	ecm_data_nop_intf, 9
ecm_data_nop_intf:
	.byte	9
	.byte	4
	.byte	1
	.byte	0
	.byte	0
	.byte	10
	.byte	0
	.byte	0
	.space	1
	.space	3
	.type	ecm_data_intf, %object
	.size	ecm_data_intf, 9
ecm_data_intf:
	.byte	9
	.byte	4
	.byte	1
	.byte	1
	.byte	2
	.byte	10
	.byte	0
	.byte	0
	.space	1
	.space	3
	.type	fs_ecm_in_desc, %object
	.size	fs_ecm_in_desc, 9
fs_ecm_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	fs_ecm_out_desc, %object
	.size	fs_ecm_out_desc, 9
fs_ecm_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	fs_ecm_notify_desc, %object
	.size	fs_ecm_notify_desc, 9
fs_ecm_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	16
	.byte	32
	.space	2
	.space	3
	.type	hs_ecm_in_desc, %object
	.size	hs_ecm_in_desc, 9
hs_ecm_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	hs_ecm_out_desc, %object
	.size	hs_ecm_out_desc, 9
hs_ecm_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	hs_ecm_notify_desc, %object
	.size	hs_ecm_notify_desc, 9
hs_ecm_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	16
	.byte	9
	.space	2
	.space	3
	.type	ss_ecm_in_desc, %object
	.size	ss_ecm_in_desc, 9
ss_ecm_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	ss_ecm_out_desc, %object
	.size	ss_ecm_out_desc, 9
ss_ecm_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	ss_ecm_notify_desc, %object
	.size	ss_ecm_notify_desc, 9
ss_ecm_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	16
	.byte	9
	.space	2
	.space	3
	.type	ecm_fs_function, %object
	.size	ecm_fs_function, 44
ecm_fs_function:
	.word	ecm_iad_descriptor
	.word	ecm_control_intf
	.word	ecm_header_desc
	.word	ecm_union_desc
	.word	ecm_desc
	.word	fs_ecm_notify_desc
	.word	ecm_data_nop_intf
	.word	ecm_data_intf
	.word	fs_ecm_in_desc
	.word	fs_ecm_out_desc
	.word	0
	.type	ecm_hs_function, %object
	.size	ecm_hs_function, 44
ecm_hs_function:
	.word	ecm_iad_descriptor
	.word	ecm_control_intf
	.word	ecm_header_desc
	.word	ecm_union_desc
	.word	ecm_desc
	.word	hs_ecm_notify_desc
	.word	ecm_data_nop_intf
	.word	ecm_data_intf
	.word	hs_ecm_in_desc
	.word	hs_ecm_out_desc
	.word	0
	.type	ecm_ss_function, %object
	.size	ecm_ss_function, 52
ecm_ss_function:
	.word	ecm_control_intf
	.word	ecm_header_desc
	.word	ecm_union_desc
	.word	ecm_desc
	.word	ss_ecm_notify_desc
	.word	ss_ecm_intr_comp_desc
	.word	ecm_data_nop_intf
	.word	ecm_data_intf
	.word	ss_ecm_in_desc
	.word	ss_ecm_bulk_comp_desc
	.word	ss_ecm_out_desc
	.word	ss_ecm_bulk_comp_desc
	.word	0
	.type	speaker_input_terminal_desc, %object
	.size	speaker_input_terminal_desc, 12
speaker_input_terminal_desc:
	.byte	12
	.byte	36
	.byte	2
	.byte	3
	.short	257
	.byte	4
	.space	1
	.short	3
	.space	2
	.type	speaker_as_type_i_desc, %object
	.size	speaker_as_type_i_desc, 11
speaker_as_type_i_desc:
	.byte	11
	.byte	36
	.byte	2
	.byte	1
	.space	1
	.byte	2
	.byte	16
	.byte	1
	.space	3
	.space	1
	.type	microphone_input_terminal_desc, %object
	.size	microphone_input_terminal_desc, 12
microphone_input_terminal_desc:
	.byte	12
	.byte	36
	.byte	2
	.byte	1
	.short	513
	.byte	2
	.byte	1
	.short	3
	.space	2
	.type	microphone_as_type_i_desc, %object
	.size	microphone_as_type_i_desc, 11
microphone_as_type_i_desc:
	.byte	11
	.byte	36
	.byte	2
	.byte	1
	.byte	1
	.byte	2
	.byte	16
	.byte	1
	.space	3
	.space	1
	.type	uac1_ac_interface_desc, %object
	.size	uac1_ac_interface_desc, 9
uac1_ac_interface_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	0
	.byte	1
	.byte	1
	.space	2
	.space	3
	.type	microphone_as_interface_alt_0_desc, %object
	.size	microphone_as_interface_alt_0_desc, 9
microphone_as_interface_alt_0_desc:
	.byte	9
	.byte	4
	.space	1
	.byte	0
	.byte	0
	.byte	1
	.byte	2
	.space	2
	.space	3
	.type	microphone_as_interface_alt_1_desc, %object
	.size	microphone_as_interface_alt_1_desc, 9
microphone_as_interface_alt_1_desc:
	.byte	9
	.byte	4
	.space	1
	.byte	1
	.byte	1
	.byte	1
	.byte	2
	.space	2
	.space	3
	.type	speaker_as_interface_alt_0_desc, %object
	.size	speaker_as_interface_alt_0_desc, 9
speaker_as_interface_alt_0_desc:
	.byte	9
	.byte	4
	.space	1
	.byte	0
	.byte	0
	.byte	1
	.byte	2
	.space	2
	.space	3
	.type	speaker_as_interface_alt_1_desc, %object
	.size	speaker_as_interface_alt_1_desc, 9
speaker_as_interface_alt_1_desc:
	.byte	9
	.byte	4
	.space	1
	.byte	1
	.byte	1
	.byte	1
	.byte	2
	.space	2
	.space	3
	.type	microphone_as_ep_in_desc, %object
	.size	microphone_as_ep_in_desc, 9
microphone_as_ep_in_desc:
	.byte	9
	.byte	5
	.byte	-128
	.byte	5
	.short	32
	.byte	4
	.space	2
	.space	3
	.type	speaker_as_ep_out_desc, %object
	.size	speaker_as_ep_out_desc, 9
speaker_as_ep_out_desc:
	.byte	9
	.byte	5
	.byte	0
	.byte	9
	.short	32
	.byte	4
	.space	2
	.space	3
	.type	microphone_as_iso_in, %object
	.size	microphone_as_iso_in, 32
microphone_as_iso_in:
	.word	microphone_as_iso_in
	.word	microphone_as_iso_in
	.space	12
	.word	.LC871
	.byte	1
	.space	3
	.word	microphone_as_iso_in_desc
	.type	speaker_as_iso_out, %object
	.size	speaker_as_iso_out, 32
speaker_as_iso_out:
	.word	speaker_as_iso_out
	.word	speaker_as_iso_out
	.space	12
	.word	.LC873
	.byte	1
	.space	3
	.word	speaker_as_iso_out_desc
	.type	f_audio_desc, %object
	.size	f_audio_desc, 76
f_audio_desc:
	.word	uac1_ac_interface_desc
	.word	uac1_ac_header_desc
	.word	microphone_input_terminal_desc
	.word	microphone_output_terminal_desc
	.word	speaker_input_terminal_desc
	.word	speaker_output_terminal_desc
	.word	microphone_as_interface_alt_0_desc
	.word	microphone_as_interface_alt_1_desc
	.word	microphone_as_header_desc
	.word	microphone_as_type_i_desc
	.word	microphone_as_ep_in_desc
	.word	microphone_as_iso_in_desc
	.word	speaker_as_interface_alt_0_desc
	.word	speaker_as_interface_alt_1_desc
	.word	speaker_as_header_desc
	.word	speaker_as_type_i_desc
	.word	speaker_as_ep_out_desc
	.word	speaker_as_iso_out_desc
	.word	0
	.type	ncm_iad_desc, %object
	.size	ncm_iad_desc, 8
ncm_iad_desc:
	.byte	8
	.byte	11
	.space	1
	.byte	2
	.byte	2
	.byte	13
	.byte	0
	.space	1
	.type	ncm_control_intf, %object
	.size	ncm_control_intf, 9
ncm_control_intf:
	.byte	9
	.byte	4
	.space	2
	.byte	1
	.byte	2
	.byte	13
	.byte	0
	.space	1
	.space	3
	.type	ncm_union_desc, %object
	.size	ncm_union_desc, 5
ncm_union_desc:
	.byte	5
	.byte	36
	.byte	6
	.space	2
	.space	3
	.type	ncm_data_nop_intf, %object
	.size	ncm_data_nop_intf, 9
ncm_data_nop_intf:
	.byte	9
	.byte	4
	.byte	1
	.byte	0
	.byte	0
	.byte	10
	.byte	0
	.byte	1
	.space	1
	.space	3
	.type	ncm_data_intf, %object
	.size	ncm_data_intf, 9
ncm_data_intf:
	.byte	9
	.byte	4
	.byte	1
	.byte	1
	.byte	2
	.byte	10
	.byte	0
	.byte	1
	.space	1
	.space	3
	.type	fs_ncm_in_desc, %object
	.size	fs_ncm_in_desc, 9
fs_ncm_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	fs_ncm_out_desc, %object
	.size	fs_ncm_out_desc, 9
fs_ncm_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	fs_ncm_notify_desc, %object
	.size	fs_ncm_notify_desc, 9
fs_ncm_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	16
	.byte	32
	.space	2
	.space	3
	.type	hs_ncm_in_desc, %object
	.size	hs_ncm_in_desc, 9
hs_ncm_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	hs_ncm_out_desc, %object
	.size	hs_ncm_out_desc, 9
hs_ncm_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	hs_ncm_notify_desc, %object
	.size	hs_ncm_notify_desc, 9
hs_ncm_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	16
	.byte	9
	.space	2
	.space	3
	.type	ncm_fs_function, %object
	.size	ncm_fs_function, 48
ncm_fs_function:
	.word	ncm_iad_desc
	.word	ncm_control_intf
	.word	ncm_header_desc
	.word	ncm_union_desc
	.word	necm_desc
	.word	ncm_desc
	.word	fs_ncm_notify_desc
	.word	ncm_data_nop_intf
	.word	ncm_data_intf
	.word	fs_ncm_in_desc
	.word	fs_ncm_out_desc
	.word	0
	.type	ncm_hs_function, %object
	.size	ncm_hs_function, 48
ncm_hs_function:
	.word	ncm_iad_desc
	.word	ncm_control_intf
	.word	ncm_header_desc
	.word	ncm_union_desc
	.word	necm_desc
	.word	ncm_desc
	.word	hs_ncm_notify_desc
	.word	ncm_data_nop_intf
	.word	ncm_data_intf
	.word	hs_ncm_in_desc
	.word	hs_ncm_out_desc
	.word	0
	.type	fsg_fs_bulk_in_desc, %object
	.size	fsg_fs_bulk_in_desc, 9
fsg_fs_bulk_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	fsg_fs_bulk_out_desc, %object
	.size	fsg_fs_bulk_out_desc, 9
fsg_fs_bulk_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	fsg_hs_bulk_in_desc, %object
	.size	fsg_hs_bulk_in_desc, 9
fsg_hs_bulk_in_desc:
	.byte	7
	.byte	5
	.space	1
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	fsg_hs_bulk_out_desc, %object
	.size	fsg_hs_bulk_out_desc, 9
fsg_hs_bulk_out_desc:
	.byte	7
	.byte	5
	.space	1
	.byte	2
	.short	512
	.byte	1
	.space	2
	.space	3
	.type	fsg_ss_bulk_in_desc, %object
	.size	fsg_ss_bulk_in_desc, 9
fsg_ss_bulk_in_desc:
	.byte	7
	.byte	5
	.space	1
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	fsg_ss_bulk_in_comp_desc, %object
	.size	fsg_ss_bulk_in_comp_desc, 6
fsg_ss_bulk_in_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	fsg_ss_bulk_out_desc, %object
	.size	fsg_ss_bulk_out_desc, 9
fsg_ss_bulk_out_desc:
	.byte	7
	.byte	5
	.space	1
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	fsg_ss_bulk_out_comp_desc, %object
	.size	fsg_ss_bulk_out_comp_desc, 6
fsg_ss_bulk_out_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	fsg_fs_function, %object
	.size	fsg_fs_function, 16
fsg_fs_function:
	.word	fsg_intf_desc
	.word	fsg_fs_bulk_in_desc
	.word	fsg_fs_bulk_out_desc
	.word	0
	.type	fsg_hs_function, %object
	.size	fsg_hs_function, 16
fsg_hs_function:
	.word	fsg_intf_desc
	.word	fsg_hs_bulk_in_desc
	.word	fsg_hs_bulk_out_desc
	.word	0
	.type	fsg_ss_function, %object
	.size	fsg_ss_function, 24
fsg_ss_function:
	.word	fsg_intf_desc
	.word	fsg_ss_bulk_in_desc
	.word	fsg_ss_bulk_in_comp_desc
	.word	fsg_ss_bulk_out_desc
	.word	fsg_ss_bulk_out_comp_desc
	.word	0
	.type	ccid_interface_desc, %object
	.size	ccid_interface_desc, 9
ccid_interface_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	3
	.byte	11
	.byte	0
	.byte	0
	.space	1
	.space	3
	.type	ccid_fs_notify_desc, %object
	.size	ccid_fs_notify_desc, 9
ccid_fs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	4
	.byte	32
	.space	2
	.space	3
	.type	ccid_fs_in_desc, %object
	.size	ccid_fs_in_desc, 9
ccid_fs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	64
	.space	3
	.space	3
	.type	ccid_fs_out_desc, %object
	.size	ccid_fs_out_desc, 9
ccid_fs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	64
	.space	3
	.space	3
	.type	ccid_hs_in_desc, %object
	.size	ccid_hs_in_desc, 9
ccid_hs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	ccid_hs_out_desc, %object
	.size	ccid_hs_out_desc, 9
ccid_hs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	ccid_hs_notify_desc, %object
	.size	ccid_hs_notify_desc, 9
ccid_hs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	4
	.byte	9
	.space	2
	.space	3
	.type	qdss_data_intf_desc, %object
	.size	qdss_data_intf_desc, 9
qdss_data_intf_desc:
	.byte	9
	.byte	4
	.space	1
	.byte	0
	.byte	1
	.byte	-1
	.byte	-1
	.byte	-1
	.space	1
	.space	3
	.type	qdss_ctrl_intf_desc, %object
	.size	qdss_ctrl_intf_desc, 9
qdss_ctrl_intf_desc:
	.byte	9
	.byte	4
	.space	1
	.byte	0
	.byte	2
	.byte	-1
	.byte	-1
	.byte	-1
	.space	1
	.space	3
	.type	qdss_data_ep_comp_desc, %object
	.size	qdss_data_ep_comp_desc, 6
qdss_data_ep_comp_desc:
	.byte	6
	.byte	48
	.byte	1
	.byte	0
	.short	0
	.space	2
	.type	qdss_ss_data_desc, %object
	.size	qdss_ss_data_desc, 9
qdss_ss_data_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	qdss_ctrl_in_ep_comp_desc, %object
	.size	qdss_ctrl_in_ep_comp_desc, 6
qdss_ctrl_in_ep_comp_desc:
	.byte	6
	.byte	48
	.byte	0
	.byte	0
	.short	0
	.space	2
	.type	qdss_ss_ctrl_in_desc, %object
	.size	qdss_ss_ctrl_in_desc, 9
qdss_ss_ctrl_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	qdss_ctrl_out_ep_comp_desc, %object
	.size	qdss_ctrl_out_ep_comp_desc, 6
qdss_ctrl_out_ep_comp_desc:
	.byte	6
	.byte	48
	.byte	0
	.byte	0
	.short	0
	.space	2
	.type	qdss_ss_ctrl_out_desc, %object
	.size	qdss_ss_ctrl_out_desc, 9
qdss_ss_ctrl_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	qdss_hs_data_desc, %object
	.size	qdss_hs_data_desc, 9
qdss_hs_data_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	qdss_hs_ctrl_in_desc, %object
	.size	qdss_hs_ctrl_in_desc, 9
qdss_hs_ctrl_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	qdss_hs_ctrl_out_desc, %object
	.size	qdss_hs_ctrl_out_desc, 9
qdss_hs_ctrl_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	qdss_hs_desc, %object
	.size	qdss_hs_desc, 24
qdss_hs_desc:
	.word	qdss_data_intf_desc
	.word	qdss_hs_data_desc
	.word	qdss_ctrl_intf_desc
	.word	qdss_hs_ctrl_in_desc
	.word	qdss_hs_ctrl_out_desc
	.word	0
	.type	qdss_ss_desc, %object
	.size	qdss_ss_desc, 36
qdss_ss_desc:
	.word	qdss_data_intf_desc
	.word	qdss_ss_data_desc
	.word	qdss_data_ep_comp_desc
	.word	qdss_ctrl_intf_desc
	.word	qdss_ss_ctrl_in_desc
	.word	qdss_ctrl_in_ep_comp_desc
	.word	qdss_ss_ctrl_out_desc
	.word	qdss_ctrl_out_ep_comp_desc
	.word	0
	.type	rmnet_mux_interface_desc, %object
	.size	rmnet_mux_interface_desc, 9
rmnet_mux_interface_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	3
	.byte	-1
	.byte	-1
	.byte	-1
	.space	1
	.space	3
	.type	rmnet_mux_fs_in_desc, %object
	.size	rmnet_mux_fs_in_desc, 9
rmnet_mux_fs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	64
	.space	3
	.space	3
	.type	rmnet_mux_fs_out_desc, %object
	.size	rmnet_mux_fs_out_desc, 9
rmnet_mux_fs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	64
	.space	3
	.space	3
	.type	rmnet_mux_fs_notify_desc, %object
	.size	rmnet_mux_fs_notify_desc, 9
rmnet_mux_fs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	32
	.space	2
	.space	3
	.type	rmnet_mux_hs_in_desc, %object
	.size	rmnet_mux_hs_in_desc, 9
rmnet_mux_hs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	rmnet_mux_hs_out_desc, %object
	.size	rmnet_mux_hs_out_desc, 9
rmnet_mux_hs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	rmnet_mux_hs_notify_desc, %object
	.size	rmnet_mux_hs_notify_desc, 9
rmnet_mux_hs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	9
	.space	2
	.space	3
	.type	midi_string_defs, %object
	.size	midi_string_defs, 16
midi_string_defs:
	.space	4
	.word	.LC927
	.space	8
	.type	ac_interface_desc, %object
	.size	ac_interface_desc, 9
ac_interface_desc:
	.byte	9
	.byte	4
	.space	3
	.byte	1
	.byte	1
	.space	2
	.space	3
	.type	ms_interface_desc, %object
	.size	ms_interface_desc, 9
ms_interface_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	2
	.byte	1
	.byte	3
	.space	2
	.space	3
	.type	ac_header_desc, %object
	.size	ac_header_desc, 9
ac_header_desc:
	.byte	9
	.byte	36
	.byte	1
	.2byte	256
	.2byte	9
	.byte	1
	.space	1
	.space	3
	.type	bulk_in_desc, %object
	.size	bulk_in_desc, 9
bulk_in_desc:
	.byte	9
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	bulk_out_desc, %object
	.size	bulk_out_desc, 9
bulk_out_desc:
	.byte	9
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	ms_header_desc, %object
	.size	ms_header_desc, 7
ms_header_desc:
	.byte	7
	.byte	36
	.byte	1
	.2byte	256
	.space	2
	.space	1
	.type	ms_in_desc, %object
	.size	ms_in_desc, 20
ms_in_desc:
	.space	1
	.byte	37
	.byte	1
	.space	17
	.type	ms_out_desc, %object
	.size	ms_out_desc, 20
ms_out_desc:
	.space	1
	.byte	37
	.byte	1
	.space	17
	.type	rmnet_interface_desc, %object
	.size	rmnet_interface_desc, 9
rmnet_interface_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	3
	.byte	-1
	.byte	-1
	.byte	-1
	.space	1
	.space	3
	.type	rmnet_fs_in_desc, %object
	.size	rmnet_fs_in_desc, 9
rmnet_fs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	64
	.space	3
	.space	3
	.type	rmnet_fs_out_desc, %object
	.size	rmnet_fs_out_desc, 9
rmnet_fs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	64
	.space	3
	.space	3
	.type	rmnet_fs_notify_desc, %object
	.size	rmnet_fs_notify_desc, 9
rmnet_fs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	32
	.space	2
	.space	3
	.type	rmnet_fs_function, %object
	.size	rmnet_fs_function, 20
rmnet_fs_function:
	.word	rmnet_interface_desc
	.word	rmnet_fs_notify_desc
	.word	rmnet_fs_in_desc
	.word	rmnet_fs_out_desc
	.word	0
	.type	rmnet_hs_in_desc, %object
	.size	rmnet_hs_in_desc, 9
rmnet_hs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	rmnet_hs_out_desc, %object
	.size	rmnet_hs_out_desc, 9
rmnet_hs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	rmnet_hs_notify_desc, %object
	.size	rmnet_hs_notify_desc, 9
rmnet_hs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	9
	.space	2
	.space	3
	.type	rmnet_hs_function, %object
	.size	rmnet_hs_function, 20
rmnet_hs_function:
	.word	rmnet_interface_desc
	.word	rmnet_hs_notify_desc
	.word	rmnet_hs_in_desc
	.word	rmnet_hs_out_desc
	.word	0
	.type	rmnet_ss_in_desc, %object
	.size	rmnet_ss_in_desc, 9
rmnet_ss_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	rmnet_ss_out_desc, %object
	.size	rmnet_ss_out_desc, 9
rmnet_ss_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	rmnet_ss_notify_desc, %object
	.size	rmnet_ss_notify_desc, 9
rmnet_ss_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	9
	.space	2
	.space	3
	.type	rmnet_ss_function, %object
	.size	rmnet_ss_function, 32
rmnet_ss_function:
	.word	rmnet_interface_desc
	.word	rmnet_ss_notify_desc
	.word	rmnet_ss_notify_comp_desc
	.word	rmnet_ss_in_desc
	.word	rmnet_ss_in_comp_desc
	.word	rmnet_ss_out_desc
	.word	rmnet_ss_out_comp_desc
	.word	0
	.type	gps_interface_desc, %object
	.size	gps_interface_desc, 9
gps_interface_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	1
	.byte	-1
	.byte	-1
	.byte	-1
	.space	1
	.space	3
	.type	gps_fs_notify_desc, %object
	.size	gps_fs_notify_desc, 9
gps_fs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	64
	.byte	32
	.space	2
	.space	3
	.type	gps_fs_function, %object
	.size	gps_fs_function, 12
gps_fs_function:
	.word	gps_interface_desc
	.word	gps_fs_notify_desc
	.word	0
	.type	gps_hs_notify_desc, %object
	.size	gps_hs_notify_desc, 9
gps_hs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	64
	.byte	9
	.space	2
	.space	3
	.type	gps_hs_function, %object
	.size	gps_hs_function, 12
gps_hs_function:
	.word	gps_interface_desc
	.word	gps_hs_notify_desc
	.word	0
	.type	gps_ss_notify_desc, %object
	.size	gps_ss_notify_desc, 9
gps_ss_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	64
	.byte	9
	.space	2
	.space	3
	.type	gps_ss_function, %object
	.size	gps_ss_function, 16
gps_ss_function:
	.word	gps_interface_desc
	.word	gps_ss_notify_desc
	.word	gps_ss_notify_comp_desc
	.word	0
	.type	gser_interface_desc, %object
	.size	gser_interface_desc, 9
gser_interface_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	3
	.byte	-1
	.byte	0
	.byte	0
	.space	1
	.space	3
	.type	gser_fs_in_desc, %object
	.size	gser_fs_in_desc, 9
gser_fs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	gser_fs_out_desc, %object
	.size	gser_fs_out_desc, 9
gser_fs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	gser_fs_notify_desc, %object
	.size	gser_fs_notify_desc, 9
gser_fs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	10
	.byte	32
	.space	2
	.space	3
	.type	gser_hs_notify_desc, %object
	.size	gser_hs_notify_desc, 9
gser_hs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	10
	.byte	9
	.space	2
	.space	3
	.type	gser_ss_notify_desc, %object
	.size	gser_ss_notify_desc, 9
gser_ss_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	10
	.byte	9
	.space	2
	.space	3
	.type	gser_fs_function, %object
	.size	gser_fs_function, 36
gser_fs_function:
	.word	gser_interface_desc
	.word	gser_header_desc
	.word	gser_call_mgmt_descriptor
	.word	gser_descriptor
	.word	gser_union_desc
	.word	gser_fs_notify_desc
	.word	gser_fs_in_desc
	.word	gser_fs_out_desc
	.word	0
	.type	gser_hs_function, %object
	.size	gser_hs_function, 36
gser_hs_function:
	.word	gser_interface_desc
	.word	gser_header_desc
	.word	gser_call_mgmt_descriptor
	.word	gser_descriptor
	.word	gser_union_desc
	.word	gser_hs_notify_desc
	.word	gser_hs_in_desc
	.word	gser_hs_out_desc
	.word	0
	.type	gser_ss_function, %object
	.size	gser_ss_function, 48
gser_ss_function:
	.word	gser_interface_desc
	.word	gser_header_desc
	.word	gser_call_mgmt_descriptor
	.word	gser_descriptor
	.word	gser_union_desc
	.word	gser_ss_notify_desc
	.word	gser_ss_notify_comp_desc
	.word	gser_ss_in_desc
	.word	gser_ss_bulk_comp_desc
	.word	gser_ss_out_desc
	.word	gser_ss_bulk_comp_desc
	.word	0
	.type	gser_hs_in_desc, %object
	.size	gser_hs_in_desc, 9
gser_hs_in_desc:
	.byte	7
	.byte	5
	.space	1
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	gser_hs_out_desc, %object
	.size	gser_hs_out_desc, 9
gser_hs_out_desc:
	.byte	7
	.byte	5
	.space	1
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	gser_ss_in_desc, %object
	.size	gser_ss_in_desc, 9
gser_ss_in_desc:
	.byte	7
	.byte	5
	.space	1
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	gser_ss_out_desc, %object
	.size	gser_ss_out_desc, 9
gser_ss_out_desc:
	.byte	7
	.byte	5
	.space	1
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	acm_iad_descriptor, %object
	.size	acm_iad_descriptor, 8
acm_iad_descriptor:
	.byte	8
	.byte	11
	.space	1
	.byte	2
	.byte	2
	.byte	2
	.byte	1
	.space	1
	.type	acm_control_interface_desc, %object
	.size	acm_control_interface_desc, 9
acm_control_interface_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	1
	.byte	2
	.byte	2
	.byte	1
	.space	1
	.space	3
	.type	acm_union_desc, %object
	.size	acm_union_desc, 5
acm_union_desc:
	.byte	5
	.byte	36
	.byte	6
	.space	2
	.space	3
	.type	acm_data_interface_desc, %object
	.size	acm_data_interface_desc, 9
acm_data_interface_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	2
	.byte	10
	.byte	0
	.byte	0
	.space	1
	.space	3
	.type	acm_call_mgmt_descriptor, %object
	.size	acm_call_mgmt_descriptor, 5
acm_call_mgmt_descriptor:
	.byte	5
	.byte	36
	.byte	1
	.byte	0
	.space	1
	.space	3
	.type	acm_fs_in_desc, %object
	.size	acm_fs_in_desc, 9
acm_fs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	acm_fs_out_desc, %object
	.size	acm_fs_out_desc, 9
acm_fs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	acm_fs_notify_desc, %object
	.size	acm_fs_notify_desc, 9
acm_fs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	10
	.byte	32
	.space	2
	.space	3
	.type	acm_hs_function, %object
	.size	acm_hs_function, 44
acm_hs_function:
	.word	acm_iad_descriptor
	.word	acm_control_interface_desc
	.word	acm_header_desc
	.word	acm_call_mgmt_descriptor
	.word	acm_descriptor
	.word	acm_union_desc
	.word	acm_hs_notify_desc
	.word	acm_data_interface_desc
	.word	acm_hs_in_desc
	.word	acm_hs_out_desc
	.word	0
	.type	acm_ss_function, %object
	.size	acm_ss_function, 56
acm_ss_function:
	.word	acm_iad_descriptor
	.word	acm_control_interface_desc
	.word	acm_header_desc
	.word	acm_call_mgmt_descriptor
	.word	acm_descriptor
	.word	acm_union_desc
	.word	acm_hs_notify_desc
	.word	acm_ss_bulk_comp_desc
	.word	acm_data_interface_desc
	.word	acm_ss_in_desc
	.word	acm_ss_bulk_comp_desc
	.word	acm_ss_out_desc
	.word	acm_ss_bulk_comp_desc
	.word	0
	.type	acm_hs_in_desc, %object
	.size	acm_hs_in_desc, 9
acm_hs_in_desc:
	.byte	7
	.byte	5
	.space	1
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	acm_hs_out_desc, %object
	.size	acm_hs_out_desc, 9
acm_hs_out_desc:
	.byte	7
	.byte	5
	.space	1
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	acm_hs_notify_desc, %object
	.size	acm_hs_notify_desc, 9
acm_hs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	10
	.byte	9
	.space	2
	.space	3
	.type	acm_ss_in_desc, %object
	.size	acm_ss_in_desc, 9
acm_ss_in_desc:
	.byte	7
	.byte	5
	.space	1
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	acm_ss_out_desc, %object
	.size	acm_ss_out_desc, 9
acm_ss_out_desc:
	.byte	7
	.byte	5
	.space	1
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	acm_fs_function, %object
	.size	acm_fs_function, 44
acm_fs_function:
	.word	acm_iad_descriptor
	.word	acm_control_interface_desc
	.word	acm_header_desc
	.word	acm_call_mgmt_descriptor
	.word	acm_descriptor
	.word	acm_union_desc
	.word	acm_fs_notify_desc
	.word	acm_data_interface_desc
	.word	acm_fs_in_desc
	.word	acm_fs_out_desc
	.word	0
	.type	rndis_iad_descriptor, %object
	.size	rndis_iad_descriptor, 8
rndis_iad_descriptor:
	.byte	8
	.byte	11
	.byte	0
	.byte	2
	.byte	2
	.byte	6
	.byte	0
	.space	1
	.type	rndis_control_intf, %object
	.size	rndis_control_intf, 9
rndis_control_intf:
	.byte	9
	.byte	4
	.space	2
	.byte	1
	.byte	2
	.byte	2
	.byte	-1
	.space	1
	.space	3
	.type	rndis_union_desc, %object
	.size	rndis_union_desc, 5
rndis_union_desc:
	.byte	5
	.byte	36
	.byte	6
	.space	2
	.space	3
	.type	rndis_data_intf, %object
	.size	rndis_data_intf, 9
rndis_data_intf:
	.byte	9
	.byte	4
	.space	2
	.byte	2
	.byte	10
	.byte	0
	.byte	0
	.space	1
	.space	3
	.type	fs_in_desc, %object
	.size	fs_in_desc, 9
fs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	fs_out_desc, %object
	.size	fs_out_desc, 9
fs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	fs_notify_desc, %object
	.size	fs_notify_desc, 9
fs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	32
	.space	2
	.space	3
	.type	hs_in_desc, %object
	.size	hs_in_desc, 9
hs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	hs_out_desc, %object
	.size	hs_out_desc, 9
hs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	hs_notify_desc, %object
	.size	hs_notify_desc, 9
hs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	9
	.space	2
	.space	3
	.type	ss_in_desc, %object
	.size	ss_in_desc, 9
ss_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	ss_out_desc, %object
	.size	ss_out_desc, 9
ss_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	ss_notify_desc, %object
	.size	ss_notify_desc, 9
ss_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	9
	.space	2
	.space	3
	.type	eth_fs_function, %object
	.size	eth_fs_function, 44
eth_fs_function:
	.word	rndis_iad_descriptor
	.word	rndis_control_intf
	.word	header_desc
	.word	call_mgmt_descriptor
	.word	rndis_acm_descriptor
	.word	rndis_union_desc
	.word	fs_notify_desc
	.word	rndis_data_intf
	.word	fs_in_desc
	.word	fs_out_desc
	.word	0
	.type	eth_hs_function, %object
	.size	eth_hs_function, 44
eth_hs_function:
	.word	rndis_iad_descriptor
	.word	rndis_control_intf
	.word	header_desc
	.word	call_mgmt_descriptor
	.word	rndis_acm_descriptor
	.word	rndis_union_desc
	.word	hs_notify_desc
	.word	rndis_data_intf
	.word	hs_in_desc
	.word	hs_out_desc
	.word	0
	.type	eth_ss_function, %object
	.size	eth_ss_function, 56
eth_ss_function:
	.word	rndis_iad_descriptor
	.word	rndis_control_intf
	.word	header_desc
	.word	call_mgmt_descriptor
	.word	rndis_acm_descriptor
	.word	rndis_union_desc
	.word	ss_notify_desc
	.word	ss_intr_comp_desc
	.word	rndis_data_intf
	.word	ss_in_desc
	.word	ss_bulk_comp_desc
	.word	ss_out_desc
	.word	ss_bulk_comp_desc
	.word	0
	.type	rndis_ul_max_pkt_per_xfer, %object
	.size	rndis_ul_max_pkt_per_xfer, 4
rndis_ul_max_pkt_per_xfer:
	.word	3
	.type	rndis_qc_iad_descriptor, %object
	.size	rndis_qc_iad_descriptor, 8
rndis_qc_iad_descriptor:
	.byte	8
	.byte	11
	.byte	0
	.byte	2
	.byte	2
	.byte	6
	.byte	0
	.space	1
	.type	rndis_qc_control_intf, %object
	.size	rndis_qc_control_intf, 9
rndis_qc_control_intf:
	.byte	9
	.byte	4
	.space	2
	.byte	1
	.byte	2
	.byte	2
	.byte	-1
	.space	1
	.space	3
	.type	rndis_qc_union_desc, %object
	.size	rndis_qc_union_desc, 5
rndis_qc_union_desc:
	.byte	5
	.byte	36
	.byte	6
	.space	2
	.space	3
	.type	rndis_qc_data_intf, %object
	.size	rndis_qc_data_intf, 9
rndis_qc_data_intf:
	.byte	9
	.byte	4
	.space	2
	.byte	2
	.byte	10
	.byte	0
	.byte	0
	.space	1
	.space	3
	.type	rndis_qc_fs_in_desc, %object
	.size	rndis_qc_fs_in_desc, 9
rndis_qc_fs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	rndis_qc_fs_out_desc, %object
	.size	rndis_qc_fs_out_desc, 9
rndis_qc_fs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	rndis_qc_fs_notify_desc, %object
	.size	rndis_qc_fs_notify_desc, 9
rndis_qc_fs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	32
	.space	2
	.space	3
	.type	eth_qc_fs_function, %object
	.size	eth_qc_fs_function, 44
eth_qc_fs_function:
	.word	rndis_qc_iad_descriptor
	.word	rndis_qc_control_intf
	.word	rndis_qc_header_desc
	.word	rndis_qc_call_mgmt_descriptor
	.word	rndis_qc_acm_descriptor
	.word	rndis_qc_union_desc
	.word	rndis_qc_fs_notify_desc
	.word	rndis_qc_data_intf
	.word	rndis_qc_fs_in_desc
	.word	rndis_qc_fs_out_desc
	.word	0
	.type	rndis_qc_hs_in_desc, %object
	.size	rndis_qc_hs_in_desc, 9
rndis_qc_hs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	rndis_qc_hs_out_desc, %object
	.size	rndis_qc_hs_out_desc, 9
rndis_qc_hs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	rndis_qc_hs_notify_desc, %object
	.size	rndis_qc_hs_notify_desc, 9
rndis_qc_hs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	9
	.space	2
	.space	3
	.type	eth_qc_hs_function, %object
	.size	eth_qc_hs_function, 44
eth_qc_hs_function:
	.word	rndis_qc_iad_descriptor
	.word	rndis_qc_control_intf
	.word	rndis_qc_header_desc
	.word	rndis_qc_call_mgmt_descriptor
	.word	rndis_qc_acm_descriptor
	.word	rndis_qc_union_desc
	.word	rndis_qc_hs_notify_desc
	.word	rndis_qc_data_intf
	.word	rndis_qc_hs_in_desc
	.word	rndis_qc_hs_out_desc
	.word	0
	.type	rndis_qc_ss_in_desc, %object
	.size	rndis_qc_ss_in_desc, 9
rndis_qc_ss_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	rndis_qc_ss_out_desc, %object
	.size	rndis_qc_ss_out_desc, 9
rndis_qc_ss_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	rndis_qc_ss_notify_desc, %object
	.size	rndis_qc_ss_notify_desc, 9
rndis_qc_ss_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	9
	.space	2
	.space	3
	.type	eth_qc_ss_function, %object
	.size	eth_qc_ss_function, 56
eth_qc_ss_function:
	.word	rndis_qc_iad_descriptor
	.word	rndis_qc_control_intf
	.word	rndis_qc_header_desc
	.word	rndis_qc_call_mgmt_descriptor
	.word	rndis_qc_acm_descriptor
	.word	rndis_qc_union_desc
	.word	rndis_qc_ss_notify_desc
	.word	rndis_qc_ss_intr_comp_desc
	.word	rndis_qc_data_intf
	.word	rndis_qc_ss_in_desc
	.word	rndis_qc_ss_bulk_comp_desc
	.word	rndis_qc_ss_out_desc
	.word	rndis_qc_ss_bulk_comp_desc
	.word	0
	.type	acc_interface_desc, %object
	.size	acc_interface_desc, 9
acc_interface_desc:
	.byte	9
	.byte	4
	.byte	0
	.space	1
	.byte	2
	.byte	-1
	.byte	-1
	.byte	0
	.space	1
	.space	3
	.type	acc_fullspeed_in_desc, %object
	.size	acc_fullspeed_in_desc, 9
acc_fullspeed_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	acc_fullspeed_out_desc, %object
	.size	acc_fullspeed_out_desc, 9
acc_fullspeed_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	acc_highspeed_in_desc, %object
	.size	acc_highspeed_in_desc, 9
acc_highspeed_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	acc_highspeed_out_desc, %object
	.size	acc_highspeed_out_desc, 9
acc_highspeed_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	acc_superspeed_in_desc, %object
	.size	acc_superspeed_in_desc, 9
acc_superspeed_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	acc_superspeed_out_desc, %object
	.size	acc_superspeed_out_desc, 9
acc_superspeed_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	mtp_interface_desc, %object
	.size	mtp_interface_desc, 9
mtp_interface_desc:
	.byte	9
	.byte	4
	.byte	0
	.space	1
	.byte	3
	.byte	-1
	.byte	-1
	.byte	0
	.space	1
	.space	3
	.type	mtp_fullspeed_in_desc, %object
	.size	mtp_fullspeed_in_desc, 9
mtp_fullspeed_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	mtp_fullspeed_out_desc, %object
	.size	mtp_fullspeed_out_desc, 9
mtp_fullspeed_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	mtp_intr_desc, %object
	.size	mtp_intr_desc, 9
mtp_intr_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	28
	.byte	6
	.space	2
	.space	3
	.type	mtp_tx_reqs, %object
	.size	mtp_tx_reqs, 4
mtp_tx_reqs:
	.word	8
	.type	mtp_highspeed_in_desc, %object
	.size	mtp_highspeed_in_desc, 9
mtp_highspeed_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	mtp_highspeed_out_desc, %object
	.size	mtp_highspeed_out_desc, 9
mtp_highspeed_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	mtp_superspeed_in_desc, %object
	.size	mtp_superspeed_in_desc, 9
mtp_superspeed_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	mtp_superspeed_out_desc, %object
	.size	mtp_superspeed_out_desc, 9
mtp_superspeed_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	adb_interface_desc, %object
	.size	adb_interface_desc, 9
adb_interface_desc:
	.byte	9
	.byte	4
	.byte	0
	.space	1
	.byte	2
	.byte	-1
	.byte	66
	.byte	1
	.space	1
	.space	3
	.type	adb_fullspeed_in_desc, %object
	.size	adb_fullspeed_in_desc, 9
adb_fullspeed_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	adb_fullspeed_out_desc, %object
	.size	adb_fullspeed_out_desc, 9
adb_fullspeed_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	adb_highspeed_in_desc, %object
	.size	adb_highspeed_in_desc, 9
adb_highspeed_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	adb_highspeed_out_desc, %object
	.size	adb_highspeed_out_desc, 9
adb_highspeed_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	adb_superspeed_in_desc, %object
	.size	adb_superspeed_in_desc, 9
adb_superspeed_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	adb_superspeed_out_desc, %object
	.size	adb_superspeed_out_desc, 9
adb_superspeed_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	acc_string_defs, %object
	.size	acc_string_defs, 16
acc_string_defs:
	.space	4
	.word	.LC897
	.space	8
	.type	acc_strings, %object
	.size	acc_strings, 8
acc_strings:
	.word	acc_string_table
	.word	0
	.type	fs_acc_descs, %object
	.size	fs_acc_descs, 16
fs_acc_descs:
	.word	acc_interface_desc
	.word	acc_fullspeed_in_desc
	.word	acc_fullspeed_out_desc
	.word	0
	.type	hs_acc_descs, %object
	.size	hs_acc_descs, 16
hs_acc_descs:
	.word	acc_interface_desc
	.word	acc_highspeed_in_desc
	.word	acc_highspeed_out_desc
	.word	0
	.type	ss_acc_descs, %object
	.size	ss_acc_descs, 24
ss_acc_descs:
	.word	acc_interface_desc
	.word	acc_superspeed_in_desc
	.word	acc_superspeed_in_comp_desc
	.word	acc_superspeed_out_desc
	.word	acc_superspeed_out_comp_desc
	.word	0
	.type	mtp_string_defs, %object
	.size	mtp_string_defs, 16
mtp_string_defs:
	.space	4
	.word	.LC898
	.space	8
	.type	mtp_strings, %object
	.size	mtp_strings, 8
mtp_strings:
	.word	mtp_string_table
	.word	0
	.type	fs_ptp_descs, %object
	.size	fs_ptp_descs, 20
fs_ptp_descs:
	.word	ptp_interface_desc
	.word	mtp_fullspeed_in_desc
	.word	mtp_fullspeed_out_desc
	.word	mtp_intr_desc
	.word	0
	.type	hs_ptp_descs, %object
	.size	hs_ptp_descs, 20
hs_ptp_descs:
	.word	ptp_interface_desc
	.word	mtp_highspeed_in_desc
	.word	mtp_highspeed_out_desc
	.word	mtp_intr_desc
	.word	0
	.type	ss_ptp_descs, %object
	.size	ss_ptp_descs, 32
ss_ptp_descs:
	.word	ptp_interface_desc
	.word	mtp_superspeed_in_desc
	.word	mtp_superspeed_in_comp_desc
	.word	mtp_superspeed_out_desc
	.word	mtp_superspeed_out_comp_desc
	.word	mtp_intr_desc
	.word	mtp_superspeed_intr_comp_desc
	.word	0
	.type	fs_mtp_descs, %object
	.size	fs_mtp_descs, 20
fs_mtp_descs:
	.word	mtp_interface_desc
	.word	mtp_fullspeed_in_desc
	.word	mtp_fullspeed_out_desc
	.word	mtp_intr_desc
	.word	0
	.type	hs_mtp_descs, %object
	.size	hs_mtp_descs, 20
hs_mtp_descs:
	.word	mtp_interface_desc
	.word	mtp_highspeed_in_desc
	.word	mtp_highspeed_out_desc
	.word	mtp_intr_desc
	.word	0
	.type	ss_mtp_descs, %object
	.size	ss_mtp_descs, 32
ss_mtp_descs:
	.word	mtp_interface_desc
	.word	mtp_superspeed_in_desc
	.word	mtp_superspeed_in_comp_desc
	.word	mtp_superspeed_out_desc
	.word	mtp_superspeed_out_comp_desc
	.word	mtp_intr_desc
	.word	mtp_superspeed_intr_comp_desc
	.word	0
	.type	gps_string_defs, %object
	.size	gps_string_defs, 16
gps_string_defs:
	.space	4
	.word	.LC920
	.space	8
	.type	gps_strings, %object
	.size	gps_strings, 8
gps_strings:
	.word	gps_string_table
	.word	0
	.type	qdss_string_defs, %object
	.size	qdss_string_defs, 24
qdss_string_defs:
	.space	4
	.word	.LC925
	.space	4
	.word	.LC926
	.space	8
	.type	qdss_strings, %object
	.size	qdss_strings, 8
qdss_strings:
	.word	qdss_string_table
	.word	0
	.type	midi_strings, %object
	.size	midi_strings, 8
midi_strings:
	.word	midi_stringtab
	.word	0
	.type	_audio_dev, %object
	.size	_audio_dev, 152
_audio_dev:
	.word	.LC592
	.space	4
	.word	fs_audio_desc
	.word	hs_audio_desc
	.space	8
	.word	audio_bind
	.word	audio_unbind
	.word	audio_set_alt
	.space	4
	.word	audio_disable
	.word	audio_setup
	.space	28
	.space	12
	.word	_audio_dev+88
	.word	_audio_dev+88
	.space	4
	.word	0
	.space	48
	.type	audio_playback_ops, %object
	.size	audio_playback_ops, 64
audio_playback_ops:
	.word	audio_pcm_open
	.word	audio_pcm_close
	.word	snd_pcm_lib_ioctl
	.space	4
	.word	audio_pcm_hw_params
	.word	audio_pcm_hw_free
	.word	audio_pcm_prepare
	.word	audio_pcm_playback_trigger
	.word	audio_pcm_pointer
	.space	16
	.word	audio_pcm_mmap
	.space	8
	.type	rl.62595, %object
	.size	rl.62595, 24
rl.62595:
	.word	0
	.word	3000
	.word	1
	.space	12
	.type	rl.52799, %object
	.size	rl.52799, 24
rl.52799:
	.word	0
	.word	3000
	.word	1
	.space	12
	.type	supported_functions, %object
	.size	supported_functions, 112
supported_functions:
	.word	ffs_function
	.word	mbim_function
	.word	ecm_qc_function
	.word	audio_function
	.word	rmnet_smd_function
	.word	rmnet_sdio_function
	.word	rmnet_smd_sdio_function
	.word	rmnet_function
	.word	gps_function
	.word	diag_function
	.word	qdss_function
	.word	serial_function
	.word	adb_function
	.word	ccid_function
	.word	acm_function
	.word	mtp_function
	.word	ptp_function
	.word	rndis_function
	.word	rndis_qc_function
	.word	ecm_function
	.word	ncm_function
	.word	mass_storage_function
	.word	accessory_function
	.word	audio_source_function
	.word	uasp_function
	.word	midi_function
	.word	hid_function
	.word	0
	.type	rl.26694, %object
	.size	rl.26694, 24
rl.26694:
	.word	0
	.word	3000
	.word	1
	.space	12
	.type	rl.26712, %object
	.size	rl.26712, 24
rl.26712:
	.word	0
	.word	3000
	.word	1
	.space	12
	.type	rmnet_smd_strings, %object
	.size	rmnet_smd_strings, 8
rmnet_smd_strings:
	.word	rmnet_smd_string_table
	.word	0
	.type	rmnet_smd_fs_function, %object
	.size	rmnet_smd_fs_function, 20
rmnet_smd_fs_function:
	.word	rmnet_smd_interface_desc
	.word	rmnet_smd_fs_notify_desc
	.word	rmnet_smd_fs_in_desc
	.word	rmnet_smd_fs_out_desc
	.word	0
	.type	rmnet_smd_hs_function, %object
	.size	rmnet_smd_hs_function, 20
rmnet_smd_hs_function:
	.word	rmnet_smd_interface_desc
	.word	rmnet_smd_hs_notify_desc
	.word	rmnet_smd_hs_in_desc
	.word	rmnet_smd_hs_out_desc
	.word	0
	.type	rmnet_sdio_strings, %object
	.size	rmnet_sdio_strings, 8
rmnet_sdio_strings:
	.word	rmnet_sdio_string_table
	.word	0
	.type	rmnet_sdio_fs_function, %object
	.size	rmnet_sdio_fs_function, 20
rmnet_sdio_fs_function:
	.word	rmnet_sdio_interface_desc
	.word	rmnet_sdio_fs_notify_desc
	.word	rmnet_sdio_fs_in_desc
	.word	rmnet_sdio_fs_out_desc
	.word	0
	.type	rmnet_sdio_hs_function, %object
	.size	rmnet_sdio_hs_function, 20
rmnet_sdio_hs_function:
	.word	rmnet_sdio_interface_desc
	.word	rmnet_sdio_hs_notify_desc
	.word	rmnet_sdio_hs_in_desc
	.word	rmnet_sdio_hs_out_desc
	.word	0
	.type	sport_info, %object
	.size	sport_info, 24
sport_info:
	.word	.LC913
	.space	4
	.word	9
	.word	.LC914
	.space	4
	.word	10
	.type	smd_pi, %object
	.size	smd_pi, 24
smd_pi:
	.space	4
	.word	.LC911
	.space	4
	.space	4
	.word	.LC912
	.space	4
	.type	ghsic_data_serial_tx_q_size, %object
	.size	ghsic_data_serial_tx_q_size, 4
ghsic_data_serial_tx_q_size:
	.word	20
	.type	ghsic_data_serial_rx_q_size, %object
	.size	ghsic_data_serial_rx_q_size, 4
ghsic_data_serial_rx_q_size:
	.word	10
	.type	ghsic_data_rmnet_tx_q_size, %object
	.size	ghsic_data_rmnet_tx_q_size, 4
ghsic_data_rmnet_tx_q_size:
	.word	300
	.type	ghsic_data_rmnet_rx_q_size, %object
	.size	ghsic_data_rmnet_rx_q_size, 4
ghsic_data_rmnet_rx_q_size:
	.word	50
	.type	ghsuart_data_serial_tx_q_size, %object
	.size	ghsuart_data_serial_tx_q_size, 4
ghsuart_data_serial_tx_q_size:
	.word	5
	.type	ghsuart_data_serial_rx_q_size, %object
	.size	ghsuart_data_serial_rx_q_size, 4
ghsuart_data_serial_rx_q_size:
	.word	5
	.type	ghsuart_data_rmnet_tx_q_size, %object
	.size	ghsuart_data_rmnet_tx_q_size, 4
ghsuart_data_rmnet_tx_q_size:
	.word	20
	.type	ghsuart_data_rmnet_rx_q_size, %object
	.size	ghsuart_data_rmnet_rx_q_size, 4
ghsuart_data_rmnet_rx_q_size:
	.word	10
	.type	rmnet_string_defs, %object
	.size	rmnet_string_defs, 16
rmnet_string_defs:
	.space	4
	.word	.LC921
	.space	8
	.type	rmnet_strings, %object
	.size	rmnet_strings, 8
rmnet_strings:
	.word	rmnet_string_table
	.word	0
	.type	gser_string_defs, %object
	.size	gser_string_defs, 16
gser_string_defs:
	.space	4
	.word	.LC904
	.space	8
	.type	gser_strings, %object
	.size	gser_strings, 8
gser_strings:
	.word	gser_string_table
	.word	0
	.type	acm_string_defs, %object
	.size	acm_string_defs, 32
acm_string_defs:
	.space	4
	.word	.LC901
	.space	4
	.word	.LC902
	.space	4
	.word	.LC903
	.space	8
	.type	acm_strings, %object
	.size	acm_strings, 8
acm_strings:
	.word	acm_string_table
	.word	0
	.type	rndis_string_defs, %object
	.size	rndis_string_defs, 32
rndis_string_defs:
	.space	4
	.word	.LC886
	.space	4
	.word	.LC887
	.space	4
	.word	.LC888
	.space	8
	.type	rndis_dl_max_pkt_per_xfer, %object
	.size	rndis_dl_max_pkt_per_xfer, 4
rndis_dl_max_pkt_per_xfer:
	.word	3
	.type	rndis_strings, %object
	.size	rndis_strings, 8
rndis_strings:
	.word	rndis_string_table
	.word	0
	.type	ecm_qc_desc, %object
	.size	ecm_qc_desc, 13
ecm_qc_desc:
	.byte	13
	.byte	36
	.byte	15
	.space	1
	.word	0
	.short	1514
	.short	0
	.byte	0
	.space	3
	.type	ecm_qc_strings, %object
	.size	ecm_qc_strings, 8
ecm_qc_strings:
	.word	ecm_qc_string_table
	.word	0
	.type	mbim_string_defs, %object
	.size	mbim_string_defs, 24
mbim_string_defs:
	.space	4
	.word	.LC893
	.space	4
	.word	.LC894
	.space	8
	.type	mbim_strings, %object
	.size	mbim_strings, 8
mbim_strings:
	.word	mbim_string_table
	.word	0
	.type	ecm_desc, %object
	.size	ecm_desc, 13
ecm_desc:
	.byte	13
	.byte	36
	.byte	15
	.space	1
	.word	0
	.short	1514
	.short	0
	.byte	0
	.space	3
	.type	ecm_strings, %object
	.size	ecm_strings, 8
ecm_strings:
	.word	ecm_string_table
	.word	0
	.type	rndis_qc_string_defs, %object
	.size	rndis_qc_string_defs, 32
rndis_qc_string_defs:
	.space	4
	.word	.LC886
	.space	4
	.word	.LC887
	.space	4
	.word	.LC888
	.space	8
	.type	rndis_qc_strings, %object
	.size	rndis_qc_strings, 8
rndis_qc_strings:
	.word	rndis_qc_string_table
	.word	0
	.type	gadget_type, %object
	.size	gadget_type, 24
gadget_type:
	.word	.LC884
	.space	20
	.type	qc_gadget_type, %object
	.size	qc_gadget_type, 24
qc_gadget_type:
	.word	.LC884
	.space	20
	.type	fn_cntl, %object
	.size	fn_cntl, 4
fn_cntl:
	.word	.LC881
	.type	fn_play, %object
	.size	fn_play, 4
fn_play:
	.word	.LC883
	.type	fn_cap, %object
	.size	fn_cap, 4
fn_cap:
	.word	.LC882
	.type	microphone_fu_controls, %object
	.size	microphone_fu_controls, 32
microphone_fu_controls:
	.word	microphone_fu_controls
	.word	microphone_fu_controls
	.space	12
	.word	.LC875
	.space	8
	.type	speaker_fu_controls, %object
	.size	speaker_fu_controls, 32
speaker_fu_controls:
	.word	speaker_fu_controls
	.word	speaker_fu_controls
	.space	12
	.word	.LC878
	.space	8
	.type	microphone_mute_control, %object
	.size	microphone_mute_control, 44
microphone_mute_control:
	.word	microphone_mute_control
	.word	microphone_mute_control
	.word	.LC877
	.byte	1
	.space	23
	.word	generic_set_cmd
	.word	generic_get_cmd
	.type	microphone_volume_control, %object
	.size	microphone_volume_control, 44
microphone_volume_control:
	.word	microphone_volume_control
	.word	microphone_volume_control
	.word	.LC876
	.byte	2
	.space	23
	.word	generic_set_cmd
	.word	generic_get_cmd
	.type	speaker_mute_control, %object
	.size	speaker_mute_control, 44
speaker_mute_control:
	.word	speaker_mute_control
	.word	speaker_mute_control
	.word	.LC880
	.byte	1
	.space	23
	.word	generic_set_cmd
	.word	generic_get_cmd
	.type	speaker_volume_control, %object
	.size	speaker_volume_control, 44
speaker_volume_control:
	.word	speaker_volume_control
	.word	speaker_volume_control
	.word	.LC879
	.byte	2
	.space	23
	.word	generic_set_cmd
	.word	generic_get_cmd
	.type	microphone_sample_freq_control, %object
	.size	microphone_sample_freq_control, 44
microphone_sample_freq_control:
	.word	microphone_sample_freq_control
	.word	microphone_sample_freq_control
	.word	.LC872
	.byte	1
	.space	23
	.word	generic_set_cmd
	.word	generic_get_cmd
	.type	speaker_sample_freq_control, %object
	.size	speaker_sample_freq_control, 44
speaker_sample_freq_control:
	.word	speaker_sample_freq_control
	.word	speaker_sample_freq_control
	.word	.LC874
	.byte	1
	.space	23
	.word	generic_set_cmd
	.word	generic_get_cmd
	.type	audio_strings, %object
	.size	audio_strings, 8
audio_strings:
	.word	audio_stringtab_dev
	.word	0
	.type	necm_desc, %object
	.size	necm_desc, 13
necm_desc:
	.byte	13
	.byte	36
	.byte	15
	.space	1
	.word	0
	.short	1514
	.short	0
	.byte	0
	.space	3
	.type	ncm_strings, %object
	.size	ncm_strings, 8
ncm_strings:
	.word	ncm_string_table
	.word	0
	.type	usb_android_dt_match, %object
	.size	usb_android_dt_match, 392
usb_android_dt_match:
	.space	64
	.ascii	"qcom,android-usb\000"
	.space	111
	.space	4
	.space	196
	.type	dev_attr_remote_wakeup, %object
	.size	dev_attr_remote_wakeup, 16
dev_attr_remote_wakeup:
	.word	.LC825
	.short	420
	.space	2
	.word	remote_wakeup_show
	.word	remote_wakeup_store
	.type	dev_attr_state, %object
	.size	dev_attr_state, 16
dev_attr_state:
	.word	.LC826
	.short	292
	.space	2
	.word	state_show
	.word	0
	.type	dev_attr_pm_qos, %object
	.size	dev_attr_pm_qos, 16
dev_attr_pm_qos:
	.word	.LC827
	.short	420
	.space	2
	.word	pm_qos_show
	.word	pm_qos_store
	.type	dev_attr_enable, %object
	.size	dev_attr_enable, 16
dev_attr_enable:
	.word	.LC828
	.short	420
	.space	2
	.word	enable_show
	.word	enable_store
	.type	dev_attr_functions, %object
	.size	dev_attr_functions, 16
dev_attr_functions:
	.word	.LC829
	.short	420
	.space	2
	.word	functions_show
	.word	functions_store
	.type	dev_attr_iSerial, %object
	.size	dev_attr_iSerial, 16
dev_attr_iSerial:
	.word	.LC830
	.short	420
	.space	2
	.word	iSerial_show
	.word	iSerial_store
	.type	dev_attr_iProduct, %object
	.size	dev_attr_iProduct, 16
dev_attr_iProduct:
	.word	.LC831
	.short	420
	.space	2
	.word	iProduct_show
	.word	iProduct_store
	.type	dev_attr_iManufacturer, %object
	.size	dev_attr_iManufacturer, 16
dev_attr_iManufacturer:
	.word	.LC832
	.short	420
	.space	2
	.word	iManufacturer_show
	.word	iManufacturer_store
	.type	dev_attr_bDeviceProtocol, %object
	.size	dev_attr_bDeviceProtocol, 16
dev_attr_bDeviceProtocol:
	.word	.LC833
	.short	420
	.space	2
	.word	bDeviceProtocol_show
	.word	bDeviceProtocol_store
	.type	dev_attr_bDeviceSubClass, %object
	.size	dev_attr_bDeviceSubClass, 16
dev_attr_bDeviceSubClass:
	.word	.LC834
	.short	420
	.space	2
	.word	bDeviceSubClass_show
	.word	bDeviceSubClass_store
	.type	dev_attr_bDeviceClass, %object
	.size	dev_attr_bDeviceClass, 16
dev_attr_bDeviceClass:
	.word	.LC835
	.short	420
	.space	2
	.word	bDeviceClass_show
	.word	bDeviceClass_store
	.type	dev_attr_bcdDevice, %object
	.size	dev_attr_bcdDevice, 16
dev_attr_bcdDevice:
	.word	.LC836
	.short	420
	.space	2
	.word	bcdDevice_show
	.word	bcdDevice_store
	.type	dev_attr_idProduct, %object
	.size	dev_attr_idProduct, 16
dev_attr_idProduct:
	.word	.LC837
	.short	420
	.space	2
	.word	idProduct_show
	.word	idProduct_store
	.type	dev_attr_idVendor, %object
	.size	dev_attr_idVendor, 16
dev_attr_idVendor:
	.word	.LC838
	.short	420
	.space	2
	.word	idVendor_show
	.word	idVendor_store
	.type	midi_function, %object
	.size	midi_function, 52
midi_function:
	.word	.LC839
	.space	12
	.word	midi_function_attributes
	.space	4
	.word	midi_function_init
	.word	midi_function_cleanup
	.space	8
	.word	midi_function_bind_config
	.space	8
	.type	midi_function_attributes, %object
	.size	midi_function_attributes, 8
midi_function_attributes:
	.word	dev_attr_alsa
	.word	0
	.type	dev_attr_alsa, %object
	.size	dev_attr_alsa, 16
dev_attr_alsa:
	.word	.LC840
	.short	292
	.space	2
	.word	midi_alsa_show
	.word	0
	.type	hid_function, %object
	.size	hid_function, 52
hid_function:
	.word	.LC257
	.space	20
	.word	hid_function_init
	.word	hid_function_cleanup
	.space	8
	.word	hid_function_bind_config
	.space	8
	.type	uasp_function, %object
	.size	uasp_function, 52
uasp_function:
	.word	.LC841
	.space	20
	.word	uasp_function_init
	.word	uasp_function_cleanup
	.space	8
	.word	uasp_function_bind_config
	.space	8
	.type	audio_source_function, %object
	.size	audio_source_function, 52
audio_source_function:
	.word	.LC592
	.space	12
	.word	audio_source_function_attributes
	.space	4
	.word	audio_source_function_init
	.word	audio_source_function_cleanup
	.space	8
	.word	audio_source_function_bind_config
	.word	audio_source_function_unbind_config
	.space	4
	.type	audio_source_function_attributes, %object
	.size	audio_source_function_attributes, 8
audio_source_function_attributes:
	.word	dev_attr_pcm
	.word	0
	.type	dev_attr_pcm, %object
	.size	dev_attr_pcm, 16
dev_attr_pcm:
	.word	.LC842
	.short	420
	.space	2
	.word	audio_source_pcm_show
	.word	0
	.type	accessory_function, %object
	.size	accessory_function, 52
accessory_function:
	.word	.LC571
	.space	20
	.word	accessory_function_init
	.word	accessory_function_cleanup
	.space	8
	.word	accessory_function_bind_config
	.space	4
	.word	accessory_function_ctrlrequest
	.type	mass_storage_function, %object
	.size	mass_storage_function, 52
mass_storage_function:
	.word	.LC843
	.space	12
	.word	mass_storage_function_attributes
	.space	4
	.word	mass_storage_function_init
	.word	mass_storage_function_cleanup
	.space	8
	.word	mass_storage_function_bind_config
	.space	8
	.type	mass_storage_function_attributes, %object
	.size	mass_storage_function_attributes, 8
mass_storage_function_attributes:
	.word	dev_attr_inquiry_string
	.word	0
	.type	dev_attr_inquiry_string, %object
	.size	dev_attr_inquiry_string, 16
dev_attr_inquiry_string:
	.word	.LC844
	.short	420
	.space	2
	.word	mass_storage_inquiry_show
	.word	mass_storage_inquiry_store
	.type	ecm_function, %object
	.size	ecm_function, 52
ecm_function:
	.word	.LC793
	.space	12
	.word	ecm_function_attributes
	.space	4
	.word	ecm_function_init
	.word	ecm_function_cleanup
	.space	8
	.word	ecm_function_bind_config
	.word	ecm_function_unbind_config
	.space	4
	.type	rndis_qc_function, %object
	.size	rndis_qc_function, 52
rndis_qc_function:
	.word	.LC845
	.space	12
	.word	rndis_function_attributes
	.space	4
	.word	rndis_qc_function_init
	.word	rndis_qc_function_cleanup
	.space	8
	.word	rndis_qc_function_bind_config
	.word	rndis_qc_function_unbind_config
	.space	4
	.type	rndis_function, %object
	.size	rndis_function, 52
rndis_function:
	.word	.LC737
	.space	12
	.word	rndis_function_attributes
	.space	4
	.word	rndis_function_init
	.word	rndis_function_cleanup
	.space	8
	.word	rndis_function_bind_config
	.word	rndis_function_unbind_config
	.space	4
	.type	rndis_function_attributes, %object
	.size	rndis_function_attributes, 24
rndis_function_attributes:
	.word	dev_attr_manufacturer
	.word	dev_attr_wceis
	.word	dev_attr_ethaddr
	.word	dev_attr_vendorID
	.word	dev_attr_max_pkt_per_xfer
	.word	0
	.type	dev_attr_max_pkt_per_xfer, %object
	.size	dev_attr_max_pkt_per_xfer, 16
dev_attr_max_pkt_per_xfer:
	.word	.LC846
	.short	420
	.space	2
	.word	rndis_max_pkt_per_xfer_show
	.word	rndis_max_pkt_per_xfer_store
	.type	dev_attr_vendorID, %object
	.size	dev_attr_vendorID, 16
dev_attr_vendorID:
	.word	.LC847
	.short	420
	.space	2
	.word	rndis_vendorID_show
	.word	rndis_vendorID_store
	.type	dev_attr_ethaddr, %object
	.size	dev_attr_ethaddr, 16
dev_attr_ethaddr:
	.word	.LC848
	.short	420
	.space	2
	.word	rndis_ethaddr_show
	.word	rndis_ethaddr_store
	.type	dev_attr_wceis, %object
	.size	dev_attr_wceis, 16
dev_attr_wceis:
	.word	.LC849
	.short	420
	.space	2
	.word	rndis_wceis_show
	.word	rndis_wceis_store
	.type	dev_attr_manufacturer, %object
	.size	dev_attr_manufacturer, 16
dev_attr_manufacturer:
	.word	.LC850
	.short	420
	.space	2
	.word	rndis_manufacturer_show
	.word	rndis_manufacturer_store
	.type	ptp_function, %object
	.size	ptp_function, 52
ptp_function:
	.word	.LC851
	.space	20
	.word	ptp_function_init
	.word	ptp_function_cleanup
	.space	8
	.word	ptp_function_bind_config
	.space	8
	.type	mtp_function, %object
	.size	mtp_function, 52
mtp_function:
	.word	.LC573
	.space	20
	.word	mtp_function_init
	.word	mtp_function_cleanup
	.space	8
	.word	mtp_function_bind_config
	.space	4
	.word	mtp_function_ctrlrequest
	.type	ccid_function, %object
	.size	ccid_function, 52
ccid_function:
	.word	.LC501
	.space	20
	.word	ccid_function_init
	.word	ccid_function_cleanup
	.space	8
	.word	ccid_function_bind_config
	.space	8
	.type	serial_function, %object
	.size	serial_function, 52
serial_function:
	.word	.LC852
	.space	12
	.word	serial_function_attributes
	.space	8
	.word	serial_function_cleanup
	.space	8
	.word	serial_function_bind_config
	.space	8
	.type	serial_function_attributes, %object
	.size	serial_function_attributes, 12
serial_function_attributes:
	.word	dev_attr_transports
	.word	dev_attr_serial_xport_names
	.word	0
	.type	dev_attr_serial_xport_names, %object
	.size	dev_attr_serial_xport_names, 16
dev_attr_serial_xport_names:
	.word	.LC853
	.short	420
	.space	2
	.word	serial_xport_names_show
	.word	serial_xport_names_store
	.type	dev_attr_transports, %object
	.size	dev_attr_transports, 16
dev_attr_transports:
	.word	.LC854
	.short	128
	.space	2
	.word	0
	.word	serial_transports_store
	.type	qdss_function, %object
	.size	qdss_function, 52
qdss_function:
	.word	.LC585
	.space	20
	.word	qdss_function_init
	.word	qdss_function_cleanup
	.space	8
	.word	qdss_function_bind_config
	.space	8
	.type	diag_function, %object
	.size	diag_function, 52
diag_function:
	.word	.LC855
	.space	12
	.word	diag_function_attributes
	.space	4
	.word	diag_function_init
	.word	diag_function_cleanup
	.space	8
	.word	diag_function_bind_config
	.space	8
	.type	diag_function_attributes, %object
	.size	diag_function_attributes, 8
diag_function_attributes:
	.word	dev_attr_clients
	.word	0
	.type	dev_attr_clients, %object
	.size	dev_attr_clients, 16
dev_attr_clients:
	.word	.LC856
	.short	128
	.space	2
	.word	0
	.word	clients_store
	.type	audio_function, %object
	.size	audio_function, 52
audio_function:
	.word	.LC805
	.space	36
	.word	audio_function_bind_config
	.space	8
	.type	mbim_function, %object
	.size	mbim_function, 52
mbim_function:
	.word	.LC778
	.space	12
	.word	mbim_function_attributes
	.space	4
	.word	mbim_function_init
	.word	mbim_function_cleanup
	.space	8
	.word	mbim_function_bind_config
	.space	4
	.word	mbim_function_ctrlrequest
	.type	mbim_function_attributes, %object
	.size	mbim_function_attributes, 8
mbim_function_attributes:
	.word	dev_attr_mbim_transports
	.word	0
	.type	dev_attr_mbim_transports, %object
	.size	dev_attr_mbim_transports, 16
dev_attr_mbim_transports:
	.word	.LC857
	.short	420
	.space	2
	.word	mbim_transports_show
	.word	mbim_transports_store
	.type	ecm_qc_function, %object
	.size	ecm_qc_function, 52
ecm_qc_function:
	.word	.LC858
	.space	12
	.word	ecm_function_attributes
	.space	4
	.word	ecm_function_init
	.word	ecm_function_cleanup
	.space	8
	.word	ecm_qc_function_bind_config
	.word	ecm_qc_function_unbind_config
	.space	4
	.type	ecm_function_attributes, %object
	.size	ecm_function_attributes, 12
ecm_function_attributes:
	.word	dev_attr_ecm_transports
	.word	dev_attr_ecm_ethaddr
	.word	0
	.type	dev_attr_ecm_transports, %object
	.size	dev_attr_ecm_transports, 16
dev_attr_ecm_transports:
	.word	.LC859
	.short	420
	.space	2
	.word	ecm_transports_show
	.word	ecm_transports_store
	.type	dev_attr_ecm_ethaddr, %object
	.size	dev_attr_ecm_ethaddr, 16
dev_attr_ecm_ethaddr:
	.word	.LC860
	.short	420
	.space	2
	.word	ecm_ethaddr_show
	.word	ecm_ethaddr_store
	.type	ncm_function, %object
	.size	ncm_function, 52
ncm_function:
	.word	.LC809
	.space	12
	.word	ncm_function_attributes
	.space	4
	.word	ncm_function_init
	.word	ncm_function_cleanup
	.space	8
	.word	ncm_function_bind_config
	.word	ncm_function_unbind_config
	.space	4
	.type	ncm_function_attributes, %object
	.size	ncm_function_attributes, 8
ncm_function_attributes:
	.word	dev_attr_ncm_ethaddr
	.word	0
	.type	dev_attr_ncm_ethaddr, %object
	.size	dev_attr_ncm_ethaddr, 16
dev_attr_ncm_ethaddr:
	.word	.LC861
	.short	420
	.space	2
	.word	ncm_ethaddr_show
	.word	ncm_ethaddr_store
	.type	gps_function, %object
	.size	gps_function, 52
gps_function:
	.word	.LC581
	.space	24
	.word	gps_function_cleanup
	.space	8
	.word	gps_function_bind_config
	.space	8
	.type	rmnet_function, %object
	.size	rmnet_function, 52
rmnet_function:
	.word	.LC664
	.space	12
	.word	rmnet_function_attributes
	.space	8
	.word	rmnet_function_cleanup
	.space	8
	.word	rmnet_function_bind_config
	.space	8
	.type	rmnet_function_attributes, %object
	.size	rmnet_function_attributes, 12
rmnet_function_attributes:
	.word	dev_attr_rmnet_transports
	.word	dev_attr_rmnet_xport_names
	.word	0
	.type	dev_attr_rmnet_xport_names, %object
	.size	dev_attr_rmnet_xport_names, 16
dev_attr_rmnet_xport_names:
	.word	.LC853
	.short	420
	.space	2
	.word	rmnet_xport_names_show
	.word	rmnet_xport_names_store
	.type	dev_attr_rmnet_transports, %object
	.size	dev_attr_rmnet_transports, 16
dev_attr_rmnet_transports:
	.word	.LC854
	.short	420
	.space	2
	.word	rmnet_transports_show
	.word	rmnet_transports_store
	.type	rmnet_smd_sdio_function, %object
	.size	rmnet_smd_sdio_function, 52
rmnet_smd_sdio_function:
	.word	.LC502
	.space	12
	.word	rmnet_smd_sdio_attributes
	.space	4
	.word	rmnet_smd_sdio_function_init
	.word	rmnet_smd_sdio_function_cleanup
	.space	8
	.word	rmnet_smd_sdio_bind_config
	.space	8
	.type	rmnet_smd_sdio_attributes, %object
	.size	rmnet_smd_sdio_attributes, 8
rmnet_smd_sdio_attributes:
	.word	dev_attr_transport
	.word	0
	.type	rmnet_sdio_function, %object
	.size	rmnet_sdio_function, 52
rmnet_sdio_function:
	.word	.LC665
	.space	36
	.word	rmnet_sdio_function_bind_config
	.space	8
	.type	rmnet_smd_function, %object
	.size	rmnet_smd_function, 52
rmnet_smd_function:
	.word	.LC862
	.space	36
	.word	rmnet_smd_function_bind_config
	.space	8
	.type	acm_function, %object
	.size	acm_function, 52
acm_function:
	.word	.LC863
	.space	12
	.word	acm_function_attributes
	.space	8
	.word	acm_function_cleanup
	.space	8
	.word	acm_function_bind_config
	.space	8
	.type	acm_function_attributes, %object
	.size	acm_function_attributes, 8
acm_function_attributes:
	.word	dev_attr_acm_transports
	.word	0
	.type	dev_attr_acm_transports, %object
	.size	dev_attr_acm_transports, 16
dev_attr_acm_transports:
	.word	.LC864
	.short	128
	.space	2
	.word	0
	.word	acm_transports_store
	.type	ffs_function_attributes, %object
	.size	ffs_function_attributes, 8
ffs_function_attributes:
	.word	dev_attr_aliases
	.word	0
	.type	dev_attr_aliases, %object
	.size	dev_attr_aliases, 16
dev_attr_aliases:
	.word	.LC865
	.short	420
	.space	2
	.word	ffs_aliases_show
	.word	ffs_aliases_store
	.type	dev_strings, %object
	.size	dev_strings, 8
dev_strings:
	.word	stringtab_dev
	.word	0
	.type	stringtab_dev, %object
	.size	stringtab_dev, 8
stringtab_dev:
	.short	1033
	.space	2
	.word	strings_dev
	.type	___modver_attr, %object
	.size	___modver_attr, 36
___modver_attr:
	.word	.LC866
	.short	292
	.space	2
	.word	__modver_version_show
	.space	16
	.word	.LC547
	.word	.LC867
	.type	ncm_string_table, %object
	.size	ncm_string_table, 8
ncm_string_table:
	.short	1033
	.space	2
	.word	ncm_string_defs
	.type	ncm_desc, %object
	.size	ncm_desc, 6
ncm_desc:
	.byte	6
	.byte	36
	.byte	26
	.2byte	256
	.byte	17
	.space	2
	.type	ncm_header_desc, %object
	.size	ncm_header_desc, 5
ncm_header_desc:
	.byte	5
	.byte	36
	.byte	0
	.2byte	272
	.space	3
	.type	audio_stringtab_dev, %object
	.size	audio_stringtab_dev, 8
audio_stringtab_dev:
	.short	1033
	.space	2
	.word	audio_string_defs
	.type	microphone_as_iso_in_desc, %object
	.size	microphone_as_iso_in_desc, 7
microphone_as_iso_in_desc:
	.byte	7
	.byte	37
	.byte	1
	.byte	1
	.byte	1
	.2byte	1
	.space	1
	.type	microphone_as_header_desc, %object
	.size	microphone_as_header_desc, 7
microphone_as_header_desc:
	.byte	7
	.byte	36
	.byte	1
	.byte	2
	.byte	1
	.2byte	1
	.space	1
	.type	speaker_as_iso_out_desc, %object
	.size	speaker_as_iso_out_desc, 7
speaker_as_iso_out_desc:
	.byte	7
	.byte	37
	.byte	1
	.byte	1
	.byte	1
	.2byte	1
	.space	1
	.type	speaker_as_header_desc, %object
	.size	speaker_as_header_desc, 7
speaker_as_header_desc:
	.byte	7
	.byte	36
	.byte	1
	.byte	3
	.byte	1
	.2byte	1
	.space	1
	.type	microphone_output_terminal_desc, %object
	.size	microphone_output_terminal_desc, 9
microphone_output_terminal_desc:
	.byte	9
	.byte	36
	.byte	3
	.byte	2
	.short	257
	.byte	1
	.byte	1
	.space	1
	.space	3
	.type	speaker_output_terminal_desc, %object
	.size	speaker_output_terminal_desc, 9
speaker_output_terminal_desc:
	.byte	9
	.byte	36
	.byte	3
	.byte	4
	.short	769
	.byte	3
	.byte	3
	.space	1
	.space	3
	.type	req_capture_count, %object
	.size	req_capture_count, 4
req_capture_count:
	.word	48
	.type	rndis_qc_string_table, %object
	.size	rndis_qc_string_table, 8
rndis_qc_string_table:
	.short	1033
	.space	2
	.word	rndis_qc_string_defs
	.type	rndis_qc_ss_bulk_comp_desc, %object
	.size	rndis_qc_ss_bulk_comp_desc, 6
rndis_qc_ss_bulk_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	rndis_qc_ss_intr_comp_desc, %object
	.size	rndis_qc_ss_intr_comp_desc, 6
rndis_qc_ss_intr_comp_desc:
	.byte	6
	.byte	48
	.space	2
	.short	8
	.space	2
	.type	rndis_qc_acm_descriptor, %object
	.size	rndis_qc_acm_descriptor, 4
rndis_qc_acm_descriptor:
	.byte	4
	.byte	36
	.byte	2
	.byte	0
	.type	rndis_qc_call_mgmt_descriptor, %object
	.size	rndis_qc_call_mgmt_descriptor, 5
rndis_qc_call_mgmt_descriptor:
	.byte	5
	.byte	36
	.byte	1
	.byte	0
	.byte	1
	.space	3
	.type	rndis_qc_header_desc, %object
	.size	rndis_qc_header_desc, 5
rndis_qc_header_desc:
	.byte	5
	.byte	36
	.byte	0
	.2byte	272
	.space	3
	.type	ecm_string_table, %object
	.size	ecm_string_table, 8
ecm_string_table:
	.short	1033
	.space	2
	.word	ecm_string_defs
	.type	ss_ecm_bulk_comp_desc, %object
	.size	ss_ecm_bulk_comp_desc, 6
ss_ecm_bulk_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	ss_ecm_intr_comp_desc, %object
	.size	ss_ecm_intr_comp_desc, 6
ss_ecm_intr_comp_desc:
	.byte	6
	.byte	48
	.space	2
	.short	16
	.space	2
	.type	ecm_header_desc, %object
	.size	ecm_header_desc, 5
ecm_header_desc:
	.byte	5
	.byte	36
	.byte	0
	.2byte	272
	.space	3
	.type	mbim_string_table, %object
	.size	mbim_string_table, 8
mbim_string_table:
	.short	1033
	.space	2
	.word	mbim_string_defs
	.type	ss_mbim_out_comp_desc, %object
	.size	ss_mbim_out_comp_desc, 6
ss_mbim_out_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	ss_mbim_in_comp_desc, %object
	.size	ss_mbim_in_comp_desc, 6
ss_mbim_in_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	ss_mbim_notify_comp_desc, %object
	.size	ss_mbim_notify_comp_desc, 6
ss_mbim_notify_comp_desc:
	.byte	6
	.byte	48
	.space	2
	.short	64
	.space	2
	.type	ext_mbb_desc, %object
	.size	ext_mbb_desc, 8
ext_mbb_desc:
	.byte	8
	.byte	36
	.byte	28
	.2byte	256
	.byte	64
	.short	1500
	.type	mbim_header_desc, %object
	.size	mbim_header_desc, 5
mbim_header_desc:
	.byte	5
	.byte	36
	.byte	0
	.2byte	272
	.space	3
	.type	ecm_qc_string_table, %object
	.size	ecm_qc_string_table, 8
ecm_qc_string_table:
	.short	1033
	.space	2
	.word	ecm_qc_string_defs
	.type	ecm_qc_ss_out_comp_desc, %object
	.size	ecm_qc_ss_out_comp_desc, 6
ecm_qc_ss_out_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	ecm_qc_ss_in_comp_desc, %object
	.size	ecm_qc_ss_in_comp_desc, 6
ecm_qc_ss_in_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	ecm_qc_ss_notify_comp_desc, %object
	.size	ecm_qc_ss_notify_comp_desc, 6
ecm_qc_ss_notify_comp_desc:
	.byte	6
	.byte	48
	.space	2
	.short	16
	.space	2
	.type	ecm_qc_header_desc, %object
	.size	ecm_qc_header_desc, 5
ecm_qc_header_desc:
	.byte	5
	.byte	36
	.byte	0
	.2byte	272
	.space	3
	.type	rndis_string_table, %object
	.size	rndis_string_table, 8
rndis_string_table:
	.short	1033
	.space	2
	.word	rndis_string_defs
	.type	ss_bulk_comp_desc, %object
	.size	ss_bulk_comp_desc, 6
ss_bulk_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	ss_intr_comp_desc, %object
	.size	ss_intr_comp_desc, 6
ss_intr_comp_desc:
	.byte	6
	.byte	48
	.space	2
	.short	8
	.space	2
	.type	rndis_acm_descriptor, %object
	.size	rndis_acm_descriptor, 4
rndis_acm_descriptor:
	.byte	4
	.byte	36
	.byte	2
	.byte	0
	.type	call_mgmt_descriptor, %object
	.size	call_mgmt_descriptor, 5
call_mgmt_descriptor:
	.byte	5
	.byte	36
	.byte	1
	.byte	0
	.byte	1
	.space	3
	.type	header_desc, %object
	.size	header_desc, 5
header_desc:
	.byte	5
	.byte	36
	.byte	0
	.2byte	272
	.space	3
	.type	acc_string_table, %object
	.size	acc_string_table, 8
acc_string_table:
	.short	1033
	.space	2
	.word	acc_string_defs
	.type	acc_superspeed_out_comp_desc, %object
	.size	acc_superspeed_out_comp_desc, 6
acc_superspeed_out_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	acc_superspeed_in_comp_desc, %object
	.size	acc_superspeed_in_comp_desc, 6
acc_superspeed_in_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	mtp_string_table, %object
	.size	mtp_string_table, 8
mtp_string_table:
	.short	1033
	.space	2
	.word	mtp_string_defs
	.type	mtp_superspeed_intr_comp_desc, %object
	.size	mtp_superspeed_intr_comp_desc, 6
mtp_superspeed_intr_comp_desc:
	.byte	6
	.byte	48
	.space	2
	.short	28
	.space	2
	.type	mtp_superspeed_out_comp_desc, %object
	.size	mtp_superspeed_out_comp_desc, 6
mtp_superspeed_out_comp_desc:
	.byte	6
	.byte	48
	.byte	2
	.space	3
	.space	2
	.type	mtp_superspeed_in_comp_desc, %object
	.size	mtp_superspeed_in_comp_desc, 6
mtp_superspeed_in_comp_desc:
	.byte	6
	.byte	48
	.byte	2
	.space	3
	.space	2
	.type	ptp_interface_desc, %object
	.size	ptp_interface_desc, 9
ptp_interface_desc:
	.byte	9
	.byte	4
	.byte	0
	.space	1
	.byte	3
	.byte	6
	.byte	1
	.byte	1
	.space	1
	.space	3
	.type	adb_superspeed_out_comp_desc, %object
	.size	adb_superspeed_out_comp_desc, 6
adb_superspeed_out_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	adb_superspeed_in_comp_desc, %object
	.size	adb_superspeed_in_comp_desc, 6
adb_superspeed_in_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	acm_string_table, %object
	.size	acm_string_table, 8
acm_string_table:
	.short	1033
	.space	2
	.word	acm_string_defs
	.type	acm_ss_bulk_comp_desc, %object
	.size	acm_ss_bulk_comp_desc, 6
acm_ss_bulk_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	acm_descriptor, %object
	.size	acm_descriptor, 4
acm_descriptor:
	.byte	4
	.byte	36
	.byte	2
	.byte	2
	.type	acm_header_desc, %object
	.size	acm_header_desc, 5
acm_header_desc:
	.byte	5
	.byte	36
	.byte	0
	.2byte	272
	.space	3
	.type	gser_string_table, %object
	.size	gser_string_table, 8
gser_string_table:
	.short	1033
	.space	2
	.word	gser_string_defs
	.type	gser_ss_notify_comp_desc, %object
	.size	gser_ss_notify_comp_desc, 6
gser_ss_notify_comp_desc:
	.byte	6
	.byte	48
	.space	2
	.short	10
	.space	2
	.type	gser_ss_bulk_comp_desc, %object
	.size	gser_ss_bulk_comp_desc, 6
gser_ss_bulk_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	gser_union_desc, %object
	.size	gser_union_desc, 5
gser_union_desc:
	.byte	5
	.byte	36
	.byte	6
	.space	2
	.space	3
	.type	gser_descriptor, %object
	.size	gser_descriptor, 4
gser_descriptor:
	.byte	4
	.byte	36
	.byte	2
	.byte	2
	.type	gser_call_mgmt_descriptor, %object
	.size	gser_call_mgmt_descriptor, 5
gser_call_mgmt_descriptor:
	.byte	5
	.byte	36
	.byte	1
	.byte	0
	.space	1
	.space	3
	.type	gser_header_desc, %object
	.size	gser_header_desc, 5
gser_header_desc:
	.byte	5
	.byte	36
	.byte	0
	.2byte	272
	.space	3
	.type	fsg_stringtab, %object
	.size	fsg_stringtab, 8
fsg_stringtab:
	.short	1033
	.space	2
	.word	fsg_strings
	.type	fs_audio_desc, %object
	.size	fs_audio_desc, 48
fs_audio_desc:
	.word	audio_source_ac_interface_desc
	.word	audio_source_ac_header_desc
	.word	input_terminal_desc
	.word	output_terminal_desc
	.word	feature_unit_desc
	.word	as_interface_alt_0_desc
	.word	as_interface_alt_1_desc
	.word	as_header_desc
	.word	as_type_i_desc
	.word	fs_as_in_ep_desc
	.word	as_iso_in_desc
	.word	0
	.type	hs_audio_desc, %object
	.size	hs_audio_desc, 48
hs_audio_desc:
	.word	audio_source_ac_interface_desc
	.word	audio_source_ac_header_desc
	.word	input_terminal_desc
	.word	output_terminal_desc
	.word	feature_unit_desc
	.word	as_interface_alt_0_desc
	.word	as_interface_alt_1_desc
	.word	as_header_desc
	.word	as_type_i_desc
	.word	hs_as_in_ep_desc
	.word	as_iso_in_desc
	.word	0
	.type	as_iso_in_desc, %object
	.size	as_iso_in_desc, 7
as_iso_in_desc:
	.byte	7
	.byte	37
	.byte	1
	.byte	1
	.byte	1
	.2byte	1
	.space	1
	.type	as_header_desc, %object
	.size	as_header_desc, 7
as_header_desc:
	.byte	7
	.byte	36
	.byte	1
	.byte	1
	.byte	1
	.2byte	1
	.space	1
	.type	output_terminal_desc, %object
	.size	output_terminal_desc, 9
output_terminal_desc:
	.byte	9
	.byte	36
	.byte	3
	.byte	3
	.short	257
	.byte	2
	.byte	2
	.space	1
	.space	3
	.type	feature_unit_desc, %object
	.size	feature_unit_desc, 9
feature_unit_desc:
	.byte	9
	.byte	36
	.byte	6
	.byte	2
	.byte	1
	.byte	2
	.space	3
	.space	3
	.type	audio_source_ac_header_desc, %object
	.size	audio_source_ac_header_desc, 10
audio_source_ac_header_desc:
	.byte	10
	.byte	36
	.byte	1
	.2byte	256
	.2byte	40
	.byte	2
	.ascii	"\000\001"
	.space	2
	.type	gps_string_table, %object
	.size	gps_string_table, 8
gps_string_table:
	.short	1033
	.space	2
	.word	gps_string_defs
	.type	gps_ss_notify_comp_desc, %object
	.size	gps_ss_notify_comp_desc, 6
gps_ss_notify_comp_desc:
	.byte	6
	.byte	48
	.space	2
	.short	64
	.space	2
	.type	rmnet_string_table, %object
	.size	rmnet_string_table, 8
rmnet_string_table:
	.short	1033
	.space	2
	.word	rmnet_string_defs
	.type	rmnet_ss_out_comp_desc, %object
	.size	rmnet_ss_out_comp_desc, 6
rmnet_ss_out_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	rmnet_ss_in_comp_desc, %object
	.size	rmnet_ss_in_comp_desc, 6
rmnet_ss_in_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	rmnet_ss_notify_comp_desc, %object
	.size	rmnet_ss_notify_comp_desc, 6
rmnet_ss_notify_comp_desc:
	.byte	6
	.byte	48
	.space	2
	.short	8
	.space	2
	.type	dev_attr_transport, %object
	.size	dev_attr_transport, 16
dev_attr_transport:
	.word	.LC923
	.short	420
	.space	2
	.word	0
	.word	transport_store
	.type	rmnet_mux_string_table, %object
	.size	rmnet_mux_string_table, 8
rmnet_mux_string_table:
	.short	1033
	.space	2
	.word	rmnet_mux_string_defs
	.type	rmnet_mux_string_defs, %object
	.size	rmnet_mux_string_defs, 16
rmnet_mux_string_defs:
	.space	4
	.word	.LC921
	.space	8
	.type	mux_sdio_rx_fctrl_dis_thld, %object
	.size	mux_sdio_rx_fctrl_dis_thld, 4
mux_sdio_rx_fctrl_dis_thld:
	.word	500
	.type	mux_sdio_tx_pkt_drop_thld, %object
	.size	mux_sdio_tx_pkt_drop_thld, 4
mux_sdio_tx_pkt_drop_thld:
	.word	1000
	.type	rmnet_sdio_string_table, %object
	.size	rmnet_sdio_string_table, 8
rmnet_sdio_string_table:
	.short	1033
	.space	2
	.word	rmnet_sdio_string_defs
	.type	rmnet_sdio_string_defs, %object
	.size	rmnet_sdio_string_defs, 16
rmnet_sdio_string_defs:
	.space	4
	.word	.LC924
	.space	8
	.type	sdio_rx_fctrl_dis_thld, %object
	.size	sdio_rx_fctrl_dis_thld, 4
sdio_rx_fctrl_dis_thld:
	.word	500
	.type	sdio_tx_pkt_drop_thld, %object
	.size	sdio_tx_pkt_drop_thld, 4
sdio_tx_pkt_drop_thld:
	.word	1000
	.type	rmnet_smd_string_table, %object
	.size	rmnet_smd_string_table, 8
rmnet_smd_string_table:
	.short	1033
	.space	2
	.word	rmnet_smd_string_defs
	.type	rmnet_smd_string_defs, %object
	.size	rmnet_smd_string_defs, 16
rmnet_smd_string_defs:
	.space	4
	.word	.LC924
	.space	8
	.type	qdss_string_table, %object
	.size	qdss_string_table, 8
qdss_string_table:
	.short	1033
	.space	2
	.word	qdss_string_defs
	.type	ss_bulk_out_comp_desc, %object
	.size	ss_bulk_out_comp_desc, 6
ss_bulk_out_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	ss_bulk_in_comp_desc, %object
	.size	ss_bulk_in_comp_desc, 6
ss_bulk_in_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	midi_stringtab, %object
	.size	midi_stringtab, 8
midi_stringtab:
	.short	1033
	.space	2
	.word	midi_string_defs
	.bss
	.align	2
	.set	.LANCHOR0,. + 0
	.set	.LANCHOR3,. + 8184
	.type	online_clients, %object
	.size	online_clients, 1
online_clients:
	.space	1
	.space	3
	.type	ctrl_port, %object
	.size	ctrl_port, 4
ctrl_port:
	.space	4
	.type	num_data_ports, %object
	.size	num_data_ports, 4
num_data_ports:
	.space	4
	.type	ghsuart_data_ports, %object
	.size	ghsuart_data_ports, 168
ghsuart_data_ports:
	.space	168
	.type	_ccid_dev, %object
	.size	_ccid_dev, 4
_ccid_dev:
	.space	4
	.type	audio_reinit, %object
	.size	audio_reinit, 1
audio_reinit:
	.space	1
	.space	3
	.type	diag_dev_list, %object
	.size	diag_dev_list, 8
diag_dev_list:
	.space	8
	.type	android_dev_list, %object
	.size	android_dev_list, 8
android_dev_list:
	.space	8
	.type	ch_lock, %object
	.size	ch_lock, 4
ch_lock:
	.space	4
	.type	gps_port, %object
	.size	gps_port, 8
gps_port:
	.space	8
	.type	nr_rmnet_ports, %object
	.size	nr_rmnet_ports, 4
nr_rmnet_ports:
	.space	4
	.type	rmnet_ports, %object
	.size	rmnet_ports, 72
rmnet_ports:
	.space	72
	.type	no_ctrl_smd_ports, %object
	.size	no_ctrl_smd_ports, 4
no_ctrl_smd_ports:
	.space	4
	.type	no_ctrl_qti_ports, %object
	.size	no_ctrl_qti_ports, 4
no_ctrl_qti_ports:
	.space	4
	.type	no_data_bam_ports, %object
	.size	no_data_bam_ports, 4
no_data_bam_ports:
	.space	4
	.type	no_data_bam2bam_ports, %object
	.size	no_data_bam2bam_ports, 4
no_data_bam2bam_ports:
	.space	4
	.type	no_ctrl_hsic_ports, %object
	.size	no_ctrl_hsic_ports, 4
no_ctrl_hsic_ports:
	.space	4
	.type	no_data_hsic_ports, %object
	.size	no_data_hsic_ports, 4
no_data_hsic_ports:
	.space	4
	.type	no_ctrl_hsuart_ports, %object
	.size	no_ctrl_hsuart_ports, 4
no_ctrl_hsuart_ports:
	.space	4
	.type	no_data_hsuart_ports, %object
	.size	no_data_hsuart_ports, 4
no_data_hsuart_ports:
	.space	4
	.type	gserial_ports, %object
	.size	gserial_ports, 36
gserial_ports:
	.space	36
	.type	gacm_ports, %object
	.size	gacm_ports, 36
gacm_ports:
	.space	36
	.type	composite, %object
	.size	composite, 4
composite:
	.space	4
	.type	rmux_dev, %object
	.size	rmux_dev, 4
rmux_dev:
	.space	4
	.type	no_ctrl_ports, %object
	.size	no_ctrl_ports, 4
no_ctrl_ports:
	.space	4
	.type	gctrl_ports, %object
	.size	gctrl_ports, 416
gctrl_ports:
	.space	416
	.type	_acc_dev, %object
	.size	_acc_dev, 4
_acc_dev:
	.space	4
	.type	rndis_lock, %object
	.size	rndis_lock, 4
rndis_lock:
	.space	4
	.type	_rndis_qc, %object
	.size	_rndis_qc, 4
_rndis_qc:
	.space	4
	.type	_mtp_dev, %object
	.size	_mtp_dev, 4
_mtp_dev:
	.space	4
	.type	_mbim_dev, %object
	.size	_mbim_dev, 4
_mbim_dev:
	.space	4
	.type	serial_string, %object
	.size	serial_string, 256
serial_string:
	.space	256
	.type	product_string, %object
	.size	product_string, 256
product_string:
	.space	256
	.type	manufacturer_string, %object
	.size	manufacturer_string, 256
manufacturer_string:
	.space	256
	.type	ecm_transports, %object
	.size	ecm_transports, 50
ecm_transports:
	.space	50
	.space	2
	.type	serial_xport_names, %object
	.size	serial_xport_names, 32
serial_xport_names:
	.space	32
	.type	rmnet_xport_names, %object
	.size	rmnet_xport_names, 50
rmnet_xport_names:
	.space	50
	.space	2
	.type	rmnet_transports, %object
	.size	rmnet_transports, 50
rmnet_transports:
	.space	50
	.space	2
	.type	mbim_transports, %object
	.size	mbim_transports, 50
mbim_transports:
	.space	50
	.space	2
	.type	ghsuart_ctrl_ports, %object
	.size	ghsuart_ctrl_ports, 168
ghsuart_ctrl_ports:
	.space	168
	.type	num_ctrl_ports, %object
	.size	num_ctrl_ports, 4
num_ctrl_ports:
	.space	4
	.type	uether_wq, %object
	.size	uether_wq, 4
uether_wq:
	.space	4
	.type	rmnet_smd, %object
	.size	rmnet_smd, 4
rmnet_smd:
	.space	4
	.type	gserial_wq, %object
	.size	gserial_wq, 4
gserial_wq:
	.space	4
	.type	gsdio_wq, %object
	.size	gsdio_wq, 4
gsdio_wq:
	.space	4
	.type	n_sdio_ports, %object
	.size	n_sdio_ports, 4
n_sdio_ports:
	.space	4
	.type	sdio_ports, %object
	.size	sdio_ports, 216
sdio_ports:
	.space	216
	.type	gsmd_wq, %object
	.size	gsmd_wq, 4
gsmd_wq:
	.space	4
	.type	bam2bam_data_ports, %object
	.size	bam2bam_data_ports, 4
bam2bam_data_ports:
	.space	4
	.type	bam_data_wq, %object
	.size	bam_data_wq, 4
bam_data_wq:
	.space	4
	.type	d_lock, %object
	.size	d_lock, 4
d_lock:
	.space	4
	.type	android_dev_count, %object
	.size	android_dev_count, 4
android_dev_count:
	.space	4
	.type	grmnet_ctrl_wq, %object
	.size	grmnet_ctrl_wq, 4
grmnet_ctrl_wq:
	.space	4
	.type	_adb_dev, %object
	.size	_adb_dev, 4
_adb_dev:
	.space	4
	.type	__key.49663, %object
	.size	__key.49663, 0
__key.49663:
	.type	__key.49664, %object
	.size	__key.49664, 0
__key.49664:
	.type	ctrl_smd_ports, %object
	.size	ctrl_smd_ports, 504
ctrl_smd_ports:
	.space	504
	.type	n_tx_req_queued, %object
	.size	n_tx_req_queued, 4
n_tx_req_queued:
	.space	4
	.type	gbam_wq, %object
	.size	gbam_wq, 4
gbam_wq:
	.space	4
	.type	retry_cnt.39153, %object
	.size	retry_cnt.39153, 4
retry_cnt.39153:
	.space	4
	.type	acm_transports, %object
	.size	acm_transports, 32
acm_transports:
	.space	32
	.type	serial_transports, %object
	.size	serial_transports, 32
serial_transports:
	.space	32
	.type	diag_dload, %object
	.size	diag_dload, 4
diag_dload:
	.space	4
	.type	diag_clients, %object
	.size	diag_clients, 32
diag_clients:
	.space	32
	.type	n_smd_ports, %object
	.size	n_smd_ports, 4
n_smd_ports:
	.space	4
	.type	smd_ports, %object
	.size	smd_ports, 216
smd_ports:
	.space	216
	.type	n_bam_ports, %object
	.size	n_bam_ports, 4
n_bam_ports:
	.space	4
	.type	bam_ports, %object
	.size	bam_ports, 84
bam_ports:
	.space	84
	.type	ipa_params, %object
	.size	ipa_params, 28
ipa_params:
	.space	28
	.type	__key.49857, %object
	.size	__key.49857, 0
__key.49857:
	.type	__key.55032, %object
	.size	__key.55032, 0
__key.55032:
	.type	__key.55033, %object
	.size	__key.55033, 0
__key.55033:
	.type	__key.53707, %object
	.size	__key.53707, 0
__key.53707:
	.type	__key.53708, %object
	.size	__key.53708, 0
__key.53708:
	.type	__key.53709, %object
	.size	__key.53709, 0
__key.53709:
	.type	__key.52849, %object
	.size	__key.52849, 0
__key.52849:
	.type	__key.52850, %object
	.size	__key.52850, 0
__key.52850:
	.type	__key.39248, %object
	.size	__key.39248, 0
__key.39248:
	.type	__key.39344, %object
	.size	__key.39344, 0
__key.39344:
	.type	mbim_ports, %object
	.size	mbim_ports, 8
mbim_ports:
	.space	8
	.type	nr_mbim_ports, %object
	.size	nr_mbim_ports, 4
nr_mbim_ports:
	.space	4
	.type	rndis_ul_max_xfer_size_rcvd, %object
	.size	rndis_ul_max_xfer_size_rcvd, 4
rndis_ul_max_xfer_size_rcvd:
	.space	4
	.type	rndis_ul_max_pkt_per_xfer_rcvd, %object
	.size	rndis_ul_max_pkt_per_xfer_rcvd, 4
rndis_ul_max_pkt_per_xfer_rcvd:
	.space	4
	.type	android_class, %object
	.size	android_class, 4
android_class:
	.space	4
	.type	next_state.61562, %object
	.size	next_state.61562, 4
next_state.61562:
	.space	4
	.type	last_uevent.61561, %object
	.size	last_uevent.61561, 4
last_uevent.61561:
	.space	4
	.type	epnum, %object
	.size	epnum, 4
epnum:
	.space	4
	.type	no_data_ports, %object
	.size	no_data_ports, 4
no_data_ports:
	.space	4
	.type	gdata_ports, %object
	.size	gdata_ports, 416
gdata_ports:
	.space	416
	.type	bam2bam_ports, %object
	.size	bam2bam_ports, 12
bam2bam_ports:
	.space	12
	.type	the_card, %object
	.size	the_card, 4
the_card:
	.space	4
	.type	__key.56739, %object
	.size	__key.56739, 0
__key.56739:
	.type	__key.56740, %object
	.size	__key.56740, 0
__key.56740:
	.type	n_bam2bam_data_ports, %object
	.size	n_bam2bam_data_ports, 4
n_bam2bam_data_ports:
	.space	4
	.type	rndis_per_dev_params, %object
	.size	rndis_per_dev_params, 60
rndis_per_dev_params:
	.space	60
	.type	__key.53151, %object
	.size	__key.53151, 0
__key.53151:
	.type	__key.53152, %object
	.size	__key.53152, 0
__key.53152:
	.type	__key.53208, %object
	.size	__key.53208, 0
__key.53208:
	.type	prev_len.47332, %object
	.size	prev_len.47332, 4
prev_len.47332:
	.space	4
	.type	n_ports, %object
	.size	n_ports, 4
n_ports:
	.space	4
	.type	gs_tty_driver, %object
	.size	gs_tty_driver, 4
gs_tty_driver:
	.space	4
	.type	ports, %object
	.size	ports, 224
ports:
	.space	224
	.type	write_error_after_csw_sent, %object
	.size	write_error_after_csw_sent, 4
write_error_after_csw_sent:
	.space	4
	.type	csw_hack_sent, %object
	.size	csw_hack_sent, 4
csw_hack_sent:
	.space	4
	.type	__key.44929, %object
	.size	__key.44929, 0
__key.44929:
	.type	__key.44930, %object
	.size	__key.44930, 0
__key.44930:
	.type	composite_gadget_bind, %object
	.size	composite_gadget_bind, 4
composite_gadget_bind:
	.space	4
	.type	idVendor, %object
	.size	idVendor, 2
idVendor:
	.space	2
	.type	idProduct, %object
	.size	idProduct, 2
idProduct:
	.space	2
	.type	bcdDevice, %object
	.size	bcdDevice, 2
bcdDevice:
	.space	2
	.space	2
	.type	iManufacturer, %object
	.size	iManufacturer, 4
iManufacturer:
	.space	4
	.type	composite_manufacturer, %object
	.size	composite_manufacturer, 50
composite_manufacturer:
	.space	50
	.space	2
	.type	iProduct, %object
	.size	iProduct, 4
iProduct:
	.space	4
	.type	iSerialNumber, %object
	.size	iSerialNumber, 4
iSerialNumber:
	.space	4
	.type	the_dev, %object
	.size	the_dev, 4
the_dev:
	.space	4
	.type	rndis_initialized, %object
	.size	rndis_initialized, 1
rndis_initialized:
	.space	1
	.space	3
	.type	rmnet_mux_smd_data_ch, %object
	.size	rmnet_mux_smd_data_ch, 4
rmnet_mux_smd_data_ch:
	.space	4
	.type	retry_cnt.38422, %object
	.size	retry_cnt.38422, 4
retry_cnt.38422:
	.space	4
	.type	__key.46328, %object
	.size	__key.46328, 0
__key.46328:
	.type	__key.8365, %object
	.size	__key.8365, 0
__key.8365:
	.type	__key.46337, %object
	.size	__key.46337, 0
__key.46337:
	.type	gps_initialized.61820, %object
	.size	gps_initialized.61820, 4
gps_initialized.61820:
	.space	4
	.type	__key.44892, %object
	.size	__key.44892, 0
__key.44892:
	.type	__key.44894, %object
	.size	__key.44894, 0
__key.44894:
	.type	__key.62935, %object
	.size	__key.62935, 0
__key.62935:
	.type	__key.62939, %object
	.size	__key.62939, 0
__key.62939:
	.type	unknown.46148, %object
	.size	unknown.46148, 16
unknown.46148:
	.space	16
	.type	bam_info, %object
	.size	bam_info, 16
bam_info:
	.space	16
	.type	__key.33037, %object
	.size	__key.33037, 0
__key.33037:
	.type	__key.33038, %object
	.size	__key.33038, 0
__key.33038:
	.type	__key.47577, %object
	.size	__key.47577, 0
__key.47577:
	.type	__key.47559, %object
	.size	__key.47559, 0
__key.47559:
	.type	__key.47560, %object
	.size	__key.47560, 0
__key.47560:
	.type	__key.48435, %object
	.size	__key.48435, 0
__key.48435:
	.type	__key.48731, %object
	.size	__key.48731, 0
__key.48731:
	.type	n_bam2bam_ports, %object
	.size	n_bam2bam_ports, 4
n_bam2bam_ports:
	.space	4
	.type	port_num.50795, %object
	.size	port_num.50795, 4
port_num.50795:
	.space	4
	.type	port_num.51317, %object
	.size	port_num.51317, 4
port_num.51317:
	.space	4
	.type	rmnet_initialized.61776, %object
	.size	rmnet_initialized.61776, 4
rmnet_initialized.61776:
	.space	4
	.type	ports.61777, %object
	.size	ports.61777, 4
ports.61777:
	.space	4
	.type	serial_initialized.62037, %object
	.size	serial_initialized.62037, 4
serial_initialized.62037:
	.space	4
	.type	ports.62038, %object
	.size	ports.62038, 4
ports.62038:
	.space	4
	.type	no_tty_ports, %object
	.size	no_tty_ports, 4
no_tty_ports:
	.space	4
	.type	no_sdio_ports, %object
	.size	no_sdio_ports, 4
no_sdio_ports:
	.space	4
	.type	no_smd_ports, %object
	.size	no_smd_ports, 4
no_smd_ports:
	.space	4
	.type	no_hsic_sports, %object
	.size	no_hsic_sports, 4
no_hsic_sports:
	.space	4
	.type	no_hsuart_sports, %object
	.size	no_hsuart_sports, 4
no_hsuart_sports:
	.space	4
	.type	nr_ports, %object
	.size	nr_ports, 4
nr_ports:
	.space	4
	.type	acm_initialized.61723, %object
	.size	acm_initialized.61723, 4
acm_initialized.61723:
	.space	4
	.type	ports.61724, %object
	.size	ports.61724, 4
ports.61724:
	.space	4
	.type	no_acm_tty_ports, %object
	.size	no_acm_tty_ports, 4
no_acm_tty_ports:
	.space	4
	.type	no_acm_sdio_ports, %object
	.size	no_acm_sdio_ports, 4
no_acm_sdio_ports:
	.space	4
	.type	no_acm_smd_ports, %object
	.size	no_acm_smd_ports, 4
no_acm_smd_ports:
	.space	4
	.type	nr_acm_ports, %object
	.size	nr_acm_ports, 4
nr_acm_ports:
	.space	4
	.type	qc_dev_addr, %object
	.size	qc_dev_addr, 4
qc_dev_addr:
	.space	4
	.type	qc_host_addr, %object
	.size	qc_host_addr, 4
qc_host_addr:
	.space	4
	.type	dev_addr, %object
	.size	dev_addr, 4
dev_addr:
	.space	4
	.type	host_addr, %object
	.size	host_addr, 4
host_addr:
	.space	4
	.type	audio_string_defs, %object
	.size	audio_string_defs, 8
audio_string_defs:
	.space	8
	.type	rmnet_mux_sdio_data_ch, %object
	.size	rmnet_mux_sdio_data_ch, 4
rmnet_mux_sdio_data_ch:
	.space	4
	.type	rmnet_mux_sdio_ctl_ch, %object
	.size	rmnet_mux_sdio_ctl_ch, 4
rmnet_mux_sdio_ctl_ch:
	.space	4
	.type	rmnet_sdio_data_ch, %object
	.size	rmnet_sdio_data_ch, 4
rmnet_sdio_data_ch:
	.space	4
	.type	rmnet_sdio_ctl_ch, %object
	.size	rmnet_sdio_ctl_ch, 4
rmnet_sdio_ctl_ch:
	.space	4
	.section	.devinit.rodata,"a"
	.align	2
	.type	android_id_table, %object
	.size	android_id_table, 48
android_id_table:
	.ascii	"android_usb\000"
	.space	8
	.space	4
	.ascii	"android_usb_hsic\000"
	.space	3
	.space	4
	.section	.exitcall.exit,"aw"
	.align	2
	.type	__exitcall_cleanup, %object
	.size	__exitcall_cleanup, 4
__exitcall_cleanup:
	.word	cleanup
	.type	__exitcall_gether_exit, %object
	.size	__exitcall_gether_exit, 4
__exitcall_gether_exit:
	.word	gether_exit
	.type	__exitcall_ghsuart_data_exit, %object
	.size	__exitcall_ghsuart_data_exit, 4
__exitcall_ghsuart_data_exit:
	.word	ghsuart_data_exit
	.type	__exitcall_ghsuart_ctrl_exit, %object
	.size	__exitcall_ghsuart_ctrl_exit, 4
__exitcall_ghsuart_ctrl_exit:
	.word	ghsuart_ctrl_exit
	.type	__exitcall_ghsic_data_exit, %object
	.size	__exitcall_ghsic_data_exit, 4
__exitcall_ghsic_data_exit:
	.word	ghsic_data_exit
	.type	__exitcall_gctrl_exit, %object
	.size	__exitcall_gctrl_exit, 4
__exitcall_gctrl_exit:
	.word	gctrl_exit
	.type	__exitcall_gqti_ctrl_cleanup, %object
	.size	__exitcall_gqti_ctrl_cleanup, 4
__exitcall_gqti_ctrl_cleanup:
	.word	gqti_ctrl_cleanup
	.type	__exitcall_gsmd_ctrl_exit, %object
	.size	__exitcall_gsmd_ctrl_exit, 4
__exitcall_gsmd_ctrl_exit:
	.word	gsmd_ctrl_exit
	.section	.initcall6.init,"aw"
	.align	2
	.type	__initcall_init6, %object
	.size	__initcall_init6, 4
__initcall_init6:
	.word	init
	.type	__initcall_gether_init6, %object
	.size	__initcall_gether_init6, 4
__initcall_gether_init6:
	.word	gether_init
	.type	__initcall_ghsuart_data_init6, %object
	.size	__initcall_ghsuart_data_init6, 4
__initcall_ghsuart_data_init6:
	.word	ghsuart_data_init
	.type	__initcall_ghsuart_ctrl_init6, %object
	.size	__initcall_ghsuart_ctrl_init6, 4
__initcall_ghsuart_ctrl_init6:
	.word	ghsuart_ctrl_init
	.type	__initcall_ghsic_data_init6, %object
	.size	__initcall_ghsic_data_init6, 4
__initcall_ghsic_data_init6:
	.word	ghsic_data_init
	.type	__initcall_gctrl_init6, %object
	.size	__initcall_gctrl_init6, 4
__initcall_gctrl_init6:
	.word	gctrl_init
	.type	__initcall_gqti_ctrl_init6, %object
	.size	__initcall_gqti_ctrl_init6, 4
__initcall_gqti_ctrl_init6:
	.word	gqti_ctrl_init
	.type	__initcall_gsmd_ctrl_init6, %object
	.size	__initcall_gsmd_ctrl_init6, 4
__initcall_gsmd_ctrl_init6:
	.word	gsmd_ctrl_init
	.section	__modver,"a"
	.align	2
	.type	__modver_attr, %object
	.size	__modver_attr, 4
__modver_attr:
	.word	___modver_attr
	.section	__param,"a"
	.align	2
	.type	__param_audio_capture_buf_size, %object
	.size	__param_audio_capture_buf_size, 16
__param_audio_capture_buf_size:
	.word	__param_str_audio_capture_buf_size
	.word	param_ops_int
	.short	292
	.short	-1
	.word	audio_capture_buf_size
	.type	__param_req_capture_count, %object
	.size	__param_req_capture_count, 16
__param_req_capture_count:
	.word	__param_str_req_capture_count
	.word	param_ops_int
	.short	292
	.short	-1
	.word	req_capture_count
	.type	__param_req_capture_buf_size, %object
	.size	__param_req_capture_buf_size, 16
__param_req_capture_buf_size:
	.word	__param_str_req_capture_buf_size
	.word	param_ops_int
	.short	292
	.short	-1
	.word	req_capture_buf_size
	.type	__param_audio_playback_buf_size, %object
	.size	__param_audio_playback_buf_size, 16
__param_audio_playback_buf_size:
	.word	__param_str_audio_playback_buf_size
	.word	param_ops_int
	.short	292
	.short	-1
	.word	audio_playback_buf_size
	.type	__param_req_playback_count, %object
	.size	__param_req_playback_count, 16
__param_req_playback_count:
	.word	__param_str_req_playback_count
	.word	param_ops_int
	.short	292
	.short	-1
	.word	req_playback_count
	.type	__param_req_playback_buf_size, %object
	.size	__param_req_playback_buf_size, 16
__param_req_playback_buf_size:
	.word	__param_str_req_playback_buf_size
	.word	param_ops_int
	.short	292
	.short	-1
	.word	req_playback_buf_size
	.type	__param_fn_cntl, %object
	.size	__param_fn_cntl, 16
__param_fn_cntl:
	.word	__param_str_fn_cntl
	.word	param_ops_charp
	.short	292
	.short	-1
	.word	fn_cntl
	.type	__param_fn_cap, %object
	.size	__param_fn_cap, 16
__param_fn_cap:
	.word	__param_str_fn_cap
	.word	param_ops_charp
	.short	292
	.short	-1
	.word	fn_cap
	.type	__param_fn_play, %object
	.size	__param_fn_play, 16
__param_fn_play:
	.word	__param_str_fn_play
	.word	param_ops_charp
	.short	292
	.short	-1
	.word	fn_play
	.type	__param_qc_host_addr, %object
	.size	__param_qc_host_addr, 16
__param_qc_host_addr:
	.word	__param_str_qc_host_addr
	.word	param_ops_charp
	.short	292
	.short	-1
	.word	qc_host_addr
	.type	__param_qc_dev_addr, %object
	.size	__param_qc_dev_addr, 16
__param_qc_dev_addr:
	.word	__param_str_qc_dev_addr
	.word	param_ops_charp
	.short	292
	.short	-1
	.word	qc_dev_addr
	.type	__param_host_addr, %object
	.size	__param_host_addr, 16
__param_host_addr:
	.word	__param_str_host_addr
	.word	param_ops_charp
	.short	292
	.short	-1
	.word	host_addr
	.type	__param_dev_addr, %object
	.size	__param_dev_addr, 16
__param_dev_addr:
	.word	__param_str_dev_addr
	.word	param_ops_charp
	.short	292
	.short	-1
	.word	dev_addr
	.type	__param_qmult, %object
	.size	__param_qmult, 16
__param_qmult:
	.word	__param_str_qmult
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	qmult
	.type	__param_rndis_ul_max_xfer_size_rcvd, %object
	.size	__param_rndis_ul_max_xfer_size_rcvd, 16
__param_rndis_ul_max_xfer_size_rcvd:
	.word	__param_str_rndis_ul_max_xfer_size_rcvd
	.word	param_ops_int
	.short	292
	.short	-1
	.word	rndis_ul_max_xfer_size_rcvd
	.type	__param_rndis_ul_max_pkt_per_xfer_rcvd, %object
	.size	__param_rndis_ul_max_pkt_per_xfer_rcvd, 16
__param_rndis_ul_max_pkt_per_xfer_rcvd:
	.word	__param_str_rndis_ul_max_pkt_per_xfer_rcvd
	.word	param_ops_int
	.short	292
	.short	-1
	.word	rndis_ul_max_pkt_per_xfer_rcvd
	.type	__param_rndis_ul_max_pkt_per_xfer, %object
	.size	__param_rndis_ul_max_pkt_per_xfer, 16
__param_rndis_ul_max_pkt_per_xfer:
	.word	__param_str_rndis_ul_max_pkt_per_xfer
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	rndis_ul_max_pkt_per_xfer
	.type	__param_rndis_dl_max_pkt_per_xfer, %object
	.size	__param_rndis_dl_max_pkt_per_xfer, 16
__param_rndis_dl_max_pkt_per_xfer:
	.word	__param_str_rndis_dl_max_pkt_per_xfer
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	rndis_dl_max_pkt_per_xfer
	.type	__param_mtp_tx_reqs, %object
	.size	__param_mtp_tx_reqs, 16
__param_mtp_tx_reqs:
	.word	__param_str_mtp_tx_reqs
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	mtp_tx_reqs
	.type	__param_mtp_tx_req_len, %object
	.size	__param_mtp_tx_req_len, 16
__param_mtp_tx_req_len:
	.word	__param_str_mtp_tx_req_len
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	mtp_tx_req_len
	.type	__param_mtp_rx_req_len, %object
	.size	__param_mtp_rx_req_len, 16
__param_mtp_rx_req_len:
	.word	__param_str_mtp_rx_req_len
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	mtp_rx_req_len
	.type	__param_ghsuart_data_tx_intr_thld, %object
	.size	__param_ghsuart_data_tx_intr_thld, 16
__param_ghsuart_data_tx_intr_thld:
	.word	__param_str_ghsuart_data_tx_intr_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsuart_data_tx_intr_thld
	.type	__param_ghsuart_data_rx_req_size, %object
	.size	__param_ghsuart_data_rx_req_size, 16
__param_ghsuart_data_rx_req_size:
	.word	__param_str_ghsuart_data_rx_req_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsuart_data_rx_req_size
	.type	__param_ghsuart_data_serial_rx_q_size, %object
	.size	__param_ghsuart_data_serial_rx_q_size, 16
__param_ghsuart_data_serial_rx_q_size:
	.word	__param_str_ghsuart_data_serial_rx_q_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsuart_data_serial_rx_q_size
	.type	__param_ghsuart_data_serial_tx_q_size, %object
	.size	__param_ghsuart_data_serial_tx_q_size, 16
__param_ghsuart_data_serial_tx_q_size:
	.word	__param_str_ghsuart_data_serial_tx_q_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsuart_data_serial_tx_q_size
	.type	__param_ghsuart_data_rmnet_rx_q_size, %object
	.size	__param_ghsuart_data_rmnet_rx_q_size, 16
__param_ghsuart_data_rmnet_rx_q_size:
	.word	__param_str_ghsuart_data_rmnet_rx_q_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsuart_data_rmnet_rx_q_size
	.type	__param_ghsuart_data_rmnet_tx_q_size, %object
	.size	__param_ghsuart_data_rmnet_tx_q_size, 16
__param_ghsuart_data_rmnet_tx_q_size:
	.word	__param_str_ghsuart_data_rmnet_tx_q_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsuart_data_rmnet_tx_q_size
	.type	__param_ghsic_data_pend_limit_with_bridge, %object
	.size	__param_ghsic_data_pend_limit_with_bridge, 16
__param_ghsic_data_pend_limit_with_bridge:
	.word	__param_str_ghsic_data_pend_limit_with_bridge
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsic_data_pend_limit_with_bridge
	.type	__param_ghsic_data_fctrl_dis_thld, %object
	.size	__param_ghsic_data_fctrl_dis_thld, 16
__param_ghsic_data_fctrl_dis_thld:
	.word	__param_str_ghsic_data_fctrl_dis_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsic_data_fctrl_dis_thld
	.type	__param_ghsic_data_fctrl_en_thld, %object
	.size	__param_ghsic_data_fctrl_en_thld, 16
__param_ghsic_data_fctrl_en_thld:
	.word	__param_str_ghsic_data_fctrl_en_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsic_data_fctrl_en_thld
	.type	__param_ghsic_data_fctrl_support, %object
	.size	__param_ghsic_data_fctrl_support, 16
__param_ghsic_data_fctrl_support:
	.word	__param_str_ghsic_data_fctrl_support
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsic_data_fctrl_support
	.type	__param_ghsic_data_tx_intr_thld, %object
	.size	__param_ghsic_data_tx_intr_thld, 16
__param_ghsic_data_tx_intr_thld:
	.word	__param_str_ghsic_data_tx_intr_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsic_data_tx_intr_thld
	.type	__param_ghsic_data_rx_req_size, %object
	.size	__param_ghsic_data_rx_req_size, 16
__param_ghsic_data_rx_req_size:
	.word	__param_str_ghsic_data_rx_req_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsic_data_rx_req_size
	.type	__param_ghsic_data_serial_rx_q_size, %object
	.size	__param_ghsic_data_serial_rx_q_size, 16
__param_ghsic_data_serial_rx_q_size:
	.word	__param_str_ghsic_data_serial_rx_q_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsic_data_serial_rx_q_size
	.type	__param_ghsic_data_serial_tx_q_size, %object
	.size	__param_ghsic_data_serial_tx_q_size, 16
__param_ghsic_data_serial_tx_q_size:
	.word	__param_str_ghsic_data_serial_tx_q_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsic_data_serial_tx_q_size
	.type	__param_ghsic_data_rmnet_rx_q_size, %object
	.size	__param_ghsic_data_rmnet_rx_q_size, 16
__param_ghsic_data_rmnet_rx_q_size:
	.word	__param_str_ghsic_data_rmnet_rx_q_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsic_data_rmnet_rx_q_size
	.type	__param_ghsic_data_rmnet_tx_q_size, %object
	.size	__param_ghsic_data_rmnet_tx_q_size, 16
__param_ghsic_data_rmnet_tx_q_size:
	.word	__param_str_ghsic_data_rmnet_tx_q_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsic_data_rmnet_tx_q_size
	.type	__param_dl_intr_threshold, %object
	.size	__param_dl_intr_threshold, 16
__param_dl_intr_threshold:
	.word	__param_str_dl_intr_threshold
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	dl_intr_threshold
	.type	__param_bam_mux_rx_req_size, %object
	.size	__param_bam_mux_rx_req_size, 16
__param_bam_mux_rx_req_size:
	.word	__param_str_bam_mux_rx_req_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	bam_mux_rx_req_size
	.type	__param_bam_mux_rx_q_size, %object
	.size	__param_bam_mux_rx_q_size, 16
__param_bam_mux_rx_q_size:
	.word	__param_str_bam_mux_rx_q_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	bam_mux_rx_q_size
	.type	__param_bam_mux_tx_q_size, %object
	.size	__param_bam_mux_tx_q_size, 16
__param_bam_mux_tx_q_size:
	.word	__param_str_bam_mux_tx_q_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	bam_mux_tx_q_size
	.type	__param_bam_mux_rx_fctrl_dis_thld, %object
	.size	__param_bam_mux_rx_fctrl_dis_thld, 16
__param_bam_mux_rx_fctrl_dis_thld:
	.word	__param_str_bam_mux_rx_fctrl_dis_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	bam_mux_rx_fctrl_dis_thld
	.type	__param_bam_mux_rx_fctrl_support, %object
	.size	__param_bam_mux_rx_fctrl_support, 16
__param_bam_mux_rx_fctrl_support:
	.word	__param_str_bam_mux_rx_fctrl_support
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	bam_mux_rx_fctrl_support
	.type	__param_bam_mux_rx_fctrl_en_thld, %object
	.size	__param_bam_mux_rx_fctrl_en_thld, 16
__param_bam_mux_rx_fctrl_en_thld:
	.word	__param_str_bam_mux_rx_fctrl_en_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	bam_mux_rx_fctrl_en_thld
	.type	__param_bam_mux_tx_pkt_drop_thld, %object
	.size	__param_bam_mux_tx_pkt_drop_thld, 16
__param_bam_mux_tx_pkt_drop_thld:
	.word	__param_str_bam_mux_tx_pkt_drop_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	bam_mux_tx_pkt_drop_thld
	.type	__param_bam_pending_limit, %object
	.size	__param_bam_pending_limit, 16
__param_bam_pending_limit:
	.word	__param_str_bam_pending_limit
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	bam_pending_limit
	.type	__param_mux_sdio_rx_fctrl_dis_thld, %object
	.size	__param_mux_sdio_rx_fctrl_dis_thld, 16
__param_mux_sdio_rx_fctrl_dis_thld:
	.word	__param_str_mux_sdio_rx_fctrl_dis_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	mux_sdio_rx_fctrl_dis_thld
	.type	__param_mux_sdio_rx_fctrl_en_thld, %object
	.size	__param_mux_sdio_rx_fctrl_en_thld, 16
__param_mux_sdio_rx_fctrl_en_thld:
	.word	__param_str_mux_sdio_rx_fctrl_en_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	mux_sdio_rx_fctrl_en_thld
	.type	__param_mux_sdio_tx_pkt_drop_thld, %object
	.size	__param_mux_sdio_tx_pkt_drop_thld, 16
__param_mux_sdio_tx_pkt_drop_thld:
	.word	__param_str_mux_sdio_tx_pkt_drop_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	mux_sdio_tx_pkt_drop_thld
	.type	__param_rmnet_mux_smd_data_ch, %object
	.size	__param_rmnet_mux_smd_data_ch, 16
__param_rmnet_mux_smd_data_ch:
	.word	__param_str_rmnet_mux_smd_data_ch
	.word	param_ops_charp
	.short	292
	.short	-1
	.word	rmnet_mux_smd_data_ch
	.type	__param_rmnet_mux_sdio_data_ch, %object
	.size	__param_rmnet_mux_sdio_data_ch, 16
__param_rmnet_mux_sdio_data_ch:
	.word	__param_str_rmnet_mux_sdio_data_ch
	.word	param_ops_uint
	.short	292
	.short	-1
	.word	rmnet_mux_sdio_data_ch
	.type	__param_rmnet_mux_sdio_ctl_ch, %object
	.size	__param_rmnet_mux_sdio_ctl_ch, 16
__param_rmnet_mux_sdio_ctl_ch:
	.word	__param_str_rmnet_mux_sdio_ctl_ch
	.word	param_ops_uint
	.short	292
	.short	-1
	.word	rmnet_mux_sdio_ctl_ch
	.type	__param_sdio_rx_fctrl_dis_thld, %object
	.size	__param_sdio_rx_fctrl_dis_thld, 16
__param_sdio_rx_fctrl_dis_thld:
	.word	__param_str_sdio_rx_fctrl_dis_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	sdio_rx_fctrl_dis_thld
	.type	__param_sdio_rx_fctrl_en_thld, %object
	.size	__param_sdio_rx_fctrl_en_thld, 16
__param_sdio_rx_fctrl_en_thld:
	.word	__param_str_sdio_rx_fctrl_en_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	sdio_rx_fctrl_en_thld
	.type	__param_sdio_tx_pkt_drop_thld, %object
	.size	__param_sdio_tx_pkt_drop_thld, 16
__param_sdio_tx_pkt_drop_thld:
	.word	__param_str_sdio_tx_pkt_drop_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	sdio_tx_pkt_drop_thld
	.type	__param_rmnet_sdio_data_ch, %object
	.size	__param_rmnet_sdio_data_ch, 16
__param_rmnet_sdio_data_ch:
	.word	__param_str_rmnet_sdio_data_ch
	.word	param_ops_uint
	.short	292
	.short	-1
	.word	rmnet_sdio_data_ch
	.type	__param_rmnet_sdio_ctl_ch, %object
	.size	__param_rmnet_sdio_ctl_ch, 16
__param_rmnet_sdio_ctl_ch:
	.word	__param_str_rmnet_sdio_ctl_ch
	.word	param_ops_uint
	.short	292
	.short	-1
	.word	rmnet_sdio_ctl_ch
	.type	__param_rmnet_data_ch, %object
	.size	__param_rmnet_data_ch, 16
__param_rmnet_data_ch:
	.word	__param_str_rmnet_data_ch
	.word	param_ops_charp
	.short	292
	.short	-1
	.word	rmnet_data_ch
	.type	__param_rmnet_ctl_ch, %object
	.size	__param_rmnet_ctl_ch, 16
__param_rmnet_ctl_ch:
	.word	__param_str_rmnet_ctl_ch
	.word	param_ops_charp
	.short	292
	.short	-1
	.word	rmnet_ctl_ch
	.type	__param_iSerialNumber, %object
	.size	__param_iSerialNumber, 16
__param_iSerialNumber:
	.word	__param_str_iSerialNumber
	.word	param_ops_charp
	.short	0
	.short	-1
	.word	iSerialNumber
	.type	__param_iProduct, %object
	.size	__param_iProduct, 16
__param_iProduct:
	.word	__param_str_iProduct
	.word	param_ops_charp
	.short	0
	.short	-1
	.word	iProduct
	.type	__param_iManufacturer, %object
	.size	__param_iManufacturer, 16
__param_iManufacturer:
	.word	__param_str_iManufacturer
	.word	param_ops_charp
	.short	0
	.short	-1
	.word	iManufacturer
	.type	__param_bcdDevice, %object
	.size	__param_bcdDevice, 16
__param_bcdDevice:
	.word	__param_str_bcdDevice
	.word	param_ops_ushort
	.short	0
	.short	-1
	.word	bcdDevice
	.type	__param_idProduct, %object
	.size	__param_idProduct, 16
__param_idProduct:
	.word	__param_str_idProduct
	.word	param_ops_ushort
	.short	0
	.short	-1
	.word	idProduct
	.type	__param_idVendor, %object
	.size	__param_idVendor, 16
__param_idVendor:
	.word	__param_str_idVendor
	.word	param_ops_ushort
	.short	0
	.short	-1
	.word	idVendor
	.ident	"GCC: (GNU Toolchain for the A-profile Architecture 9.2-2019.12 (arm-9.10)) 9.2.1 20191025"
	.section	.note.GNU-stack,"",%progbits
